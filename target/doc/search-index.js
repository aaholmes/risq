var searchIndex = JSON.parse('{\
"alga":{"doc":"Traits for algebra.","t":[0,0,8,8,8,8,8,8,8,8,8,16,8,8,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,3,8,8,8,8,8,3,8,8,8,8,8,8,8,8,8,8,16,8,16,8,8,8,8,10,11,10,10,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,10,10,11,11,10,11,11,11,11,11,11,11,11,10,11,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,11,11,11,10,10,11,11,10,11,11,10,11,11,10,11,10,11,11,11,11,11,10,10,10,11,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,10,11,11,11,10,10,10,11,10,11,10,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,10,11,11,11,11,10,10,11,11,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,10,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,10,11,8,8,16,16,16,8,8,16,16,8,8,8,8,8,8,8,16,8,8,8,16,16,8,16,16,8,16,8,8,8,8,8,16,16,16,16,8,11,11,10,11,11,10,10,11,11,10,10,10,10,11,11,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,10,10,11,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,10,10,10,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,10,11,11,10,10,11,11,11,11,10,10,10,11,11,11,11,10,11,11,10,11,11,10,10,10],"n":["general","linear","AbstractField","AbstractGroup","AbstractGroupAbelian","AbstractLoop","AbstractMagma","AbstractModule","AbstractMonoid","AbstractQuasigroup","AbstractRing","AbstractRing","AbstractRingCommutative","AbstractSemigroup","Additive","AdditiveGroup","AdditiveGroupAbelian","AdditiveLoop","AdditiveMagma","AdditiveMonoid","AdditiveQuasigroup","AdditiveSemigroup","ClosedAdd","ClosedDiv","ClosedMul","ClosedNeg","ClosedSub","ComplexField","Field","Id","Identity","JoinSemilattice","Lattice","MeetSemilattice","Module","Multiplicative","MultiplicativeGroup","MultiplicativeGroupAbelian","MultiplicativeLoop","MultiplicativeMagma","MultiplicativeMonoid","MultiplicativeQuasigroup","MultiplicativeSemigroup","Operator","Real","RealField","RealField","Ring","Ring","RingCommutative","SubsetOf","SupersetOf","TwoSidedInverse","abs","abs_diff_eq","acos","acosh","add","add_assign","append_rotation","append_scaling","append_translation","argument","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cbrt","ceil","clone","clone","clone","clone_into","clone_into","clone_into","conjugate","cos","cosc","cosc","cosh","coshc","coshc","decompose","default_epsilon","default_max_relative","default_max_ulps","div","div_assign","e","eq","exp","exp2","exp_m1","floor","fmt","fmt","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","from","from","from","from_real","from_subset","from_superset","from_superset","from_superset_unchecked","from_superset_unchecked","from_vector","hypot","id","id","identity","identity","imaginary","into","into","into","inverse_transform_point","inverse_transform_vector","is_finite","is_in_subset","is_in_subset","is_in_subset","is_sign_negative","is_sign_positive","is_zero","join","join","ln","ln_10","ln_1p","ln_2","log","log10","log10_e","log2","log2_e","max","meet","meet","meet_join","meet_join","min","modulus","modulus_squared","mul","mul_add","mul_assign","multiply_by","new","norm1","one","op","op","operate","operate","operator_token","operator_token","operator_token","partial_clamp","partial_clamp","partial_cmp","partial_max","partial_max","partial_min","partial_min","partial_sort2","partial_sort2","pi","powc","powf","powf","powi","prepend_rotation","prepend_scaling","prepend_translation","prop_inv_is_latin_square","prop_inv_is_latin_square","prop_inv_is_latin_square_approx","prop_inv_is_latin_square_approx","prop_is_associative","prop_is_associative","prop_is_associative_approx","prop_is_associative_approx","prop_is_commutative","prop_is_commutative","prop_is_commutative_approx","prop_is_commutative_approx","prop_mul_and_add_are_distributive","prop_mul_and_add_are_distributive","prop_mul_and_add_are_distributive_approx","prop_mul_and_add_are_distributive_approx","prop_mul_is_commutative","prop_mul_is_commutative","prop_mul_is_commutative_approx","prop_mul_is_commutative_approx","prop_operating_identity_element_is_noop","prop_operating_identity_element_is_noop","prop_operating_identity_element_is_noop_approx","prop_operating_identity_element_is_noop_approx","real","recip","relative_eq","rotation","rotation_between","round","scale","scaled_rotation_between","scaling","signum","signum","sin","sin_cos","sinc","sinc","sinh","sinh_cosh","sinh_cosh","sinhc","sinhc","sqrt","tan","tanh","to_exp","to_exp","to_owned","to_owned","to_owned","to_polar","to_polar","to_string","to_subset","to_subset","to_subset_unchecked","to_superset","to_superset","to_vector","transform_point","transform_vector","translation","trunc","try_from","try_from","try_from","try_into","try_into","try_into","try_sqrt","two_pi","two_sided_inverse","two_sided_inverse","two_sided_inverse_mut","two_sided_inverse_mut","two_sided_inverse_mut","type_id","type_id","type_id","ulps_eq","unscale","zero","AffineSpace","AffineTransformation","Column","ComplexField","Coordinates","DirectIsometry","EuclideanSpace","Field","Field","FiniteDimInnerSpace","FiniteDimVectorSpace","InnerSpace","InversibleSquareMatrix","Isometry","Matrix","MatrixMut","NonUniformScaling","NormedSpace","OrthogonalTransformation","ProjectiveTransformation","RealField","RealField","Rotation","Rotation","Row","Scaling","Scaling","Similarity","SquareMatrix","SquareMatrixMut","Transformation","Translation","Translation","Translation","Transpose","Vector","VectorSpace","angle","angle","append_rotation","append_rotation_wrt_point","append_rotation_wrt_point","append_scaling","append_translation","canonical_basis","canonical_basis","canonical_basis_element","column","component_unchecked","component_unchecked_mut","coordinates","coordinates","decompose","determinant","diagonal","dimension","dimension","dimension","distance","distance","distance_squared","distance_squared","dot","from_coordinates","from_coordinates","from_diagonal","from_real","from_real","from_vector","get","get","get_unchecked","inner_product","inverse_rotate_point","inverse_rotate_point","inverse_rotate_vector","inverse_rotate_vector","inverse_scale_point","inverse_scale_point","inverse_scale_vector","inverse_scale_vector","inverse_transform_point","inverse_transform_vector","inverse_translate_point","inverse_translate_point","ncolumns","norm","norm_squared","normalize","normalize_mut","nrows","origin","orthonormal_subspace_basis","orthonormalize","powf","powf","powf","powf","powf","prepend_rotation","prepend_scaling","prepend_translation","rotate_point","rotate_point","rotate_vector","rotate_vector","rotation","rotation_between","row","scale_between","scale_between","scale_by","scale_by","scale_point","scale_point","scale_vector","scale_vector","scaled_rotation_between","scaling","set","set","set_column","set_column","set_column_mut","set_diagonal","set_diagonal","set_diagonal_mut","set_row","set_row","set_row_mut","set_unchecked","subtract","subtract","to_real","to_real","to_vector","transform_point","transform_vector","translate_by","translate_by","translate_point","translate_point","translation","translation_between","translation_between","transpose","transpose_mut","transpose_mut","try_inverse","try_normalize","try_normalize_mut"],"q":["alga","","alga::generalalga::linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Fundamental algebraic structures.","Traits dedicated to linear algebra.","A field is a commutative ring, and an Abelian group under …","A group is a loop and a monoid  at the same time.","An Abelian group is a <strong>commutative</strong> group.","A loop is a quasigroup with an unique <strong>identity element</strong>, e.","A magma is an algebraic structure which consists of a set …","A module combines two sets: one with an Abelian group …","A monoid is a semigroup equipped with an identity …","A quasigroup is a magma which that has the <strong>divisibility …","A <strong>ring</strong> is the combination of an Abelian group and a …","The underlying scalar field.","A ring with a commutative multiplication.","A semigroup is a quasigroup that is <strong>associative</strong>.","The addition operator, commonly symbolized by <code>+</code>.","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Trait alias for <code>Add</code> and <code>AddAssign</code> with result of …","[Alias] Trait alias for <code>Div</code> and <code>DivAssign</code> with result of …","[Alias] Trait alias for <code>Mul</code> and <code>MulAssign</code> with result of …","[Alias] Trait alias for <code>Neg</code> with result of type <code>Self</code>.","[Alias] Trait alias for <code>Sub</code> and <code>SubAssign</code> with result of …","Trait shared by all complex fields and its subfields …","[Alias] Algebraic structure specialized for one kind of …","The universal identity element wrt. a given operator, …","A type that is equipped with identity.","A set where every two elements have a supremum (i.e. …","Partially orderable sets where every two elements have a …","A set where every two elements have an infimum (i.e. …","A module which overloads the <code>*</code> and <code>+</code> operators.","The multiplication operator, commonly symbolized by <code>×</code>.","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","[Alias] Algebraic structure specialized for one kind of …","Trait implemented by types representing abstract …","The field of reals. This has been renamed to <code>RealField</code>.","Trait shared by all reals.","Type of the coefficients of a complex number.","[Alias] Algebraic structure specialized for one kind of …","The underlying scalar field.","[Alias] Algebraic structure specialized for one kind of …","Nested sets and conversions between them (using an …","Nested sets and conversions between them. Useful to work …","Trait used to define the two_sided_inverse element …","The absolute value of this complex number: …","","","","","","","","","The argument of this complex number.","","","","","","","","","","","","","","","","","","","","","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","The inclusion map: converts <code>self</code> to the equivalent …","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_superset</code> but without any …","","","Computes (self.conjugate() * self + other.conjugate() * …","Specific identity.","Specific identity.","The identity element.","","The imaginary part of this complex number.","","","","","","","Checks if <code>element</code> is actually part of the subset <code>Self</code> …","Checks if <code>self</code> is actually part of its subset <code>T</code> (and can …","","","","","Returns the join (aka. supremum) of two values.","","","","","","","","","","","","Returns the meet (aka. infimum) of two values.","","Returns the infimum and the supremum simultaneously.","Returns the infimum and the supremum simultaneously.","","The modulus of this complex number.","The squared modulus of this complex number.","","","","Multiplies an element of the ring with an element of the …","Creates a new identity element.","The sum of the absolute value of this complex number’s …","","Performs specific operation.","Performs specific operation.","Performs an operation.","","Returns the structure that identifies the operator.","","","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","","Return the maximum of <code>self</code> and <code>other</code> if they are …","Return the maximum of <code>self</code> and <code>other</code> if they are …","Return the minimum of <code>self</code> and <code>other</code> if they are …","Return the minimum of <code>self</code> and <code>other</code> if they are …","Sorts two values in increasing order using a partial …","Sorts two values in increasing order using a partial …","","","","","","","","","Returns <code>true</code> if latin squareness holds for the given …","Returns <code>true</code> if latin squareness holds for the given …","Returns <code>true</code> if latin squareness holds for the given …","Returns <code>true</code> if latin squareness holds for the given …","Returns <code>true</code> if associativity holds for the given …","Returns <code>true</code> if associativity holds for the given …","Returns <code>true</code> if associativity holds for the given …","Returns <code>true</code> if associativity holds for the given …","Returns <code>true</code> if the operator is commutative for the given …","Returns <code>true</code> if the operator is commutative for the given …","Returns <code>true</code> if the operator is commutative for the given …","Returns <code>true</code> if the operator is commutative for the given …","Returns <code>true</code> if the multiplication and addition operators …","Returns <code>true</code> if the multiplication and addition operators …","Returns <code>true</code> if the multiplication and addition operators …","Returns <code>true</code> if the multiplication and addition operators …","Returns <code>true</code> if the multiplication operator is …","Returns <code>true</code> if the multiplication operator is …","Returns <code>true</code> if the multiplication operator is …","Returns <code>true</code> if the multiplication operator is …","Checks whether operating with the identity element is a …","Checks whether operating with the identity element is a …","Checks whether operating with the identity element is a …","Checks whether operating with the identity element is a …","The real part of this complex number.","","","","","","Multiplies this complex number by <code>factor</code>.","","","The exponential part of this complex number: …","The exponential part of this complex number: …","","","Cardinal sine","Cardinal sine","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","","","","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_subset</code> but without any …","The inclusion map: converts <code>self</code> to the equivalent …","","","","","","","","","","","","","","","Returns the two_sided_inverse of <code>self</code>, relative to the …","","In-place inversion of <code>self</code>, relative to the operator <code>O</code>.","In-place inversion of <code>self</code>, relative to the operator <code>O</code>.","","","","","","Divides this complex number by <code>factor</code>.","","A set points associated with a vector space and a …","The group of affine transformations. They are …","The type of columns of this matrix.","The field of this space must be this complex number.","The underlying finite vector space.","Subgroups of the orientation-preserving isometry group …","The finite-dimensional affine space based on the field of …","The underlying field.","The underlying scalar field.","A finite-dimensional vector space equipped with an inner …","A finite-dimensional vector space.","A vector space equipped with an inner product.","The group of inversible matrix. Commonly known as the …","Subgroups of the isometry group <code>E(n)</code>, i.e., rotations, …","The space of all matrices.","The space of all matrices that are stable under …","Type of the non-uniform scaling to be applied.","A normed vector space.","Subgroups of the n-dimensional rotations and scaling <code>O(n)</code>.","The most general form of invertible transformations on an …","The result of the norm (not necessarily the same same as …","The underlying reals.","Subgroups of the n-dimensional rotation group <code>SO(n)</code>.","Type of the first rotation to be applied.","The type of rows of this matrix.","Subgroups of the (signed) uniform scaling group.","The type of the pure (uniform) scaling part of this …","Subgroups of the similarity group <code>S(n)</code>, i.e., rotations, …","The monoid of all square matrices, including …","The monoid of all mutable square matrices that are stable …","A general transformation acting on an euclidean space. It …","Subgroups of the n-dimensional translation group <code>T(n)</code>.","The type of the pure translation part of this affine …","The associated vector space.","The type of the transposed matrix.","The type of rows, column, and diagonal of this matrix.","A vector space has a module structure over a field …","Measures the angle between two vectors.","Measures the angle between two vectors.","Appends a rotation to this similarity.","Appends to this similarity a rotation centered at the …","Appends to this similarity a rotation centered at the …","Appends a scaling factor to this similarity.","Appends a translation to this similarity.","Applies the given closule to each element of this vector …","Applies the given closule to each element of this vector …","The i-the canonical basis element.","The i-th column of this matrix.","Same as <code>&self[i]</code> but without bound-checking.","Same as <code>&mut self[i]</code> but without bound-checking.","The coordinates of this point, i.e., the translation from …","The coordinates of this point, i.e., the translation from …","Decomposes this affine transformation into a rotation …","The determinant of this matrix.","The diagonal of this matrix.","The vector space dimension.","The number of rows or column of this matrix.","The number of rows or column of this matrix.","The distance between two points.","The distance between two points.","The distance between two points.","The distance between two points.","The dot product between two vectors.","Builds a point from its coordinates relative to the …","Builds a point from its coordinates relative to the …","Constructs a new diagonal matrix.","Attempts to convert a real to an element of this scaling …","Attempts to convert a real to an element of this scaling …","Attempts to convert a vector to this translation. Returns …","Gets the component at row <code>i</code> and column <code>j</code> of this matrix.","Gets the component at row <code>i</code> and column <code>j</code> of this matrix.","Gets the component at row <code>i</code> and column <code>j</code> of this matrix …","Computes the inner product of <code>self</code> with <code>other</code>.","Applies this transformation inverse’s pure rotational …","Applies this transformation inverse’s pure rotational …","Applies this transformation inverse’s pure rotational …","Applies this transformation inverse’s pure rotational …","Applies this transformation inverse’s pure scaling part …","Applies this transformation inverse’s pure scaling part …","Applies this transformation inverse’s pure scaling part …","Applies this transformation inverse’s pure scaling part …","Applies this group’s two_sided_inverse action on a …","Applies this group’s two_sided_inverse action on a …","Applies this transformation inverse’s pure …","Applies this transformation inverse’s pure …","The number of columns of this matrix.","The norm of this vector.","The squared norm of this vector.","Returns a normalized version of this vector.","Normalizes this vector in-place and returns its norm.","The number of rows of this matrix.","The preferred origin of this euclidean space.","Applies the given closure to each element of the …","Orthonormalizes the given family of vectors. The largest …","Raises this rotation to a power. If this is a simple …","Raises the scaling to a power. The result must be …","Raises the scaling to a power. The result must be …","Raises the translation to a power. The result must be …","Raises the translation to a power. The result must be …","Prepends a rotation to this similarity.","Prepends a scaling factor to this similarity.","Prepends a translation to this similarity.","Applies this transformation’s pure rotational part to a …","Applies this transformation’s pure rotational part to a …","Applies this transformation’s pure rotational part to a …","Applies this transformation’s pure rotational part to a …","The pure rotational component of this similarity …","Computes a simple rotation that makes the angle between <code>a</code> …","The i-th row of this matrix.","The scaling required to make <code>a</code> have the same norm as <code>b</code>, …","The scaling required to make <code>a</code> have the same norm as <code>b</code>, …","Multiplies the distance of this point to <code>Self::origin()</code> …","Multiplies the distance of this point to <code>Self::origin()</code> …","Applies this transformation’s pure scaling part to a …","Applies this transformation’s pure scaling part to a …","Applies this transformation’s pure scaling part to a …","Applies this transformation’s pure scaling part to a …","Computes the rotation between <code>a</code> and <code>b</code> and raises it to …","The pure scaling component of this similarity …","Sets the component at row <code>i</code> and column <code>j</code> of this matrix.","Sets the component at row <code>i</code> and column <code>j</code> of this matrix.","Sets the i-th col of this matrix.","Sets the i-th col of this matrix.","In-place sets the i-th col of this matrix.","Sets the matrix diagonal.","Sets the matrix diagonal.","In-place sets the matrix diagonal.","Sets the i-th row of this matrix.","Sets the i-th row of this matrix.","In-place sets the i-th row of this matrix.","Sets the component at row <code>i</code> and column <code>j</code> of this matrix …","Same as <code>*self - *other</code>. Returns the unique element <code>v</code> of …","Same as <code>*self - *other</code>. Returns the unique element <code>v</code> of …","Converts this scaling factor to a real. Same as …","Converts this scaling factor to a real. Same as …","Converts this translation to a vector.","Applies this group’s action on a point from the …","Applies this group’s action on a vector from the …","Same as <code>*self + *t</code>. Applies the additive group action of …","Same as <code>*self + *t</code>. Applies the additive group action of …","Applies this transformation’s pure translational part …","Applies this transformation’s pure translational part …","The pure translational component of this similarity …","The translation needed to make <code>a</code> coincide with <code>b</code>, i.e., …","The translation needed to make <code>a</code> coincide with <code>b</code>, i.e., …","Transposes this matrix.","In-place transposition.","In-place transposition.","Attempts to two_sided_inverse <code>self</code>.","Returns a normalized version of this vector unless its …","Normalizes this vector in-place or does nothing if its …"],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,0,0,0,2,4,2,2,4,4,4,4,4,2,2,2,2,5,2,4,6,7,4,6,7,2,2,4,6,7,4,6,7,2,2,2,2,2,2,2,4,4,4,4,4,4,5,4,2,2,2,2,4,4,5,5,5,5,5,5,5,5,2,4,6,7,2,8,9,9,9,4,4,2,10,10,10,4,2,4,6,7,4,4,2,9,8,4,5,5,4,11,4,2,5,2,5,2,2,5,2,5,5,12,4,13,13,5,2,2,4,2,4,1,4,2,4,14,14,14,4,15,6,7,13,13,4,13,13,13,13,13,13,5,2,2,4,2,4,4,4,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,2,2,4,4,4,2,2,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,6,7,2,2,4,8,8,8,9,4,4,4,4,4,2,4,6,7,4,6,7,2,5,22,4,22,22,4,4,6,7,4,2,4,0,0,23,24,25,0,0,23,26,0,0,0,0,0,0,0,27,0,0,0,24,25,0,27,23,0,28,0,0,0,0,0,27,29,23,30,0,31,31,27,27,27,27,27,32,32,32,23,32,32,25,25,27,30,30,32,30,30,25,25,25,25,32,25,25,33,34,34,35,23,23,23,31,28,28,28,28,28,28,28,28,36,36,28,28,23,24,24,24,24,23,25,37,37,38,34,34,35,35,27,27,27,28,28,28,28,28,38,23,34,34,25,25,28,28,28,28,38,28,39,39,39,39,39,33,33,33,39,39,39,39,29,29,34,34,35,40,40,29,29,28,28,28,35,35,23,30,30,30,24,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["bool",15]],[[]],[[]],[[["additive",3],["id",3]],[["additive",3],["id",3]]],[[["additive",3],["id",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["id",3]],[[],["additive",3]],[[],["multiplicative",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[["id",3]],["id",3]],[[["id",3]]],[[]],[[["id",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["id",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["id",3]],["id",3]],[[]],[[["id",3]]],[[]],[[],["id",3]],[[]],[[],["id",3]],[[]],[[]],[[]],[[],["id",3]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["id",3]],[["option",4],["ordering",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[["i32",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[]],[[],[["additive",3],["id",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["fnmut",8]]],[[["fnmut",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["fnmut",8]]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]]],"p":[[8,"AbstractModule"],[8,"ComplexField"],[8,"Module"],[3,"Id"],[8,"RealField"],[3,"Additive"],[3,"Multiplicative"],[8,"SupersetOf"],[8,"SubsetOf"],[8,"Identity"],[8,"JoinSemilattice"],[8,"MeetSemilattice"],[8,"Lattice"],[8,"AbstractMagma"],[8,"Operator"],[8,"AbstractQuasigroup"],[8,"AbstractSemigroup"],[8,"AbstractGroupAbelian"],[8,"AbstractRing"],[8,"AbstractRingCommutative"],[8,"AbstractMonoid"],[8,"TwoSidedInverse"],[8,"Matrix"],[8,"NormedSpace"],[8,"EuclideanSpace"],[8,"VectorSpace"],[8,"AffineTransformation"],[8,"Similarity"],[8,"AffineSpace"],[8,"SquareMatrix"],[8,"InnerSpace"],[8,"FiniteDimVectorSpace"],[8,"SquareMatrixMut"],[8,"Scaling"],[8,"Translation"],[8,"ProjectiveTransformation"],[8,"FiniteDimInnerSpace"],[8,"Rotation"],[8,"MatrixMut"],[8,"Transformation"]]},\
"approx":{"doc":"A crate that provides facilities for testing the …","t":[3,8,16,3,8,3,8,10,14,11,11,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,10,14,11,11,14,11,11,11,11,11,11,11,11,11,10,14,11,11,14],"n":["AbsDiff","AbsDiffEq","Epsilon","Relative","RelativeEq","Ulps","UlpsEq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","assert_abs_diff_eq","assert_abs_diff_ne","assert_relative_eq","assert_relative_ne","assert_ulps_eq","assert_ulps_ne","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","default_epsilon","default_max_relative","default_max_ulps","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","from","from","from","into","into","into","max_relative","max_relative","max_ulps","max_ulps","ne","ne","ne","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne"],"q":["approx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The requisite parameters for testing for approximate …","Equality that is defined using the absolute difference of …","Used for specifying relative comparisons.","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","A test for equality that uses the absolute difference to …","Approximate equality of using the absolute difference.","The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].","The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].","Approximate inequality of using the absolute difference.","An assertion that delegates to [<code>abs_diff_eq!</code>], and panics …","An assertion that delegates to [<code>abs_diff_ne!</code>], and panics …","An assertion that delegates to [<code>relative_eq!</code>], and panics …","An assertion that delegates to [<code>relative_ne!</code>], and panics …","An assertion that delegates to [<code>ulps_eq!</code>], and panics …","An assertion that delegates to [<code>ulps_ne!</code>], and panics …","","","","","","","","","","The default tolerance to use when testing values that are …","The default relative tolerance for testing values that …","The default ULPs to tolerate when testing values that are …","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","Peform the equality comparison","Peform the equality comparison","Peform the equality comparison","","","","","","","Replace the maximum relative value with the one specified.","The relative tolerance for testing values that are …","Replace the max ulps value with the one specified.","The ULPs to tolerate when testing values that are …","Peform the inequality comparison","Peform the inequality comparison","Peform the inequality comparison","A test for equality that uses a relative comparison if …","Approximate equality using both the absolute difference …","The inverse of [<code>RelativeEq::relative_eq</code>].","The inverse of [<code>RelativeEq::relative_eq</code>].","Approximate inequality using both the absolute difference …","","","","","","","","","","A test for equality that uses units in the last place …","Approximate equality using both the absolute difference …","The inverse of [<code>UlpsEq::ulps_eq</code>].","The inverse of [<code>UlpsEq::ulps_eq</code>].","Approximate inequality using both the absolute difference …"],"i":[0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,2,3,4,2,3,4,2,3,4,1,5,6,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,3,3,4,4,2,3,4,5,0,5,5,0,2,3,4,2,3,4,2,3,4,6,0,6,6,0],"f":[null,null,null,null,null,null,null,[[],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["absdiff",3]],[[],["relative",3]],[[],["ulps",3]],[[]],[[]],[[],["u32",15]],[[],["absdiff",3]],[[],["relative",3]],[[],["ulps",3]],null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["relative",3]],null,[[["u32",15]],["ulps",3]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["bool",15]],null,[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null],"p":[[8,"AbsDiffEq"],[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"],[8,"RelativeEq"],[8,"UlpsEq"]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":[8,3,3,18,18,3,3,3,16,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array","ArrayString","ArrayVec","CAPACITY","CAPACITY","CapacityError","Drain","IntoIter","Item","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_slice","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","dispose","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","ne","new","new","new","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write","write_char","write_str"],"q":["arrayvecd":["Trait for fixed size arrays.","A string with a fixed capacity.","A vector with a fixed capacity.","The array’s element capacity","The array’s element capacity","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","The array’s element type","","Return a raw mutable pointer to the vector’s buffer.","","Return a mutable slice containing all elements of the …","Return a raw pointer to the vector’s buffer.","","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Dispose of <code>self</code> (same as drop)","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","","","","","","","","","","","","","","","Create a new <code>ArrayString</code> from a <code>str</code>.","","Create a new <code>ArrayString</code> from a byte string literal.","","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Return the inner fixed size array, if it is full to its …","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return if the <code>ArrayVec</code> is completely filled.","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking …","Returns the capacity left in the <code>ArrayVec</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element …","Remove the element at <code>index</code> and swap the last element …","","","","","","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy and appends all elements in a slice to the <code>ArrayVec</code>.","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","",""],"i":[0,0,0,1,1,0,0,0,1,2,2,1,2,2,2,3,1,2,3,2,2,4,5,3,3,6,2,2,4,5,3,6,2,3,2,3,2,4,3,6,2,3,2,4,3,6,2,3,6,2,3,2,3,2,3,2,2,2,4,5,6,2,2,3,3,6,2,2,2,4,3,3,6,6,2,2,2,4,5,3,3,6,3,2,3,2,3,3,2,3,3,2,3,2,2,4,5,3,6,2,2,4,5,2,3,2,3,2,3,3,2,3,2,3,3,6,2,3,6,4,5,4,5,2,3,3,6,2,3,2,2,3,3,2,2,2,3,2,2,3,6,4,5,2,2,2,4,3,6,3,6,2,3,2,2,2,4,5,3,6,2,2,4,5,3,6,2,3,3,2,4,5,3,6,2,3,3],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["intoiter",3]],[[],["arraystring",3]],[[],["capacityerror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arrayvec",3]],["ordering",4]],[[],["ordering",4]],[[["capacityerror",3]],["ordering",4]],[[],["arrayvec",3]],[[],["arraystring",3]],[[]],[[],["str",15]],[[]],[[],["str",15]],[[]],[[],["drain",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[["capacityerror",3]],["bool",15]],[[["intoiterator",8]]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["capacityerror",3]]],[[]],[[],[["result",4],["utf8error",3]]],[[["intoiterator",8]]],[[["str",15]],["result",4]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["intoiter",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["capacityerror",3]],["bool",15]],[[],["arrayvec",3]],[[],["arraystring",3]],[[],["capacityerror",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["arrayvec",3]],[["ordering",4],["option",4]]],[[["str",15]],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[["capacityerror",3]],[["option",4],["ordering",4]]],[[],["option",4]],[[],[["option",4],["char",15]]],[[["usize",15]],["option",4]],[[]],[[["char",15]]],[[["str",15]]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]],["char",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["capacityerror",3]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["usize",15]]],[[["usize",15]]],[[],[["capacityerror",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4],["capacityerror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["capacityerror",3]]],[[["char",15]],[["capacityerror",3],["result",4]]],[[["str",15]],[["capacityerror",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["usize",15],["result",6]]],[[["char",15]],["result",6]],[[["str",15]],["result",6]]],"p":[[8,"Array"],[3,"ArrayVec"],[3,"ArrayString"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]},\
"async_task":{"doc":"Task abstraction for building executors.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,5],"n":["JoinHandle","Task","borrow","borrow","borrow_mut","borrow_mut","cancel","cancel","drop","drop","fmt","fmt","from","from","from_raw","into","into","into_future","into_raw","poll","run","schedule","spawn","spawn_local","tag","tag","try_from","try_from","try_into","try_into","type_id","type_id","waker","waker","waker_fn"],"q":["async_task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A handle that awaits the result of a task.","A task reference that runs its future.","","","","","Cancels the task.","Cancels the task.","","","","","","","Converts a raw pointer to the tag into a task.","","","","Converts this task into a raw pointer to the tag.","","Runs the task.","Schedules the task.","Creates a new task.","Creates a new local task.","Returns a reference to the tag stored inside the task.","Returns a reference to the tag stored inside the task.","","","","","","","Returns a waker associated with the task.","Returns a waker associated with this task.","Creates a waker from a wake function."],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,2,0,0,1,2,1,2,1,2,1,2,1,2,0],"f":[null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["task",3]],[[]],[[]],[[]],[[]],[[["context",3],["pin",3]],["poll",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["waker",3]],[[],["waker",3]],[[["send",8],["sync",8],["fn",8]],["waker",3]]],"p":[[3,"JoinHandle"],[3,"Task"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structure."],"i":[0],"f":[null],"p":[]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4]],[["ordering",4],["option",4]]],[[["littleendian",4]],[["ordering",4],["option",4]]],[[],["f32",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["i128",15]],[[]],[[],["i16",15]],[[]],[[],["i32",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["i64",15]],[[]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[["i128",15]]],[[]],[[["i16",15]]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[["i64",15]]],[[["i64",15]]],[[]],[[]],[[["i64",15],["usize",15]]],[[["usize",15],["i128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message …","t":[12,13,13,13,13,13,13,3,3,3,3,3,4,3,3,3,3,4,3,13,13,3,3,4,3,4,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["0","Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","ne","ne","ne","never","new","next","next","next","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded"],"q":["crossbeam_channeld":["","The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the index of the selected operation.","","","","","","","","","","","","","","","","","","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","","","","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity."],"i":[1,2,3,4,5,4,2,0,0,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,0,0,0,0,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,0,6,7,6,7,11,1,2,3,13,4,5,14,15,16,17,6,7,11,1,2,3,13,4,5,14,15,16,17,11,6,7,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,1,2,2,3,3,13,13,4,4,5,5,14,14,15,15,16,17,6,7,8,9,10,11,12,1,2,2,3,3,13,4,4,5,5,14,15,16,17,12,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,1,2,3,7,8,9,10,2,3,4,5,6,7,4,6,7,2,3,5,7,6,7,1,2,3,0,11,8,9,10,11,11,11,7,11,12,7,7,11,6,7,11,0,11,11,6,11,12,6,6,0,6,7,11,1,2,3,13,4,5,14,15,16,17,1,2,3,13,4,5,14,15,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,7,11,7,11,6,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3]],[["receiver",3],["instant",3]]],[[["instant",3]],[["receiver",3],["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["select",3]],[[],["senderror",3]],[[],["trysenderror",4]],[[],["sendtimeouterror",4]],[[],["recverror",3]],[[],["tryrecverror",4]],[[],["recvtimeouterror",4]],[[],["tryselecterror",3]],[[],["selecttimeouterror",3]],[[],["tryreadyerror",3]],[[],["readytimeouterror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["select",3]],[[]],[[]],[[]],[[["senderror",3]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["sendtimeouterror",4]],["bool",15]],[[["recverror",3]],["bool",15]],[[["tryrecverror",4]],["bool",15]],[[["recvtimeouterror",4]],["bool",15]],[[["tryselecterror",3]],["bool",15]],[[["selecttimeouterror",3]],["bool",15]],[[["tryreadyerror",3]],["bool",15]],[[["readytimeouterror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]],["trysenderror",4]],[[]],[[["senderror",3]],["sendtimeouterror",4]],[[]],[[]],[[["recverror",3]],["tryrecverror",4]],[[]],[[]],[[["recverror",3]],["recvtimeouterror",4]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[["senderror",3]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["sendtimeouterror",4]],["bool",15]],[[],["receiver",3]],[[],["select",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["instant",3]],[["result",4],["usize",15],["readytimeouterror",3]]],[[["duration",3]],[["result",4],["usize",15],["readytimeouterror",3]]],[[],[["recverror",3],["result",4]]],[[["receiver",3]],["usize",15]],[[["receiver",3]],[["recverror",3],["result",4]]],[[["instant",3]],[["result",4],["recvtimeouterror",4]]],[[["duration",3]],[["result",4],["recvtimeouterror",4]]],[[["usize",15]]],[[["sender",3]],["bool",15]],[[["receiver",3]],["bool",15]],[[],["selectedoperation",3]],null,[[["instant",3]],[["selectedoperation",3],["selecttimeouterror",3],["result",4]]],[[["duration",3]],[["selectedoperation",3],["selecttimeouterror",3],["result",4]]],[[],[["result",4],["senderror",3]]],[[["sender",3]],["usize",15]],[[["sender",3]],[["result",4],["senderror",3]]],[[["instant",3]],[["sendtimeouterror",4],["result",4]]],[[["duration",3]],[["sendtimeouterror",4],["result",4]]],[[["duration",3]],[["receiver",3],["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tryiter",3]],[[],[["result",4],["usize",15],["tryreadyerror",3]]],[[],[["result",4],["tryrecverror",4]]],[[],[["selectedoperation",3],["result",4],["tryselecterror",3]]],[[],[["trysenderror",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"Sender"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"Select"],[3,"SelectedOperation"],[3,"RecvError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":[13,3,13,4,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","ne","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["crossbeam_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes items until a <code>Success</code> is found and returns it.","","","","","","","","","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","",""],"i":[1,0,1,0,0,1,0,2,3,4,1,2,3,4,1,3,1,3,1,4,2,3,4,1,2,3,4,1,2,3,4,4,1,1,2,3,4,1,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,4,1,4,2,2,1,2,2,4,3,4,3,4,3,4,2,1,3,1,2,3,4,1,2,3,4,1,2,3,4,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stealer",3]],[[],["steal",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["steal",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["steal",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["steal",4]],["bool",15]],[[],["injector",3]],[[],["worker",3]],[[],["worker",3]],[[],["steal",4]],[[],["option",4]],[[]],[[]],[[],["steal",4]],[[],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[],["stealer",3]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"Injector"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":[18,18,3,3,6,8,3,3,16,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11],"n":["ALIGN","ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":["crossbeam_epochd":["The alignment of pointer.","The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some …","Dereferences the given pointer.","","Dereferences the pointer.","Mutably dereferences the given pointer.","","Dereferences the pointer.","Drops the object pointed to by the given pointer.","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","","","","Returns a new atomic pointer pointing to <code>raw</code>.","Returns a new atomic pointer pointing to <code>owned</code>.","","","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new owned pointer pointing to <code>b</code>.","","","","","Returns a new pointer pointing to <code>raw</code>.","","","","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","","","","","","","","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a [<code>Shared</code>].","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,3,2,3,4,5,2,2,3,6,7,8,4,5,2,2,3,6,7,8,5,2,3,6,5,2,3,6,3,7,8,5,5,5,5,4,5,3,6,0,8,8,8,1,2,3,1,2,3,1,2,7,8,3,6,9,5,5,5,8,4,5,5,2,3,3,6,7,8,4,5,5,5,5,5,5,5,2,2,2,2,3,3,6,7,8,2,10,2,3,1,5,2,4,5,2,3,6,7,8,2,5,3,2,10,2,3,3,0,7,5,5,5,2,6,4,5,3,3,0,7,6,8,8,5,9,5,2,3,5,2,3,6,4,5,2,3,6,7,8,4,5,2,3,6,7,8,4,5,2,3,6,7,8,0,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["collector",3]],[[],[["option",4],["collector",3]]],[[["shared",3],["guard",3]],[["compareandseterror",6],["shared",3],["result",4]]],[[["shared",3],["guard",3]],[["compareandseterror",6],["shared",3],["result",4]]],[[["guard",3],["shared",3],["ordering",4]],[["result",4],["shared",3],["compareexchangeerror",3]]],[[["guard",3],["shared",3],["ordering",4]],[["result",4],["shared",3],["compareexchangeerror",3]]],null,[[]],[[]],[[]],[[],["collector",3]],[[]],[[["shared",3]]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["bool",15]],[[["collector",3]],["bool",15]],[[],["ordering",4]],[[["guard",3],["usize",15],["ordering",4]],["shared",3]],[[["guard",3],["usize",15],["ordering",4]],["shared",3]],[[["guard",3],["usize",15],["ordering",4]],["shared",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["owned",3]]],[[["box",3]]],[[]],[[["shared",3]]],[[["box",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["owned",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["atomic",3]],[[],["owned",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[],["owned",3]],[[],["owned",3]],[[["guard",3]],["shared",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["guard",3],["ordering",4]],["shared",3]],[[["guard",3]],["shared",3]],[[],["atomic",3]],[[],["owned",3]],[[]],null,[[],["atomic",3]],[[],["shared",3]],[[],[["ordering",4],["option",4]]],[[],["guard",3]],[[],["guard",3]],[[],["localhandle",3]],[[]],[[]],[[["pointer",8],["ordering",4]]],[[],["ordering",4]],[[["pointer",8],["guard",3],["ordering",4]],["shared",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["guard",3]],[[["usize",15]],["owned",3]],[[["usize",15]],["shared",3]]],"p":[[8,"Pointable"],[3,"Owned"],[3,"Shared"],[3,"CompareExchangeError"],[3,"Atomic"],[3,"Collector"],[3,"LocalHandle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":[3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,3,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","ne","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["crossbeam_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","","","","","","","","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies logical “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies logical “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","","","","","","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a […","A guard used to release the exclusive write access of a […","Unparks a thread parked by the associated [<code>Parker</code>].","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","","","","","","","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated [<code>Unparker</code>].","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","","","","","","","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,2,1,2,1,1,1,0,0,2,1,2,1,2,1,2,0,0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,0,0,0,0,0,0,5,6,7,8,9,10,5,6,7,8,9,10,6,10,6,10,5,7,10,8,9,9,9,10,5,6,7,8,8,9,9,10,5,6,7,7,7,8,9,10,5,6,7,5,6,7,8,9,10,7,5,6,7,5,7,10,5,5,5,7,6,10,8,9,5,6,7,8,9,10,5,6,7,8,9,10,7,7,5,6,7,8,9,10,6,5,10,7,0,0,0,11,12,11,13,12,11,13,12,12,11,13,12,11,13,12,11,13,11,11,13,0,12,13,13,11,12,11,13,12,11,13,12,11,13],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],["cachepadded",3]],[[]],[[],["backoff",3]],[[],["cachepadded",3]],[[]],[[]],[[["cachepadded",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["cachepadded",3]],["bool",15]],[[]],[[],["cachepadded",3]],[[]],[[]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["atomiccell",3]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["isize",15]],["isize",15]],[[["i64",15]],["i64",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["u16",15]],["u16",15]],[[["u64",15]],["u64",15]],[[["i16",15]],["i16",15]],[[["u32",15]],["u32",15]],[[["u64",15]],["u64",15]],[[["isize",15]],["isize",15]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["u32",15]],["u32",15]],[[["bool",15]],["bool",15]],[[["i64",15]],["i64",15]],[[["u16",15]],["u16",15]],[[["i16",15]],["i16",15]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["bool",15]],["bool",15]],[[["u16",15]],["u16",15]],[[["u8",15]],["u8",15]],[[["i64",15]],["i64",15]],[[["i16",15]],["i16",15]],[[["u64",15]],["u64",15]],[[["i8",15]],["i8",15]],[[["isize",15]],["isize",15]],[[["u32",15]],["u32",15]],[[["i16",15]],["i16",15]],[[["isize",15]],["isize",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["u64",15]],[[["u8",15]],["u8",15]],[[["usize",15]],["usize",15]],[[["i8",15]],["i8",15]],[[["u32",15]],["u32",15]],[[["i64",15]],["i64",15]],[[["u16",15]],["u16",15]],[[["i32",15]],["i32",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["u16",15]],["u16",15]],[[["isize",15]],["isize",15]],[[["i16",15]],["i16",15]],[[["u64",15]],["u64",15]],[[["bool",15]],["bool",15]],[[["i64",15]],["i64",15]],[[["usize",15]],["usize",15]],[[["u32",15]],["u32",15]],[[["formatter",3]],["result",6]],[[],["atomiccell",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["atomiccell",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unparker",3]],[[],["waitgroup",3]],[[]],[[]],[[]],[[],["shardedlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parker",3]],[[],["unparker",3]],[[],["lockresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lockresult",6]],[[["parker",3]]],[[["unparker",3]]],[[],["bool",15]],[[],["parker",3]],[[],["shardedlock",3]],[[]],[[]],[[["instant",3]]],[[["duration",3]]],[[],[["lockresult",6],["shardedlockreadguard",3]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["shardedlockreadguard",3],["trylockresult",6]]],[[],[["trylockresult",6],["shardedlockwriteguard",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["unparker",3]],[[]],[[],[["lockresult",6],["shardedlockwriteguard",3]]],null,null,null,[[],["rawpthread",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scopedthreadbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawpthread",6]],[[],["result",6]],[[["string",3]],["scopedthreadbuilder",3]],[[],["result",6]],[[],["scopedjoinhandle",3]],[[],[["result",6],["scopedjoinhandle",3]]],[[["usize",15]],["scopedthreadbuilder",3]],[[],["thread",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Backoff"],[3,"CachePadded"],[8,"AtomicConsume"],[3,"AtomicCell"],[3,"Parker"],[3,"Unparker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"WaitGroup"],[3,"ScopedJoinHandle"],[3,"Scope"],[3,"ScopedThreadBuilder"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11],"n":["Either","Left","Right","all","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","clone","cmp","collect","count","deref","deref_mut","either","either_with","eq","expect_left","expect_right","extend","factor_first","factor_second","flip","fmt","fmt","fold","from","from","hash","into","into","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","map","map_left","map_right","ne","next","next_back","nth","partial_cmp","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","","","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","","","","","","","","","","","","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","","","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Map <code>f</code> over the contained value and return the result in …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1],"f":[null,null,null,[[],["bool",15]],[[],["either",4]],[[]],[[]],[[],["str",15]],[[],["either",4]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["either",4]],[[["either",4]],["ordering",4]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["either",4]],["bool",15]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["either",4]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[["either",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["either",4]],[["ordering",4],["option",4]]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[]],[[]]],"p":[[4,"Either"]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","into","ne","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","","Fill <code>dest</code> with random bytes from the system’s preferred …","","","Extract the raw OS error code (if this error came from …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["error",3]],[[]],[[],["nonzerou32",3]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[]],[[],[["result",4],["error",3]]],[[]],[[["error",3]],["bool",15]],[[],[["i32",15],["option",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Error"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":[13,13,4,3,3,11,11,11,11,11,11,11,0,0,11,11,11,11,11,6,3,4,3,3,3,3,3,13,13,3,3,3,4,3,3,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocErr","CapacityOverflow","CollectionAllocErr","HashMap","HashSet","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","to_owned","try_from","try_into","type_id","DefaultHashBuilder","Drain","Entry","HashMap","IntoIter","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace_entry","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","get","hasher","insert","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","new","next","next","next","next","next","next","next","remove","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","hashbrown::hash_maphashbrown::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error due to the allocator (see the <code>AllocErr</code> type’s …","Error due to the computed capacity exceeding the …","Augments <code>AllocErr</code> with a CapacityOverflow variant.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","","","","Type alias for a <code>HashBuilder</code> using the <code>fx</code> hash algorithm.","A draining iterator over the entries of a <code>HashMap</code>.","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A builder for computing where in a HashMap a key-value …","A builder for computing where in a HashMap a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","Returns true if the map contains a value for the …","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …","Clears the map, returning all key-value pairs as an …","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","","Create a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Create a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns a reference to the value corresponding to the key.","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s …","","","","","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Returns true if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","","","","","","","","Returns the number of elements in the map.","Creates an empty <code>HashMap</code>.","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting the result …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the value at the …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Removes a key from the map, returning the stored key and …","Replaces the entry, returning the old key and value. The …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Visits the values representing the intersection, i.e., …","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns true if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","","","","Returns the number of elements in the set.","Creates an empty <code>HashSet</code>.","","","","","","","","Removes a value from the set. Returns <code>true</code> if the value …","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates a new empty hash set which will use the given …"],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,2,3,0,0,0,2,3,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,17,17,4,7,8,17,4,7,8,17,17,17,17,17,17,17,17,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,11,14,17,11,14,11,14,12,15,17,12,17,12,12,15,17,17,17,12,13,15,16,17,13,12,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,4,5,6,7,8,9,10,17,12,16,12,12,15,17,17,17,12,3,15,16,12,17,4,5,6,7,8,9,10,17,17,4,5,6,7,8,9,10,3,2,3,2,3,17,17,12,15,17,12,15,17,15,15,17,17,17,17,4,5,6,7,8,9,10,4,7,8,17,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,17,4,5,6,7,8,9,10,11,2,12,13,14,3,15,16,17,17,17,17,17,17,0,0,0,0,0,0,0,0,18,19,20,21,22,23,24,25,18,19,20,21,22,23,24,25,25,25,18,21,22,23,24,25,18,21,22,23,24,25,25,25,25,25,25,25,25,18,19,20,21,22,23,24,25,18,19,20,21,22,23,24,25,25,25,25,25,25,18,19,20,21,22,23,24,25,18,19,20,21,22,23,24,25,25,25,25,25,25,18,19,20,25,25,18,19,20,21,22,23,24,25,25,25,25,25,25,18,19,20,21,22,23,24,25,25,18,21,22,23,24,25,18,19,20,21,22,23,24,25,18,19,20,21,22,23,24,25,25,18,19,20,21,22,23,24,25,25,25,25,25],"f":[null,null,null,null,null,[[]],[[]],[[],["collectionallocerr",4]],[[]],[[["collectionallocerr",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["iter",3]],[[],["keys",3]],[[],["values",3]],[[],["hashmap",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["hashmap",3]],[[],["drain",3]],[[],["entry",4]],[[["hashmap",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[["intoiterator",8]],["hashmap",3]],[[],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[]],[[]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["hashmap",3],["defaulthashbuilder",6]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["collectionallocerr",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]],[["hashmap",3],["defaulthashbuilder",6]]],[[["usize",15]],["hashmap",3]],[[],["hashmap",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["iter",3]],[[],["intersection",3]],[[],["difference",3]],[[],["symmetricdifference",3]],[[],["union",3]],[[],["hashset",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["hashset",3]],[[["hashset",3]],["difference",3]],[[],["drain",3]],[[["hashset",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]],["hashset",3]],[[],["option",4]],[[]],[[],["bool",15]],[[["hashset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["hashset",3]],["bool",15]],[[],["bool",15]],[[["hashset",3]],["bool",15]],[[["hashset",3]],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["defaulthashbuilder",6],["hashset",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hashset",3]],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["collectionallocerr",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["hashset",3]],["union",3]],[[["usize",15]],[["defaulthashbuilder",6],["hashset",3]]],[[["usize",15]],["hashset",3]],[[],["hashset",3]]],"p":[[4,"CollectionAllocErr"],[4,"RawEntryMut"],[4,"Entry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"HashMap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"HashSet"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","tn":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","chain","chunks","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","count","dedup","dedup_by","deref","deref_mut","diff_with","dropping","dropping_back","either","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_first","factor_second","find_position","flip","flip","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_options","fold_results","fold_while","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","interleave","interleave","interleave_shortest","intersperse","into","into","into","into","into","into","into","into","into_group_map","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","map","map_any","map_into","map_left","map_left","map_results","map_right","map_right","max","merge","merge","merge_by","merge_join_by","merge_join_by","min","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multizip","ne","ne","ne","ne","ne","next","next_back","next_tuple","nth","pad_using","partial_cmp","partition","partition_map","peeking_next","peeking_take_while","permutations","positions","process_results","product1","put_back","put_back_n","rciter","reduce","repeat_call","repeat_n","rev","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_key","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tree_fold1","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","zip","zip_eq","zip_eq","zip_longest","Batching","Chunk","Chunks","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","ExactlyOneError","Format","FormatWith","Group","GroupBy","Groups","Interleave","InterleaveShortest","Intersperse","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekingTakeWhile","Permutations","Positions","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","last","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","peek","peeking_next","peeking_next","peeking_next","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value"],"q":["itertoolsitertools::structsd":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of …","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","Only the left value of type <code>A</code> is present.","A value of type <code>L</code>.","The total number of elements that were in <code>I</code> along with …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>. See …","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position …","Only the right value of type <code>B</code> is present.","A value of type <code>R</code>.","The total number of elements that were in <code>J</code> along with …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Test whether the predicate holds for any elements in the …","Converts from <code>&mut EitherOrBoth<A, B></code> to …","","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","","Converts from <code>&EitherOrBoth<A, B></code> to <code>EitherOrBoth<&A, &B></code>.","","","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","Assert that two iterables produce equal sequences, with …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","Create an iterator that first iterates <code>i</code> and then <code>j</code>.","Return an <em>iterable</em> that can chunk the iterator.","","","","","","","","","","","Create an iterator that clones each element from &T to T","","Return an iterator adaptor that uses the passed-in …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>…","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, …","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Find the position and value of the first element …","Convert <code>EitherOrBoth<A, B></code> to <code>EitherOrBoth<B, A></code>.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Option</code> values from an iterator.","Fold <code>Result</code> values from an iterator.","An iterator method that applies a function, producing a …","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","","","","","","","","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","An iterator adaptor to insert a particular value between …","","","","","","","","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return the inner value.","Return the value in the continue or done.","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Left</code> variant.","If Right, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","Creates a new iterator that infinitely applies function …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, seperated …","Combine all iterator elements into one String, separated …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Map <code>f</code> over the contained value and return the result in …","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return an iterator adaptor that applies the provided …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return the maximum value of the iterable.","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator that generalizes <em>.zip()</em> and allows running …","","","","","","","","Advances the iterator and returns the next items grouped …","","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements…","Collect all iterator elements into one of two partitions. …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this …","Return an iterator adaptor that iterates over all …","Return an iterator adaptor that yields the indices of all …","“Lift” a function of the values of an iterator so …","Iterate over the entire iterator and multiply all the …","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc<RefCell<_>></code> wrapper.","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Accumulate the elements in the iterator in a tree-like …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating …","Return an iterator adaptor that filters <code>Option<A></code> …","Return an iterator adaptor that wraps each element in a …","Iterate <code>i</code> and <code>j</code> in lock step.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","Iterator returned for the error case of …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of …","An iterator adaptor that merges an abitrary number of …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator that produces only the <code>T</code> values as long as the…","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc<RefCell<I>></code>, that implements the <code>Iterator</code>…","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able …","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option<A></code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>…","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …eturn a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","","","","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …put back value <code>value</code> (builder method)"],"i":[1,2,0,2,0,0,3,4,0,0,3,1,5,4,3,6,0,6,6,3,0,0,1,5,4,0,5,7,0,1,5,5,5,5,1,5,5,5,5,0,7,4,1,6,3,2,5,4,1,6,3,2,5,1,7,0,7,1,6,3,2,5,1,6,3,2,5,0,5,7,5,7,7,7,7,0,7,0,5,7,7,5,5,0,7,7,5,5,0,1,6,3,2,5,0,7,5,5,5,5,5,7,1,5,1,6,3,2,5,5,0,5,7,7,7,7,7,7,7,4,1,6,3,2,5,5,7,1,1,5,0,7,7,7,4,1,1,6,3,2,5,5,7,3,2,5,5,5,6,0,1,2,1,5,1,5,0,0,0,7,0,7,0,7,5,1,5,1,5,5,5,5,5,1,7,1,5,7,1,5,0,0,7,7,0,7,0,7,7,7,7,0,0,1,6,3,2,5,5,5,7,5,7,5,0,7,8,7,7,7,0,7,0,0,0,1,0,0,0,1,5,1,5,5,5,5,7,5,0,7,7,7,7,0,7,7,7,1,6,3,2,5,5,7,4,1,6,3,2,5,4,1,6,3,2,5,7,7,7,4,1,6,3,2,5,0,7,7,5,5,7,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,10,11,12,26,33,34,35,9,36,37,38,39,41,42,43,44,45,46,47,49,50,52,53,57,58,59,60,61,10,11,12,26,33,34,35,9,36,37,38,39,41,42,43,44,45,46,47,49,50,52,53,57,58,59,60,61,15,17,29,33,57,58,22,25,10,11,12,13,18,19,26,27,29,30,34,35,9,36,37,38,39,40,41,42,43,44,44,44,44,44,44,44,44,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,12,14,15,17,9,36,41,41,41,41,41,41,45,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,31,10,11,12,13,14,15,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,9,33,10,11,12,13,14,15,16,17,18,21,22,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,41,41,41,41,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,14,16,17,41,41,41,41,41,41,47,50,51,60,46,9,46,49,9,49,50,46,10,11,12,13,14,15,16,17,26,27,28,29,30,32,33,34,35,9,36,37,38,39,41,41,41,41,41,41,43,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,61,61,61,61,61,61,61,52,10,11,12,26,33,34,35,9,36,37,38,39,41,42,43,44,45,46,47,49,50,52,53,57,58,59,60,61,19,44,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,9,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["eitherorboth",4]],[[],["str",15]],[[]],[[],["either",4]],[[]],[[],["eitherorboth",4]],[[]],[[]],[[],["str",15]],[[],["either",4]],[[]],[[],["batching",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["product",3]],[[],["chain",3]],[[["usize",15]],["intochunks",3]],[[],["eitherorboth",4]],[[],["minmaxresult",4]],[[],["position",4]],[[],["foldwhile",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[],["cloned",3]],[[["either",4]],["ordering",4]],[[],["coalesce",3]],[[]],[[],["option",4]],[[],["vec",3]],[[["usize",15]],["combinations",3]],[[["usize",15]],["combinationswithreplacement",3]],[[]],[[]],[[],["constuples",3]],[[],["usize",15]],[[],["dedup",6]],[[],["dedupby",3]],[[]],[[]],[[],[["option",4],["diff",4]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["enumerate",3]],[[["eitherorboth",4]],["bool",15]],[[["minmaxresult",4]],["bool",15]],[[["position",4]],["bool",15]],[[["foldwhile",4]],["bool",15]],[[["either",4]],["bool",15]],[[],["bool",15]],[[],[["exactlyoneerror",3],["result",4]]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["option",4]],[[],["eitherorboth",4]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["foldwhile",4]],[[]],[[["str",15]],["format",3]],[[["str",15]],["formatwith",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["either",4]],[[],["groupby",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["interleave",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[]],[[],[["option",4],["either",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[],[["vec",3],["hashmap",3]]],[[]],[[]],[[]],[[]],[[],["either",4]],[[],["option",4]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iterate",3]],null,[[["str",15]],["string",3]],[[["str",15]],["string",3]],[[],["kmerge",6]],[[],["kmerge",6]],[[],["kmergeby",3]],[[],["kmergeby",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["eitherorboth",4]],[[],["either",4]],[[]],[[]],[[]],[[],["either",4]],[[],["eitherorboth",4]],[[],["mapinto",3]],[[],["eitherorboth",4]],[[],["either",4]],[[],["mapresults",3]],[[],["eitherorboth",4]],[[],["either",4]],[[],["option",4]],[[],["merge",6]],[[],["merge",6]],[[],["mergeby",3]],[[],["mergejoinby",3]],[[],["mergejoinby",3]],[[],["option",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["multiproduct",3]],[[],["multipeek",3]],[[],["zip",3]],[[["eitherorboth",4]],["bool",15]],[[["minmaxresult",4]],["bool",15]],[[["position",4]],["bool",15]],[[["foldwhile",4]],["bool",15]],[[["either",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["padusing",3]],[[["either",4]],[["option",4],["ordering",4]]],[[],["usize",15]],[[]],[[],["option",4]],[[],["peekingtakewhile",3]],[[["usize",15]],["permutations",3]],[[],["positions",3]],[[],["result",4]],[[],["option",4]],[[],["putback",3]],[[],["putbackn",3]],[[],["rciter",3]],[[]],[[],["repeatcall",3]],[[["usize",15]],["repeatn",3]],[[],["rev",3]],[[],["option",4]],[[],["option",4]],[[],["eitherorboth",4]],[[],["either",4]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[["usize",15]],["step",3]],null,[[],["option",4]],[[],["takewhileref",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tuplecombinations",3]],[[],["tuplewindows",3]],[[],["tuples",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["unfold",3]],[[],["unique",3]],[[],["uniqueby",3]],[[]],[[]],[[],["update",3]],[[],["whilesome",3]],[[],["withposition",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["zipeq",3]],[[],["ziplongest",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["boolkmergeby",3]],[[],["multiproduct",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["putback",3]],[[],["product",3]],[[],["batching",3]],[[],["step",3]],[[],["whilesome",3]],[[]],[[],["combinationswithreplacement",3]],[[],["exactlyoneerror",3]],[[],["format",3]],[[],["intersperse",3]],[[],["multipeek",3]],[[],["padusing",3]],[[],["putbackn",3]],[[],["rciter",3]],[[],["unfold",3]],[[],["iterate",3]],[[],["uniqueby",3]],[[],["unique",3]],[[],["zipeq",3]],[[],["ziplongest",3]],[[],["zip",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["resulttuplebuffer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[4,"EitherOrBoth"],[4,"FoldWhile"],[4,"Position"],[4,"Diff"],[4,"Either"],[4,"MinMaxResult"],[8,"Itertools"],[8,"PeekingNext"],[3,"PutBack"],[3,"MergeBy"],[3,"Coalesce"],[3,"DedupBy"],[3,"TakeWhileRef"],[3,"MapInto"],[3,"MapResults"],[3,"Positions"],[3,"Update"],[3,"Combinations"],[3,"FormatWith"],[3,"GroupBy"],[3,"Groups"],[3,"Group"],[3,"IntoChunks"],[3,"Chunks"],[3,"Chunk"],[3,"KMergeBy"],[3,"MergeJoinBy"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"RepeatCall"],[3,"Tuples"],[3,"WithPosition"],[3,"MultiProduct"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"ConsTuples"],[3,"CombinationsWithReplacement"],[3,"ExactlyOneError"],[3,"Format"],[3,"Intersperse"],[3,"MultiPeek"],[3,"PadUsing"],[3,"ProcessResults"],[3,"PutBackN"],[3,"RcIter"],[3,"RepeatN"],[3,"Unfold"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"TupleWindows"],[3,"UniqueBy"],[3,"Unique"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,5,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","fmt","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","","",""],"d":["A safe API for formatting integers to text.","An integer that can be formatted by <code>itoa::write</code> and …","","","","","Write integer to an <code>fmt::Write</code>.","Print an integer into this buffer and return a reference …","","","This is a cheap operation; you don’t need to worry …","","",""],"i":[0,0,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,null,[[]],[[]],[[]],[[],["buffer",3]],[[["integer",8],["write",8]],["result",6]],[[["integer",8]],["str",15]],[[]],[[]],[[],["buffer",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Buffer"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[]],null],"p":[]},\
"lexical":{"doc":"Fast lexical conversion routines.","t":[13,13,13,13,13,3,4,13,8,8,13,13,13,13,13,13,13,13,6,8,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,10,10,10,5,5,5,5,12,11,11,11,5,5,5,5,11,11,5,5,5,5,10,11,11,5,11,11,11,11,11,11],"n":["Empty","EmptyExponent","EmptyFraction","EmptyInteger","EmptyMantissa","Error","ErrorCode","ExponentWithoutFraction","FromLexical","FromLexicalLossy","InvalidDigit","InvalidExponent","InvalidLeadingZeros","InvalidPositiveExponentSign","InvalidPositiveMantissaSign","MissingExponentSign","MissingMantissaSign","Overflow","Result","ToLexical","Underflow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","code","eq","eq","fmt","fmt","from","from","from","from","from_lexical","from_lexical_lossy","from_lexical_partial","from_lexical_partial_lossy","get_exponent_default_char","get_inf_string","get_infinity_string","get_nan_string","index","into","into","ne","parse","parse_lossy","parse_partial","parse_partial_lossy","partial_cmp","partial_cmp","set_exponent_default_char","set_inf_string","set_infinity_string","set_nan_string","to_lexical","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["lexical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Empty byte array found.","Empty exponent found.","Empty fraction found.","Empty integer found.","Empty mantissa found.","Error type for lexical parsing.","Error code, indicating failure type.","Exponent was present without fraction component.","Trait for numerical types that can be parsed from bytes.","Trait for floating-point types that can be parsed using …","Invalid digit found before string termination.","Exponent was present but not allowed.","Integer had invalid leading zeros.","Invalid positive exponent sign was found.","Invalid positive mantissa sign was found.","Exponent sign was required, but not found.","Mantissa sign was required, but not found.","Integral overflow occurred during numeric parsing.","A specialized Result type for lexical operations.","Trait for numerical types that can be serialized to bytes.","Integral underflow occurred during numeric parsing.","","","","","","","","","","","Error code designating the type of error occurred.","","","","","","","","","Checked parser for a string-to-number conversion.","Lossy, checked parser for a string-to-number conversion.","Checked parser for a string-to-number conversion.","Lossy, checked parser for a string-to-number conversion.","Get default character for the exponent symbol.","Get the short representation of an Infinity literal as a …","Get the long representation of an Infinity literal as a …","Get string representation of Not a Number as a byte slice.","Optional position within the buffer for the error.","","","","High-level conversion of decimal-encoded bytes to a …","High-level lossy conversion of decimal-encoded bytes to a …","High-level, partial conversion of decimal-encoded bytes …","High-level, partial, lossy conversion of decimal-encoded …","","","Set the default character for the exponent symbol.","Set the short representation of Infinity from a byte …","Set the long representation of Infinity from a byte slice.","Set representation of Not a Number from a byte slice.","Serializer for a number-to-string conversion.","","","High-level conversion of a number to a decimal-encoded …","","","","","",""],"i":[1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,2,2,3,4,3,4,0,0,0,0,2,1,2,2,0,0,0,0,1,2,0,0,0,0,5,1,2,0,1,2,1,2,1,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["errorcode",4]],[[],["error",3]],[[]],[[]],[[["errorcode",4]],["ordering",4]],[[["error",3]],["ordering",4]],null,[[["errorcode",4]],["bool",15]],[[["error",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["errorcode",4]],["error",3]],[[],["error",3]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["u8",15]],[[]],[[]],[[]],null,[[]],[[]],[[["error",3]],["bool",15]],[[["asref",8]],[["fromlexical",8],["result",6]]],[[["asref",8]],[["fromlexicallossy",8],["result",6]]],[[["asref",8]],["result",6]],[[["asref",8]],["result",6]],[[["errorcode",4]],[["option",4],["ordering",4]]],[[["error",3]],[["option",4],["ordering",4]]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tolexical",8]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"ErrorCode"],[3,"Error"],[8,"FromLexical"],[8,"FromLexicalLossy"],[8,"ToLexical"]]},\
"lexical_core":{"doc":"Fast lexical conversion routines for a no_std environment.","t":[17,13,13,13,13,13,3,4,13,8,8,13,13,13,13,13,13,13,13,6,8,13,14,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,10,10,10,5,5,5,5,12,11,11,11,5,5,5,5,11,11,5,5,5,5,10,11,11,11,11,11,11,11,11,5],"n":["BUFFER_SIZE","Empty","EmptyExponent","EmptyFraction","EmptyInteger","EmptyMantissa","Error","ErrorCode","ExponentWithoutFraction","FromLexical","FromLexicalLossy","InvalidDigit","InvalidExponent","InvalidLeadingZeros","InvalidPositiveExponentSign","InvalidPositiveMantissaSign","MissingExponentSign","MissingMantissaSign","Overflow","Result","ToLexical","Underflow","arrvec","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","code","eq","eq","fmt","fmt","from","from","from","from","from_lexical","from_lexical_lossy","from_lexical_partial","from_lexical_partial_lossy","get_exponent_default_char","get_inf_string","get_infinity_string","get_nan_string","index","into","into","ne","parse","parse_lossy","parse_partial","parse_partial_lossy","partial_cmp","partial_cmp","set_exponent_default_char","set_inf_string","set_infinity_string","set_nan_string","to_lexical","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":["lexical_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Maximum number of bytes required to serialize any number …","Empty byte array found.","Empty exponent found.","Empty fraction found.","Empty integer found.","Empty mantissa found.","Error type for lexical parsing.","Error code, indicating failure type.","Exponent was present without fraction component.","Trait for numerical types that can be parsed from bytes.","Trait for floating-point types that can be parsed using …","Invalid digit found before string termination.","Exponent was present but not allowed.","Integer had invalid leading zeros.","Invalid positive exponent sign was found.","Invalid positive mantissa sign was found.","Exponent sign was required, but not found.","Mantissa sign was required, but not found.","Integral overflow occurred during numeric parsing.","A specialized Result type for lexical operations.","Trait for numerical types that can be serialized to bytes.","Integral underflow occurred during numeric parsing.","Macro to automate simplify the creation of an ArrayVec.","","","","","","","","","","","Error code designating the type of error occurred.","","","","","","","","","Checked parser for a string-to-number conversion.","Lossy, checked parser for a string-to-number conversion.","Checked parser for a string-to-number conversion.","Lossy, checked parser for a string-to-number conversion.","Get default character for the exponent symbol.","Get the short representation of an Infinity literal as a …","Get the long representation of an Infinity literal as a …","Get string representation of Not a Number as a byte slice.","Optional position within the buffer for the error.","","","","Parse number from string.","Lossily parse number from string.","Parse number from string.","Lossily parse number from string.","","","Set the default character for the exponent symbol.","Set the short representation of Infinity from a byte …","Set the long representation of Infinity from a byte slice.","Set representation of Not a Number from a byte slice.","Serializer for a number-to-string conversion.","","","","","","","","","Write number to string."],"i":[0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,2,2,3,4,3,4,0,0,0,0,2,1,2,2,0,0,0,0,1,2,0,0,0,0,5,1,2,1,2,1,2,1,2,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["errorcode",4]],[[],["error",3]],[[]],[[]],[[["errorcode",4]],["ordering",4]],[[["error",3]],["ordering",4]],null,[[["errorcode",4]],["bool",15]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["errorcode",4]]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["u8",15]],[[]],[[]],[[]],null,[[]],[[]],[[["error",3]],["bool",15]],[[],[["fromlexical",8],["result",6]]],[[],[["result",6],["fromlexicallossy",8]]],[[],["result",6]],[[],["result",6]],[[["errorcode",4]],[["option",4],["ordering",4]]],[[["error",3]],[["option",4],["ordering",4]]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["tolexical",8]]]],"p":[[4,"ErrorCode"],[3,"Error"],[8,"FromLexical"],[8,"FromLexicalLossy"],[8,"ToLexical"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,5,5,17,5,17,17,17,4,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,5,5,5,5,5,17,17,17,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,17,17,17,17,17,17,12,12,3,3,3,3,3,3,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,12,12,5,5,5,5,5,12,3,12,12,12,12,12,12,12,12,12,5,5,12,5,12,12,12,5,12,5,12,5,5,3,5,12,12,12,12,12,3,12,5,5,5,5,12,12,12,12,5,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,5,12,12,12,6,6,6,12,6,12,12,6,6,12,12,6,6,6,6,6,6,6,4,12,5,6,5,5,5,5,5,5,12,5,5,5,5,5,5,5,5,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,12,12,12,12,12,12,12,12,12,3,5,5,12,12,6,12,12,6,12,12,12,12,12,12,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,6,5,3,5,5,5,5,5,12,12,12,12,5,5,12,12,12,12,12,12,12,12,12,12,3,5,5,5,12,12,5,5,5,5,12,12,12,12,5,5,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,12,3,5,5,5,5,12,12,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,3,5,5,11,5,5,5,5,4,5,5,5,12,5,5,5,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,6,3,12,12,12,12,12,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,6,12,12,12,5,3,5,5,5,12,12,12,12,5,3,12,12,12,12,12,12,12,12,3,5,5,5,6,6,12,12,6,3,5,12,5,3,12,3,5,5,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,6,3,6,5,12,12,6,6,6,6,6,12,12,12,12,12,12,12,12,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,12,12,3,3,3,12,12,12,12,12,3,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,3,12,12,3,5,5,3,6,5,5,5,12,12,12,12,12,12,12,5,5,3,3,5,5,5,5,5,12,3,6,5,5,5,5,5,5,5,5,5,5,12,3,3,6,6,3,5,6,12,5,12,12,5,3,12,12,12,12,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,6,12,12,12,12,12,5,5,12,12,12,12,12,12,12,3,5,5,5,5,12,12,12,5,6,12,12,12,5,6,5,6,5,6,12,12,12,5,5,3,12,6,12,5,5,5,5,5,5,5,12,12,12,12,12,12,3,5,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,6,5,5,3,5,12,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,6,5,12,5,5,12,5,3,3,3,3,3,6,6,12,3,6,6,6,6,6,3,6,6,3,6,6,3,5,17,17,17,17,17,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,3,5,5,5,5,5,3,5,5,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,3,5,5,5,5,5,5,5,3,5,5,5,3,5,5,5,5,5,5,5,5,3,5,5,5,5,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,6,5,5,5,5,5,5,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,12,12,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,3,6,12,5,5,5,5,5,5,5,12,12,5,5,12,12,12,6,3,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,12,12,12,3,12,6,12,12,12,12,6,6,12,12,12,12,12,5,12,12,12,12,12,5,5,12,12,12,12,12,12,12,12,5,3,3,12,12,5,12,5,12,12,12,12,12,5,12,12,12,12,12,5,6,5,5,5,3,5,5,3,5,19,5,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,12,12,12,12,12,12,12,5,12,12,5,5,6,5,5,5,3,5,11,12,12,12,11,12,12,11,12,11,12,11,3,5,5,5,5,5,12,12,12,12,3,5,6,3,5,5,5,5,6,3,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,12,12,5,12,5,3,3,3,3,3,3,3,3,5,5,6,6,5,5,12,12,12,12,12,12,5,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,5,3,5,12,3,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,6,5,5,5,5,5,5,5,5,5,12,5,12,12,5,6,5,5,5,5,5,5,5,5,5,3,12,12,5,12,12,6,5,5,3,3,3,3,4,3,12,12,12,12,12,12,12,12,12,12,12,5,5,3,12,12,12,12,12,5,5,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,12,12,12,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,6,5,5,12,12,12,12,12,12,12,3,5,5,5,3,5,3,12,12,6,6,12,12,12,12,5,5,5,5,6,5,5,3,5,5,5,12,12,12,12,12,12,12,12,12,3,3],"n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","F_ALLOCATEALL","F_ALLOCATECONTIG","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GLOBAL_NOCACHE","F_LOCK","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_CHECKSUM","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_DROP_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_COREDUMP","KERN_COREFILE","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXEC","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MCL_CURRENT","MCL_FUTURE","MDMBUF","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTHREADINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_END","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSPROTO_CONTROL","SYSPROTO_EVENT","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_SWAPUSAGE","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__cpu","__cs","__darwin_mcontext64","__darwin_mmst_reg","__darwin_x86_exception_state64","__darwin_x86_float_state64","__darwin_x86_thread_state64","__darwin_xmm_reg","__err","__error","__es","__faultvaddr","__fpu_cs","__fpu_dp","__fpu_ds","__fpu_fop","__fpu_ftw","__fpu_ip","__fpu_mxcsr","__fpu_mxcsrmask","__fpu_reserved","__fpu_reserved1","__fpu_rsrv1","__fpu_rsrv2","__fpu_rsrv3","__fpu_stmm0","__fpu_stmm1","__fpu_stmm2","__fpu_stmm3","__fpu_stmm4","__fpu_stmm5","__fpu_stmm6","__fpu_stmm7","__fpu_xmm0","__fpu_xmm1","__fpu_xmm10","__fpu_xmm11","__fpu_xmm12","__fpu_xmm13","__fpu_xmm14","__fpu_xmm15","__fpu_xmm2","__fpu_xmm3","__fpu_xmm4","__fpu_xmm5","__fpu_xmm6","__fpu_xmm7","__fpu_xmm8","__fpu_xmm9","__fs","__fs","__gs","__mmst_reg","__mmst_rsrv","__r10","__r11","__r12","__r13","__r14","__r15","__r8","__r9","__rax","__rbp","__rbx","__rcx","__rdi","__rdx","__rflags","__rip","__rsi","__rsp","__ss","__trapno","__xmm_reg","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","addrinfo","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arphdr","array","atexit","atof","atoi","backtrace","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","blkcnt_t","blksize_t","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","clearerr","clock_getres","clock_gettime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","connect","connectx","constant","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_type","cpu_type_t","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","default_policy","denom","dev_t","difftime","dirent","dirfd","disconnectx","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetc","fgetpos","fgets","fgetxattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmt","fopen","fork","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getchar","getchar_unlocked","getcwd","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostname","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","hdr_cnt","headers","hostent","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_freenameindex","if_index","if_indextoname","if_msghdr","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifi_addrlen","ifi_baudrate","ifi_collisions","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ierrors","ifi_imcasts","ifi_ipackets","ifi_iqdrops","ifi_lastchange","ifi_metric","ifi_mtu","ifi_noproto","ifi_obytes","ifi_oerrors","ifi_omcasts","ifi_opackets","ifi_physical","ifi_recvquota","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_typelen","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmittiming","ifm_addrs","ifm_data","ifm_flags","ifm_index","ifm_msglen","ifm_type","ifm_version","imr_interface","imr_multiaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","iov_base","iov_len","iovec","ip_mreq","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lconv","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","login_tty","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_header","mach_header_64","mach_msg_type_number_t","mach_port_t","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","machine","madvise","magic","magic","malloc","max_align_t","maxerror","maxerror","maxprot","maxprot","mcontext_t","memchr","memcmp","memcpy","memmove","memset","mincore","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","nanosleep","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","nodename","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","off_t","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","perror","pid_t","pipe","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","printf","proc_bsdinfo","proc_taskallinfo","proc_taskinfo","proc_threadinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_curpri","pth_flags","pth_maxpriority","pth_name","pth_policy","pth_priority","pth_run_state","pth_sleep_time","pth_system_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_init","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setname_np","pthread_setspecific","pthread_sigmask","pthread_t","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","putchar","putchar_unlocked","putenv","puts","pututxline","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","revents","rewind","rewinddir","rfu_1","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","running","rusage","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostname","setitimer","setlocale","setlogmask","setpgid","setpriority","setprogname","setpwent","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size_t","sizeofcmds","sizeofcmds","sleep","slot_num","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speed_t","sprintf","srand","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strrchr","strsignal","strspn","strstr","strtod","strtok","strtol","strtoul","strxfrm","sun_family","sun_len","sun_path","suseconds_t","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","syslog","sysname","system","tai","task_count","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_count","time","time","time_state","time_t","timegm","times","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","val","version","vm_prot_t","vm_size_t","vmaddr","vmaddr","vmsize","vmsize","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred"],"q":["libcd":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","data includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/writehird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggersae_associd_t)(-1ULL))","","((sae_connid_tnable/Disable TCP Fastopen on this socket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to C’s <code>void</code> type when used as a [pointerhe 64-bit libc on Solaris and illumos only has …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,1,0,3,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,2,5,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,1,6,0,0,0,0,0,7,7,0,0,0,0,0,8,0,9,9,9,9,9,9,9,9,10,0,0,10,0,10,10,10,0,10,0,10,0,0,0,0,11,11,11,11,11,0,12,0,0,0,0,13,13,13,13,0,0,0,0,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,0,0,0,12,66,66,0,0,0,66,0,66,66,0,0,66,66,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,0,0,0,77,78,79,77,78,79,40,40,40,0,0,0,88,103,0,102,103,0,75,76,75,76,74,74,74,74,0,7,69,95,95,95,95,95,95,63,90,69,104,50,0,0,0,0,0,0,0,0,61,61,61,61,0,0,64,64,64,64,64,64,64,64,64,64,0,0,0,0,71,71,0,0,0,0,88,88,89,25,0,0,0,0,0,0,0,0,63,60,94,60,94,60,94,60,94,60,60,94,60,94,60,94,60,60,94,94,94,94,94,94,60,94,94,94,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,63,90,0,0,0,0,0,0,77,78,77,78,75,76,63,90,63,75,76,77,78,90,0,0,0,0,112,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,88,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,0,0,0,0,0,0,0,0,58,58,58,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,49,49,49,0,0,0,0,0,17,17,17,17,0,0,69,23,23,23,23,23,68,68,0,0,0,0,0,0,63,90,0,0,0,42,0,0,42,0,0,0,36,36,36,36,36,36,36,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,65,65,65,65,65,65,65,48,48,0,0,0,0,0,0,0,77,78,0,0,0,0,0,69,69,69,69,69,69,69,69,0,0,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,0,0,24,24,0,0,0,84,84,83,83,83,0,22,22,103,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,0,88,88,0,0,0,0,0,0,0,0,67,27,27,67,67,67,67,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,46,0,75,76,0,0,88,89,77,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,88,8,69,69,69,0,0,39,39,39,39,39,39,39,0,0,0,0,0,69,69,69,0,0,75,76,69,0,0,0,0,0,0,46,77,78,0,0,0,50,0,88,0,0,0,0,0,0,0,32,69,32,32,69,69,0,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,72,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,88,0,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,93,93,93,93,93,93,93,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,72,0,0,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,76,25,0,0,71,20,20,0,0,44,44,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,103,0,111,86,31,31,31,31,33,0,33,0,56,33,56,56,0,0,87,87,87,87,87,0,82,82,82,82,82,0,0,80,80,80,80,80,80,80,80,0,0,0,77,78,0,91,0,91,85,91,85,85,0,91,91,91,91,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,92,92,92,92,92,92,92,0,92,92,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,34,34,62,81,62,81,62,81,81,62,81,81,81,62,28,0,75,76,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,57,99,57,57,82,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,88,0,0,0,0,0,88,0,0,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,0,0,0,0,0,0,0,0,0,0,46,0,89,105,0,0,0,0,0,0,0,0,0,0,0,0,69,105,0,89,89,0,0,0,0,0,0,0,0,0,38,38,38,38,38,38,38,38,38,38,38,0,0,0,30,30,30,30,88,0,0,68,68,0,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,0,0,19,18,19,106,18,106,14,15,16,17,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,10,49,9,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,7,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,12,106,107,13,108,109,3,1,2,4,5,6,110,111,112,109,109,109,109,109,109,0,63,90,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,100,100,100,100,100,100,0,0,0,0,0,0,0,12,46,0,0,77,78,77,78,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,73,73,73,73,73,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["c_uint",6]],["c_uint",6]],[[]],[[["c_uint",6]],["c_uint",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]]],[[["c_int",6]],["bool",15]],[[["c_int",6]]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["bool",15]],null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],null,null,null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["dir",4]],[[],["file",4]],[[],["fpos_t",4]],[[],["group",3]],[[],["utimbuf",3]],[[],["timeval",3]],[[],["timespec",3]],[[],["rlimit",3]],[[],["rusage",3]],[[],["ipv6_mreq",3]],[[],["hostent",3]],[[],["iovec",3]],[[],["pollfd",3]],[[],["winsize",3]],[[],["linger",3]],[[],["sigval",3]],[[],["itimerval",3]],[[],["tms",3]],[[],["servent",3]],[[],["protoent",3]],[[],["sockaddr",3]],[[],["sockaddr_in6",3]],[[],["passwd",3]],[[],["ifaddrs",3]],[[],["fd_set",3]],[[],["tm",3]],[[],["msghdr",3]],[[],["cmsghdr",3]],[[],["fsid_t",3]],[[],["if_nameindex",3]],[[],["regex_t",3]],[[],["regmatch_t",3]],[[],["sockaddr_un",3]],[[],["utsname",3]],[[],["timezone",4]],[[],["ip_mreq",3]],[[],["aiocb",3]],[[],["glob_t",3]],[[],["addrinfo",3]],[[],["mach_timebase_info",3]],[[],["stat",3]],[[],["pthread_mutexattr_t",3]],[[],["pthread_condattr_t",3]],[[],["pthread_rwlockattr_t",3]],[[],["siginfo_t",3]],[[],["sigaction",3]],[[],["stack_t",3]],[[],["fstore_t",3]],[[],["radvisory",3]],[[],["statvfs",3]],[[],["dl_info",3]],[[],["sockaddr_in",3]],[[],["kevent64_s",3]],[[],["dqblk",3]],[[],["if_msghdr",3]],[[],["termios",3]],[[],["flock",3]],[[],["sf_hdtr",3]],[[],["lconv",3]],[[],["proc_taskinfo",3]],[[],["proc_bsdinfo",3]],[[],["proc_taskallinfo",3]],[[],["xsw_usage",3]],[[],["xucred",3]],[[],["mach_header",3]],[[],["mach_header_64",3]],[[],["segment_command",3]],[[],["segment_command_64",3]],[[],["load_command",3]],[[],["sockaddr_dl",3]],[[],["sockaddr_inarp",3]],[[],["sockaddr_ctl",3]],[[],["in_pktinfo",3]],[[],["in6_pktinfo",3]],[[],["ipc_perm",3]],[[],["sembuf",3]],[[],["arphdr",3]],[[],["in_addr",3]],[[],["sa_endpoints_t",3]],[[],["timex",3]],[[],["ntptimeval",3]],[[],["kevent",3]],[[],["semid_ds",3]],[[],["shmid_ds",3]],[[],["proc_threadinfo",3]],[[],["statfs",3]],[[],["dirent",3]],[[],["pthread_rwlock_t",3]],[[],["pthread_mutex_t",3]],[[],["pthread_cond_t",3]],[[],["sockaddr_storage",3]],[[],["utmpx",3]],[[],["sigevent",3]],[[],["processor_cpu_load_info",3]],[[],["processor_basic_info",3]],[[],["processor_set_basic_info",3]],[[],["processor_set_load_info",3]],[[],["semun",19]],[[],["timeval32",3]],[[],["if_data",3]],[[],["bpf_hdr",3]],[[],["pthread_attr_t",3]],[[],["ucontext_t",3]],[[],["__darwin_mcontext64",3]],[[],["__darwin_x86_exception_state64",3]],[[],["__darwin_x86_thread_state64",3]],[[],["__darwin_x86_float_state64",3]],[[],["__darwin_mmst_reg",3]],[[],["__darwin_xmm_reg",3]],[[],["max_align_t",3]],[[],["in6_addr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],[["error",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[],["pid_t",6]],null,null,[[],["c_int",6]],null,[[],["uid_t",6]],null,[[],["sigval",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"__darwin_x86_exception_state64"],[3,"__darwin_x86_thread_state64"],[3,"__darwin_mcontext64"],[3,"__darwin_x86_float_state64"],[3,"__darwin_mmst_reg"],[3,"__darwin_xmm_reg"],[3,"ipc_perm"],[3,"utimbuf"],[3,"addrinfo"],[3,"aiocb"],[3,"arphdr"],[19,"semun"],[3,"bpf_hdr"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"msghdr"],[3,"cmsghdr"],[3,"fsid_t"],[3,"if_nameindex"],[3,"regex_t"],[3,"regmatch_t"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[3,"ip_mreq"],[3,"glob_t"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"sembuf"],[3,"in_addr"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[3,"timeval32"],[3,"if_data"],[3,"pthread_attr_t"],[3,"ucontext_t"],[3,"max_align_t"],[3,"in6_addr"],[4,"c_void"]]},\
"libm":{"doc":"libm in pure Rust","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["acos","acosf","acosh","acoshf","asin","asinf","asinh","asinhf","atan","atan2","atan2f","atanf","atanh","atanhf","cbrt","cbrtf","ceil","ceilf","copysign","copysignf","cos","cosf","cosh","coshf","erf","erfc","erfcf","erff","exp","exp10","exp10f","exp2","exp2f","expf","expm1","expm1f","fabs","fabsf","fdim","fdimf","floor","floorf","fma","fmaf","fmax","fmaxf","fmin","fminf","fmod","fmodf","frexp","frexpf","hypot","hypotf","ilogb","ilogbf","j0","j0f","j1","j1f","jn","jnf","ldexp","ldexpf","lgamma","lgamma_r","lgammaf","lgammaf_r","log","log10","log10f","log1p","log1pf","log2","log2f","logf","modf","modff","nextafter","nextafterf","pow","powf","remainder","remainderf","remquo","remquof","round","roundf","scalbn","scalbnf","sin","sincos","sincosf","sinf","sinh","sinhf","sqrt","sqrtf","tan","tanf","tanh","tanhf","tgamma","tgammaf","trunc","truncf","y0","y0f","y1","y1f","yn","ynf"],"q":["libm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Arccosine (f64)","Arccosine (f32)","Inverse hyperbolic cosine (f64)","Inverse hyperbolic cosine (f32)","Arcsine (f64)","Arcsine (f32)","Inverse hyperbolic sine (f64)","Inverse hyperbolic sine (f32)","Arctangent (f64)","Arctangent of y/x (f64)","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","Inverse hyperbolic tangent (f32)","Computes the cube root of the argument.","Cube root (f32)","Ceil (f64)","Ceil (f32)","Sign of Y, magnitude of X (f64)","Sign of Y, magnitude of X (f32)","","","Hyperbolic cosine (f64)","Hyperbolic cosine (f64)","Error function (f64)","Error function (f64)","Error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","Exponential, base 2 (f64)","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","Positive difference (f32)","Floor (f64)","Floor (f32)","Floating multiply add (f64)","Floating multiply add (f32)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]]],[[["f32",15]],["f32",15]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]]],[[["f32",15]]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["i32",15],["f32",15]],["f32",15]]],"p":[]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":[16,16,8,16,16,3,3,18,18,18,18,18,18,16,16,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,10,11,11,10,10,10,10,10,10,10,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":["lock_apid":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a …","Marker type which indicates that the Guard type for a …","Initial value for an unlocked mutex.","Initial value for an unlocked mutex.","Initial value.","Initial value.","Initial value for an unlocked <code>RwLock</code>.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single …","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if …","Temporarily yields the <code>RwLock</code> to a waiting thread if …","Temporarily yields the <code>RwLock</code> to a waiting thread if …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Atomically downgrades a write lock into a read lock …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock …","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","","","","","","","","","","","","","","","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the …","Makes a new <code>MappedMutexGuard</code> for a component of the …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock<T></code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking.","Attempts to acquire this lock.","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make  a new <code>MappedMutexGuard</code> for a component …","Attempts to make  a new <code>MappedMutexGuard</code> for a component …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","Unlocks this mutex.","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[1,2,0,3,4,0,0,3,3,5,5,4,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20,9,12,15,16,17,21,21,21,21,22,22,8,11,14,9,10,12,13,15,16,17,18,19,9,10,16,19,23,16,17,19,24,16,24,9,10,12,13,15,16,17,18,19,8,11,14,8,11,8,11,14,14,14,14,6,7,8,8,8,9,10,11,11,11,12,13,14,14,14,15,16,17,18,19,8,11,14,6,7,8,9,10,11,12,13,14,15,16,17,18,19,8,11,14,3,8,11,4,4,25,26,9,10,12,13,15,16,18,19,9,8,11,14,5,8,11,14,14,14,12,15,16,17,6,7,8,9,10,11,12,13,14,15,16,17,18,19,6,7,8,9,10,11,12,13,14,15,16,17,18,19,3,8,11,4,2,2,1,8,11,4,2,25,27,27,2,1,8,11,26,28,28,9,10,12,13,15,16,18,19,14,14,14,14,14,14,14,14,14,26,17,28,17,28,17,14,14,14,6,7,8,9,10,11,12,13,14,15,16,17,18,19,3,4,21,20,9,10,12,13,15,16,17,18,19,4,21,26,22,9,12,15,16,17,9,12,15,16,17,14,26,17,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[],["mappedrwlockreadguard",3]],[[]],[[],["rwlockupgradablereadguard",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutex",3]],[[]],[[]],[[],["reentrantmutex",3]],[[]],[[]],[[]],[[]],[[]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mutexguard",3]],[[],["reentrantmutexguard",3]],[[]],[[]],[[]],[[]],[[],[["sized",8],["mappedmutexguard",3]]],[[],[["sized",8],["mappedmutexguard",3]]],[[],[["sized",8],["mappedreentrantmutexguard",3]]],[[],[["sized",8],["mappedreentrantmutexguard",3]]],[[],[["sized",8],["mappedrwlockreadguard",3]]],[[],[["sized",8],["mappedrwlockwriteguard",3]]],[[],[["sized",8],["mappedrwlockreadguard",3]]],[[],[["sized",8],["mappedrwlockwriteguard",3]]],[[],["mutex",3]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[],["usize",15]],[[]],[[]],[[]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["rwlock",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],[["option",4],["mutexguard",3]]],[[],[["option",4],["reentrantmutexguard",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["mutexguard",3]]],[[],[["option",4],["reentrantmutexguard",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["mutexguard",3]]],[[],[["option",4],["reentrantmutexguard",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["mappedmutexguard",3]]],[[],[["result",4],["mappedmutexguard",3]]],[[],[["result",4],["mappedreentrantmutexguard",3]]],[[],[["result",4],["mappedreentrantmutexguard",3]]],[[],[["mappedrwlockreadguard",3],["result",4]]],[[],[["mappedrwlockwriteguard",3],["result",4]]],[[],[["mappedrwlockreadguard",3],["result",4]]],[[],[["mappedrwlockwriteguard",3],["result",4]]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["option",4],["rwlockreadguard",3]]],[[],[["option",4],["rwlockupgradablereadguard",3]]],[[],[["option",4],["rwlockupgradablereadguard",3]]],[[],[["option",4],["rwlockupgradablereadguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],["bool",15]],[[],[["result",4],["rwlockwriteguard",3]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],[["rwlockwriteguard",3],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rwlockupgradablereadguard",3]],[[]],[[],["rwlockwriteguard",3]],[[],["rwlockwriteguard",3]]],"p":[[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawMutex"],[8,"RawRwLock"],[8,"GetThreadId"],[3,"GuardSend"],[3,"GuardNoSend"],[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutexFair"],[8,"RawRwLockFair"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockRecursive"],[8,"RawRwLockUpgrade"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"]]},\
"matrixmultiply":{"doc":"General matrix multiplication for f32, f64 matrices. …","t":[5,5],"n":["dgemm","sgemm"],"q":["matrixmultiply",""],"d":["General matrix multiplication (f64)","General matrix multiplication (f32)"],"i":[0,0],"f":[[[["isize",15],["usize",15],["f64",15]]],[[["isize",15],["usize",15],["f32",15]]]],"p":[]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members …","t":[14,14,14,14,14],"n":["offset_of","offset_of_tuple","raw_field","raw_field_tuple","span_of"],"q":["memoffset","","","",""],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]},\
"nalgebra":{"doc":"nalgebra","t":[8,8,8,8,3,8,16,8,8,16,8,16,8,8,8,16,8,5,10,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,10,11,10,11,10,11,10,10,11,0,10,11,11,10,11,10,11,5,5,10,11,11,11,10,11,5,5,5,5,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,10,11,10,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,11,11,11,11,10,10,10,12,10,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,10,11,11,11,11,0,10,11,10,10,11,10,10,11,10,11,10,10,11,10,11,5,10,11,5,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,5,11,11,11,11,11,10,5,5,5,5,5,5,5,5,5,10,10,11,10,11,10,11,11,11,11,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,5,5,11,11,10,11,10,11,11,11,11,14,10,11,11,11,11,11,5,10,5,11,11,11,12,12,3,6,6,6,6,6,6,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,16,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,16,8,3,3,6,3,3,6,6,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,11,11,11,11,11,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,8,8,6,6,8,10,10,10,8,8,16,16,16,16,8,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,16,8,8,6,8,8,6,8,6,8,8,8,6,8,8,6,8,6,8,6,6,8,6,6,6,8,6,3,8,8,16,16,16,16,16,16,16,16,16,16,16,16,8,8,16,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,18,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,10,11,11,11,11,10,10,11,11,11,11,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,8,8,16,16,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,16,8,8,16,6,6,16,8,6,8,8,10,10,10,11,11,11,11,11,11,11,11,10,10,11,10,10,10,10,10,11,11,8,6,6,3,3,6,6,6,6,3,3,3,6,6,6,6,6,6,6,6,3,3,16,3,6,6,3,6,6,6,6,8,8,4,8,8,4,4,3,6,6,3,6,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ClosedAdd","ClosedDiv","ClosedMul","ClosedSub","Complex","ComplexField","Element","Field","RealField","RealField","SimdBool","SimdBool","SimdComplexField","SimdPartialOrd","SimdRealField","SimdRealField","SimdValue","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","acos","acos","acosh","acosh","add","add","add","add","add_assign","add_assign","add_assign","add_assign","all","and","any","argument","argument","as_","asin","asin","asinh","asinh","atan","atan","atan2","atanh","atanh","base","bitmask","borrow","borrow_mut","cbrt","cbrt","ceil","ceil","center","clamp","clamp","clone","clone_into","conj","conjugate","conjugate","convert","convert_ref","convert_ref_unchecked","convert_unchecked","copysign","cos","cos","cosc","cosh","cosh","coshc","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","distance","distance_squared","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","e","eq","eq","eq","eq","exp","exp","exp2","exp2","exp_m1","exp_m1","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_real","from_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str","from_str_radix","from_subset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","geometry","hash","hypot","hypot","i","identity","identity","if_else","if_else2","if_else3","im","imaginary","imaginary","inf","inf_sup","into","into","into","inv","inv","inverse","inverse","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_vector","inverse_transform_vector","is_convertible","is_finite","is_finite","is_finite","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_infinite","is_nan","is_normal","is_one","is_sign_negative","is_sign_positive","is_zero","is_zero","l1_norm","lanes","lanes","lanes","lanes","lanes","linalg","ln","ln","ln_10","ln_1p","ln_1p","ln_2","log","log","log10","log10","log10_e","log2","log2","log2_e","map_lanes","max","max","max_value","min","min","min_value","modulus","modulus","modulus_squared","modulus_squared","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","neg","new","none","norm","norm","norm1","norm1","norm_sqr","norm_squared","norm_squared","one","one","one","one","one","one","or","partial_clamp","partial_cmp","partial_ge","partial_gt","partial_le","partial_lt","partial_max","partial_min","partial_sort2","pi","powc","powc","powf","powf","powi","powi","powi","powu","product","product","product","product","re","real","real","recip","recip","relative_eq","relative_eq","relative_eq","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","round","round","scale","scale","scale","scale_mut","scale_mut","select","select","select","select","select","set_one","set_zero","signum","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_e","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_lt","simd_max","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","sin","sin","sin_cos","sin_cos","sinc","sinh","sinh","sinh_cosh","sinh_cosh","sinhc","splat","splat","splat","splat","splat","sqrt","sqrt","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sup","tan","tan","tanh","tanh","to_exp","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_subset","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","transform_point","transform_point","transform_vector","transform_vector","trunc","trunc","try_convert","try_convert_ref","try_from","try_into","try_sqrt","try_sqrt","two_pi","type_id","ulps_eq","ulps_eq","ulps_eq","unimplemented_or_uninitialized_generic","unscale","unscale","unscale","unscale_mut","unscale_mut","vzip","wrap","xor","zero","zero","zero","zip_map_lanes","0","0","ArrayStorage","DMatrix","DMatrixSlice","DMatrixSliceMut","DVector","DVectorSlice","DVectorSliceMut","EuclideanNorm","LpNorm","Matrix","Matrix1","Matrix1x2","Matrix1x3","Matrix1x4","Matrix1x5","Matrix1x6","Matrix1xX","Matrix2","Matrix2x1","Matrix2x3","Matrix2x4","Matrix2x5","Matrix2x6","Matrix2xX","Matrix3","Matrix3x1","Matrix3x2","Matrix3x4","Matrix3x5","Matrix3x6","Matrix3xX","Matrix4","Matrix4x1","Matrix4x2","Matrix4x3","Matrix4x5","Matrix4x6","Matrix4xX","Matrix5","Matrix5x1","Matrix5x2","Matrix5x3","Matrix5x4","Matrix5x6","Matrix5xX","Matrix6","Matrix6x1","Matrix6x2","Matrix6x3","Matrix6x4","Matrix6x5","Matrix6xX","MatrixCross","MatrixMN","MatrixN","MatrixSlice","MatrixSlice1","MatrixSlice1x2","MatrixSlice1x3","MatrixSlice1x4","MatrixSlice1x5","MatrixSlice1x6","MatrixSlice1xX","MatrixSlice2","MatrixSlice2x1","MatrixSlice2x3","MatrixSlice2x4","MatrixSlice2x5","MatrixSlice2x6","MatrixSlice2xX","MatrixSlice3","MatrixSlice3x1","MatrixSlice3x2","MatrixSlice3x4","MatrixSlice3x5","MatrixSlice3x6","MatrixSlice3xX","MatrixSlice4","MatrixSlice4x1","MatrixSlice4x2","MatrixSlice4x3","MatrixSlice4x5","MatrixSlice4x6","MatrixSlice4xX","MatrixSlice5","MatrixSlice5x1","MatrixSlice5x2","MatrixSlice5x3","MatrixSlice5x4","MatrixSlice5x6","MatrixSlice5xX","MatrixSlice6","MatrixSlice6x1","MatrixSlice6x2","MatrixSlice6x3","MatrixSlice6x4","MatrixSlice6x5","MatrixSlice6xX","MatrixSliceMut","MatrixSliceMut1","MatrixSliceMut1x2","MatrixSliceMut1x3","MatrixSliceMut1x4","MatrixSliceMut1x5","MatrixSliceMut1x6","MatrixSliceMut1xX","MatrixSliceMut2","MatrixSliceMut2x1","MatrixSliceMut2x3","MatrixSliceMut2x4","MatrixSliceMut2x5","MatrixSliceMut2x6","MatrixSliceMut2xX","MatrixSliceMut3","MatrixSliceMut3x1","MatrixSliceMut3x2","MatrixSliceMut3x4","MatrixSliceMut3x5","MatrixSliceMut3x6","MatrixSliceMut3xX","MatrixSliceMut4","MatrixSliceMut4x1","MatrixSliceMut4x2","MatrixSliceMut4x3","MatrixSliceMut4x5","MatrixSliceMut4x6","MatrixSliceMut4xX","MatrixSliceMut5","MatrixSliceMut5x1","MatrixSliceMut5x2","MatrixSliceMut5x3","MatrixSliceMut5x4","MatrixSliceMut5x6","MatrixSliceMut5xX","MatrixSliceMut6","MatrixSliceMut6x1","MatrixSliceMut6x2","MatrixSliceMut6x3","MatrixSliceMut6x4","MatrixSliceMut6x5","MatrixSliceMut6xX","MatrixSliceMutMN","MatrixSliceMutN","MatrixSliceMutXx1","MatrixSliceMutXx2","MatrixSliceMutXx3","MatrixSliceMutXx4","MatrixSliceMutXx5","MatrixSliceMutXx6","MatrixSliceXx1","MatrixSliceXx2","MatrixSliceXx3","MatrixSliceXx4","MatrixSliceXx5","MatrixSliceXx6","MatrixSum","MatrixVec","MatrixXx1","MatrixXx2","MatrixXx3","MatrixXx4","MatrixXx5","MatrixXx6","Norm","Norm","Normed","OMatrix","OVector","RowDVector","RowOVector","RowSVector","RowVector","RowVector1","RowVector2","RowVector3","RowVector4","RowVector5","RowVector6","SMatrix","SMatrixSlice","SMatrixSliceMut","SVector","SVectorSlice","SVectorSliceMut","Scalar","Size","SliceRange","SliceStorage","SliceStorageMut","SquareMatrix","UniformNorm","Unit","UnitVector1","UnitVector2","UnitVector3","UnitVector4","UnitVector5","UnitVector6","VecStorage","Vector","Vector1","Vector2","Vector3","Vector4","Vector5","Vector6","VectorN","VectorSlice","VectorSlice1","VectorSlice2","VectorSlice3","VectorSlice4","VectorSlice5","VectorSlice6","VectorSliceMut","VectorSliceMut1","VectorSliceMut2","VectorSliceMut3","VectorSliceMut4","VectorSliceMut5","VectorSliceMut6","VectorSum","a","a","a_axis","a_axis","abs","abs_diff_eq","abs_diff_eq","ad_mul","ad_mul_to","ad_solve_lower_triangular","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked_mut","add","add","add_assign","add_assign","add_scalar","add_scalar_mut","add_to","adjoint","adjoint_mut","adjoint_to","allocator","amax","amin","angle","angle","angle","angle_to","angle_to","append_axisangle_linearized","append_nonuniform_scaling","append_nonuniform_scaling","append_nonuniform_scaling_mut","append_nonuniform_scaling_mut","append_scaling","append_scaling","append_scaling_mut","append_scaling_mut","append_translation","append_translation","append_translation_mut","append_translation_mut","apply","apply_into","apply_metric_distance","apply_norm","argmax","argmax","argmin","argmin","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_unchecked","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_vec","as_vec_mut","axcpy","axcpy","axis","axis_angle","axis_angle","axpy","axpy","b","b","b_axis","b_axis","begin","bidiagonalize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","camax","camin","cap_magnitude","cast","cast","cast","cast","cdpy","cholesky","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned_sum","cmpy","col_piv_qr","column","column_iter","column_iter_mut","column_mean","column_mut","column_part","column_part_mut","column_sum","column_variance","columns","columns_generic","columns_generic_mut","columns_generic_with_step","columns_generic_with_step_mut","columns_mut","columns_range","columns_range_mut","columns_range_pair","columns_range_pair_mut","columns_with_step","columns_with_step_mut","complex","complex_eigenvalues","component_div","component_div_assign","component_div_mut","component_mul","component_mul_assign","component_mul_mut","compress_columns","compress_rows","compress_rows_tr","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_transform_mut","conjugate_transpose","conjugate_transpose_to","constraint","convolve_full","convolve_same","convolve_valid","coordinates","copy_from","copy_from_slice","cos_angle","cross","cross_matrix","cross_matrix","data","default","default","default_allocator","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","determinant","diagonal","diagonal","dimension","div","div","div","div_assign","dot","dotc","dual_quaternion","eigenvalues","end","eq","eq","eq","eq","eq","euler_angles","exp","exp","extend","extend","extend","extend","extend","extend","extend","face_towards","face_towards","face_towards","fill","fill_column","fill_diagonal","fill_lower_triangle","fill_lower_triangle_with_upper_triangle","fill_row","fill_upper_triangle","fill_upper_triangle_with_lower_triangle","fill_with_identity","fixed_columns","fixed_columns_mut","fixed_columns_with_step","fixed_columns_with_step_mut","fixed_resize","fixed_rows","fixed_rows_mut","fixed_rows_with_step","fixed_rows_with_step_mut","fixed_slice","fixed_slice_mut","fixed_slice_with_steps","fixed_slice_with_steps_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice_generic","from_column_slice_generic","from_columns","from_columns","from_complex","from_complex_and_get","from_cos_sin_unchecked","from_data","from_data_statically_unchecked","from_diagonal","from_diagonal","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element_generic","from_diagonal_element_generic","from_distribution","from_distribution","from_distribution","from_distribution","from_distribution","from_distribution","from_distribution","from_distribution","from_distribution_generic","from_distribution_generic","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element_generic","from_element_generic","from_euler_angles","from_euler_angles","from_euler_angles","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn_generic","from_fn_generic","from_homogeneous","from_homogeneous","from_isometry","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator_generic","from_iterator_generic","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal_generic","from_partial_diagonal_generic","from_parts","from_quaternion","from_raw_parts","from_raw_parts","from_ref_unchecked","from_rotation","from_rotation_matrix","from_rotation_matrix","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice_generic","from_row_slice_generic","from_rows","from_rows","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_uninitialized_data","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec_generic","from_vec_generic","full_piv_lu","ge","gemm","gemm_ad","gemm_tr","gemv","gemv","gemv_ad","gemv_ad","gemv_symm","gemv_symm","gemv_tr","gemv_tr","generic_slice","generic_slice_mut","generic_slice_with_steps","generic_slice_with_steps_mut","ger","ger_symm","gerc","get","get_mut","get_unchecked","get_unchecked_mut","gt","hash","hash","hash","hegemv","hegemv","hegerc","hermitian_part","hermitian_part","hessenberg","iamax","iamax","iamax_full","iamin","iamin","icamax","icamax","icamax_full","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity_generic","identity_generic","imax","imax","imin","imin","index","index","index","index_mut","index_mut","index_mut","indexing","inf","inf_sup","inlined_clone","inlined_clone","insert_column","insert_columns","insert_columns_generic_uninitialized","insert_fixed_columns","insert_fixed_rows","insert_row","insert_rows","insert_rows_generic_uninitialized","into","into","into","into","into","into","into","into","into","into","into_inner","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned_sum","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","is","is","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_empty","is_empty","is_identity","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_orthogonal","is_special_orthogonal","is_special_orthogonal","is_square","isometry_to","iter","iter","iter_mut","ith","ith","ith_axis","ith_axis","kronecker","le","len","len","lerp","lerp","lerp","lerp","ln","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","lower_triangle","lp_norm","lt","lu","magnitude","magnitude_squared","map","map_diagonal","map_diagonal","map_with_location","max","mean","mean_of","metric_distance","metric_distance","metric_distance","metric_distance","metric_distance","min","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_to","ncols","ne","ne","neg","neg","neg_mut","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_and_get","new_eps","new_nonuniform_scaling","new_nonuniform_scaling","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_normalize","new_observer_frame","new_observer_frame","new_observer_frames","new_orthographic","new_orthographic","new_perspective","new_perspective","new_random","new_random","new_random","new_random","new_random","new_random","new_random","new_random","new_random_generic","new_random_generic","new_rotation","new_rotation","new_rotation","new_rotation","new_rotation_wrt_point","new_rotation_wrt_point","new_scaling","new_scaling","new_translation","new_translation","new_unchecked","new_unchecked","new_unchecked","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized_generic","new_uninitialized_generic","new_with_strides_unchecked","new_with_strides_unchecked","nlerp","nlerp","norm","norm","norm","norm","norm","norm","norm_squared","norm_squared","normalize","normalize_mut","nrows","orthonormal_subspace_basis","orthonormal_subspace_basis","orthonormalize","orthonormalize","partial_cmp","perp","pow","pow_mut","powf","powf","prepend_nonuniform_scaling","prepend_nonuniform_scaling","prepend_nonuniform_scaling_mut","prepend_nonuniform_scaling_mut","prepend_scaling","prepend_scaling","prepend_scaling_mut","prepend_scaling_mut","prepend_translation","prepend_translation","prepend_translation_mut","prepend_translation_mut","pseudo_inverse","ptr","ptr","ptr","ptr","ptr","ptr_mut","ptr_mut","ptr_mut","ptr_mut","push","push","qr","quadform","quadform","quadform_tr","quadform_tr","quadform_tr_with_workspace","quadform_tr_with_workspace","quadform_with_workspace","quadform_with_workspace","quaternion","rank","relative_eq","relative_eq","relative_eq","remove_column","remove_columns","remove_columns_at","remove_columns_generic","remove_fixed_columns","remove_fixed_rows","remove_row","remove_rows","remove_rows_at","remove_rows_generic","renormalize","renormalize_fast","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat_generic","repeat_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","resize","resize","resize_generic","resize_horizontally","resize_horizontally_mut","resize_horizontally_mut","resize_mut","resize_mut","resize_vertically","resize_vertically_mut","resize_vertically_mut","rotation","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","row","row_iter","row_iter_mut","row_mean","row_mean_tr","row_mut","row_part","row_part_mut","row_sum","row_sum_tr","row_variance","row_variance_tr","rows","rows_generic","rows_generic_mut","rows_generic_with_step","rows_generic_with_step_mut","rows_mut","rows_range","rows_range_mut","rows_range_pair","rows_range_pair_mut","rows_with_step","rows_with_step_mut","scale","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","schur","sclerp","select_columns","select_rows","set_column","set_diagonal","set_magnitude","set_partial_diagonal","set_row","shape","shape","shape","shape","shape","shape","simd_cap_magnitude","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_normalize","simd_try_normalize_mut","sin_angle","singular_values","size","slerp","slerp","slerp","slerp","slerp","slice","slice_mut","slice_range","slice_range_mut","slice_with_steps","slice_with_steps_mut","solve_lower_triangular","solve_lower_triangular_mut","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular","solve_upper_triangular_mut","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked_mut","storage","strides","strides","strides","strides","strides","strides","sub","sub","sub_assign","sub_assign","sub_to","sum","sup","svd","swap","swap_columns","swap_rows","swap_unchecked","sygemv","sygemv","syger","symmetric_eigen","symmetric_eigenvalues","symmetric_part","symmetric_part","symmetric_tridiagonalize","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_owned","to_owned","to_owned","to_owned","to_owned","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","tr_copy_from","tr_dot","tr_mul","tr_mul_to","tr_solve_lower_triangular","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked_mut","trace","trace","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","transpose","transpose_mut","transpose_to","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse_mut","try_new","try_new_and_get","try_normalize","try_normalize_mut","try_schur","try_sclerp","try_set_magnitude","try_slerp","try_slerp","try_svd","try_symmetric_eigen","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udu","ulps_eq","ulps_eq","unscale","unscale_mut","unscale_mut","unwrap","upper_triangle","variance","vector_to_matrix_index","vget_unchecked","vget_unchecked","vget_unchecked_mut","vget_unchecked_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","w_axis","w_axis","x","x","x_axis","x_axis","xx","xx","xxx","xxx","xxy","xxy","xxz","xxz","xy","xy","xyx","xyx","xyy","xyy","xyz","xyz","xz","xz","xzx","xzx","xzy","xzy","xzz","xzz","y","y","y_axis","y_axis","yx","yx","yxx","yxx","yxy","yxy","yxz","yxz","yy","yy","yyx","yyx","yyy","yyy","yyz","yyz","yz","yz","yzx","yzx","yzy","yzy","yzz","yzz","z","z","z_axis","z_axis","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros_generic","zeros_generic","zip_apply","zip_fold","zip_map","zip_zip_apply","zip_zip_map","zx","zx","zxx","zxx","zxy","zxy","zxz","zxz","zy","zy","zyx","zyx","zyy","zyy","zyz","zyz","zz","zz","zzx","zzx","zzy","zzy","zzz","zzz","Allocator","Buffer","Reallocator","SameShapeAllocator","SameShapeC","SameShapeR","SameShapeVectorAllocator","allocate_from_iterator","allocate_uninitialized","reallocate_copy","AreMultipliable","DimEq","Representative","Representative","Representative","Representative","SameDimension","SameNumberOfColumns","SameNumberOfRows","ShapeConstraint","borrow","borrow_mut","from","from_subset","into","is_in_subset","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","IJKW","M2x2","M2x3","M2x4","M2x5","M2x6","M3x2","M3x3","M3x4","M3x5","M3x6","M4x2","M4x3","M4x4","M4x5","M4x6","M5x2","M5x3","M5x4","M5x5","M5x6","M6x2","M6x3","M6x4","M6x5","M6x6","X","XY","XYZ","XYZW","XYZWA","XYZWAB","a","a","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","j","k","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m15","m15","m15","m15","m15","m15","m15","m15","m15","m15","m16","m16","m16","m16","m16","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m25","m25","m25","m25","m25","m25","m25","m25","m25","m25","m26","m26","m26","m26","m26","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m35","m35","m35","m35","m35","m35","m35","m35","m36","m36","m36","m36","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m44","m44","m44","m44","m44","m44","m44","m44","m44","m45","m45","m45","m45","m45","m45","m46","m46","m46","m51","m51","m51","m51","m51","m51","m51","m51","m51","m51","m52","m52","m52","m52","m52","m52","m52","m52","m52","m52","m53","m53","m53","m53","m53","m53","m53","m53","m54","m54","m54","m54","m54","m54","m55","m55","m55","m55","m56","m56","m61","m61","m61","m61","m61","m62","m62","m62","m62","m62","m63","m63","m63","m63","m64","m64","m64","m65","m65","m66","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","w","w","x","x","x","x","x","x","y","y","y","y","y","z","z","z","z","DefaultAllocator","allocate_from_iterator","allocate_from_iterator","allocate_from_iterator","allocate_uninitialized","allocate_uninitialized","allocate_uninitialized","borrow","borrow_mut","from","from_subset","into","is_in_subset","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Const","Const","Dim","DimAdd","DimDiff","DimDiv","DimMax","DimMaximum","DimMin","DimMinimum","DimMul","DimName","DimNameAdd","DimNameDiff","DimNameDiv","DimNameMax","DimNameMaximum","DimNameMin","DimNameMinimum","DimNameMul","DimNameProd","DimNameQuot","DimNameSub","DimNameSum","DimProd","DimQuot","DimSub","DimSum","Dynamic","IsDynamic","IsNotStaticOne","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","ToConst","ToTypenum","Typenum","U0","U1","U10","U100","U101","U102","U103","U104","U105","U106","U107","U108","U109","U11","U110","U111","U112","U113","U114","U115","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U13","U14","U15","U16","U17","U18","U19","U2","U20","U21","U22","U23","U24","U25","U26","U27","U28","U29","U3","U30","U31","U32","U33","U34","U35","U36","U37","U38","U39","U4","U40","U41","U42","U43","U44","U45","U46","U47","U48","U49","U5","U50","U51","U52","U53","U54","U55","U56","U57","U58","U59","U6","U60","U61","U62","U63","U64","U65","U66","U67","U68","U69","U7","U70","U71","U72","U73","U74","U75","U76","U77","U78","U79","U8","U80","U81","U82","U83","U84","U85","U86","U87","U88","U89","U9","U90","U91","U92","U93","U94","U95","U96","U97","U98","U99","USIZE","add","add","add","add","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dim","dim","div","div","div","div","div","div","eq","eq","fmt","fmt","from","from","from_subset","from_subset","from_usize","from_usize","from_usize","hash","into","into","is","is_in_subset","is_in_subset","max","max","max","max","max","max","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","name","name","ne","new","sub","sub","sub","sub","sub","sub","sub","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","try_to_usize","try_to_usize","try_to_usize","type_id","type_id","value","value","value","vzip","vzip","MatrixIndex","MatrixIndexMut","Output","OutputMut","ColumnIter","ColumnIterMut","MatrixIter","MatrixIterMut","RowIter","RowIterMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count","count","count","count","count","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","CStride","CStride","ContiguousStorage","ContiguousStorageMut","Output","Owned","RStride","RStride","ReshapableStorage","SameShapeStorage","Storage","StorageMut","as_mut_slice","as_slice","clone_owned","get_address_unchecked","get_address_unchecked_linear","get_address_unchecked_linear_mut","get_address_unchecked_mut","get_unchecked","get_unchecked_linear","get_unchecked_linear_mut","get_unchecked_mut","into_owned","is_contiguous","linear_index","ptr","ptr_mut","reshape_generic","shape","strides","swap_unchecked","swap_unchecked_linear","AbstractRotation","Affine2","Affine3","DualQuaternion","Isometry","Isometry2","Isometry3","IsometryMatrix2","IsometryMatrix3","Orthographic3","Perspective3","Point","Point1","Point2","Point3","Point4","Point5","Point6","Projective2","Projective3","Quaternion","Reflection","Representative","Rotation","Rotation2","Rotation3","Similarity","Similarity2","Similarity3","SimilarityMatrix2","SimilarityMatrix3","SubTCategoryOf","SuperTCategoryOf","TAffine","TCategory","TCategoryMul","TGeneral","TProjective","Transform","Transform2","Transform3","Translation","Translation1","Translation2","Translation3","Translation4","Translation5","Translation6","UnitComplex","UnitDualQuaternion","UnitQuaternion","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","acos","acosh","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","angle","angle","angle","angle","angle","angle_to","angle_to","angle_to","angle_to","angle_to","angle_to","append_axisangle_linearized","append_rotation_mut","append_rotation_mut","append_rotation_wrt_center_mut","append_rotation_wrt_center_mut","append_rotation_wrt_point_mut","append_rotation_wrt_point_mut","append_scaling","append_scaling_mut","append_translation_mut","append_translation_mut","apply","as_matrix","as_matrix","as_mut","as_projective","as_projective","as_ref","as_vector","as_vector_mut","asin","asinh","aspect","atan","atanh","axis","axis","axis","axis","axis_angle","axis_angle","axis_angle","axis_angle","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","complex","conjugate","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","coords","coords","cos","cos_angle","cosh","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dual","dual_quaternion","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","euler_angles","euler_angles","euler_angles","exp","exp","exp_eps","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fovy","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_complex","from_complex_and_get","from_coordinates","from_cos_sin_unchecked","from_euler_angles","from_euler_angles","from_euler_angles","from_fov","from_homogeneous","from_imag","from_isometry","from_isometry","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_parts","from_parts","from_parts","from_parts","from_polar_decomposition","from_quaternion","from_real","from_real","from_real_and_dual","from_rotation","from_rotation_matrix","from_rotation_matrix","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_scaling","from_slice","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_vector","from_vector","ge","get_unchecked","get_unchecked_mut","gt","half","has_normalizer","has_normalizer","has_normalizer","hash","hash","hash","hash","hash","hash","hash","hash","hash","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","imag","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","inf","inf_sup","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_owned","inv_mul","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_pure","is_zero","is_zero","isometry","isometry_to","iter","iter_mut","lanes","lanes","lanes","lanes","lanes","lanes","lanes","le","left","left_div","len","lerp","lerp","lerp","lerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","ln","ln","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","lt","magnitude","magnitude_squared","map","matrix","matrix","matrix_mut","matrix_mut","matrix_mut_unchecked","matrix_mut_unchecked","max_value","mean_of","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_containing_point","new_eps","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","new_uninitialized","nlerp","nlerp","norm","norm","norm","norm_squared","norm_squared","norm_squared","normalize","normalize","normalize_mut","normalize_mut","one","one","one","one","one","one","one","origin","outer","partial_cmp","polar_decomposition","powf","powf","powf","powf","powf","powf","powf","prepend_scaling","prepend_scaling_mut","project","project_point","project_point","project_vector","project_vector","pure","quaternion","real","reflect","reflect_rows","reflect_rows_with_sign","reflect_with_sign","reject","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","renormalize","renormalize","renormalize","renormalize","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","right","right_div","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_wrt_point","rotation_wrt_point","scalar","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","scaling","sclerp","select","select","select","select","select","select","select","set_aspect","set_bottom","set_bottom_and_top","set_category","set_fovy","set_left","set_left_and_right","set_right","set_scaling","set_top","set_zfar","set_zfar","set_znear","set_znear","set_znear_and_zfar","set_znear_and_zfar","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_inverse","sin","sin_angle","sinh","slerp","slerp","slerp","slerp","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","sqrt","squared","stride","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sup","swap_unchecked","tan","tanh","to_euler_angles","to_euler_angles","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_projective","to_projective","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","top","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","translation","translation","translation","translation","translation","translation","translation","translation","translation","transpose","transpose_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","try_inverse_mut","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_sclerp","try_slerp","try_slerp","try_slerp","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","unproject_point","unproject_point","unscale_mut","unscale_mut","unwrap","unwrap","unwrap","unwrap","vector","vector","vector_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","xx","xxx","xxy","xxz","xy","xyx","xyy","xyz","xz","xzx","xzy","xzz","yx","yxx","yxy","yxz","yy","yyx","yyy","yyz","yz","yzx","yzy","yzz","zero","zero","zfar","zfar","znear","znear","zx","zxx","zxy","zxz","zy","zyx","zyy","zyz","zz","zzx","zzy","zzz","Bidiagonal","Cholesky","ColPivQR","FullPivLU","Hessenberg","LU","PermutationSequence","QR","SVD","Schur","SymmetricEigen","SymmetricTridiagonal","UDU","append_permutation","balancing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complex_eigenvalues","d","d","d_matrix","determinant","determinant","determinant","determinant","determinant","diagonal","diagonal","eigenvalues","eigenvalues","eigenvectors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","givens","h","householder","identity","identity","identity_generic","insert_column","into","into","into","into","into","into","into","into","into","into","into","into","into","inv_permute_columns","inv_permute_rows","inverse","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_invertible","is_invertible","is_upper_diagonal","l","l","l","l_dirty","l_unpack","len","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_with_workspace","off_diagonal","off_diagonal","p","p","p","permute_columns","permute_rows","pseudo_inverse","q","q","q","q","q","q_tr_mul","q_tr_mul","r","r","rank","rank_one_update","recompose","recompose","recompose","remove_column","singular_values","solve","solve","solve","solve","solve","solve","solve_mut","solve_mut","solve_mut","solve_mut","solve_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse","try_inverse_to","try_invert_to","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u","u","u","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack_dirty","unpack_h","unpack_r","unpack_r","unpack_tridiagonal","v_t","v_t","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wilkinson_shift","balance_parlett_reinsch","unbalance","convolve_full","convolve_same","convolve_valid","determinant","exp","GivensRotation","borrow","borrow_mut","c","cancel_x","cancel_y","clone","clone_into","fmt","from","from_subset","identity","into","inverse","is_in_subset","new","new_unchecked","rotate","rotate_rows","s","to_owned","to_subset","to_subset_unchecked","try_from","try_into","try_new","type_id","vzip","try_inverse","try_inverse_mut","complex_eigenvalues","eigenvalues","ad_solve_lower_triangular","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked_mut","solve_lower_triangular","solve_lower_triangular_mut","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular","solve_upper_triangular_mut","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked_mut","tr_solve_lower_triangular","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked_mut","symmetric_eigenvalues"],"q":["nalgebranalgebra::basenalgebra::base::allocator","","","","","","","","","","nalgebra::base::constraint","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::default_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimensionnalgebra::base::indexing","","","","nalgebra::base::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometrynalgebra::linalgnalgebra::linalg::balancing","","nalgebra::linalg::convolution","","","nalgebra::linalg::determinant","nalgebra::linalg::exp","nalgebra::linalg::givens","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::linalg::inverse","","nalgebra::linalg::schur","","nalgebra::linalg::solve","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::linalg::symmetric_eigen"],"d":["Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>…","A complex number in Cartesian form.","Trait shared by all complex fields and its subfields …","The type of the elements of each lane of this SIMD value.","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD …","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","Base trait for every SIMD types.","The absolute value of <code>a</code>.","The absolute value of this complex number: …","","","","","","Computes the principal value of the inverse cosine of <code>self</code>…","","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","Are all vector lanes true?","Lane-wise bitwise and of the vector elements.","Is any vector lane true?","The argument of this complex number.","","","","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine …","","Computes the principal value of the inverse tangent of …","","","Computes the principal value of inverse hyperbolic …","[Reexported at the root of this crate.] Data structures …","A bit mask representing the boolean state of each lanes …","","","","","","","The center of two points.","Returns a reference to the input value clamped to the …","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","Converts an object from one type to an equivalent or more …","Converts an object from one type to an equivalent or more …","Use with care! Same as <code>try_convert</code> but without any …","Use with care! Same as <code>try_convert</code> but without any …","Copies the sign of <code>self</code> to <code>to</code>.","","Computes the cosine of <code>self</code>.","Cardinal cos","","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","The distance between two points.","The squared distance between two points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","Extracts the i-th lane of <code>self</code>.","","","","","Extracts the i-th lane of <code>self</code> without bound-checking.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","","Builds a pure-real complex number from the given value.","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","[Reexported at the root of this crate.] Data structures …","","Computes (self.conjugate() * self + other.conjugate() * …","","Returns imaginary unit","","","Merges the value of <code>if_value()</code> and <code>else_value()</code> depending …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Imaginary portion of the complex number","The imaginary part of this complex number.","","Returns the infimum of <code>a</code> and <code>b</code>.","Returns simultaneously the infimum and supremum of <code>a</code> and <code>b</code>…","","","","","Returns <code>1/self</code>","","","","","","","","","Indicates if <code>try_convert</code> will succeed without actually …","","","Checks if the given complex number is finite","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","Is the sign of this real number negative?","Is the sign of this real number positive?","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","The number of lanes of this SIMD value.","","","","","[Reexported at the root of this crate.] Factorization of …","","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","Returns the logarithm of <code>self</code> with respect to an …","","","","","","","Applies a function to each lane of <code>self</code>.","Same as <code>cmp::max</code>.","","","Same as <code>cmp::min</code>.","","","The modulus of this complex number.","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new Complex","Are all vector lanes false?","","","The sum of the absolute value of this complex number’s …","","Returns the square of the norm (since <code>T</code> doesn’t …","","","Gets the multiplicative identity element.","","","","","","Lane-wise bitwise or of the vector elements.","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","Compare <code>a</code> and <code>b</code> using a partial ordering relation.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a >= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a > b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a <= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a < b</code>.","Return the maximum of <code>a</code> and <code>b</code> if they are comparable.","Return the minimum of <code>a</code> and <code>b</code> if they are comparable.","Sorts two values in increasing order using a partial …","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","","","","","Real portion of the complex number","The real part of this complex number.","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","","","","Multiplies this complex number by <code>factor</code>.","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","","","","The exponential part of this complex number: …","The absolute value of this complex number: …","","","","","","","","","","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","The argument of this complex number.","","","","","","","","","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","","","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane …","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Cardinal cos","","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>>=</code> comparison.","Lanewise <em>greater than</em> <code>></code> comparison.","The max value among all lanes of <code>self</code>.","The min value among all lanes of <code>self</code>.","Computes the product of all the lanes of <code>self</code>.","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","The imaginary part of this complex number.","","","","","","","","","Lanewise <em>less or equal</em> <code><=</code> comparison.","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","","","","","","","","Returns the logarithm of <code>self</code> with respect to an …","","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code><</code> comparison.","Lanewise max value.","Lanewise min value.","The modulus of this complex number.","","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","The sum of the absolute value of this complex number’s …","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","","The exponential part of this complex number: …","","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","","","","","","","","","","Cardinal sine","","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","","","","","","","","","","","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","","","Computes the sine of <code>self</code>.","","","Cardinal sine","","Computes the hyperbolic sine of <code>self</code>.","","","","Initializes an SIMD value with each lanes set to <code>val</code>.","","","","","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","Example","","Example","","","Returns the supremum of <code>a</code> and <code>b</code>.","","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","","","","","","","","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to convert an object to a more specific one.","Attempts to convert an object to a more specific one.","","","","","","","","","","When “no_unsound_assume_init” is enabled, expands to …","Divides this complex number by <code>factor</code>.","","Divides <code>self</code> by the scalar <code>t</code>.","","","","Wraps <code>val</code> into the range <code>[min, max]</code> using modular …","Lane-wise bitwise xor of the vector elements.","Gets the additive identity element.","","","Applies a function to each lane of <code>self</code> paired with the …","","","A array-based statically sized matrix data storage.","A dynamically sized column-major matrix.","A column-major matrix slice dynamic numbers of rows and …","A column-major matrix slice dynamic numbers of rows and …","A dynamically sized column vector.","A column vector slice dynamic numbers of rows and columns.","A column vector slice dynamic numbers of rows and columns.","Euclidean norm.","Lp norm.","The most generic column-major matrix (and vector) type.","A stack-allocated, column-major, 1x1 square matrix.","A stack-allocated, column-major, 1x2 matrix.","A stack-allocated, column-major, 1x3 matrix.","A stack-allocated, column-major, 1x4 matrix.","A stack-allocated, column-major, 1x5 matrix.","A stack-allocated, column-major, 1x6 matrix.","A heap-allocated, row-major, matrix with 1 rows and a …","A stack-allocated, column-major, 2x2 square matrix.","A stack-allocated, column-major, 2x1 matrix.","A stack-allocated, column-major, 2x3 matrix.","A stack-allocated, column-major, 2x4 matrix.","A stack-allocated, column-major, 2x5 matrix.","A stack-allocated, column-major, 2x6 matrix.","A heap-allocated, row-major, matrix with 2 rows and a …","A stack-allocated, column-major, 3x3 square matrix.","A stack-allocated, column-major, 3x1 matrix.","A stack-allocated, column-major, 3x2 matrix.","A stack-allocated, column-major, 3x4 matrix.","A stack-allocated, column-major, 3x5 matrix.","A stack-allocated, column-major, 3x6 matrix.","A heap-allocated, row-major, matrix with 3 rows and a …","A stack-allocated, column-major, 4x4 square matrix.","A stack-allocated, column-major, 4x1 matrix.","A stack-allocated, column-major, 4x2 matrix.","A stack-allocated, column-major, 4x3 matrix.","A stack-allocated, column-major, 4x5 matrix.","A stack-allocated, column-major, 4x6 matrix.","A heap-allocated, row-major, matrix with 4 rows and a …","A stack-allocated, column-major, 5x5 square matrix.","A stack-allocated, column-major, 5x1 matrix.","A stack-allocated, column-major, 5x2 matrix.","A stack-allocated, column-major, 5x3 matrix.","A stack-allocated, column-major, 5x4 matrix.","A stack-allocated, column-major, 5x6 matrix.","A heap-allocated, row-major, matrix with 5 rows and a …","A stack-allocated, column-major, 6x6 square matrix.","A stack-allocated, column-major, 6x1 matrix.","A stack-allocated, column-major, 6x2 matrix.","A stack-allocated, column-major, 6x3 matrix.","A stack-allocated, column-major, 6x4 matrix.","A stack-allocated, column-major, 6x5 matrix.","A heap-allocated, row-major, matrix with 6 rows and a …","The type of the result of a matrix cross product.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned matrix column-major matrix with <code>D</code> columns.","A matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A mutable matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A column-major matrix slice with <code>R</code> rows and <code>C</code> columns.","A column-major matrix slice with <code>D</code> rows and columns.","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","The type of the result of a matrix sum.","Renamed to [VecStorage].","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A trait for abstract matrix norms.","The type of the norm.","Trait implemented by entities scan be be normalized and …","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned D-dimensional column vector.","A dynamically sized row vector.","An owned D-dimensional row vector.","A statically sized D-dimensional row vector.","A matrix with one row and <code>D</code> columns .","A stack-allocated, 1-dimensional row vector.","A stack-allocated, 2-dimensional row vector.","A stack-allocated, 3-dimensional row vector.","A stack-allocated, 4-dimensional row vector.","A stack-allocated, 5-dimensional row vector.","A stack-allocated, 6-dimensional row vector.","A statically sized column-major matrix with <code>R</code> rows and <code>C</code> …","A column-major matrix slice with dimensions known at …","A column-major matrix slice with dimensions known at …","A statically sized D-dimensional column vector.","A column vector slice with dimensions known at …","A column vector slice with dimensions known at …","The basic scalar type for all structures of <code>nalgebra</code>.","Type of the range size. May be a type-level integer.","A range with a size that may be known at compile-time.","A matrix data storage for a matrix slice. Only contains …","A mutable matrix data storage for mutable matrix slice. …","A square matrix.","L-infinite norm aka. Chebytchev norm aka. uniform norm …","A wrapper that ensures the underlying algebraic entity …","A stack-allocated, 1-dimensional unit vector.","A stack-allocated, 2-dimensional unit vector.","A stack-allocated, 3-dimensional unit vector.","A stack-allocated, 4-dimensional unit vector.","A stack-allocated, 5-dimensional unit vector.","A stack-allocated, 6-dimensional unit vector.","A Vec-based matrix data storage. It may be …","A matrix with one column and <code>D</code> rows.","A stack-allocated, 1-dimensional column vector.","A stack-allocated, 2-dimensional column vector.","A stack-allocated, 3-dimensional column vector.","A stack-allocated, 4-dimensional column vector.","A stack-allocated, 5-dimensional column vector.","A stack-allocated, 6-dimensional column vector.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","The type of the result of a matrix sum.","The column vector with a 1 as its fifth component, and …","The column vector with a 1 as its fifth component, and …","The unit column vector with a 1 as its fifth component, …","The unit column vector with a 1 as its fifth component, …","Computes the component-wise absolute value.","","","Equivalent to <code>self.adjoint() * rhs</code>.","Equivalent to <code>self.adjoint() * rhs</code> but stores the result …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","","","","","Adds a scalar to <code>self</code>.","Adds a scalar to <code>self</code> in-place.","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> …","The adjoint (aka. conjugate-transpose) of <code>self</code>.","Sets <code>self</code> to its adjoint (aka. conjugate-transpose).","Takes the adjoint (aka. conjugate-transpose) of <code>self</code> and …","Abstract definition of a matrix data storage allocator.","Returns the absolute value of the component with the …","Returns the absolute value of the component with the …","The smallest angle between two vectors.","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by an …","Computes the transformation equal to <code>self</code> followed by an …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Replaces each component of <code>self</code> by the result of a …","Returns <code>self</code> with each of its components replaced by the …","Uses the metric induced by the given <code>norm</code> to compute the …","Uses the given <code>norm</code> to compute the norm of <code>self</code>.","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable pointer to the start of the matrix.","","Extracts a mutable slice containing the entire matrix …","","","","Returns a mutable reference to the underlying value. This …","Returns a pointer to the start of the matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a slice containing the entire matrix entries …","","","","","The underlying data storage.","The underlying mutable data storage.","Computes <code>self = a * x * c + b * self</code>.","Computes <code>self = a * x * c + b * self</code>.","The rotation axis of this unit quaternion or <code>None</code> if the …","The rotation axis and angle in ]0, pi] of this unit …","The rotation axis and angle in ]0, pi] of this complex …","Computes <code>self = a * x + b * self</code>.","Computes <code>self = a * x + b * self</code>.","The column vector with a 1 as its sixth component, and …","The column vector with a 1 as its sixth component, and …","The unit column vector with a 1 as its sixth component, …","The unit column vector with a 1 as its sixth component, …","The start index of the range.","Computes the bidiagonalization using householder …","","","","","","","","","","","","","","","","","","","Returns the the 1-norm of the complex component with the …","Returns the the 1-norm of the complex component with the …","Returns a new vector with the same magnitude as <code>self</code> …","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Computes componentwise …","Attempts to compute the Cholesky decomposition of this …","","","","","","","","","","","","Clones this matrix to one that owns its data.","","","","","Clones this matrix into one that owns its data. The …","Computes componentwise …","Computes the QR decomposition (with column pivoting) of …","Returns a slice containing the i-th column of this matrix.","Iterate through the columns of this matrix.","Mutably iterates through this matrix columns.","The mean of all the columns of this matrix.","Returns a slice containing the i-th column of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Returns a slice containing the <code>n</code> first elements of the …","The sum of all the columns of this matrix.","The variance of all the columns of this matrix.","Extracts from this matrix a set of consecutive columns.","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix a set of consecutive columns.","Slice containing all the columns indexed by the range <code>rows</code>…","Slice containing all the columns indexed by the range <code>cols</code>…","Splits this NxM matrix into two parts delimited by two …","Splits this NxM matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive columns …","Extracts from this matrix a set of consecutive columns …","The underlying complex number.","Computes the eigenvalues of this matrix.","Componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Returns a column vector resulting from the folding of <code>f</code> …","Returns a row vector where each element is the result of …","Returns a column vector where each element is the result …","The conjugate of <code>self</code>.","Compute the conjugate of this unit complex number.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","The conjugate of the complex matrix <code>self</code> computed …","Compute in-place the conjugate of this unit complex …","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Sets <code>self</code> to its adjoint.","The conjugate transposition of <code>self</code>.","Takes the conjugate and transposes <code>self</code> and store the …","Compatibility constraints between matrix shapes, e.g., …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Structures to which matrices and vector can be …","Fills this matrix with the content of another one. Both …","Fills this matrix with the content of a slice. Both must …","The cosine of the rotation angle.","The 3D cross product between two vectors.","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","The data storage that contains all the matrix components. …","","","The default matrix data storage allocator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the matrix determinant.","The diagonal of this matrix.","The diagonal of this matrix.","Traits and tags for identifying the dimension of all …","","","","","The dot product between two vectors or matrices (seen as …","The conjugate-linear dot product between two vectors or …","The underlying dual quaternion.","Computes the eigenvalues of this matrix.","The index immediately after the last index inside of the …","","","Tests whether <code>self</code> and <code>rhs</code> are exactly equal.","","","Retrieves the euler angles corresponding to this unit …","Computes exponential of this matrix","Compute the exponential of a quaternion.","Extends the number of columns of a <code>Matrix</code> with <code>Vector</code>s …","Extend the number of rows of a <code>Vector</code> with elements from …","Extend the number of columns of the <code>Matrix</code> with elements …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of rows of the <code>VecStorage</code> with elements…","Creates an isometry that corresponds to the local frame …","Creates an isometry that corresponds to the local frame …","Creates an unit quaternion that corresponds to the local …","Sets all the elements of this matrix to <code>val</code>.","Sets all the elements of the selected column to <code>val</code>.","Sets all the diagonal elements of this matrix to <code>val</code>.","Sets all the elements of the lower-triangular part of …","Copies the upper-triangle of this matrix to its …","Sets all the elements of the selected row to <code>val</code>.","Sets all the elements of the lower-triangular part of …","Copies the upper-triangle of this matrix to its …","Fills <code>self</code> with the identity matrix.","Extracts a compile-time number of consecutive columns …","Extracts a compile-time number of consecutive columns …","Extracts from this matrix a compile-time number of …","Extracts from this matrix a compile-time number of …","Resizes this matrix so that it contains <code>R2::value()</code> rows …","Extracts a compile-time number of consecutive rows from …","Extracts a compile-time number of consecutive rows from …","Extracts from this matrix a compile-time number of rows …","Extracts from this matrix a compile-time number of rows …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","","","","","","","","","","","","","","","Folds a function <code>f</code> on each entry of <code>self</code>.","Similar to <code>self.iter().fold(init, f)</code> except that <code>init</code> is …","","","","","","","","","","","","","","","","","","","","Builds the unit complex number corresponding to the …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new quaternion from a unit vector (the rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its columns.","Builds a new matrix from its columns.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Builds the unit complex number from the sinus and cosinus …","Creates a new matrix with the given data.","Creates a new matrix with the given data without …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix with its diagonal filled with copies …","Creates a new matrix with its diagonal filled with copies …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix or vector filled with random values from …","Creates a matrix filled with random values from the given …","Creates a matrix filled with random values from the given …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","Creates a new rotation from Euler angles.","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix filled with the results of a function …","Creates a matrix filled with the results of a function …","Constructs a vector from coordinates in projective space, …","Constructs a vector from coordinates in projective space, …","Return a unit dual quaternion representing the …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix with all its elements filled by an …","Creates a matrix with all its elements filled by an …","Builds an unit complex by extracting the rotation part of …","Builds an unit quaternion by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Return a dual quaternion representing the translation and …","Creates a new unit quaternion from a quaternion.","Create a new matrix slice without bound checking and from …","Create a new matrix slice without bound checking and from …","Wraps the given reference, assuming it is already …","Creates a dual quaternion from a unit quaternion rotation.","Builds the unit complex number from the corresponding 2D …","Builds an unit quaternion from a rotation matrix.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its rows.","Builds a new matrix from its rows.","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a unit complex rotation from an angle in radian …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new mutable matrix slice from the given data …","Creates a new matrix slice from the given data array.","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a mutable matrix slice from an array and with …","Creates a matrix slice from an array and with dimensions …","Creates a mutable matrix slice from an array and with …","Creates a matrix slice from an array and with dimensions …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a mutable matrix slice from an array and with …","Creates a matrix slice from an array and with dimensions …","Creates a matrix slice from an array and with dimensions …","Creates a mutable matrix slice from an array and with …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound-checking, a matrix slice from an …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice with …","","","","","","","","","","Creates a new uninitialized matrix with the given …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Computes the LU decomposition with full pivoting of <code>matrix</code>…","","Computes <code>self = alpha * a * b + beta * self</code>, where …","Computes <code>self = alpha * a.adjoint() * b + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * b + beta * self</code>, …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>.","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>.","Produces a view of the data at the given index, or <code>None</code> …","Produces a mutable view of the data at the given index, or…","Produces a view of the data at the given index, without …","Returns a mutable view of the data at the given index, …","","","","","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>, …","The hermitian part of <code>self</code>, i.e., …","The hermitian part of <code>self</code>, i.e., …","Computes the Hessenberg decomposition of this matrix …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","The unit dual quaternion multiplicative identity, which …","The rotation identity.","The unit complex number multiplicative identity.","Creates a new identity matrix.","Creates a new identity matrix.","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","","Produces a view of the data at the given index, or panics …","","","","Produces a mutable view of the data at the given index, or…","Indexing","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two matrices/vectors.","Performance hack: Clone doesn’t get inlined for Copy …","Performance hack: Clone doesn’t get inlined for Copy …","Inserts a column filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> columns starting at the <code>i-th</code> …","Inserts <code>D</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>D::dim()</code> rows filled with <code>val</code> starting at the <code>i-th</code>…","Inserts a row filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> rows at the <code>i-th</code> place of this …","","","","","","","","","","","Retrieves the underlying value.","","Moves this matrix into one that owns its data.","","","","","Moves this matrix into one that owns its data. The actual …","Inverts this complex number if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts this quaternion if it is not zero.","Inverts this quaternion if it is not zero.","Inverts in-place this unit complex number.","Inverts this dual quaternion in place if it is not zero.","Rotate a point by the inverse of this unit quaternion. …","Rotate the given point by the inverse of this unit …","Rotate and translate a point by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Rotate the given vector by the inverse of this unit …","Rotate a unit vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion, …","Rotate the given vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Tests if <code>Self</code> the same as the type <code>T</code>","Tests if <code>Self</code> the same as the type <code>T</code>","","","","","","Returns true if the matrix contains no elements.","Returns true if the underlying vector contains no …","Indicated if this is the identity matrix within a …","","","","","","","","","","Returns <code>true</code> if this matrix is invertible.","Returns <code>true</code> if this matrix is invertible.","Checks that <code>Mᵀ × M = Id</code>.","Checks that this matrix is orthogonal and has a …","Checks that this matrix is orthogonal and has a …","Indicates if this is a square matrix.","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Matrix iterators.","Iterates through this matrix coordinates in column-major …","Mutably iterates through this matrix coordinates.","The column vector with <code>val</code> as its i-th component.","The column vector with <code>val</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th …","The column unit vector with <code>T::one()</code> as its i-th …","The kronecker product of two matrices (aka. tensor …","","The total number of elements of this matrix.","The number of elements on the underlying vector.","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear …","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear …","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Extracts the lower triangular part of this matrix …","The Lp norm of this matrix.","","Computes the LU decomposition with partial (row) pivoting …","A synonym for the norm of this matrix.","A synonym for the squared norm of this matrix.","Returns a matrix containing the result of <code>f</code> applied to …","Apply the given function to this matrix’s diagonal and …","Apply the given function to this matrix’s diagonal and …","Returns a matrix containing the result of <code>f</code> applied to …","Returns the component with the largest value.","The mean of all the elements of this matrix.","Create the mean unit quaternion from a data structure …","Use the metric induced by this norm to compute the metric …","","","","Compute the distance between <code>self</code> and <code>rhs</code> using the …","Returns the component with the smallest value.","","","","","","","","","","","Equivalent to <code>self * rhs</code> but stores the result into <code>out</code> …","The number of columns of this matrix.","","","","","Negates <code>self</code> in-place.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Builds the unit complex number corresponding to the …","Creates a new unit quaternion rotation from a rotation …","Creates a new dynamic matrix data storage from the given …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Creates a new unit quaternion rotation from a rotation …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Deprecated: Use [Matrix4::face_towards] instead.","Deprecated: Use [Matrix4::face_towards] instead.","Deprecated: Use [UnitQuaternion::face_towards] instead.","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for a perspective …","Creates a new homogeneous matrix for a perspective …","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Creates a matrix filled with random values.","Builds a 2 dimensional homogeneous rotation matrix from …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 2 dimensional homogeneous rotation matrix from …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies a pure …","Creates a new homogeneous matrix that applies a pure …","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking.","Wraps the given value, assuming it is already normalized.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix. If the matrix has a …","Creates a new uninitialized matrix. If the matrix has a …","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","Apply this norm to the given matrix.","Computes the norm.","","","","The L2 norm of this matrix.","Computes the squared norm.","The squared L2 norm of this vector.","Returns a normalized version of this matrix.","Normalizes this matrix in-place and returns its norm.","The number of rows of this matrix.","Applies the given closure to each element of the …","Applies the given closure to each element of the …","Orthonormalizes the given family of vectors. The largest …","Orthonormalizes the given family of vectors. The largest …","","The perpendicular product between two 2D column vectors, …","Attempts to raise this matrix to an integral power <code>e</code>. If …","Attempts to raise this matrix to an integral power <code>e</code> …","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Computes the transformation equal to a non-uniform …","Computes the transformation equal to a non-uniform …","Computes in-place the transformation equal to a …","Computes in-place the transformation equal to a …","Computes the transformation equal to an uniform scaling …","Computes the transformation equal to an uniform scaling …","Computes in-place the transformation equal to an uniform …","Computes in-place the transformation equal to an uniform …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the pseudo-inverse of this matrix.","","","","","","","","","","Constructs a new vector of higher dimension by appending …","Constructs a new vector of higher dimension by appending …","Computes the QR decomposition of this matrix.","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","The underlying quaternion.","Computes the rank of this matrix.","","Tests whether <code>self</code> and <code>rhs</code> are equal up to a given …","","Removes the <code>i</code>-th column from this matrix.","Removes <code>n</code> consecutive columns from this matrix, starting …","Removes all columns in <code>indices</code>   ","Removes <code>nremove.value()</code> columns from this matrix, …","Removes <code>D::dim()</code> consecutive columns from this matrix, …","Removes <code>D::dim()</code> consecutive rows from this matrix, …","Removes the <code>i</code>-th row from this matrix.","Removes <code>n</code> consecutive rows from this matrix, starting …","Removes all rows in <code>indices</code>   ","Removes <code>nremove.value()</code> rows from this matrix, starting …","Normalizes this vector again. This is useful when …","Normalizes this vector again using a first-order Taylor …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","","Reshapes <code>self</code> such that it has dimensions …","","","","","Resizes this matrix so that it contains <code>new_nrows</code> rows …","Resizes the underlying mutable data storage and unwraps …","Resizes <code>self</code> such that it has dimensions …","Resizes this matrix horizontally, i.e., so that it …","Changes the number of column of this matrix in-place.","Changes the number of column of this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix vertically, i.e., so that it contains …","Changes the number of rows of this matrix in-place.","Changes the number of rows of this matrix in-place.","Return the rotation part of this unit dual quaternion.","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex number needed to make <code>self</code> and <code>other</code> …","The unit quaternion needed to make <code>self</code> and <code>other</code> …","Returns a slice containing the i-th row of this matrix.","Iterate through the rows of this matrix.","Mutably iterates through this matrix rows.","The mean of all the rows of this matrix.","The mean of all the rows of this matrix. The result is …","Returns a slice containing the i-th row of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Returns a slice containing the <code>n</code> first elements of the …","The sum of all the rows of this matrix.","The sum of all the rows of this matrix. The result is …","The variance of all the rows of this matrix.","The variance of all the rows of this matrix. The result …","Extracts from this matrix a set of consecutive rows.","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix a set of consecutive rows.","Slice containing all the rows indexed by the range <code>rows</code>.","Slice containing all the rows indexed by the range <code>rows</code>.","Splits this NxM matrix into two parts delimited by two …","Splits this NxM matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive rows …","Extracts from this matrix a set of consecutive rows …","Multiplies each component of the complex matrix <code>self</code> by …","Multiply <code>self</code> by n.","Multiplies each component of the complex matrix <code>self</code> by …","The rotation angle returned as a 1-dimensional vector.","The rotation axis of this unit quaternion multiplied by …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","Computes the Schur decomposition of a square matrix.","Screw linear interpolation between two unit quaternions. …","Creates a new matrix by extracting the given set of …","Creates a new matrix by extracting the given set of rows …","Fills the selected column of this matrix with the content …","Fills the diagonal of this matrix with the content of the …","Sets the magnitude of this vector.","Fills the diagonal of this matrix with the content of the …","Fills the selected row of this matrix with the content of …","","The shape of this matrix returned as the tuple (number of …","","","","","Returns a new vector with the same magnitude as <code>self</code> …","","","","","","","","","","","","Attempts to normalize <code>self</code>.","Normalizes this matrix in-place and return its norm.","The sine of the rotation angle.","Computes the singular values of this matrix.","The number of elements of the range, i.e., …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Spherical linear interpolation between two unit …","Spherical linear interpolation between two rotations …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices a sub-matrix containing the rows indexed by the …","Slices a mutable sub-matrix containing the rows indexed …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Abstract definition of a matrix data storage.","","The strides (row stride, column stride) of this matrix.","","","","","","","","","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> …","The sum of all the elements of this matrix.","Computes the supremum (aka. componentwise max) of two …","Computes the Singular Value Decomposition using implicit …","Swaps two entries.","Swaps two columns in-place.","Swaps two rows in-place.","Swaps two entries without bound-checking.","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes the eigendecomposition of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","The symmetric part of <code>self</code>, i.e., …","The symmetric part of <code>self</code>, i.e., …","Computes the tridiagonalization of this symmetric matrix.","Converts this unit quaternion into its equivalent Euler …","Computes the coordinates in projective space of this …","Computes the coordinates in projective space of this …","Yields the homogeneous matrix for this matrix, i.e., …","Converts this unit quaternion into its equivalent …","Converts this unit complex number into its equivalent …","Converts this unit dual quaternion interpreted as an …","Builds an isometry from this unit dual quaternion.","","","","","","Builds a rotation matrix from this unit quaternion.","Builds the rotation matrix corresponding to this unit …","","","","","","","","","","","","","","","","","","","","","Fills this matrix with the content of the transpose …","The dot product between the transpose of <code>self</code> and <code>rhs</code>.","Equivalent to <code>self.transpose() * rhs</code>.","Equivalent to <code>self.transpose() * rhs</code> but stores the …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes a trace of a square matrix, i.e., the sum of its …","Computes a trace of a square matrix, i.e., the sum of its …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Rotate a point by this unit quaternion.","Rotate and translate a point by this unit dual quaternion …","Rotate the given point by this unit complex number.","Transforms the given vector, assuming the matrix <code>self</code> …","Transforms the given vector, assuming the matrix <code>self</code> …","Rotate the given vector by this unit complex number.","Rotate a vector by this unit dual quaternion, ignoring …","Rotate a vector by this unit quaternion.","Return the translation part of this unit dual quaternion.","Transposes <code>self</code>.","Transposes the square matrix <code>self</code> in-place.","Transposes <code>self</code> and store the result into <code>out</code>.","","","","","","","","","","","","","","","","","","","Attempts to invert this matrix.","Attempts to invert this matrix in-place. Returns <code>false</code> …","Attempts to normalize the given vector and return it …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Returns a normalized version of this matrix unless its …","Normalizes this matrix in-place or does nothing if its …","Attempts to compute the Schur decomposition of a square …","Computes the screw-linear interpolation between two unit …","Sets the magnitude of this vector unless it is smaller …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","","","","","","","","","","Attempts to compute the UDU decomposition of this matrix.","","","Divides each component of the complex matrix <code>self</code> by the …","Divides <code>self</code> by n.","Divides each component of the complex matrix <code>self</code> by the …","Retrieves the underlying value. Deprecated: use […","Extracts the upper triangular part of this matrix …","The variance of all the elements of this matrix.","Computes the row and column coordinates of the i-th …","Gets a reference to the i-th element of this column …","Gets a reference to the i-th element of this column …","Gets a mutable reference to the i-th element of this …","Gets a mutable reference to the i-th element of this …","","","","","","","","","","The column vector with a 1 as its fourth component, and …","The column vector with a 1 as its fourth component, and …","The unit column vector with a 1 as its fourth component, …","The unit column vector with a 1 as its fourth component, …","The column vector with a 1 as its first component, and …","The column vector with a 1 as its first component, and …","The unit column vector with a 1 as its first component, …","The unit column vector with a 1 as its first component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its second component, and …","The column vector with a 1 as its second component, and …","The unit column vector with a 1 as its second component, …","The unit column vector with a 1 as its second component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its third component, and …","The column vector with a 1 as its third component, and …","The unit column vector with a 1 as its third component, …","The unit column vector with a 1 as its third component, …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix with all its elements set to 0.","Creates a matrix with all its elements set to 0.","Replaces each component of <code>self</code> by the result of a …","Folds a function <code>f</code> on each pairs of entries from <code>self</code> and …","Returns a matrix containing the result of <code>f</code> applied to …","Replaces each component of <code>self</code> by the result of a …","Returns a matrix containing the result of <code>f</code> applied to …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","A matrix allocator of a memory buffer that may contain …","The type of buffer this allocator can instanciate.","A matrix reallocator. Changes the size of the memory …","Restricts the given number of rows and columns to be …","The number of columns of the result of a componentwise …","The number of rows of the result of a componentwise …","Restricts the given number of rows to be equal.","Allocates a buffer initialized with the content of the …","Allocates a buffer with the given number of rows and …","Reallocates a buffer of shape <code>(RTo, CTo)</code>, possibly …","Constraints <code>C1</code> and <code>R2</code> to be equivalent.","Constraints <code>D1</code> and <code>D2</code> to be equivalent.","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints D1 and D2 to be equivalent, where they both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","A type used in <code>where</code> clauses for enforcing constraints.","","","","","","","","","","","","","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …n allocator based on <code>GenericArray</code> and <code>VecStorage</code> for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait implemented by any type that can be used as a …","","","","","","","","","Trait implemented exclusively by type-level integers.","","","","","","","","","","","","","","","","","Dim of dynamically-sized algebraic entities.","Trait implemented by <code>Dynamic</code>.","Trait implemented by <code>Dynamic</code> and type-level integers …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value of this dimension.","","","","","","","","","","","","","","","","Builds an instance of <code>Self</code> from a run-time value. Panics …","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of this dimension, i.e., the singleton <code>Self</code>.","","","A dynamic size equal to <code>value</code>.","","","","","","","","","","","","","","","","","","Gets the compile-time value of <code>Self</code>. Returns <code>None</code> if it …","","","","","Gets the run-time value of <code>self</code>. For type-level integers, …","","","","","A helper trait used for indexing operations.","A helper trait used for indexing operations.","The output type returned by methods.","The output type returned by methods.","An iterator through the columns of a matrix.","An iterator through the mutable columns of a matrix.","An iterator through a dense matrix with arbitrary strides …","An iterator through a dense matrix with arbitrary strides …","An iterator through the rows of a matrix.","An iterator through the mutable rows of a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new iterator for the given matrix storage.","Creates a new iterator for the given matrix storage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The column-stride of the owned data storage for a buffer …","The static stride of this storage’s columns.","A matrix storage that is stored contiguously in memory.","A mutable matrix storage that is stored contiguously in …","The reshaped storage type.","The owned data storage that can be allocated from <code>S</code>.","The row-stride of the owned data storage for a buffer of …","The static stride of this storage’s rows.","A matrix storage that can be reshaped in-place.","The data storage for the sum of two matrices with …","The trait shared by all matrix data storage.","Trait implemented by matrix data storage that can provide …","Retrieves the mutable data buffer as a contiguous slice.","Retrieves the data buffer as a contiguous slice.","Clones this data storage to one that does not contain any …","Gets the address of the i-th matrix component without …","Gets the address of the i-th matrix component without …","Gets the mutable address of the i-th matrix component …","Gets the mutable address of the i-th matrix component …","Retrieves a reference to the i-th element without …","Retrieves a reference to the i-th element without …","Retrieves a mutable reference to the i-th element without …","Retrieves a mutable reference to the element at …","Builds a matrix data storage that does not contain any …","Indicates whether this data buffer stores its elements …","Compute the index corresponding to the irow-th row and …","The matrix data pointer.","The matrix mutable data pointer.","Reshapes the storage into the output storage type.","The dimension of the matrix at run-time. Arr length of …","The spacing between consecutive row elements and …","Swaps two elements without bound-checking.","Swaps two elements using their linear index without …","Trait implemented by rotations that can be used inside of …","A 2D affine transformation. Stored as a homogeneous 3x3 …","A 3D affine transformation. Stored as a homogeneous 4x4 …","A dual quaternion.","A direct isometry, i.e., a rotation followed by a …","A 2-dimensional direct isometry using a unit complex …","A 3-dimensional direct isometry using a unit quaternion …","A 2-dimensional direct isometry using a rotation matrix …","A 3-dimensional direct isometry using a rotation matrix …","A 3D orthographic projection stored as a homogeneous 4x4 …","A 3D perspective projection stored as a homogeneous 4x4 …","A point in an euclidean space.","A statically sized 1-dimensional column point.","A statically sized 2-dimensional column point.","A statically sized 3-dimensional column point.","A statically sized 4-dimensional column point.","A statically sized 5-dimensional column point.","A statically sized 6-dimensional column point.","An invertible 2D general transformation. Stored as a …","An invertible 3D general transformation. Stored as a …","A quaternion. See the type alias …","A reflection wrt. a plane.","The transform category that results from the …","A rotation matrix.","A 2-dimensional rotation matrix.","A 3-dimensional rotation matrix.","A similarity, i.e., an uniform scaling, followed by a …","A 2-dimensional similarity.","A 3-dimensional similarity.","A 2-dimensional similarity using a rotation matrix for …","A 3-dimensional similarity using a rotation matrix for …","Indicates that <code>Self</code> is a more specific <code>Transform</code> category …","Indicates that <code>Self</code> is a more general <code>Transform</code> category …","Tag representing an affine <code>Transform</code>. Its bottom-row is …","Trait implemented by phantom types identifying the …","Traits that gives the <code>Transform</code> category that is …","Tag representing the most general (not necessarily …","Tag representing the most general inversible <code>Transform</code> …","A transformation matrix in homogeneous coordinates.","A 2D general transformation that may not be invertible. …","A 3D general transformation that may not be inversible. …","A translation.","A 1-dimensional translation.","A 2-dimensional translation.","A 3-dimensional translation.","A 4-dimensional translation.","A 5-dimensional translation.","A 6-dimensional translation.","A 2D rotation represented as a complex number with …","A unit quaternions. May be used to represent a rotation …","A unit quaternions. May be used to represent a rotation.","","","","","","","","","Calculates the quaternionic arccosinus.","Calculates the hyperbolic quaternionic arccosinus.","","","","","","","","","","","","","The rotation angle.","The rotation angle in [0; pi].","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle.","The rotation angle in [0; pi].","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Appends to <code>self</code> the given rotation in-place.","Appends to <code>self</code> the given rotation in-place.","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Appends to <code>self</code> the given translation in-place.","Appends to <code>self</code> the given translation in-place.","Replaces each component of <code>self</code> by the result of a …","A reference to the underlying homogeneous transformation …","A reference to the underlying homogeneous transformation …","","A reference to this transformation seen as a <code>Projective3</code>.","A reference to this transformation seen as a <code>Projective3</code>.","","Reinterprets this quaternion as a 4D vector.","Transforms this quaternion into its 4D vector form …","Calculates the quaternionic arcsinus.","Calculates the hyperbolic quaternionic arcsinus.","Gets the <code>width / height</code> aspect ratio of the view frustum.","Calculates the quaternionic arctangent.","Calculates the hyperbolic quaternionic arctangent.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis of this unit quaternion or <code>None</code> if the …","The reflexion axis.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis and angle in ]0, pi] of this unit …","The rotation axis and angle in ]0, pi] of this unit …","The rotation axis and angle in ]0, pi] of this complex …","The rotation axis and angle in ]0, pi] of this unit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bottom offset of the view cuboid.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Checks that the given matrix is a valid homogeneous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones this unit quaternion into one that owns its data.","Clones this transform into one that owns its data.","The underlying complex number.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit complex number.","The conjugate of this quaternion.","The conjugate of this dual quaternion, containing the …","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex …","Replaces this quaternion by its conjugate.","Replaces this quaternion by its conjugate.","The coordinates of this point, i.e., the shift from the …","This quaternion as a 4D vector of coordinates in the …","Calculates the quaternionic cosinus.","The cosine of the rotation angle.","Calculates the hyperbolic quaternionic cosinus.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dot product of two quaternions.","The dual component of the quaternion","The underlying dual quaternion.","","","","","","","","","","","","","","Euler angles corresponding to this rotation from a …","Retrieves the euler angles corresponding to this unit …","Euler angles corresponding to this rotation from a …","Compute the exponential of a quaternion.","Compute the exponential of a quaternion.","Compute the exponential of a quaternion. Returns the …","","","","","","","","","","","","","","","Creates a rotation that corresponds to the local frame of …","Creates an unit quaternion that corresponds to the local …","Creates an isometry that corresponds to the local frame …","Creates an isometry that corresponds to the local frame …","Creates a rotation that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame …","Creates an isometry that corresponds to the local frame …","Creates an similarity that corresponds to a scaling …","Creates an similarity that corresponds to a scaling …","","","","","","","","","","","","","","","","","","","","Gets the y field of view of the view frustum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds the unit complex number corresponding to the …","Builds a 3D rotation matrix from an axis and a rotation …","Creates a new quaternion from a unit vector (the rotation …","Builds a 3D rotation matrix from an axis and a rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Creates a new point with the given coordinates.","Builds the unit complex number from the sinus and cosinus …","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a new rotation from Euler angles.","Creates a new orthographic projection matrix from an …","Creates a new point from its homogeneous vector …","Constructs a pure quaternion.","Return a unit dual quaternion representing the …","Creates a new similarity from its rotational and …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Wraps the given matrix to interpret it as a 3D …","Wraps the given matrix to interpret it as a 3D …","Creates a new rotation from the given square matrix.","Creates a new transformation from the given homogeneous …","Return a dual quaternion representing the translation and …","Creates a new quaternion from its scalar and vector …","Creates a new isometry from its rotational and …","Creates a new similarity from its rotational and …","Creates a new quaternion from its polar decomposition.","Creates a new unit quaternion from a quaternion.","Constructs a real quaternion.","Creates a dual quaternion from only its real part, with …","Creates a dual quaternion from its rotation and …","Creates a dual quaternion from a unit quaternion rotation.","Builds an unit quaternion from a rotation matrix.","Builds the unit complex number from the corresponding 2D …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Creates a new similarity that applies only a scaling …","Creates a new point from a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a quaternion from a 4D vector. The quaternion …","Creates a new translation from the given vector.","","Gets a reference to i-th element of this point without …","Gets a mutable reference to i-th element of this point …","","Divides quaternion into two.","Indicates whether a <code>Transform</code> with the category <code>Self</code> has …","Indicates whether a <code>Transform</code> with the category <code>Self</code> has …","","","","","","","","","","","The rotation identity.","The rotation identity.","The unit dual quaternion multiplicative identity, which …","The unit complex number multiplicative identity.","Creates a new square identity rotation of the given …","","The quaternion multiplicative identity.","The dual quaternion multiplicative identity.","Creates a new identity translation.","Creates a new identity isometry.","Creates a new identity similarity.","Creates a new identity transform.","The imaginary part of this quaternion.","","","","","","","","","","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two points.","Calculates the inner product (also known as the dot …","","","","","","","","","","","","","","","","","Retrieves the underlying homogeneous matrix.","Retrieves the underlying homogeneous matrix.","Unwraps the underlying matrix.","Retrieves the underlying matrix.","Moves this unit quaternion into one that owns its data.","Computes <code>self.inverse() * rhs</code> in a more efficient way.","The rotation inverse.","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts this complex number if it is not zero.","Retrieves the inverse of the underlying homogeneous …","Retrieves the inverse of the underlying homogeneous …","Inverts <code>self</code>.","","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts this transformation. Use <code>.try_inverse</code> if this …","Change <code>self</code> to its inverse.","Inverts this quaternion if it is not zero.","Inverts this dual quaternion in place if it is not zero.","Inverts in-place this unit complex number.","Inverts <code>self</code> in-place.","","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts this transformation in-place. Use <code>.try_inverse_mut</code>…","Apply the inverse rotation to the given point.","Rotate a point by the inverse of this unit quaternion. …","Rotate and translate a point by the inverse of this unit …","Rotate the given point by the inverse of this unit …","","Rotate the given point by the inverse of this rotation. …","Translate the given point by the inverse of this …","Transform the given point by the inverse of this …","Transform the given point by the inverse of this …","Transform the given point by the inverse of this …","Apply the inverse rotation to the given unit vector.","Apply the inverse rotation to the given unit vector.","Rotate a vector by the inverse of this unit quaternion. …","Rotate a unit vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","","Rotate the given vector by the inverse of this rotation. …","Transform the given unit vector by the inverse of this …","Apply the inverse rotation to the given vector.","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion, …","Rotate the given vector by the inverse of this unit …","","Rotate the given vector by the inverse of this rotation. …","Transform the given vector by the inverse of this …","Transform the given vector by the inverse of this …","Transform the given vector by the inverse of this …","Returns true if the point contains no elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the quaternion is pure.","","","The part of this similarity that does not include the …","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Iterates through this point coordinates.","Mutably iterates through this point coordinates.","","","","","","","","","The left offset of the view cuboid.","Left quaternionic division.","The dimension of this point.","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Linear interpolation between two quaternion.","Linear interpolation between two dual quaternions.","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Compute the natural logarithm of a quaternion.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix including a …","Builds a left-handed look-at view matrix including a …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix including …","Builds a right-handed look-at view matrix including …","","A synonym for the norm of this quaternion.","A synonym for the squared norm of this quaternion.","Returns a point containing the result of <code>f</code> applied to …","A reference to the underlying matrix representation of …","A reference to the underlying matrix.","A mutable reference to the underlying matrix …","A mutable reference to underlying matrix. Use …","A mutable reference to the underlying matrix …","A mutable reference to the underlying matrix.","","Create the mean unit quaternion from a data structure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3 dimensional rotation matrix from an axis and …","Creates a new unit quaternion rotation from a rotation …","Builds the unit complex number corresponding to the …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new reflection wrt the plane orthogonal to the …","Creates a new orthographic projection matrix.","Creates a new perspective matrix from the aspect ratio, y …","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 3 dimensional rotation matrix from an axis and …","Builds a 2 dimensional rotation matrix from an angle in …","Creates a new quaternion from its individual components. …","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Creates a new 2D isometry from a translation and a …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new isometry from a translation and a rotation …","Creates a new similarity from a translation, a rotation, …","Creates a new similarity from a translation and a …","Creates a new similarity from a translation, rotation …","Creates a new similarity from a translation, rotation …","Creates a new reflection wrt. the plane orthogonal to the …","Creates a new unit quaternion rotation from a rotation …","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Rotation3::face_towards] instead.","Deprecated: Use [UnitQuaternion::face_towards] instead.","Deprecated: Use [Rotation3::face_towards] instead.","Deprecated: Use [SimilarityMatrix3::face_towards] instead.","Deprecated: Use [SimilarityMatrix3::face_towards] instead.","Creates a new point with uninitialized coordinates.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","","The norm of this quaternion.","","The squared norm of this quaternion.","","","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","","","","","Creates a new identity isometry.","Creates a new identity similarity.","Creates a new identity transform.","Creates a new point with all coordinates equal to zero.","Calculates the outer product (also known as the wedge …","","The polar decomposition of this quaternion.","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power.","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Calculates the projection of <code>self</code> onto <code>other</code> (also known …","Projects a point. Faster than matrix multiplication.","Projects a point. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Convert quaternion to pure quaternion.","The underlying quaternion.","The real component of the quaternion","Applies the reflection to the columns of <code>rhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the columns of <code>rhs</code>.","Calculates the rejection of <code>self</code> from <code>other</code> (also known …","","","","","","","","","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","","","","","","","","","","","","","","","The right offset of the view cuboid.","Right quaternionic division.","Return the rotation part of this unit dual quaternion.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","The pure rotational part of this isometry.","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The unit quaternion needed to make <code>self</code> and <code>other</code> …","The unit complex number needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The isometry that applies the rotation <code>r</code> with its axis …","The similarity that applies the scaling factor <code>scaling</code>, …","The scalar part <code>w</code> of this quaternion.","","","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The scaling factor of this similarity transformation.","Screw linear interpolation between two unit quaternions. …","","","","","","","","Updates this perspective matrix with a new <code>width / height</code> …","Sets the bottom offset of the view cuboid.","Sets the view cuboid offsets along the <code>y</code> axis.","Sets the category of this transform.","Updates this perspective with a new y field of view of …","Sets the left offset of the view cuboid.","Sets the view cuboid offsets along the <code>x</code> axis.","Sets the right offset of the view cuboid.","The scaling factor of this similarity transformation.","Sets the top offset of the view cuboid.","Sets the far plane offset of the view cuboid.","Updates this perspective matrix with a new far plane …","Sets the near plane offset of the view cuboid.","Updates this perspective matrix with a new near plane …","Sets the near and far plane offsets of the view cuboid.","Updates this perspective matrix with new near and far …","","","","","","","","","","","","Attempt to inverse this quaternion.","Calculates the quaternionic sinus.","The sine of the rotation angle.","Calculates the hyperbolic quaternionic sinus.","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two unit …","Spherical linear interpolation between two rotations …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","","","","","","","","Calculates square root.","Calculates square of a quaternion.","The stride of this point. This is the number of buffer …","","","","","","","","","","","","","","","Computes the supremum (aka. componentwise max) of two …","Swaps two entries without bound-checking.","Calculates the quaternionic tangent.","Calculates the hyperbolic quaternionic tangent.","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent Euler …","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent …","Converts this unit dual quaternion interpreted as an …","Converts this unit complex number into its equivalent …","Computes the corresponding homogeneous matrix.","Computes the corresponding homogeneous matrix.","Converts this point into a vector in homogeneous …","Converts this rotation into its equivalent homogeneous …","Converts this translation into its equivalent homogeneous …","Converts this isometry into its equivalent homogeneous …","Converts this similarity into its equivalent homogeneous …","Converts this transform into its equivalent homogeneous …","Builds an isometry from this unit dual quaternion.","Converts this isometry into its equivalent homogeneous …","","","","","","","","","","","","","","This transformation seen as a <code>Projective3</code>.","This transformation seen as a <code>Projective3</code>.","Builds a rotation matrix from this unit quaternion.","Builds the rotation matrix corresponding to this unit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The top offset of the view cuboid.","Apply the rotation to the given point.","Rotate a point by this unit quaternion.","Rotate and translate a point by this unit dual quaternion …","Rotate the given point by this unit complex number.","Rotate the given point.","","Translate the given point.","Transform the given point by this isometry.","Transform the given point by this similarity.","Transform the given point by this transformation.","Apply the rotation to the given vector.","Rotate a vector by this unit quaternion.","Rotate a vector by this unit dual quaternion, ignoring …","Rotate the given vector by this unit complex number.","","Rotate the given vector.","Transform the given vector by this isometry, ignoring the …","Transform the given vector by this similarity, ignoring …","Transform the given vector by this transformation, …","Return the translation part of this unit dual quaternion.","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","The pure translational part of this isometry.","Transposes <code>self</code>.","Transposes <code>self</code> in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Attempts to invert this transformation. You may use …","Inverts this quaternion in-place if it is not zero.","Inverts this dual quaternion in-place if it is not zero.","Attempts to invert this transformation in-place. You may …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Computes the screw-linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","","","","","","","","","","","","","","","","","","","","","","","Un-projects a point. Faster than multiplication by the …","Un-projects a point. Faster than multiplication by the …","","","Retrieves the underlying homogeneous matrix. Deprecated: …","Retrieves the underlying homogeneous matrix. Deprecated: …","Unwraps the underlying matrix. Deprecated: Use […","Retrieves the underlying matrix. Deprecated: Use […","The vector part <code>(i, j, k)</code> of this quaternion.","The translation coordinates, i.e., how much is added to a …","The mutable vector part <code>(i, j, k)</code> of this quaternion.","","","","","","","","","","","","","","","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","","","The far plane offset of the view cuboid.","Gets the far plane offset of the view frustum.","The near plane offset of the view cuboid.","Gets the near plane offset of the view frustum.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","The bidiagonalization of a general matrix.","The Cholesky decomposition of a …","The QR decomposition (with column pivoting) of a general …","LU decomposition with full row and column pivoting.","Hessenberg decomposition of a general matrix.","LU decomposition with partial (row) pivoting.","A sequence of row or column permutations.","The QR decomposition of a general matrix.","Singular Value Decomposition of a general matrix.","Schur decomposition of a square matrix.","Eigendecomposition of a symmetric matrix.","Tridiagonalization of a symmetric matrix.","UDU factorization.","Adds the interchange of the row (or column) <code>i</code> with the …","Functions for balancing a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the complex eigenvalues of the decomposed matrix.","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","The diagonal matrix resulting from the factorization","Returns the diagonal elements as a matrix","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","The determinant of the matrix corresponding to this …","The diagonal part of this decomposed matrix.","The diagonal components of this decomposition.","Computes the real eigenvalues of the decomposed matrix.","The unsorted eigenvalues of the decomposed matrix.","The eigenvectors of the decomposed matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construction of givens rotations.","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Construction of householder elementary reflections.","Creates a new statically-allocated sequence of <code>D</code> identity …","Creates a new dynamically-allocated sequence of <code>n</code> …","Creates a new sequence of D identity permutations.","Updates the decomposition such that we get the …","","","","","","","","","","","","","","Applies this sequence of permutations in reverse to the …","Applies this sequence of permutations in reverse to the …","Computes the inverse of the decomposed matrix.","Returns true if the permutation sequence contains no …","","","","","","","","","","","","","","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates whether this decomposition contains an …","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The lower triangular matrix of this decomposition.","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The number of non-identity permutations applied by this …","Computes the Bidiagonal decomposition using householder …","Attempts to compute the Cholesky decomposition of <code>matrix</code>.","Computes the ColPivQR decomposition using householder …","Computes the LU decomposition with full pivoting of <code>matrix</code>…","Computes the Hessenberg decomposition using householder …","Computes the LU decomposition with partial (row) pivoting …","Computes the QR decomposition using householder …","Computes the Schur decomposition of a square matrix.","Computes the Singular Value Decomposition of <code>matrix</code> using …","Computes the eigendecomposition of the given symmetric …","Computes the tridiagonalization of the symmetric matrix <code>m</code>.","Computes the UDU^T factorization.","Computes the Cholesky decomposition of <code>matrix</code> without …","Computes the Hessenberg decomposition using householder …","The off-diagonal part of this decomposed matrix.","The off-diagonal components of this decomposition.","Retrieves the column permutation of this decomposition.","The row permutations of this decomposition.","The row permutations of this decomposition.","Applies this sequence of permutations to the columns of …","Applies this sequence of permutations to the rows of <code>rhs</code>.","Computes the pseudo-inverse of the decomposed matrix.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","The column permutations of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the rank of the decomposed matrix, i.e., the …","Given the Cholesky decomposition of a matrix <code>M</code>, a scalar …","Rebuild the original matrix.","Rebuild the original matrix.","Recomputes the original symmetric matrix.","Updates the decomposition such that we get the …","The singular values of this SVD.","Returns the solution of the system <code>self * x = b</code> where <code>self</code>…","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix and outputs …","Performs a LU decomposition to overwrite <code>out</code> with the …","Attempts to compute the Schur decomposition of a square …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","","","","","","","","","","","","","","Computes the orthogonal matrix <code>U</code> of this <code>U * D * V</code> …","The upper triangular matrix of this decomposition.","The upper triangular matrix of this decomposition.","The left-singular vectors <code>U</code> of this SVD.","The upper triangular matrix resulting from the …","Unpacks this decomposition into its three matrix factors …","Retrieves the lower-triangular factor of the Cholesky …","Unpacks this decomposition into its two matrix factors.","The two matrices of this decomposition and the row and …","Retrieves <code>(q, h)</code> with <code>q</code> the orthogonal matrix of this …","The row permutations and two triangular matrices of this …","Unpacks this decomposition into its two matrix factors.","Retrieves the unitary matrix <code>Q</code> and the …","Retrieve the orthogonal transformation, diagonal, and off …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieve the diagonal, and off diagonal elements of this …","Computes the orthogonal matrix <code>V_t</code> of this <code>U * D * V_t</code> …","The right-singular vectors <code>V^t</code> of this SVD.","","","","","","","","","","","","","","Computes the wilkinson shift, i.e., the 2x2 symmetric …","Applies in-place a modified Parlett and Reinsch matrix …","Computes in-place <code>D * m * D.inverse()</code>, where <code>D</code> is the …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Computes the matrix determinant.","Computes exponential of this matrix","A Givens rotation.","","","The cos part of this roration.","Computes the rotation <code>R</code> required such that the <code>x</code> …","Computes the rotation <code>R</code> required such that the <code>y</code> …","","","","","","The Givents rotation that does nothing.","","The inverse of this givens rotation.","","Initializes a Givens rotation from its non-normalized …","Initializes a Givens rotation from its components.","Performs the multiplication <code>rhs = self * rhs</code> in-place.","Performs the multiplication <code>lhs = lhs * self</code> in-place.","The sin part of this roration.","","","","","","Initializes a Givens rotation form its non-normalized …","","","Attempts to invert this matrix.","Attempts to invert this matrix in-place. Returns <code>false</code> …","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the eigenvalues of this symmetric matrix."],"i":[0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,3,0,0,2,4,5,6,7,2,4,2,4,4,4,4,4,4,4,4,4,8,8,8,2,4,4,2,4,2,4,2,4,9,2,4,0,8,4,4,2,4,2,4,0,0,9,4,4,4,2,4,0,0,0,0,9,2,4,2,2,4,2,5,6,4,5,6,7,5,6,7,5,6,7,0,0,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,10,10,11,11,4,4,4,4,12,12,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,4,4,4,4,9,5,6,7,4,2,4,2,4,2,4,1,13,5,7,4,1,13,5,7,4,2,4,5,6,7,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,2,4,13,13,13,13,13,13,13,13,12,14,14,15,15,15,15,16,16,16,16,16,17,18,19,20,21,22,22,22,23,24,25,5,5,5,5,5,6,7,7,7,7,7,11,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,4,4,4,4,4,4,4,4,4,4,4,13,24,25,25,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,10,11,4,4,4,4,4,4,4,0,4,2,4,4,5,7,8,8,8,4,2,4,0,0,12,19,4,4,4,5,7,5,7,5,7,5,7,0,2,4,4,13,24,25,25,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,10,11,4,4,4,4,4,4,9,9,13,4,4,1,13,5,7,4,0,2,4,9,2,4,9,2,4,2,4,9,2,4,9,1,0,9,13,0,9,13,2,4,2,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,11,11,4,4,4,4,2,4,4,4,4,12,12,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,4,4,4,4,4,6,4,4,8,13,4,2,4,4,13,4,0,13,5,6,7,4,8,0,0,0,0,0,0,0,0,0,9,2,4,2,4,2,4,4,4,13,13,4,4,4,2,4,2,4,5,6,7,4,4,4,4,4,4,4,4,1,13,5,7,4,1,13,5,7,4,2,4,2,4,4,13,4,1,13,5,7,4,4,4,2,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,27,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,26,26,27,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,26,26,26,26,26,26,26,26,3,4,4,4,4,4,4,4,4,27,27,27,27,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,27,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,26,27,27,27,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,27,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,26,3,4,4,4,4,4,4,4,4,2,4,2,4,2,2,4,2,4,2,1,13,5,7,4,2,4,4,4,4,4,4,4,4,4,13,13,13,13,4,4,0,2,4,2,4,2,4,4,4,4,4,4,4,4,4,2,4,4,4,13,24,25,25,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,10,11,4,4,4,4,4,4,4,5,7,5,7,2,4,0,0,4,4,2,4,9,4,5,6,7,0,2,4,4,13,4,4,0,8,0,13,4,1,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,32,18,32,32,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,33,33,33,33,33,34,32,34,32,34,32,34,32,34,32,34,32,32,32,32,32,35,32,35,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,29,32,36,37,37,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,29,32,38,36,37,37,37,37,35,32,33,33,33,35,32,18,32,18,32,31,32,39,28,40,29,32,38,36,33,37,39,28,40,29,32,38,36,33,37,32,32,32,32,33,33,33,32,32,29,32,38,33,37,29,32,38,33,37,29,32,38,36,37,37,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,32,32,32,32,32,32,32,32,32,32,32,33,33,33,32,33,33,33,32,32,32,0,32,32,32,0,32,32,33,32,35,32,32,29,32,0,32,33,32,33,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,32,0,32,32,32,32,32,32,33,32,31,29,32,32,33,37,33,32,33,32,32,32,37,37,37,37,16,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,29,32,32,32,32,32,32,32,32,32,38,36,33,37,32,32,39,28,40,29,32,32,32,32,32,32,32,38,36,33,33,33,33,33,37,33,16,32,33,33,33,13,13,13,13,32,32,32,32,13,32,13,32,33,33,33,32,32,13,32,13,13,13,13,32,32,32,32,13,32,13,13,13,13,32,32,32,32,13,32,13,13,13,13,32,32,32,32,13,32,16,32,33,13,13,13,13,32,32,32,32,13,32,35,32,33,13,13,13,13,32,32,32,32,13,32,33,33,33,33,13,13,13,13,32,32,32,32,13,32,33,33,38,36,33,33,33,33,13,13,13,13,32,32,32,32,13,32,13,32,16,32,33,33,33,41,41,41,41,22,22,22,22,32,32,32,32,32,32,32,32,41,22,32,32,41,22,32,32,41,41,41,41,22,22,22,22,32,32,32,32,32,32,32,32,22,22,22,22,32,32,32,32,41,22,32,32,41,22,32,32,41,41,41,41,32,32,32,32,41,41,41,41,22,22,22,22,32,32,32,32,32,32,32,32,39,28,40,29,32,38,36,33,37,32,13,13,13,13,32,32,32,32,13,32,32,32,32,32,32,35,32,35,32,35,32,35,32,32,32,32,32,32,32,32,32,32,32,32,32,29,32,33,35,32,32,34,32,32,35,32,32,35,32,35,32,32,13,13,13,13,32,32,32,32,33,33,33,13,32,35,32,35,32,32,32,32,32,32,32,0,32,32,42,42,32,32,32,32,32,32,32,32,39,28,40,29,32,38,36,33,37,37,33,29,32,38,36,37,37,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,42,42,29,38,36,37,37,32,37,32,39,28,40,29,32,38,36,33,37,34,32,32,34,32,32,33,0,32,32,18,32,18,32,32,32,32,37,35,32,33,33,33,16,32,33,16,32,33,32,32,32,32,32,32,32,34,32,32,32,32,33,43,39,28,40,32,32,32,32,32,32,32,32,32,32,32,32,32,32,29,37,32,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,37,33,33,13,32,15,16,32,32,33,16,32,33,16,32,16,32,13,13,13,13,32,32,32,32,13,32,15,16,32,32,16,32,13,32,13,32,38,36,33,13,13,13,13,32,32,32,32,13,32,38,36,33,33,43,30,39,28,40,32,30,32,32,32,32,18,32,18,32,32,32,32,32,33,33,34,32,34,32,34,32,34,32,34,32,34,32,32,29,38,36,37,37,29,36,37,37,35,32,32,34,32,34,32,34,32,34,32,33,32,32,32,33,32,32,32,32,32,32,32,32,32,32,33,33,13,13,13,13,32,32,32,32,13,32,29,32,37,37,37,37,32,37,32,32,13,32,13,32,32,13,32,33,33,33,33,33,33,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,30,32,33,33,33,33,33,33,32,33,32,32,32,32,32,32,32,29,32,38,36,37,37,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,32,31,35,32,33,33,33,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,29,32,38,36,37,37,32,32,32,32,32,32,32,32,32,32,32,32,35,32,32,32,32,34,32,32,33,35,32,32,33,33,33,33,29,32,38,33,37,33,33,32,33,39,28,40,29,32,38,36,33,37,39,28,40,29,32,38,36,33,37,32,32,32,32,32,32,32,32,32,32,32,32,34,32,34,34,32,32,33,33,33,34,32,33,33,33,33,32,32,32,39,28,40,29,32,38,36,33,37,39,28,40,29,32,38,36,33,37,32,32,33,33,32,32,32,33,32,33,33,32,32,39,28,40,29,32,38,36,33,37,32,32,33,32,30,32,33,32,32,32,35,32,35,32,39,28,40,29,32,38,36,33,37,18,32,18,32,18,32,18,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,18,32,18,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,18,32,18,32,13,13,13,13,32,32,32,32,13,32,32,32,32,32,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,35,32,0,44,0,0,0,0,0,44,44,45,0,0,46,47,48,49,0,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,52,52,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,57,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,57,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,59,60,61,62,64,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,60,61,62,65,66,67,70,71,72,75,76,77,80,81,82,61,62,66,67,71,72,76,77,81,82,62,67,72,77,82,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,59,60,61,62,64,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,60,61,62,65,66,67,70,71,72,75,76,77,80,81,82,61,62,66,67,71,72,76,77,81,82,62,67,72,77,82,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,64,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,65,66,67,70,71,72,75,76,77,80,81,82,66,67,71,72,76,77,81,82,67,72,77,82,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,69,70,71,72,74,75,76,77,79,80,81,82,70,71,72,75,76,77,80,81,82,71,72,76,77,81,82,72,77,82,73,74,75,76,77,78,79,80,81,82,73,74,75,76,77,78,79,80,81,82,74,75,76,77,79,80,81,82,75,76,77,80,81,82,76,77,81,82,77,82,78,79,80,81,82,78,79,80,81,82,79,80,81,82,80,81,82,81,82,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,53,54,55,56,51,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,56,51,52,57,53,54,55,56,51,52,54,55,56,51,52,55,56,51,52,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,87,88,89,90,91,92,93,94,95,96,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,85,86,99,99,100,100,100,99,100,99,100,99,100,99,100,98,100,91,92,99,100,100,100,99,100,99,100,99,100,99,100,101,99,100,100,99,100,101,99,100,95,96,99,100,100,100,93,94,99,100,100,100,87,88,99,100,100,100,98,100,99,99,89,90,99,99,100,100,100,99,100,99,100,99,100,99,100,99,100,101,99,100,99,100,101,99,100,99,100,0,0,102,103,0,0,0,0,0,0,104,105,106,107,108,109,104,105,106,107,108,109,108,109,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,106,107,104,105,106,107,108,109,106,107,104,105,106,107,108,109,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,104,105,106,107,108,109,0,110,0,0,111,0,0,110,0,0,0,0,112,110,110,110,110,112,112,110,110,112,112,110,110,110,110,112,111,110,110,112,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,115,116,117,118,119,120,121,116,116,114,114,116,116,117,117,114,114,116,116,117,117,24,25,5,7,115,115,24,25,5,7,115,115,5,119,120,119,120,119,120,120,120,119,120,114,122,123,117,122,123,117,116,116,116,116,123,116,116,25,5,124,115,25,5,7,115,124,122,123,114,115,116,117,118,119,120,125,126,127,121,124,122,123,114,115,116,117,118,119,120,125,126,127,121,122,5,6,7,128,11,129,130,114,115,116,117,118,119,119,119,119,120,120,120,120,131,125,126,127,122,123,114,115,116,117,118,119,120,125,126,127,121,122,123,114,115,116,117,118,119,120,125,126,127,121,116,121,7,5,6,7,116,117,5,6,7,116,117,114,116,116,7,116,116,117,114,115,116,117,118,119,120,121,114,115,116,117,118,119,120,121,114,115,116,117,118,119,120,121,114,114,114,114,114,114,116,118,118,118,118,118,118,114,114,114,114,114,114,116,118,118,118,118,118,118,114,115,115,115,115,115,115,115,115,115,115,115,115,116,117,117,117,118,118,118,118,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,114,115,115,115,115,116,117,117,117,118,118,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,116,117,6,122,123,114,115,116,117,118,119,120,125,126,127,121,25,5,115,5,116,116,114,115,116,118,119,120,121,114,115,116,118,119,120,121,25,5,11,130,115,119,119,120,120,122,123,114,114,115,115,116,116,117,118,118,119,119,120,120,125,126,127,121,123,124,122,123,114,114,114,114,114,114,114,115,115,115,115,115,116,116,116,116,116,116,116,117,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,120,120,120,120,120,125,126,127,121,7,25,5,115,24,25,5,7,115,115,7,7,114,7,25,5,115,122,114,116,6,120,24,25,5,7,115,115,24,25,5,7,115,115,122,123,115,121,6,116,119,120,116,5,116,117,117,6,5,7,24,25,5,7,115,115,5,120,114,124,122,123,114,115,116,117,118,119,120,125,126,127,121,114,114,115,115,115,115,115,116,117,118,118,118,118,118,119,119,119,119,120,120,120,121,121,116,118,114,114,114,114,116,131,131,127,114,115,116,118,119,120,125,126,127,132,5,6,7,115,115,116,117,118,119,120,121,116,114,115,116,117,121,114,116,117,121,114,114,116,124,122,123,114,114,115,116,117,118,118,119,120,125,126,127,121,122,123,115,121,116,119,132,5,6,7,122,123,115,115,118,119,120,121,132,5,6,7,115,115,118,119,120,121,132,5,6,7,115,115,118,119,120,121,132,132,5,6,7,115,115,119,132,5,6,7,115,115,119,120,121,114,124,122,123,114,114,114,115,115,115,115,115,115,116,116,117,117,118,118,118,118,118,118,119,119,119,119,119,120,120,120,120,125,126,127,121,121,121,116,116,117,120,6,114,114,114,115,116,118,119,120,121,114,122,116,114,5,6,116,117,128,11,129,130,119,119,119,119,5,116,25,5,11,130,115,119,119,120,120,25,5,11,130,115,119,119,120,120,114,116,116,114,115,121,115,121,115,121,114,5,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,114,115,115,115,115,116,116,116,117,117,117,117,117,118,118,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,117,114,116,117,133,134,135,136,137,138,24,25,5,7,128,11,129,130,124,122,123,114,114,114,114,114,114,115,115,116,118,118,118,118,118,118,119,119,119,119,120,120,120,120,124,5,11,130,119,119,25,5,115,120,120,114,5,6,116,116,117,116,116,117,116,117,116,117,115,116,117,118,119,120,121,114,116,114,116,24,25,5,7,115,115,116,120,120,116,122,123,122,123,116,5,117,124,124,124,124,116,114,115,116,117,118,119,120,121,24,25,115,115,114,115,116,118,119,120,121,114,115,116,118,119,120,121,122,116,6,128,11,129,130,119,119,119,119,119,24,25,5,7,115,115,5,7,24,25,5,7,115,115,119,120,116,116,117,24,25,5,7,115,115,24,25,5,7,115,115,5,7,120,6,114,115,116,118,119,120,121,123,122,122,121,123,122,122,122,120,122,122,123,122,123,122,123,114,114,114,114,114,114,114,114,114,114,114,116,116,7,116,24,25,5,7,115,115,114,115,116,118,119,120,121,116,116,114,114,114,114,114,116,116,117,117,114,114,116,116,117,117,114,114,116,116,25,5,115,5,6,7,122,123,114,115,118,119,120,121,6,119,122,123,114,115,116,117,118,119,120,125,126,127,121,122,123,5,7,114,115,116,118,119,120,124,122,123,114,115,116,117,118,119,120,125,126,127,121,124,122,123,114,115,116,117,118,119,120,125,126,127,121,114,114,115,115,115,115,115,116,117,118,118,118,118,118,119,119,119,119,120,120,120,121,121,122,132,5,6,7,115,115,118,119,120,121,132,5,6,7,115,115,119,120,121,6,128,11,129,130,119,119,119,119,119,115,115,124,122,123,114,115,116,117,118,119,120,125,126,127,121,124,122,123,114,115,116,117,118,119,120,125,126,127,121,116,117,121,116,117,121,11,130,119,119,6,25,5,115,124,122,123,114,115,116,117,118,119,120,125,126,127,121,114,115,116,117,118,119,120,121,122,123,116,117,122,123,115,121,116,118,116,124,122,123,114,115,116,117,118,119,120,125,126,127,121,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,116,117,122,123,122,123,114,114,114,114,114,114,114,114,114,114,114,114,0,0,0,0,0,0,0,0,0,0,0,0,0,139,0,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,147,140,151,151,141,142,143,145,139,140,150,147,149,149,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,0,144,0,139,139,139,141,140,141,142,143,144,145,139,146,147,148,149,150,151,139,139,141,139,140,141,142,143,144,145,139,146,147,148,149,150,151,142,143,145,146,140,141,143,145,141,145,139,140,141,142,143,144,145,146,147,148,149,150,151,141,144,140,150,142,143,145,139,139,148,142,143,144,146,150,142,146,142,146,148,141,148,149,150,141,148,141,142,143,145,146,148,141,142,143,145,146,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,140,141,142,143,144,145,139,146,147,148,149,150,151,142,143,145,146,145,0,147,148,149,140,141,142,143,144,145,139,146,147,148,149,150,151,140,143,145,148,151,140,141,142,143,144,145,146,147,150,141,144,142,146,150,140,148,140,141,142,143,144,145,139,146,147,148,149,150,151,0,0,0,35,35,35,34,13,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["signed",8]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],null,[[],["u64",15]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["point",3],["point",3]],[["point",3],["simdcomplexfield",8]]],[[["partialord",8]],["partialord",8]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["supersetof",8]],[[],["supersetof",8]],[[]],[[["supersetof",8]]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["point",3],["point",3]]],[[["point",3],["point",3]]],[[["isometry",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["transform",3]]],[[["rotation",3]]],[[["isometry",3],["unitquaternion",6]]],[[["unitquaternion",6],["similarity",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["transform",3]]],[[["translation3",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry3",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[]],[[["unitcomplex",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["isometry3",6]]],[[["translation3",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["complex",3]],["bool",15]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["complex",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[["transform",3]]],[[]],[[["similarity",3]]],[[["isometry",3]]],[[["translation",3]]],[[]],[[]],[[]],[[["unitcomplex",6]]],[[["rotation2",6]]],[[["rotation3",6]]],[[["unitcomplex",6]],["matrix3",6]],[[["rotation2",6]]],[[["unitquaternion",6]]],[[["perspective3",3]]],[[["unitdualquaternion",6]]],[[["orthographic3",3]]],[[["rotation3",6]]],[[["unitquaternion",6]]],[[["vec",3]]],[[["point",3]]],[[]],[[]],[[]],[[["matrixslicemut",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[]],[[]],[[]],[[]],[[["isometry3",6]]],[[]],[[]],[[]],[[]],[[["rotation2",6]]],[[["unitdualquaternion",6]]],[[],[["option",4],["complex",3]]],[[],["complex",3]],[[]],[[],["complex",3]],[[["f32",15]],[["option",4],["complex",3]]],[[["f64",15]],[["option",4],["complex",3]]],[[["i128",15]],[["option",4],["complex",3]]],[[["i16",15]],[["option",4],["complex",3]]],[[["i32",15]],[["option",4],["complex",3]]],[[["i64",15]],[["option",4],["complex",3]]],[[["i8",15]],[["option",4],["complex",3]]],[[["isize",15]],[["option",4],["complex",3]]],[[]],[[],["complex",3]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["str",15]],[["result",4],["complex",3]]],[[["u32",15],["str",15]],[["result",4],["complex",3]]],[[]],[[["omatrix",6]]],[[["unitcomplex",6]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["matrix4",6]]],[[["unitdualquaternion",6]]],[[["rotation3",6]]],[[["isometry",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["isometry3",6]]],[[["unitdualquaternion",6]]],[[["similarity3",6]]],[[["transform",3]]],[[["matrix4",6]]],[[["matrix3",6]]],[[["unitcomplex",6]]],[[["rotation2",6]]],[[["isometry",3]]],[[["similarity",3]]],[[["transform",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["complex",3]],["complex",3]],[[["u128",15]],[["option",4],["complex",3]]],[[["u16",15]],[["option",4],["complex",3]]],[[["u32",15]],[["option",4],["complex",3]]],[[["u64",15]],[["option",4],["complex",3]]],[[["u8",15]],[["option",4],["complex",3]]],[[["usize",15]],[["option",4],["complex",3]]],null,[[]],[[]],[[["complex",3]]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["omatrix",6]],[["omatrix",6],["dim",8]]],[[["omatrix",6]]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["omatrix",6]],["bool",15]],[[["unitcomplex",6]],["bool",15]],[[["unitquaternion",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["similarity",3]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["transform",3]],["bool",15]],[[["unitquaternion",6]],["bool",15]],[[["isometry",3]],["bool",15]],[[["matrix4",6]],["bool",15]],[[["rotation3",6]],["bool",15]],[[["similarity3",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["matrix4",6]],["bool",15]],[[["transform",3]],["bool",15]],[[["isometry3",6]],["bool",15]],[[["unitcomplex",6]],["bool",15]],[[["similarity",3]],["bool",15]],[[["transform",3]],["bool",15]],[[["isometry",3]],["bool",15]],[[["rotation2",6]],["bool",15]],[[["matrix3",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["complex",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[["ord",8]],["ord",8]],[[]],[[]],[[["ord",8]],["ord",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unitdualquaternion",6]]],[[["rotation",3]]],[[["translation",3]]],[[["similarity",3]]],[[["translation",3]]],[[["isometry",3],["unitquaternion",6]]],[[["transform",3]]],[[["vector",6],["u3",6]]],[[["unitdualquaternion",6]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["vector",6]]],[[["unit",3],["vector",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["point3",6]]],[[["unit",3]]],[[["isometry",3]]],[[["point3",6]]],[[["unitquaternion",6],["similarity",3]]],[[["unitquaternion",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["vector",6]]],[[["vector",6],["u3",6]]],[[["point3",6]]],[[["point3",6]]],[[["unit",3]]],[[["unit",3],["vector",6]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["dualquaternion",3]]],[[["point2",6]]],[[]],[[["unitcomplex",6],["similarity",3]]],[[["similarity",3]]],[[["translation",3]]],[[["translation",3]]],[[["point2",6]]],[[["unit",3],["vector",6]]],[[["rotation",3]]],[[["vector",6],["const",3]]],[[["unit",3]]],[[["unitcomplex",6],["isometry",3]]],[[["vector",6]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]],["complex",3]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[["translation3",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]],["bool",15]],[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["one",8]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[],["option",4]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["complex",3]],["complex",3]],[[]],[[],["complex",3]],[[["i32",15]]],[[["i32",15]],["complex",3]],[[["i32",15]],["complex",3]],[[["u32",15]],["complex",3]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],["omatrix",6]],[[],["complex",3]],[[],["complex",3]],null,[[]],[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3],["autosimd",3]]],[[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[["i32",15]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[["i32",15]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],[["omatrix",6],["dynamic",3]]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],[["omatrix",6],["dynamic",3]]],[[],["complex",3]],[[],["complex",3]],[[["omatrix",6]],[["omatrix",6],["dim",8]]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i64",15]]],[[],[["i8",15],["option",4]]],[[],[["isize",15],["option",4]]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],["omatrix",6]],[[],["unitcomplex",6]],[[],["unitquaternion",6]],[[],["unitdualquaternion",6]],[[],["unitquaternion",6]],[[],["rotation3",6]],[[],["isometry",3]],[[],["unitdualquaternion",6]],[[],["similarity",3]],[[],["transform",3]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["unitdualquaternion",6]],[[],["isometry3",6]],[[],["similarity3",6]],[[],["transform",3]],[[],["isometry",3]],[[],["matrix3",6]],[[],["transform",3]],[[],["similarity",3]],[[],["rotation2",6]],[[],["unitcomplex",6]],[[],["unitdualquaternion",6]],[[],["unitdualquaternion",6]],[[],["complex",3]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[]],[[],["complex",3]],[[["supersetof",8]],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],[["complex",3],["option",4]]],[[]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null,[[]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["zero",8]],[[]],[[],["complex",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["omatrix",6]],[[],["bool",15]],[[],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[],["omatrix",6]],[[]],[[["matrix",3],["matrix",3]]],[[],["omatrix",6]],[[]],[[["matrix",3]]],null,[[]],[[]],[[["matrix",3]]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[]],[[]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[["fnmut",8]]],[[["fnmut",8]]],[[["matrixvec",3]],[[],["vec",3]],[[["vector",6]]],[[["vector",6]]],[[],[["unit",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[["vector",6]]],[[["vector",6]]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["usize",15]],[[],["bidiagonal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[],[["omatrix",6],["scalar",8]]],[[],[["unitquaternion",6],["scalar",8]]],[[],[["unitdualquaternion",6],["scalar",8]]],[[],[["unitcomplex",6],["scalar",8]]],[[["matrix",3],["matrix",3]]],[[],[["cholesky",3],["option",4]]],[[],["arraystorage",3]],[[],["matrix",3]],[[]],[[],["unit",3]],[[],["vecstorage",3]],[[]],[[]],[[]],[[]],[[]],[[],[["const",3],["owned",6],["const",3]]],[[],["omatrix",6]],[[],["owned",6]],[[],["owned",6]],[[],[["owned",6],["dynamic",3]]],[[],[["owned",6],["dynamic",3]]],[[],["matrixsum",6]],[[["matrix",3],["matrix",3]]],[[],["colpivqr",3]],[[["usize",15]],[["u1",6],["matrixslice",6]]],[[],["columniter",3]],[[],["columnitermut",3]],[[],["ovector",6]],[[["usize",15]],[["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["dynamic",3],["u1",6],["matrixslice",6]]],[[["usize",15]],[["u1",6],["matrixslicemut",6],["dynamic",3]]],[[],["ovector",6]],[[],["ovector",6]],[[["usize",15]],[["dynamic",3],["matrixslice",6]]],[[["usize",15],["dim",8]],[["matrixslice",6],["dim",8]]],[[["usize",15],["dim",8]],[["matrixslicemut",6],["dim",8]]],[[["usize",15],["dim",8]],[["matrixslice",6],["dim",8],["dynamic",3]]],[[["usize",15],["dim",8]],[["dynamic",3],["matrixslicemut",6],["dim",8]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6]]],[[["slicerange",8]],["matrixslice",6]],[[["slicerange",8]],["matrixslicemut",6]],[[["slicerange",8]]],[[["slicerange",8]]],[[["usize",15]],[["dynamic",3],["matrixslice",6]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[],["complex",3]],[[],[["numcomplex",3],["ovector",6]]],[[["matrix",3]],["matrixsum",6]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],["matrixsum",6]],[[["matrix",3]]],[[["matrix",3]]],[[["ovector",6]],["ovector",6]],[[],["rowovector",6]],[[],["ovector",6]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[["matrix",3]]],null,[[["vector",6]],[["dimdiff",6],["ovector",6]]],[[["vector",6]],["ovector",6]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],null,[[["matrix",3]]],[[]],[[]],[[["matrix",3]],["matrixcross",6]],[[],[["omatrix",6],["u3",6]]],[[],[["omatrix",6],["u3",6]]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ovector",6]],[[],["ovector",6]],null,[[["rotation",3]]],[[["rotation",3]]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[],["dualquaternion",3]],[[],[["option",4],["ovector",6]]],[[],["usize",15]],[[["arraystorage",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[],["bool",15]],[[["vecstorage",3]],["bool",15]],[[]],[[]],[[],["quaternion",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]],[["const",3],["matrixslice",6]]],[[["usize",15]],[["matrixslicemut",6],["const",3]]],[[["usize",15]],[["matrixslice",6],["const",3],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["const",3],["dynamic",3]]],[[],[["const",3],["const",3],["omatrix",6]]],[[["usize",15]],[["const",3],["matrixslice",6]]],[[["usize",15]],[["const",3],["matrixslicemut",6]]],[[["usize",15]],[["matrixslice",6],["const",3],["dynamic",3]]],[[["usize",15]],[["const",3],["matrixslicemut",6],["dynamic",3]]],[[["usize",15]],[["matrixslice",6],["const",3],["const",3]]],[[["usize",15]],[["const",3],["matrixslicemut",6],["const",3]]],[[],[["const",3],["dynamic",3],["const",3],["matrixslice",6]]],[[],[["dynamic",3],["matrixslicemut",6],["const",3],["const",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrixslicemut",6],["dynamic",3]]],[[["matrixslicemut",6],["dynamic",3]]],[[]],[[["const",3],["const",3],["matrixslicemut",6]]],[[["matrixslice",6],["dynamic",3]]],[[["matrixslice",6],["dynamic",3]]],[[["matrixslice",6],["const",3],["const",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unit",3]]],[[["unit",3]]],[[["unit",3]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[],["matrix",3]],[[["vector",6]]],[[["vector",6]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["vector",6],["dimsum",6]],[["option",4],["ovector",6]]],[[["vector",6],["dimsum",6]],[["option",4],["ovector",6]]],[[["isometry3",6]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[["matrix2",6]]],[[["matrix3",6]]],[[["matrix3",6],["usize",15]]],[[["matrix2",6],["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["translation3",6],["unitquaternion",6]]],[[["quaternion",3]]],[[]],[[]],[[]],[[["unitquaternion",6]]],[[["rotation2",6]]],[[["rotation3",6]]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[["vector3",6]]],[[["u1",6],["storage",8],["vector",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["maybeuninit",19]],["maybeuninit",19]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3],["usize",15]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3],["usize",15]]],[[["vec",3]]],[[["vec",3]]],[[],["fullpivlu",3]],[[],["bool",15]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[],["matrixslice",6]],[[],["matrixslicemut",6]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["matrixslicemut",6],["dynamic",3]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["hessenberg",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]],null,[[],["omatrix",6]],[[]],[[]],[[]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["dynamic",3],["omatrix",6]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[],[["owned",6],["const",3],["const",3]]],[[],["omatrix",6]],[[],["owned",6]],[[],["owned",6]],[[],[["owned",6],["dynamic",3]]],[[],[["owned",6],["dynamic",3]]],[[],["matrixsum",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point3",6]],["point3",6]],[[["unit",3]],[["vector3",6],["unit",3]]],[[["unit",3]],[["unit",3],["vector2",6]]],[[["unit",3]],[["vector3",6],["unit",3]]],[[["vector3",6]],["vector3",6]],[[["vector2",6]],["vector2",6]],[[["vector3",6]],["vector3",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],null,[[],["matrixiter",3]],[[],["matrixitermut",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["unit",3]],[[["usize",15]],["unit",3]],[[["matrix",3]],[["omatrix",6],["dimprod",6],["dimprod",6]]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[],["quaternion",3]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[],["omatrix",6]],[[["i32",15]]],[[],["bool",15]],[[],["lu",3]],[[]],[[]],[[["fnmut",8]],[["omatrix",6],["scalar",8]]],[[],[["scalar",8],["ovector",6]]],[[],[["scalar",8],["ovector",6]]],[[["fnmut",8]],[["omatrix",6],["scalar",8]]],[[]],[[]],[[]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]]],[[]],[[["matrix",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["point",3]]],[[["point",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[["matrix",3],["matrix",3]]],[[],["usize",15]],[[["arraystorage",3]],["bool",15]],[[["vecstorage",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["u3",6]]],[[["vec",3]]],[[]],[[["vector",6],["u3",6]]],[[["vector",6]]],[[["vector",6]]],[[["point2",6],["vector2",6]]],[[["vector3",6],["point3",6]]],[[["point2",6],["vector2",6]]],[[["vector3",6],["point3",6]]],[[]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[]],[[]],[[["vector",6]]],[[["vector",6]]],[[],["slicestorage",3]],[[],["slicestoragemut",3]],[[]],[[],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[],["maybeuninit",19]],[[],["maybeuninit",19]],[[],["maybeuninit",19]],[[],["slicestorage",3]],[[],["slicestoragemut",3]],[[]],[[]],[[["matrix",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[]],[[]],[[],["omatrix",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["ordering",4]]],[[["matrix",3]]],[[["primint",8],["divassign",8]],[["omatrix",6],["option",4]]],[[["primint",8],["divassign",8]],["result",4]],[[]],[[]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[]],[[]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[],[["str",15],["result",4],["omatrix",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["ovector",6],["dimsum",6]]],[[],[["ovector",6],["dimsum",6]]],[[],["qr",3]],[[["matrix",3],["squarematrix",6]]],[[["matrix",3],["squarematrix",6]]],[[["matrix",3],["squarematrix",6]]],[[["matrix",3],["squarematrix",6]]],[[["matrix",3],["vector",6],["squarematrix",6]]],[[["matrix",3],["vector",6],["squarematrix",6]]],[[["squarematrix",6],["vector",6],["matrix",3]]],[[["squarematrix",6],["vector",6],["matrix",3]]],[[],["quaternion",3]],[[],["usize",15]],[[],["bool",15]],[[["matrix",3]],["bool",15]],[[],["bool",15]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["dynamic",3],["omatrix",6]]],[[],[["dynamic",3],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["const",3],["const",3]]],[[],["matrix",3]],[[["dynamic",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],["vec",3]],[[["dim",8]],[["dim",8],["omatrix",6]]],[[["usize",15]],[["dynamic",3],["omatrix",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]]],[[["usize",15]]],[[],["unitquaternion",6]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]]],[[["unit",3],["unit",3]],["option",4]],[[]],[[]],[[["usize",15]],[["u1",6],["matrixslice",6]]],[[],["rowiter",3]],[[],["rowitermut",3]],[[],["rowovector",6]],[[],["ovector",6]],[[["usize",15]],[["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["u1",6],["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["u1",6],["matrixslicemut",6],["dynamic",3]]],[[],["rowovector",6]],[[],["ovector",6]],[[],["rowovector",6]],[[],["ovector",6]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15],["dim",8]],[["matrixslice",6],["dim",8]]],[[["usize",15],["dim",8]],[["matrixslicemut",6],["dim",8]]],[[["usize",15]],[["dynamic",3],["matrixslice",6]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[["slicerange",8]],["matrixslice",6]],[[["slicerange",8]],["matrixslicemut",6]],[[["slicerange",8]]],[[["slicerange",8]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[],["omatrix",6]],[[]],[[]],[[],["vector1",6]],[[],["vector3",6]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]]],[[],["schur",3]],[[]],[[],[["dynamic",3],["omatrix",6]]],[[],[["omatrix",6],["dynamic",3]]],[[["usize",15],["vector",6]]],[[["vector",6]]],[[]],[[]],[[["usize",15],["rowvector",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["omatrix",6],["simdoption",3]]],[[],["simdoption",3]],[[]],[[],[["ovector",6],["dimminimum",6]]],[[]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[["unit",3]],[["unit",3],["ovector",6]]],[[]],[[]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["matrixslicemut",6],["dynamic",3]]],[[],["matrixslice",6]],[[],["matrixslicemut",6]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["dynamic",3],["matrixslicemut",6]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],["bool",15]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[]],[[],["omatrix",6]],[[["bool",15]],["svd",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["vector",6]]],[[],["symmetriceigen",3]],[[],["ovector",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["symmetrictridiagonal",3]],[[]],[[],[["ovector",6],["dimsum",6]]],[[],[["ovector",6],["dimsum",6]]],[[],[["dimsum",6],["omatrix",6]]],[[],["matrix4",6]],[[],["matrix3",6]],[[],["matrix4",6]],[[],["isometry3",6]],[[]],[[]],[[]],[[]],[[]],[[],["rotation",3]],[[],["rotation2",6]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[]],[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["ovector",6]],[["ovector",6],["dimnamediff",6]]],[[["ovector",6]],[["ovector",6],["dimnamediff",6]]],[[["vector2",6]],["vector2",6]],[[["vector3",6]],["vector3",6]],[[["vector3",6]],["vector3",6]],[[],["translation3",6]],[[],["omatrix",6]],[[]],[[["matrix",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],[["omatrix",6],["option",4]]],[[],["option",4]],[[["usize",15]],[["option",4],["schur",3]]],[[],["option",4]],[[]],[[["unit",3]],[["option",4],["unit",3]]],[[],["option",4]],[[["bool",15],["usize",15]],[["svd",3],["option",4]]],[[["usize",15]],[["option",4],["symmetriceigen",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["udu",3],["option",4]]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["omatrix",6]],[[]],[[]],[[]],[[],["omatrix",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],["omatrix",6]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]],["omatrix",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],null,null,null,null,null,null,null,[[["intoiterator",8]]],[[],["maybeuninit",19]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["x",3]],[[],["xy",3]],[[],["xyz",3]],[[],["xyzw",3]],[[],["xyzwa",3]],[[],["xyzwab",3]],[[],["ijkw",3]],[[],["m2x2",3]],[[],["m2x3",3]],[[],["m2x4",3]],[[],["m2x5",3]],[[],["m2x6",3]],[[],["m3x2",3]],[[],["m3x3",3]],[[],["m3x4",3]],[[],["m3x5",3]],[[],["m3x6",3]],[[],["m4x2",3]],[[],["m4x3",3]],[[],["m4x4",3]],[[],["m4x5",3]],[[],["m4x6",3]],[[],["m5x2",3]],[[],["m5x3",3]],[[],["m5x4",3]],[[],["m5x5",3]],[[],["m5x6",3]],[[],["m6x2",3]],[[],["m6x3",3]],[[],["m6x4",3]],[[],["m6x5",3]],[[],["m6x6",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["x",3]],["bool",15]],[[["xy",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyzw",3]],["bool",15]],[[["xyzwa",3]],["bool",15]],[[["xyzwab",3]],["bool",15]],[[["ijkw",3]],["bool",15]],[[["m2x2",3]],["bool",15]],[[["m2x3",3]],["bool",15]],[[["m2x4",3]],["bool",15]],[[["m2x5",3]],["bool",15]],[[["m2x6",3]],["bool",15]],[[["m3x2",3]],["bool",15]],[[["m3x3",3]],["bool",15]],[[["m3x4",3]],["bool",15]],[[["m3x5",3]],["bool",15]],[[["m3x6",3]],["bool",15]],[[["m4x2",3]],["bool",15]],[[["m4x3",3]],["bool",15]],[[["m4x4",3]],["bool",15]],[[["m4x5",3]],["bool",15]],[[["m4x6",3]],["bool",15]],[[["m5x2",3]],["bool",15]],[[["m5x3",3]],["bool",15]],[[["m5x4",3]],["bool",15]],[[["m5x5",3]],["bool",15]],[[["m5x6",3]],["bool",15]],[[["m6x2",3]],["bool",15]],[[["m6x3",3]],["bool",15]],[[["m6x4",3]],["bool",15]],[[["m6x5",3]],["bool",15]],[[["m6x6",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["x",3]],["bool",15]],[[["xy",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyzw",3]],["bool",15]],[[["xyzwa",3]],["bool",15]],[[["xyzwab",3]],["bool",15]],[[["ijkw",3]],["bool",15]],[[["m2x2",3]],["bool",15]],[[["m2x3",3]],["bool",15]],[[["m2x4",3]],["bool",15]],[[["m2x5",3]],["bool",15]],[[["m2x6",3]],["bool",15]],[[["m3x2",3]],["bool",15]],[[["m3x3",3]],["bool",15]],[[["m3x4",3]],["bool",15]],[[["m3x5",3]],["bool",15]],[[["m3x6",3]],["bool",15]],[[["m4x2",3]],["bool",15]],[[["m4x3",3]],["bool",15]],[[["m4x4",3]],["bool",15]],[[["m4x5",3]],["bool",15]],[[["m4x6",3]],["bool",15]],[[["m5x2",3]],["bool",15]],[[["m5x3",3]],["bool",15]],[[["m5x4",3]],["bool",15]],[[["m5x5",3]],["bool",15]],[[["m5x6",3]],["bool",15]],[[["m6x2",3]],["bool",15]],[[["m6x3",3]],["bool",15]],[[["m6x4",3]],["bool",15]],[[["m6x5",3]],["bool",15]],[[["m6x6",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["intoiterator",8],["const",3],["const",3]]],[[["intoiterator",8],["dynamic",3]]],[[["intoiterator",8],["dynamic",3]]],[[["const",3],["const",3]],["maybeuninit",19]],[[["dynamic",3]],["maybeuninit",19]],[[["dynamic",3]],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["arraystorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["vecstorage",3],["dynamic",3]],[["dynamic",3],["vecstorage",3]]],[[["vecstorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["vecstorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["arraystorage",3],["dynamic",3]],[["dynamic",3],["vecstorage",3]]],[[["const",3],["const",3]],["arraystorage",3]],[[["vecstorage",3],["dynamic",3]],[["dynamic",3],["vecstorage",3]]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[]],[[]],[[]],[[]],[[],["dynamic",3]],[[],["const",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["dynamic",3]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[["dynamic",3]],["bool",15]],[[["const",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["dynamic",3]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[]],[[]],[[],["dynamic",3]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[]],[[]],[[],["dynamic",3]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[]],[[]],[[["dynamic",3]],["bool",15]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rowiter",3]],[[],["columniter",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["matrixiter",3]],[[],["matrixitermut",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["owned",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["owned",6]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[]],[[]],[[]],[[]],[[["point",3]]],[[["point",3]]],[[]],[[]],[[["translation",3]]],[[["translation",3]]],[[["fnmut",8]]],[[],["matrix4",6]],[[],["matrix4",6]],[[]],[[],["projective3",6]],[[],["projective3",6]],[[]],[[],["vector4",6]],[[],["vector4",6]],[[]],[[]],[[]],[[]],[[]],[[],[["unit",3],["option",4]]],[[],[["unit",3],["option",4]]],[[],["vector",6]],[[],[["unit",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["unitquaternion",6],["scalar",8]]],[[],[["unitdualquaternion",6],["scalar",8]]],[[],[["unitcomplex",6],["scalar",8]]],[[],[["isometry2",6],["scalar",8]]],[[],[["scalar",8],["isometry3",6]]],[[],[["isometrymatrix2",6],["scalar",8]]],[[],[["scalar",8],["isometrymatrix3",6]]],[[],[["scalar",8],["point",3]]],[[],[["rotation",3],["scalar",8]]],[[],[["quaternion",3],["scalar",8]]],[[],[["dualquaternion",3],["scalar",8]]],[[],[["translation",3],["scalar",8]]],[[],[["scalar",8],["isometrymatrix3",6]]],[[],[["isometrymatrix2",6],["scalar",8]]],[[],[["scalar",8],["isometry3",6]]],[[],[["isometry2",6],["scalar",8]]],[[],[["similarity",3],["rotation2",6],["scalar",8]]],[[],[["similarity",3],["unitcomplex",6],["scalar",8]]],[[],[["similarity",3],["rotation3",6],["scalar",8]]],[[],[["similarity",3],["unitquaternion",6],["scalar",8]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[]],[[]],[[],["point",3]],[[]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[],["tgeneral",4]],[[],["tprojective",4]],[[],["taffine",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transform",3]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3],["similarity",3]]],[[["rotation",3]]],[[["similarity",3]]],[[["transform",3]]],[[["rotation",3],["isometry",3]]],[[["transform",3]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[]],[[["transform",3]]],[[["translation",3]]],[[["transform",3]]],[[["translation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["rotation",3]]],[[["similarity",3]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["rotation",3]]],[[["translation",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["transform",3]]],[[]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["rotation",3]]],[[["similarity",3]]],[[["transform",3]]],[[["translation",3]]],[[["transform",3]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[]],null,[[],["dualquaternion",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["dualquaternion",3]],["bool",15]],[[["translation",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["tgeneral",4]],["bool",15]],[[["tprojective",4]],["bool",15]],[[["taffine",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["const",3],["ovector",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector4",6]]],[[]],[[]],[[]],[[]],[[["point",3]]],[[["ovector",6],["const",3]]],[[]],[[]],[[]],[[["point",3]]],[[]],[[["translation",3]]],[[]],[[]],[[["svector",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unit",3]]],[[["unit",3]]],[[["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[["svector",6]]],[[]],[[]],[[]],[[]],[[]],[[["ovector",6],["dimnamesum",6]],["option",4]],[[["vector3",6]]],[[["isometry3",6]]],[[["isometry",3]]],[[["matrix2",6]]],[[["matrix3",6]]],[[["matrix3",6]]],[[["matrix2",6]]],[[["matrix2",6]]],[[["matrix3",6]]],[[["matrix2",6],["usize",15]]],[[["matrix3",6],["usize",15]]],[[["matrix3",6],["usize",15]]],[[["matrix2",6],["usize",15]]],[[["matrix3",6],["usize",15]]],[[["matrix2",6],["usize",15]]],[[["matrix4",6]]],[[["matrix4",6]]],[[["smatrix",6]]],[[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[["translation3",6],["unitquaternion",6]]],[[["vector",6],["u3",6]]],[[["translation",3]]],[[["translation",3]]],[[["unit",3],["vector",6]]],[[["quaternion",3]]],[[]],[[["quaternion",3]]],[[["quaternion",3]]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[["rotation2",6]]],[[["u1",6],["storage",8],["vector",6]]],[[["vector",6],["storage",8],["u3",6]]],[[["vector",6],["u3",6]]],[[["u1",6],["storage",8],["vector",6]]],[[["u1",6],["storage",8],["vector",6]]],[[["vector",6],["storage",8],["u3",6]]],[[["vector",6],["u3",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ovector",6]]],[[["point",3]]],[[["rotation",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["transform",3]]],[[["omatrix",6]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["omatrix",6]]],[[["isometry",3]]],[[["similarity",3]]],[[["transform",3]]],[[["translation",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["similarity",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["vector4",6]]],[[["svector",6]],["translation",3]],[[],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rotation",3]],[[]],[[]],[[]],[[],["translation",3]],[[]],[[]],[[]],[[],["vector3",6]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["smatrix",6]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[]],[[["isometry",3]]],[[]],[[]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[]],[[]],[[],["translation",3]],[[]],[[]],[[],["transform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["unit",3]],[["svector",6],["unit",3]]],[[["unit",3]],[["svector",6],["unit",3]]],[[["unit",3]],[["vector3",6],["unit",3]]],[[["unit",3]],[["vector3",6],["unit",3]]],[[["unit",3]],[["unit",3],["vector2",6]]],[[["unit",3]],[["unit",3],["svector",6]]],[[["unit",3]],[["svector",6],["unit",3]]],[[["unit",3]],[["unit",3],["svector",6]]],[[["ovector",6]],[["ovector",6],["const",3]]],[[["vector3",6]],["vector3",6]],[[["vector3",6]],["vector3",6]],[[["vector2",6]],["vector2",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ovector",6]],["bool",15]],[[["point",3]],["bool",15]],[[],["bool",15]],[[["omatrix",6]],["bool",15]],[[],["bool",15]],[[["rotation",3]],["bool",15]],[[["isometry",3]],["bool",15]],[[["similarity",3]],["bool",15]],[[["transform",3]],["bool",15]],[[["quaternion",3]],["bool",15]],[[],["bool",15]],[[["dualquaternion",3]],["bool",15]],[[],["bool",15]],[[["isometry",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[],["bool",15]],[[["transform",3]],["bool",15]],[[["similarity",3]],["bool",15]],[[["translation",3]],["bool",15]],[[["transform",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["isometry",3]],["bool",15]],[[],["bool",15]],[[["similarity",3]],["bool",15]],[[["transform",3]],["bool",15]],[[],["bool",15]],[[["omatrix",6]],["bool",15]],[[["similarity",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["transform",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[],[["const",3],["matrixiter",3],["const",3]]],[[],[["matrixitermut",3],["const",3],["const",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[],["bool",15]],[[]],[[]],[[["fnmut",8]],[["point",3],["scalar",8]]],[[],["smatrix",6]],[[],["omatrix",6]],[[],["smatrix",6]],[[],["omatrix",6]],[[],["smatrix",6]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["similarity",3],["rotation",3]]],[[["matrix",3]]],[[["rotation",3],["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["point",3]]],[[["point",3]]],[[["unit",3],["vector",6]]],[[["unit",3]]],[[["transform",3]]],[[["transform",3]]],[[["similarity",3]]],[[["rotation",3]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["quaternion",3]]],[[["quaternion",3]]],[[]],[[]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["dualquaternion",3]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["transform",3]]],[[["similarity",3]]],[[["transform",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["point",3]]],[[["point",3]]],[[["translation",3]]],[[["translation",3]]],[[["unitcomplex",6]]],[[["similarity",3]]],[[["svector",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["transform",3]]],[[["unitcomplex",6]]],[[["transform",3]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["unit",3]]],[[["similarity",3]]],[[["svector",6],["unit",3]]],[[["svector",6]]],[[["isometry",3]]],[[["isometry",3]]],[[["point",3]]],[[["point",3]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["point",3]]],[[["point",3]]],[[["svector",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["svector",6]]],[[["translation",3]]],[[["transform",3]]],[[["transform",3]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["svector",6]]],[[["svector",6]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["translation",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["transform",3]]],[[["transform",3]]],[[["point",3]]],[[["translation",3]]],[[["point",3]]],[[["isometry",3]]],[[["isometry",3]]],[[]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["quaternion",3]]],[[["quaternion",3]]],[[]],[[]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["dualquaternion",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["translation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["transform",3]]],[[["similarity",3]]],[[["dualquaternion",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["storage",8],["u3",6]]],[[["vector",6],["u3",6]]],[[]],[[["vector2",6]]],[[["vector3",6]]],[[["vector2",6]]],[[["vector3",6]]],[[["unit",3],["vector",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["storage",8],["u3",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector2",6]]],[[["vector2",6]]],[[["vector3",6]]],[[["vector3",6]]],[[["vector2",6]]],[[["vector2",6]]],[[["vector3",6]]],[[["vector3",6]]],[[["point",3],["unit",3],["vector",6]]],[[["vector",6],["u3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["vector",6]],["vector3",6]],[[["vector",6]],["vector3",6]],[[]],[[],["quaternion",3]],null,[[["matrix",3]]],[[["matrix",3],["vector",6]]],[[["matrix",3],["vector",6]]],[[["matrix",3]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[],["unitquaternion",6]],[[]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[["vector3",6]]],[[["vector3",6]]],[[]],[[]],null,[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",3]]],[[["point",3]]],[[]],[[]],[[]],[[],["svector",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector1",6]],[[],["svector",6]],[[],["vector3",6]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["transform",3],["supertcategoryof",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["simdoption",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["point",3]]],[[["vector",6]]],[[["point",3]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[],["point",3]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["matrix3",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[],[["dimnamesum",6],["ovector",6]]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["isometry3",6]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["projective3",6]],[[],["projective3",6]],[[],["rotation",3]],[[],["rotation2",6]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["dimnamesum",6],["ovector",6]]],[[],["point",3]],[[],["similarity",3]],[[],["rotation",3]],[[],["isometry",3]],[[],["transform",3]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[],["translation",3]],[[],["isometry",3]],[[],["similarity",3]],[[],["transform",3]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["transform",3]],[[],["similarity",3]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["isometry",3]],[[],["similarity",3]],[[],["transform",3]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["transform",3]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[]],[[["point",3]],["point",3]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["vector3",6]],["vector3",6]],[[["vector3",6]],["vector3",6]],[[["vector2",6]],["vector2",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[],["translation3",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["transform",3]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["smatrix",6]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[],[["u1",6],["rstride",6],["u3",6],["matrixslice",6],["cstride",6]]],null,[[],[["u1",6],["matrixslicemut",6],["rstride",6],["u3",6],["cstride",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bidiagonal",3]],[[],["cholesky",3]],[[],["colpivqr",3]],[[],["fullpivlu",3]],[[],["hessenberg",3]],[[],["lu",3]],[[],["permutationsequence",3]],[[],["qr",3]],[[],["schur",3]],[[],["svd",3]],[[],["symmetriceigen",3]],[[],["symmetrictridiagonal",3]],[[],["udu",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["numcomplex",3],["ovector",6]]],[[],[["omatrix",6],["dimminimum",6]]],null,[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[],[["one",8],["closedneg",8]]],[[],[["ovector",6],["dimminimum",6]]],[[],["ovector",6]],[[],[["option",4],["ovector",6]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["omatrix",6]],null,[[]],[[["usize",15]]],[[]],[[["usize",15],["vector",6]],[["cholesky",3],["dimsum",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[],["omatrix",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["omatrix",6]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["omatrix",6]],[[],[["omatrix",6],["dimminimum",6]]],[[],["usize",15]],[[["omatrix",6]]],[[["omatrix",6]],["option",4]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6],["bool",15]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]],["option",4]],[[["omatrix",6]]],[[["omatrix",6],["ovector",6]]],[[],[["dimdiff",6],["ovector",6]]],[[],[["ovector",6],["dimdiff",6]]],[[],["permutationsequence",3]],[[],["permutationsequence",3]],[[],["permutationsequence",3]],[[["matrix",3]]],[[["matrix",3]]],[[],[["str",15],["result",4],["omatrix",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["permutationsequence",3]],[[],["omatrix",6]],[[],[["omatrix",6],["dimminimum",6]]],[[],["omatrix",6]],[[["matrix",3]]],[[["matrix",3]]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["dimminimum",6],["omatrix",6]]],[[],["usize",15]],[[["vector",6]]],[[],[["str",15],["result",4],["omatrix",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[["usize",15]],[["cholesky",3],["dimdiff",6]]],null,[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],[["str",15],["result",4],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["omatrix",6],["complexfield",8],["matrix",3],["dim",8]],["bool",15]],[[["omatrix",6],["usize",15]],["option",4]],[[["omatrix",6],["bool",15],["usize",15]],["option",4]],[[["omatrix",6],["usize",15]],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["dimminimum",6],["omatrix",6]]],null,null,[[]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[],["omatrix",6]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["dimminimum",6],["omatrix",6]]],[[]],[[],[["dimminimum",6],["omatrix",6]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complexfield",8]],["complexfield",8]],[[["omatrix",6]],[["realfield",8],["dim",8],["ovector",6]]],[[["omatrix",6],["ovector",6]]],[[["vector",6]],[["dimdiff",6],["ovector",6]]],[[["vector",6]],["ovector",6]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[]],[[]],null,[[]],[[]],[[]],[[["vector",6]],["option",4]],[[["vector",6]],["option",4]],[[],["givensrotation",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["typeid",3]],[[]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[],[["numcomplex",3],["ovector",6]]],[[],[["option",4],["ovector",6]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],["bool",15]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[],["ovector",6]]],"p":[[8,"SimdValue"],[8,"ComplexField"],[8,"SimdComplexField"],[3,"Complex"],[6,"UnitQuaternion"],[6,"UnitDualQuaternion"],[6,"UnitComplex"],[8,"SimdBool"],[8,"RealField"],[6,"Translation3"],[6,"Isometry3"],[6,"SMatrix"],[6,"OMatrix"],[6,"Matrix2"],[6,"Matrix3"],[6,"Matrix4"],[6,"DVector"],[6,"OVector"],[6,"SVector"],[6,"DVectorSlice"],[6,"DVectorSliceMut"],[6,"MatrixSlice"],[6,"MatrixSliceMut"],[6,"Rotation2"],[6,"Rotation3"],[8,"SimdRealField"],[8,"SimdPartialOrd"],[3,"LpNorm"],[3,"ArrayStorage"],[8,"Normed"],[8,"SliceRange"],[3,"Matrix"],[3,"Unit"],[6,"SquareMatrix"],[6,"Vector"],[3,"SliceStorageMut"],[3,"VecStorage"],[3,"SliceStorage"],[3,"EuclideanNorm"],[3,"UniformNorm"],[6,"MatrixSliceMutMN"],[8,"Scalar"],[8,"Norm"],[8,"Allocator"],[8,"Reallocator"],[8,"DimEq"],[8,"SameDimension"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[3,"ShapeConstraint"],[3,"XYZWA"],[3,"XYZWAB"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"DefaultAllocator"],[8,"ToConst"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimMin"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"ToTypenum"],[8,"DimName"],[3,"Dynamic"],[3,"Const"],[8,"Dim"],[8,"MatrixIndex"],[8,"MatrixIndexMut"],[3,"RowIterMut"],[3,"ColumnIterMut"],[3,"MatrixIter"],[3,"MatrixIterMut"],[3,"RowIter"],[3,"ColumnIter"],[8,"Storage"],[8,"ReshapableStorage"],[8,"StorageMut"],[8,"TCategoryMul"],[3,"Point"],[3,"Rotation"],[3,"Quaternion"],[3,"DualQuaternion"],[3,"Translation"],[3,"Isometry"],[3,"Similarity"],[3,"Transform"],[3,"Orthographic3"],[3,"Perspective3"],[3,"Reflection"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[6,"Isometry2"],[6,"IsometryMatrix2"],[6,"IsometryMatrix3"],[8,"TCategory"],[8,"AbstractRotation"],[6,"Point1"],[6,"Point2"],[6,"Point3"],[6,"Point4"],[6,"Point5"],[6,"Point6"],[3,"PermutationSequence"],[3,"Bidiagonal"],[3,"Cholesky"],[3,"ColPivQR"],[3,"FullPivLU"],[3,"Hessenberg"],[3,"LU"],[3,"QR"],[3,"Schur"],[3,"SVD"],[3,"SymmetricEigen"],[3,"SymmetricTridiagonal"],[3,"UDU"],[3,"GivensRotation"]]},\
"ndarray":{"doc":"The <code>ndarray</code> crate provides an <em>n</em>-dimensional container for …","t":[12,12,12,12,6,6,6,6,6,6,6,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,3,3,13,6,4,8,8,8,8,8,3,5,16,16,16,16,8,13,16,16,4,8,4,13,13,13,8,8,8,16,16,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,3,6,16,8,18,18,8,8,8,13,16,16,16,13,13,3,3,16,13,6,6,8,8,8,8,3,8,8,3,8,3,3,13,16,3,4,16,3,16,13,13,3,3,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,5,5,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,10,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,5,14,12,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,5,5],"n":["0","0","1","2","ArcArray","ArcArray1","ArcArray2","Array","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayBase","ArrayD","ArrayView","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","AsArray","AssignElem","Axis","AxisDescription","Continue","CowArray","CowRepr","Data","DataClone","DataMut","DataOwned","DataShared","Dim","Dim","Dim","Dim","Dim","Dim","Dimension","Done","Elem","Elem","ErrorKind","FixedInitializer","FoldWhile","IncompatibleLayout","IncompatibleShape","Index","IndexLonger","IntoDimension","IntoNdProducer","Item","Item","Ix","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","IxDynImpl","Ixs","Larger","LinalgScalar","NDIM","NDIM","NdFloat","NdIndex","NdProducer","OutOfBounds","Output","Output","Output","Overflow","Owned","OwnedArcRepr","OwnedRepr","Pattern","RangeLimited","RawArrayView","RawArrayViewMut","RawData","RawDataClone","RawDataMut","RawDataSubst","RawViewRepr","RemoveAxis","ScalarOperand","Shape","ShapeBuilder","ShapeError","Slice","Slice","SliceArg","SliceInfo","SliceOrIndex","Smaller","StrideShape","Strides","Unsupported","View","ViewRepr","Zip","__private__","__private__","__private__","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_fastest_varying_stride_order","_fastest_varying_stride_order","_fastest_varying_stride_order","_fastest_varying_stride_order","accumulate_axis_inplace","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all_close","and","and","and","and","and","and_broadcast","and_broadcast","and_broadcast","and_broadcast","and_broadcast","apply","apply","apply","apply","apply","apply","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_collect","apply_collect","apply_collect","apply_collect","apply_collect","arr0","arr1","arr2","arr3","array","as_array_view","as_array_view","as_array_view_mut","as_array_view_mut","as_init_slice","as_mut_ptr","as_ptr","as_ref","as_ref","as_slice","as_slice_memory_order","as_slice_memory_order_mut","as_slice_mut","as_standard_layout","assign","assign_elem","assume_init","aview0","aview1","aview2","aview_mut1","aview_mut2","axes","axis","axis_chunks_iter","axis_chunks_iter_mut","axis_iter","axis_iter_mut","azip","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from_with_ptr","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","cmp","collapse_axis","cols","column","column_mut","concatenate","concatenate","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","default","default","default","default","default_strides","default_strides","deref","deref","deref_into_view","deref_into_view","deref_into_view","deref_into_view","deref_into_view_mut","deref_into_view_mut","deref_mut","diag","diag_mut","dim","div","div","div","div_assign","div_assign","dot","dot","dot","dot","dot","dot","drop","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal","exact_chunks","exact_chunks_mut","eye","f","f","fill","first","first_index","first_index","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold_axis","fold_while","fold_while","fold_while","fold_while","fold_while","fold_while","fortran_strides","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_diag","from_dimension","from_dimension","from_elem","from_iter","from_kind","from_shape","from_shape","from_shape","from_shape","from_shape_fn","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_simple_fn","from_shape_vec","from_shape_vec_unchecked","from_vec","gencolumns","gencolumns_mut","genrows","genrows_mut","geomspace","get","get","get","get_mut","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index_axis","index_axis_inplace","index_axis_move","index_axis_mut","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","indexed","indexed_iter","indexed_iter_mut","indices","indices_of","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis_inplace","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_diag","into_dimension","into_dimension","into_dimension","into_dimensionality","into_dyn","into_dyn","into_dyn","into_inner","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_producer","into_raw_vec","into_raw_vec","into_scalar","into_scalar","into_scalar","into_scalar","into_scalar","into_scalar","into_shape","into_shape","into_shape","into_shared","into_shared","into_shared","into_slice","into_slice","into_slice","into_slice","invert_axis","is_done","is_empty","is_index","is_owned","is_owned","is_owned","is_slice","is_square","is_standard_layout","is_view","is_view","is_view","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","iter","iter","iter_mut","kind","lanes","lanes_mut","last_elem","len","len","len","len_of","linalg","linspace","logspace","map","map_axis","map_axis_mut","map_inplace","map_mut","mapv","mapv_inplace","mapv_into","max_stride_axis","max_stride_axis","maybe_uninit","mean","mean_axis","merge_axes","min_stride_axis","min_stride_axis","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multi_slice_move","multi_slice_move","multi_slice_mut","ncols","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ne","ne","ne","ne","ne","neg","new","new","new","new","next_for","next_for","next_for","next_for","not","nrows","ones","out_ndim","outer_iter","outer_iter_mut","partial_cmp","permuted_axes","prelude","product","range","raw_dim","raw_view","raw_view_mut","rcarr1","rcarr2","rcarr3","reborrow","reborrow","reborrow","reborrow","rem","rem","rem","rem_assign","rem_assign","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","reshape","reversed_axes","row","row_mut","rows","s","scalar_sum","scaled_add","select","set_f","set_f","set_last_elem","shape","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr_assign","shr_assign","size","size","size","size","size","size","size","size_checked","size_checked","size_checked","size_checked","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_axis","slice_axis_inplace","slice_axis_mut","slice_collapse","slice_move","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","split","split","split","split","split","split","split_at","split_at","split_at","split_at","split_at","split_at","split_at","split_at","stack","stack","stack_new_axis","stack_new_axis","start","std_axis","step","step_by","step_by","stride","stride_of","stride_offset","stride_offset","stride_offset","stride_offset_checked","stride_offset_checked","stride_offset_checked","strides","strides","strides","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum_axis","swap","swap_axes","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_shared","to_slice","to_slice","to_string","to_string","to_string","to_vec","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_is_unique","try_is_unique","try_is_unique","try_is_unique","try_is_unique","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uget","uget","uget","uget_mut","uninitialized","uswap","var_axis","view","view_mut","visit","windows","zero","zero","zero","zero","zero","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zip_mut_with","end","start","step","Axes","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Indices","IndicesIter","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","all","all","any","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","contiguous_stride","contiguous_stride","contiguous_stride","count","count","find","find","find_map","find_map","fmt","fmt","fmt","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","last","last","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth_back","nth_back","position","position","rfold","rfold","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_at","split_at","split_at","split_at","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Dot","Output","dot","general_mat_mul","general_mat_vec_mul"],"q":["ndarrayndarray::SliceOrIndex","","","ndarray::iterndarray::linalg","","","",""],"d":["","","","","An array where the data has shared ownership and is copy …","one-dimensional shared ownership array","two-dimensional shared ownership array","An array that owns its data uniquely.","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","An <em>n</em>-dimensional array.","dynamic-dimensional array","A read-only array view.","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","A read-write array view.","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","Argument conversion into an array view","A producer element that can be assigned to once","An axis index.","Description of the axis, its length and its stride.","Continue folding with this value","An array with copy-on-write behavior.","CowArray’s representation.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Dimension description.","Create a new dimension value.","","Dimension type of the producer","Dimension type","","Array shape and index trait.","Fold is complete and will return this value","The array element type.","","Error code for an error related to array shape or layout.","Fixed-size array used for array initialization","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","incompatible memory layout","incompatible shape","A single index.","Extra indexing methods for array views","Argument conversion a dimension.","Argument conversion into a producer.","The element produced per iteration.","The element produced per iteration.","Array index type","Create a zero-dimensional index","zero-dimensionial","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Dynamic dimension or index type.","Array index type (signed)","Next larger dimension","Elements that support linear algebra operations.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Floating-point element types <code>f32</code> and <code>f64</code>.","Tuple or fixed size arrays that can be used to index an …","A producer of an n-dimensional set of elements; for …","out of bounds indexing","The resulting array storage of the same kind but …","","The type of the reference to the element that is …","overflow when computing offset, length, etc.","Owned data.","ArcArray’s representation.","Array’s representation.","Pattern matching friendly form of the dimension value.","the shape does not fit inside type limits","A read-only array view without a lifetime.","A mutable array view without a lifetime.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array pointer’s representation.","Array shape with a next smaller dimension.","Elements that can be used as direct operands in …","A contiguous array shape of n dimensions.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","An error related to array shape or layout.","A slice (range with step size).","A range with step size. <code>end</code> is an exclusive index. …","<code>SliceArg</code> is the type which is used to specify slicing for …","Represents all of the necessary information to perform a …","A slice (range with step) or an index.","Next smaller dimension (if applicable)","An array shape of n dimensions in c-order, f-order or …","","aliasing array elements","Borrowed data.","Array view’s representation.","Lock step function application across several arrays or …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","","","","","","","","","","","","Iterates over pairs of consecutive elements along the …","","","","","","","","","","","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Return <code>true</code> if the arrays’ elementwise differences are …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and collect the results into a new array, which has …","Apply and collect the results into a new array, which has …","Apply and collect the results into a new array, which has …","Apply and collect the results into a new array, which has …","Apply and collect the results into a new array, which has …","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Borrow as a read-only array view.","Borrow as a read-only array view.","Borrow as a read-write array view.","Borrow as a read-write array view.","","Return a mutable pointer to the first element in the …","Return a pointer to the first element in the array.","","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice, if it is contiguous …","Return a standard-layout array containing the data, …","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Assign the value <code>input</code> to the element that self …","<strong>Promise</strong> that the array’s elements are all fully …","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Return an iterator over the length and stride of each …","Return axis","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Array zip macro: lock step function application across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Act like a larger size and/or shape array by <em>broadcasting</em> …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Selects <code>index</code> along the axis, collapsing the axis into …","Return the number of columns (length of <code>Axis(1)</code>) in the …","Return an array view of column <code>index</code>.","Return a mutable array view of column <code>index</code>.","Concatenate arrays along the given axis.","Concatenate arrays along the given axis.","","","","","","Create an array with default values, shape <code>shape</code>","","","","","","","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Converts to a mutable view of the array.","","Return an view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of …","Return the shape of the array in its “pattern” form, …","","","","","","Perform matrix multiplication of rectangular arrays <code>self</code> …","Compute the dot product of one-dimensional arrays.","","Perform dot product or matrix multiplication of arrays …","","Perform the matrix multiplication of the row vector <code>self</code> …","","","","","","","","","","","","","","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","Create an identity matrix of size <code>n</code> (square 2D array).","","","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","Returns a reference to the first element of the array, or …","","","Returns a mutable reference to the first element of the …","","","","","","","","","","","","","","","","","","","","","","","","Traverse the array elements and apply a fold, returning …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Fold along an axis.","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","","Converts the <code>Vec</code> of arrays to an owned 2-D array.","Converts the <code>Vec</code> of arrays to an owned 3-D array.","","Create a one-dimensional array from a vector (no copying …","","","Create a one-dimensional read-only array view of the data …","Create a read-only array view of the array.","Create a one-dimensional read-write array view of the …","Create a read-write array view of the array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","","","","","","","","","","","","","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","","Create a 2D matrix from its diagonal","","","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create a one-dimensional array from an iterable.","Create a new <code>ShapeError</code>","Create a read-only array view borrowing its data from a …","Create a read-write array view borrowing its data from a …","Create a read-only array view borrowing its data from a …","Create a read-write array view borrowing its data from a …","Create an array with values created by the function <code>f</code>.","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Create an <code>RawArrayView<A, D></code> from shape information and a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Create an <code>RawArrayView<A, D></code> from shape information and a …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create a one-dimensional array from a vector (no copying …","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Create a one-dimensional array with <code>n</code> geometrically …","Get a reference of a element through the view.","Return a reference to the element at <code>index</code>, or return <code>None</code>…","Convert a mutable array view to a mutable reference of a …","Return a mutable reference to the element at <code>index</code>, or …","","","","","","","Get a reference of a element through the view.","","Convert a mutable array view to a mutable reference of a …","Return the index of the axis.","","","","","","","","","","Returns a view restricted to <code>index</code> along the axis, with …","Collapses the array to <code>index</code> along the axis and removes …","Collapses the array to <code>index</code> along the axis and removes …","Returns a mutable view restricted to <code>index</code> along the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>…","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Create an iterable of the array shape <code>shape</code>.","Return an iterable of the indices of the passed-in array.","","Insert new array axis at <code>axis</code> and return the result.","","","","","","","","Insert new array axis of length 1 at <code>axis</code>, modifying the …","","","","","","","","","","","","","","","","","","","","Return the diagonal as a one-dimensional array.","","","","Convert an array or array view to another with the same …","Convert the dimensional into a dynamic dimensional …","Convert the dimensional into a dynamic dimensional …","Convert any array or array view to a dynamic dimensional …","Return the inner value","","","Turn the array into a uniquely owned array, cloning the …","","","","","","Convert the dimension into a pattern matching friendly …","","","","","","","","","Convert the value into an <code>NdProducer</code>.","Return a vector of the elements in the array, in the way …","Return a vector of the elements in the array, in the way …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","Returns the single element in the array without cloning …","Returns the single element in the array without cloning …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","","Transform the array into <code>shape</code>; any shape with the same …","","Turn the array into a shared ownership (copy on write) …","","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Reverse the stride of <code>axis</code>.","Return true if it is <code>Done</code>, false if <code>Continue</code>","Return whether the array has any elements","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Return true if the array is square, false otherwise.","Return <code>true</code> if the array data is laid out in contiguous …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the data is the <code>View</code> variant.","","","","","","","","Producers, iterables and iterators.","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return the <code>ErrorKind</code> of this error.","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","","","Return the total number of elements in the array.","Return length","Return the length of <code>axis</code>.","Linear algebra.","Create a one-dimensional array with <code>n</code> evenly spaced …","Create a one-dimensional array with <code>n</code> logarithmically …","Call <code>f</code> by reference on each element and create a new array…","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Modify the array in place by calling <code>f</code> by mutable …","Call <code>f</code> on a mutable reference of each element and create …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with …","Return the axis with the greatest stride (by absolute …","","Create an array with uninitalized elements, shape <code>shape</code>.","Returns the arithmetic mean x̅ of all elements in the …","Return mean along <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","","","","","","","","","","","","","Split the view into multiple disjoint slices.","Split the view into multiple disjoint slices.","Return multiple disjoint, sliced, mutable views of the …","Return the number of columns (length of <code>Axis(1)</code>) in the …","Returns the number of dimensions (number of axes).","","Return the number of dimensions (axes) in the array","","","","","","","","","","","","","Perform an elementwise negation of <code>self</code> and return the …","","Create a new <code>Slice</code> with the given extents.","Returns a new <code>SliceInfo</code> instance.","","","","","","Perform an elementwise unary not of <code>self</code> and return the …","Return the number of rows (length of <code>Axis(0)</code>) in the …","Create an array with ones, shape <code>shape</code>.","Returns the number of dimensions after calling <code>.slice()</code> …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","","Permute the axes.","ndarray prelude.","Return the product of all elements in the array.","Create a one-dimensional array with elements from <code>start</code> …","Return the shape of the array as it stored in the array.","Return a raw view of the array.","Return a raw mutable view of the array.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","","","","","","","Remove array axis <code>axis</code> and return the result.","","","","","","","","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for …","Transpose the array by reversing axes.","Return an array view of row <code>index</code>.","Return a mutable array view of row <code>index</code>.","Return the number of rows (length of <code>Axis(0)</code>) in the …","Slice argument constructor.","Return the sum of all elements in the array.","Perform the operation <code>self += alpha * rhs</code> efficiently, …","Along <code>axis</code>, select arbitrary subviews corresponding to …","","","","Return the shape of the array as a slice.","","","","","","","","","","","Compute the size of the dimension (number of elements)","Compute the size of the dimension (number of elements)","Return a the number of element tuples in the Zip","","","","Return the size of the shape in number of elements","Compute the size while checking for overflow.","Compute the size while checking for overflow.","","","","Return a sliced view of the array.","","","","","","","","Return a view of the array, sliced along the specified …","Slice the array in place along the specified axis.","Return a mutable view of the array, sliced along the …","Slice the array in place without changing the number of …","Slice the array, possibly changing the number of …","","Return a sliced read-write view of the array.","","","","","","","","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one array …","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","","Return standard deviation along <code>axis</code>.","","Create a new <code>Slice</code> with the given step size (multiplied …","Returns a new <code>SliceOrIndex</code> with the given step size …","Return stride","Return the stride of <code>axis</code>.","Self is an index, return the stride offset","Self is an index, return the stride offset","Self is an index, return the stride offset","Return stride offset for this dimension and index.","Return stride offset for this dimension and index.","Return stride offset for this dimension and index.","","Return the strides of the array as a slice.","","","","","","","","","","","","Return the sum of all elements in the array.","Return sum along <code>axis</code>.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap axes <code>ax</code> and <code>bx</code>.","Return a transposed view of the array.","Return an uniquely owned copy of the array.","","","","","","","","","","","","","","","","","","","Return a shared ownership (copy on write) array.","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","","","","Return an vector with the elements of the one-dimensional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference of a element through the view without …","Perform <em>unchecked</em> array indexing.","Convert a mutable array view to a mutable reference of a …","Perform <em>unchecked</em> array indexing.","Create an array with uninitalized elements, shape <code>shape</code>.","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Return variance along <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Visit each element in the array by calling <code>f</code> by reference …","Return a window producer and iterable.","","","","","","","","Creates a dimension of all zeros with the specified ndim.","","Create a new dimension value with <code>n</code> axes, all zeros","Create an array with zeros, shape <code>shape</code>.","","","","","","","","Create a new dimension value with <code>n</code> axes, all zeros","Traverse two arrays in unspecified order, in lock step, …","","","","An iterator over the length and stride of each axis of an …","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterableplits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Matrix Multiplication","The result of the operation.","","General matrix-matrix multiplication.","General matrix-vector multiplication."],"i":[1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,4,5,6,7,0,3,8,9,0,0,0,10,10,11,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,12,12,0,0,0,10,13,5,14,10,15,0,0,12,10,0,0,0,0,0,0,0,0,0,0,0,0,0,11,12,0,0,12,0,4,10,15,0,0,8,6,12,15,16,17,18,18,19,19,20,20,20,20,21,21,21,21,20,20,21,21,20,20,20,22,22,22,22,22,22,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,12,12,12,12,9,21,21,23,23,21,21,21,21,21,21,24,21,0,0,0,0,0,21,1,21,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,15,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,21,15,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,21,21,21,30,31,21,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,21,16,16,21,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,15,16,17,18,18,19,2,21,21,21,21,0,0,32,33,30,31,21,21,20,27,20,20,23,27,21,21,30,31,21,31,27,21,21,21,21,21,21,21,21,21,21,21,21,21,21,16,26,21,25,10,26,11,2,20,20,27,20,20,21,21,21,4,28,21,21,20,20,21,21,21,21,21,21,21,16,25,25,10,26,11,11,23,22,3,1,2,20,27,17,28,29,21,22,22,22,22,22,22,21,22,22,22,22,22,22,20,34,35,21,21,36,36,32,32,33,33,15,16,25,10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,23,22,22,3,1,2,20,27,27,27,17,18,19,28,28,29,29,21,37,20,21,21,25,21,21,32,33,21,21,21,21,21,32,33,30,31,21,21,21,21,21,21,21,21,21,14,21,33,21,21,26,11,2,20,27,14,21,33,2,20,20,20,20,20,20,20,20,27,21,21,21,21,38,38,20,20,20,20,20,20,20,21,20,20,20,20,20,20,20,20,27,38,38,20,20,20,20,20,20,20,22,21,21,0,0,37,21,20,20,20,20,20,20,20,21,21,15,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,21,7,38,27,21,12,12,21,3,32,33,21,15,16,17,19,19,12,37,20,20,20,20,20,20,20,5,21,39,21,21,21,39,32,33,4,21,28,21,16,17,21,21,32,33,21,3,21,11,21,36,15,11,21,21,21,36,15,20,20,20,20,20,20,20,0,21,21,25,21,21,20,9,21,1,21,0,21,21,21,21,21,21,21,21,21,21,21,20,21,21,21,21,20,20,21,21,21,20,20,21,21,20,20,20,21,33,21,21,12,37,21,20,20,20,20,20,20,20,26,11,2,20,27,21,16,26,23,17,20,20,20,20,21,21,21,23,21,21,2,21,0,21,21,21,21,21,0,0,0,21,21,32,33,21,21,21,21,21,40,21,20,20,20,20,20,20,20,21,21,21,21,21,0,21,21,21,4,28,20,21,21,21,21,21,21,21,21,21,21,21,12,12,22,20,20,20,28,12,12,20,20,37,21,20,20,20,20,20,20,20,21,21,21,21,21,37,21,20,20,20,20,20,20,20,22,22,22,22,22,22,21,21,21,21,32,33,30,31,0,0,0,0,26,21,26,26,11,1,21,20,20,20,20,20,20,4,21,28,21,21,21,20,20,21,21,20,20,20,21,21,21,21,21,21,21,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,21,21,32,21,25,11,21,15,16,17,18,19,21,15,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,21,15,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,15,16,17,18,19,37,20,20,20,20,20,20,20,21,15,16,25,10,26,11,23,22,3,1,2,20,27,17,18,19,28,29,14,21,33,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,12,37,37,21,20,20,20,20,20,20,20,20,21,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,43,42,43,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,44,45,48,50,42,52,55,57,58,59,60,61,44,45,48,50,42,52,55,57,58,59,60,61,42,43,54,58,60,42,43,42,43,42,43,58,60,61,42,43,57,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,42,43,42,43,51,52,53,54,59,60,45,47,42,43,51,52,53,54,55,56,57,59,60,61,42,43,54,55,56,60,61,42,43,42,43,42,43,42,43,45,47,42,43,51,52,53,54,55,56,57,59,60,61,54,55,56,60,44,45,48,50,42,52,55,57,58,59,60,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,44,45,46,47,48,49,50,42,43,51,52,53,54,55,56,57,58,59,60,61,0,62,62,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ix0",6]],null,[[["ix",6]],["ix1",6]],null,[[["ix",6]],["ix2",6]],null,[[["ix",6]],["ix3",6]],null,[[["ix",6]],["ix4",6]],null,[[["ix",6]],["ix5",6]],null,[[["ix",6]],["ix6",6]],null,[[],["ixdyn",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["axis",3]]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["ix",6]]],[[]],[[["arraybase",3]]],[[]],[[["ix",6]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["arraybase",3]],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array0",6]],[[],[["array1",6],["clone",8]]],[[],[["clone",8],["array2",6]]],[[],[["array3",6],["clone",8]]],null,[[],[["arrayview1",6],["ix",6]]],[[],[["arrayview1",6],["ix",6]]],[[],[["ix",6],["arrayviewmut1",6]]],[[],[["ix",6],["arrayviewmut1",6]]],[[]],[[]],[[]],[[],["sliceinfo",3]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["cowarray",6]],[[["arraybase",3]]],[[]],[[],["arraybase",3]],[[],["arrayview0",6]],[[],["arrayview1",6]],[[],["arrayview2",6]],[[],["arrayviewmut1",6]],[[],["arrayviewmut2",6]],[[],["axes",3]],[[],["axis",3]],[[["axis",3],["usize",15]],["axischunksiter",3]],[[["axis",3],["usize",15]],["axischunksitermut",3]],[[["axis",3]],["axisiter",3]],[[["axis",3]],["axisitermut",3]],null,[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["arrayview",6]]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],["arraybase",3]],[[]],[[],["shapeerror",3]],[[],["errorkind",4]],[[],["slice",3]],[[]],[[]],[[],["zip",3]],[[],["foldwhile",4]],[[]],[[],["axis",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[]],[[],["rawviewrepr",3]],[[],["viewrepr",3]],[[],["shape",3]],[[],["strideshape",3]],[[]],[[]],[[["nonnull",3]],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["axis",3]],["ordering",4]],[[["axis",3],["usize",15]]],[[],["usize",15]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[["axis",3]],[["shapeerror",3],["array",6],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["dim",3]],[[],["ixdynimpl",3]],[[]],[[]],[[]],[[]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[],["arrayviewmut",6]],[[]],[[],["arrayview1",6]],[[],["arrayviewmut1",6]],[[]],[[],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]]],[[["arraybase",3]],[["array",6],["ix1",6]]],[[]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],[["array",6],["ix1",6]]],[[]],null,[[["arraybase",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["slice",3]],["bool",15]],[[["sliceorindex",4]],["bool",15]],[[["axis",3]],["bool",15]],[[],["bool",15]],[[["dim",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["exactchunks",3]],[[],["exactchunksmut",3]],[[["ix",6]]],[[],["shape",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[]],[[["vec",3]]],[[["vec",3]]],[[]],[[["vec",3]]],[[["array",6]],["cowarray",6]],[[["arrayview",6]],["cowarray",6]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[["rangeinclusive",3],["isize",15]],["slice",3]],[[["rangefull",3]],["slice",3]],[[["isize",15],["range",3]],["slice",3]],[[["rangetoinclusive",3],["i32",15]],["slice",3]],[[["rangeto",3],["i32",15]],["slice",3]],[[["rangefrom",3],["i32",15]],["slice",3]],[[]],[[["rangeinclusive",3],["i32",15]],["slice",3]],[[["i32",15],["range",3]],["slice",3]],[[["usize",15],["rangetoinclusive",3]],["slice",3]],[[["usize",15],["rangeto",3]],["slice",3]],[[["rangefrom",3],["usize",15]],["slice",3]],[[["rangeinclusive",3],["usize",15]],["slice",3]],[[["range",3],["usize",15]],["slice",3]],[[["isize",15],["rangetoinclusive",3]],["slice",3]],[[["isize",15],["rangeto",3]],["slice",3]],[[["isize",15],["rangefrom",3]],["slice",3]],[[["usize",15],["rangeto",3]],["sliceorindex",4]],[[["rangefrom",3],["usize",15]],["sliceorindex",4]],[[]],[[["isize",15],["range",3]],["sliceorindex",4]],[[["rangeinclusive",3],["isize",15]],["sliceorindex",4]],[[["isize",15],["rangefrom",3]],["sliceorindex",4]],[[["isize",15],["rangeto",3]],["sliceorindex",4]],[[["i32",15]],["sliceorindex",4]],[[["isize",15],["rangetoinclusive",3]],["sliceorindex",4]],[[["usize",15]],["sliceorindex",4]],[[["isize",15]],["sliceorindex",4]],[[["slice",3]],["sliceorindex",4]],[[["rangefull",3]],["sliceorindex",4]],[[["range",3],["usize",15]],["sliceorindex",4]],[[["rangetoinclusive",3],["i32",15]],["sliceorindex",4]],[[["rangeinclusive",3],["usize",15]],["sliceorindex",4]],[[["usize",15],["rangetoinclusive",3]],["sliceorindex",4]],[[["i32",15],["range",3]],["sliceorindex",4]],[[["rangeto",3],["i32",15]],["sliceorindex",4]],[[["rangeinclusive",3],["i32",15]],["sliceorindex",4]],[[["rangefrom",3],["i32",15]],["sliceorindex",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["ix",6]]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[]],[[]],[[["arraybase",3]]],[[],["option",4]],[[],["option",4]],[[]],[[],[["arraybase",3],["ix1",6]]],[[["errorkind",4]]],[[],[["result",4],["shapeerror",3]]],[[],[["result",4],["shapeerror",3]]],[[],[["result",4],["shapeerror",3]]],[[],[["result",4],["shapeerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],[["result",4],["shapeerror",3]]],[[["vec",3]]],[[["vec",3]]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["axis",3],["usize",15]],["arrayview",6]],[[["axis",3],["usize",15]]],[[["axis",3],["usize",15]],["arraybase",3]],[[["axis",3],["usize",15]],["arrayviewmut",6]],[[["ix1",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["ixdyn",6]],["isize",15]],[[["ix1",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[]],[[],["indexediter",3]],[[],["indexeditermut",3]],[[],["indices",3]],[[["arraybase",3]],["indices",3]],[[["axis",3]]],[[["axis",3]],["arraybase",3]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arraybase",3],["ix1",6]]],[[]],[[],["ix1",6]],[[]],[[],[["shapeerror",3],["arraybase",3],["result",4]]],[[],["ixdyn",6]],[[],["ixdyn",6]],[[],[["arraybase",3],["ixdyn",6]]],[[]],[[]],[[]],[[],["array",6]],[[["cowrepr",4],["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[],[["arraybase",3],["result",4],["shapeerror",3]]],[[],["shape",3]],[[],["arcarray",6]],[[],["ownedarcrepr",3]],[[],["ownedarcrepr",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["axis",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["iter",3]],[[],["itermut",3]],[[],["errorkind",4]],[[["axis",3]],["lanes",3]],[[["axis",3]],["lanesmut",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["ix",6]],[[["axis",3]],["usize",15]],null,[[["usize",15]]],[[["usize",15]]],[[],["array",6]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[],["axis",3]],[[],["axis",3]],[[]],[[],["option",4]],[[["axis",3]],[["option",4],["array",6]]],[[["axis",3]],["bool",15]],[[],["axis",3]],[[],["axis",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[["ix",6]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["slice",3]],["bool",15]],[[["sliceorindex",4]],["bool",15]],[[["axis",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[]],[[["vec",3]]],[[["isize",15],["option",4]],["slice",3]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[["vec",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["axisiter",3]],[[],["axisitermut",3]],[[["axis",3]],[["option",4],["ordering",4]]],[[],["arraybase",3]],null,[[]],[[]],[[]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],[["arcarray1",6],["clone",8]]],[[],[["arcarray2",6],["clone",8]]],[[],[["ix3",6],["clone",8],["arcarray",6]]],[[],["arrayviewmut",6]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[["axis",3]]],[[["axis",3]],["arraybase",3]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]],["ix1",6]],[[["axis",3]],["ix0",6]],[[["axis",3]]],[[],["arraybase",3]],[[],["arraybase",3]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["usize",15]],null,[[]],[[["arraybase",3]]],[[["axis",3]],["array",6]],[[["bool",15]],["shape",3]],[[["bool",15]]],[[["usize",15]]],[[]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[["sliceinfo",3]],["arrayview",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3],["slice",3]],["arrayview",6]],[[["axis",3],["slice",3]]],[[["axis",3],["slice",3]],["arrayviewmut",6]],[[]],[[["sliceinfo",3]],["arraybase",3]],[[]],[[["sliceinfo",3]],["arrayviewmut",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3]],[["array",6],["result",4],["shapeerror",3]]],null,[[["axis",3]],[["array",6],["result",4],["shapeerror",3]]],null,null,[[["axis",3]],["array",6]],null,[[["isize",15]]],[[["isize",15]]],[[],["ixs",6]],[[["axis",3]],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],[["isize",15],["option",4]]],[[],[["isize",15],["option",4]]],[[],[["isize",15],["option",4]]],[[],["strideshape",3]],[[]],[[],["strideshape",3]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["arraybase",3]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[]],[[["arraybase",3]]],[[]],[[]],[[["ix",6]]],[[]],[[["axis",3]],["array",6]],[[]],[[["usize",15]]],[[],["arrayview",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arcarray",6]],[[],["option",4]],[[],["option",4]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["vec",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[]],[[],["windows",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["ixdyn",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["ixdyn",6]],[[["arraybase",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["indicesiter",3]],[[],["indices",3]],[[],["indexediter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",15]],[[]],[[],["isize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3],["arraybase",3]]]],"p":[[3,"AxisDescription"],[3,"Axis"],[4,"FoldWhile"],[8,"ShapeBuilder"],[8,"IntoNdProducer"],[8,"NdProducer"],[8,"IntoDimension"],[8,"RawData"],[8,"FixedInitializer"],[4,"ErrorKind"],[4,"SliceOrIndex"],[8,"Dimension"],[8,"RawDataSubst"],[8,"IndexLonger"],[4,"CowRepr"],[3,"OwnedRepr"],[3,"OwnedArcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[3,"Dim"],[3,"ArrayBase"],[3,"Zip"],[3,"SliceInfo"],[8,"AssignElem"],[3,"ShapeError"],[3,"Slice"],[3,"IxDynImpl"],[3,"Shape"],[3,"StrideShape"],[6,"RawArrayView"],[6,"RawArrayViewMut"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Array2"],[6,"Array3"],[6,"CowArray"],[6,"IxDyn"],[6,"Ix"],[6,"Array"],[8,"RemoveAxis"],[13,"Slice"],[3,"Iter"],[3,"IterMut"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksMut"],[3,"ExactChunksIterMut"],[3,"Lanes"],[3,"LanesMut"],[3,"Windows"],[3,"IndexedIterMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"IndicesIter"],[3,"Indices"],[3,"IndexedIter"],[3,"AxisIter"],[3,"Axes"],[8,"Dot"]]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":[3,6,3,8,8,8,8,8,3,8,8,16,8,8,8,8,8,6,8,8,8,8,8,5,10,10,11,5,10,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,10,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,10,11,11,11,11,11,10,10,11,11,11,10,11,11,11,10,11,11,11,5,10,11,11,11,5,10,11,11,11,11,11,11,11,11,0,11,10,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,0,10,11,11,11,11,11,10,11,11,10,11,10,11,10,11,11,10,11,10,11,10,11,10,11,11,11,11,11,11,10,11,10,10,10,11,11,11,0,11,10,11,11,10,10,11,10,10,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,0,5,10,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,5,5,5,5,0,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,5,10,10,11,10,11,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,0,10,11,11,11,11,11,11,11,11,11,11,10,10,5,10,11,11,11,3,3,13,13,3,13,4,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,3,6,6,3,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,5,5,10,6,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,10,13,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,5,10,10,10,10,5,5,5,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,10,10,10,10,11,10,10,10,10,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,5,10,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["BigInt","BigRational","BigUint","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","Float","FromPrimitive","FromStrRadixErr","Integer","Num","NumCast","One","PrimInt","Rational","Saturating","Signed","ToPrimitive","Unsigned","Zero","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","arg","as_","asin","asin","asinh","asinh","assign_from_slice","assign_from_slice","atan","atan","atan2","atanh","atanh","average_ceil","average_ceil","average_floor","average_floor","bigint","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_mul","checked_pow","checked_sub","checked_sub","checked_sub","checked_sub","clamp","classify","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","complex","conj","cos","cos","cosh","cosh","count_ones","count_zeros","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","divides","divides","divides","epsilon","eq","eq","eq","exp","exp","exp2","exp_m1","expf","extended_gcd","extended_gcd_lcm","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_polar","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd","gcd","gcd_lcm","hash","hash","hash","hypot","i","im","infinity","integer","integer_decode","into","into","into","inv","inv","is_even","is_even","is_even","is_finite","is_finite","is_infinite","is_infinite","is_multiple_of","is_multiple_of","is_multiple_of","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_odd","is_odd","is_odd","is_one","is_one","is_one","is_one","is_positive","is_positive","is_sign_negative","is_sign_positive","is_zero","is_zero","is_zero","is_zero","iter","l1_norm","lcm","lcm","lcm","leading_zeros","ln","ln","ln_1p","log","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mod_floor","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","ne","neg","neg","neg","neg_infinity","neg_zero","new","new","new","next_multiple_of","norm","norm_sqr","not","nth_root","nth_root","nth_root","nth_root","one","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powf","powf","powi","powi","powu","prev_multiple_of","product","product","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rotate_left","rotate_right","round","saturating_add","saturating_sub","scale","set_one","set_one","set_one","set_one","set_zero","set_zero","set_zero","set_zero","shl","shl","shl_assign","shl_assign","shr","shr","shr_assign","shr_assign","sign","signed_shl","signed_shr","signum","signum","signum","signum","sin","sin","sin_cos","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","swap_bytes","tan","tan","tanh","tanh","to_be","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_owned","to_owned","to_owned","to_polar","to_radians","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","trailing_zeros","traits","trunc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","zero","zero","BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","description","eq","eq","fmt","fmt","fmt","from","from","hash","into","into","mul","ne","neg","partial_cmp","to_bigint","to_biguint","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","Complex","Complex32","Complex64","ParseComplexError","borrow","borrow_mut","description","eq","fmt","fmt","from","im","into","ne","re","to_string","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Pow","checked_pow","pow","pow","BigRational","ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","description","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_integer","to_owned","to_owned","to_string","to_string","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","cos","cosh","count_ones","count_zeros","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["numnum::bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::complex","","","","","","","","","","","","","","","","","","","num::integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::pow","","","","","num::rationalnum::traitsnum::traits::bounds","","","num::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::identities","","","","","","","","","","num::traits::int","","","","","","","","","","","","","","","","","num::traits::ops","","","","","","num::traits::ops::checked","","","","","","","","","","","","","","","","num::traits::ops::inv","","","num::traits::ops::mul_add","","","","","num::traits::ops::overflowing","","","","","","num::traits::ops::saturating","","","","","","","","","num::traits::ops::wrapping","","","","","","","","","","","","num::traits::pow","","","","","num::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::sign","","","","","","","","",""],"d":["A big signed integer type.","Alias for arbitrary precision rationals.","A big unsigned integer type.","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of …","A complex number in Cartesian form.","Generic trait for floating point numbers","A generic trait for converting a number to a value.","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","An interface for casting between machine scalars.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Useful functions for signed numbers (i.e. numbers that …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>…","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the principal Arg of self.","","Computes the arcsine of a number. Return value is in …","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","Computes the principal value of inverse hyperbolic sine …","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Computes the arctangent of a number. Return value is in …","Computes the principal value of the inverse tangent of …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic …","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>…","Determines the fewest bits necessary to express the …","","","","","","","","","","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the truncated principal cube root of <code>self</code> – see …","","","Returns the truncated principal cube root of <code>self</code> – see …","Computes the principal value of the cube root of <code>self</code>.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","","","","Divides two numbers, checking for underflow, overflow and …","","","","Multiplies two numbers, checking for underflow or …","","","","Raises a value to the power of exp, returning <code>None</code> if an …","Subtracts two numbers, checking for underflow. If …","","","","A value bounded by a minimum and a maximum","Returns the floating point category of the number. If …","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","Computes the cosine of a number (in radians).","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","Computes the hyperbolic cosine of <code>self</code>.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","Floored integer division.","","","","","Simultaneous floored integer division and modulus. …","Simultaneous truncated integer division and modulus. …","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Returns epsilon, a small positive value.","","","","Returns <code>e^(self)</code>, (the exponential function).","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Raises a floating point number to the complex power <code>self</code>.","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","Returns the largest integer less than or equal to a …","","","","","","","","","","","","","","","","","","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","","","","","","","","","","","","","","","","","","","","","","","","Convert an integer from big endian to the target’s …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Converts a <code>f32</code> to return an optional value of this type. …","","","","Converts a <code>f64</code> to return an optional value of this type. …","","","","Converts an <code>i128</code> to return an optional value of this …","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","","Converts an <code>i64</code> to return an optional value of this type. …","","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","","Convert an integer from little endian to the target’s …","Convert a polar representation into a complex number.","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in…","Creates and initializes a <code>BigInt</code> from an array of bytes …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","Converts an <code>u128</code> to return an optional value of this …","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","","Converts an <code>u64</code> to return an optional value of this type. …","","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this …","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Calculate the length of the hypotenuse of a right-angle …","Returns imaginary unit","Imaginary portion of the complex number","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","","","","Returns <code>1/self</code>","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Floored integer modulo, satisfying:","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","","Returns the negative infinite value.","Returns <code>-0.0</code>.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","Create a new Complex","Rounds up to nearest multiple of argument.","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","Raises <code>self</code> to a complex power.","Raise a number to a floating point power.","Raises <code>self</code> to a floating point power.","Raise a number to an integer power.","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","","Returns the truncated principal square root of <code>self</code> – …","Returns the truncated principal square root of <code>self</code> – …","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","Convert <code>self</code> to big endian from the target’s endianness.","","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Converts radians to degrees.","","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","","","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","","","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","Convert <code>self</code> to little endian from the target’s …","","","","Convert to polar form (r, theta), such that …","Converts degrees to radians.","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Returns the integer in the requested base in …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","","Returns the number of trailing zeros in the binary …","","Return the integer part of a number.","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","","Converts the value of <code>self</code> to a <code>BigInt</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","","","","","","","","","","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","A complex number in Cartesian form.","","","","","","","","","","","Imaginary portion of the complex number","","","Real portion of the complex number","","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Alias for arbitrary precision rationals.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","","Rounds towards minus infinity.","Renders as <code>numer/denom</code>. If denom=1, renders as numer.","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>. Fails if <code>denom</code> is zero.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Return Euler’s number.","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that …","Return the full circle constant <code>τ</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","","Returns the largest integer less than or equal to a …","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","Convert an integer from big endian to the target’s …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","","","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have…","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,2,3,4,2,5,2,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,5,5,2,5,2,5,4,6,2,5,2,2,5,4,6,4,6,0,4,4,6,6,4,4,6,6,4,4,6,6,4,4,6,6,4,6,4,4,6,6,4,4,6,6,4,6,5,4,6,5,0,0,2,4,4,6,6,5,2,7,4,4,6,8,4,4,6,9,4,4,6,0,10,4,4,6,0,2,4,6,5,4,6,5,4,6,0,5,2,5,2,5,11,11,4,6,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,12,12,4,6,4,6,12,12,4,6,12,4,6,2,4,6,5,2,5,2,2,5,12,12,5,5,2,4,4,4,4,4,4,6,6,6,6,6,6,5,5,5,5,5,5,5,5,2,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,5,5,5,5,11,4,4,6,4,6,14,5,4,6,14,5,4,6,14,5,14,5,14,5,14,4,6,5,14,5,14,5,11,5,4,6,4,6,4,4,4,6,4,6,5,1,4,6,5,4,6,14,5,14,5,14,5,14,4,6,5,14,5,14,5,12,4,6,12,4,6,5,2,5,5,2,0,2,4,6,5,5,5,12,4,6,2,5,2,5,12,4,6,2,5,3,4,2,5,12,4,6,4,6,15,5,3,4,2,2,16,4,6,5,0,5,12,4,6,11,2,5,2,2,5,2,2,2,17,2,2,2,17,2,12,4,6,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,2,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,2,5,4,6,5,2,2,4,6,5,12,5,5,4,4,4,6,6,0,15,4,6,5,4,6,4,6,0,0,11,5,5,5,5,5,5,5,2,5,2,5,5,12,4,6,5,5,0,0,0,0,0,5,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,11,11,2,18,18,5,4,6,15,5,4,6,16,5,4,6,4,6,4,6,4,6,4,11,11,0,2,3,4,2,5,2,2,5,2,4,4,6,6,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,5,5,5,5,4,6,5,5,11,2,5,2,5,11,4,6,4,4,6,4,6,4,6,2,4,6,19,5,4,6,19,5,4,6,19,5,19,5,19,5,19,4,6,5,19,5,19,5,11,4,6,5,5,2,4,6,4,6,4,4,4,6,4,6,5,4,6,19,5,19,5,19,5,4,6,19,4,6,5,19,5,19,5,11,0,2,4,6,5,4,6,5,4,6,5,5,11,11,0,16,4,6,5,0,0,20,20,0,20,0,0,0,20,21,20,21,20,21,20,21,20,21,20,21,20,21,21,20,21,20,20,21,20,21,20,20,22,23,20,21,21,20,21,20,21,20,21,0,0,0,0,24,0,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,25,25,25,25,25,25,25,5,25,25,5,25,25,25,25,0,0,0,0,0,0,26,0,26,0,27,28,27,28,0,29,28,28,0,12,0,12,0,12,0,12,12,28,12,12,28,27,28,0,12,28,0,12,27,28,27,12,12,12,0,12,0,12,0,28,27,27,12,0,29,12,0,29,28,27,28,27,28,27,28,28,28,0,0,0,0,0,0,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,0,0,0,0,0,0,30,31,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,30,31,32,33,34,35,36,0,0,0,36,0,0,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,38,37,38,37,37,37,37,37,37,38,37,38,37,37,38,37,37,37,37,37,37,37,37,37,38,37,37,37,38,38,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,38,37,37,38,37,38,37,38,37,0,0,0,0,0,0,0,0,0,0,39,40,39,39,39,39,39,39,39,39,39,0,0,0,0,1,0,40,39,39,39,39,39,39,0,0,0,0,0,0,0,0,0,0,41,42,36,39,0,0,0,0,39,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,2,3,0,2,3,2,2,24,2,2,2,2,2,40,43,40,43,0,0,0,2,2,7,8,9,44,0,45,46,47,10,0,0,0,2,2,2,11,11,2,2,2,2,0,2,40,43,43,2,13,40,43,11,14,14,14,14,14,14,14,14,11,1,14,14,14,14,14,14,2,0,2,0,2,40,43,41,2,2,2,3,2,15,3,2,2,16,43,11,2,2,2,2,2,2,17,2,2,2,17,2,2,42,48,2,2,2,0,15,0,0,0,11,36,2,2,0,2,11,11,2,18,49,50,18,51,15,16,0,11,11,0,2,3,2,2,2,2,11,2,2,11,2,19,19,19,19,19,19,19,19,11,2,43,19,19,19,19,19,19,11,2,40,43,40,43,40,43,11,11,52,53,54,55,56,57,0,16,0,17,17,0,0,0,0,24,0,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,39,39,39,39,39,39,39,39,39,39,0,0,0,39,39,39,39,39,39,39,39,39,2,58,2,2,2,2,2,2,2,2,2,2,58,58,2,2,2,58,2,2,2,2,2,58,2,58,2,58,2,58,2,2,58,2,58,2,58,2,58,2,58,2,58,2,2,2,2,2,2,58,58,2,2,58,58,2,58,2,2,58,2,58,2,58,2,2,2,58,2,58,2,58,2,58,2,2,2,2,2,2,58,2,58,2,2,58,0,0,15,16,0,15,15,16,0,16,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,44,45,46,47,10,0,41,41,0,0,42,42,48,0,0,0,59,60,61,0,0,0,0,18,49,50,18,51,0,0,0,0,0,0,52,53,54,55,56,57,36,0,0,0,36,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,3,0,3,3,3,0,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["bigint",3]],[[]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["u32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[["bigint",3]]],[[["u8",15]]],[[["u128",15]]],[[["i32",15]]],[[["i128",15]]],[[["i64",15]]],[[["isize",15]]],[[["u64",15]]],[[["i8",15]]],[[["bigint",3]]],[[["u32",15]]],[[["i16",15]]],[[["u16",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u128",15]]],[[["usize",15]]],[[["u64",15]]],[[["u32",15]]],[[["biguint",3]]],[[["u8",15]]],[[["u16",15]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["sign",4]]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],null,[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[],["usize",15]],[[],["usize",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["option",4]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["biguint",3]],[[],["biguint",3]],[[],["complex",3]],[[]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[["usize",15]],["option",4]],[[],["option",4]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["bigint",3]],[["bigint",3],["option",4]]],[[["biguint",3]],[["biguint",3],["option",4]]],[[]],[[],["fpcategory",4]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[]],[[]],[[]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],null,[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["u32",15]],[[],["u32",15]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[["bigint",3]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["u8",15]]],[[["i16",15]]],[[["bigint",3]]],[[["i64",15]]],[[["i8",15]]],[[["isize",15]]],[[["i128",15]]],[[["bigint",3]]],[[["i32",15]]],[[["u128",15]]],[[["u64",15]]],[[["u16",15]]],[[["u32",15]]],[[["usize",15]]],[[["u16",15]]],[[["u32",15]]],[[["u128",15]]],[[["u8",15]]],[[["usize",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u64",15]]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[]],[[]],[[["bigint",3]]],[[["biguint",3]]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["complex",3]],["bool",15]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[],["extendedgcd",3]],[[]],[[["complex",3]],["complex",3]],[[],["complex",3]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],["option",4]],[[["i32",15]],["bigint",3]],[[]],[[["u32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[]],[[["u64",15]],["biguint",3]],[[],["complex",3]],[[],["complex",3]],[[]],[[],[["option",4],["complex",3]]],[[]],[[["sign",4],["biguint",3]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["f32",15]],["option",4]],[[["f32",15]],[["option",4],["complex",3]]],[[["f64",15]],[["bigint",3],["option",4]]],[[["f64",15]],[["biguint",3],["option",4]]],[[["f64",15]],["option",4]],[[["f64",15]],[["option",4],["complex",3]]],[[["i128",15]],[["bigint",3],["option",4]]],[[["i128",15]],[["biguint",3],["option",4]]],[[["i128",15]],["option",4]],[[["i128",15]],[["option",4],["complex",3]]],[[["i16",15]],["option",4]],[[["i16",15]],[["option",4],["complex",3]]],[[["i32",15]],["option",4]],[[["i32",15]],[["option",4],["complex",3]]],[[["i64",15]],["option",4]],[[["i64",15]],[["bigint",3],["option",4]]],[[["i64",15]],[["biguint",3],["option",4]]],[[["i64",15]],[["option",4],["complex",3]]],[[["i8",15]],["option",4]],[[["i8",15]],[["option",4],["complex",3]]],[[["isize",15]],["option",4]],[[["isize",15]],[["option",4],["complex",3]]],[[]],[[],["complex",3]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[["u32",15],["sign",4]],[["bigint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[],["bigint",3]],[[],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["str",15]],[["result",4],["bigint",3],["parsebiginterror",3]]],[[["str",15]],[["parsebiginterror",3],["result",4],["biguint",3]]],[[["str",15]],[["complex",3],["result",4]]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],[["result",4],["bigint",3],["parsebiginterror",3]]],[[["u32",15],["str",15]],[["parsebiginterror",3],["result",4],["biguint",3]]],[[["u32",15],["str",15]],[["result",4],["complex",3]]],[[["u128",15]],[["bigint",3],["option",4]]],[[["u128",15]],[["biguint",3],["option",4]]],[[["u128",15]],["option",4]],[[["u128",15]],[["option",4],["complex",3]]],[[["u16",15]],["option",4]],[[["u16",15]],[["option",4],["complex",3]]],[[["u32",15]],["option",4]],[[["u32",15]],[["option",4],["complex",3]]],[[["u64",15]],["option",4]],[[["u64",15]],[["bigint",3],["option",4]]],[[["u64",15]],[["biguint",3],["option",4]]],[[["u64",15]],[["option",4],["complex",3]]],[[["u8",15]],["option",4]],[[["u8",15]],[["option",4],["complex",3]]],[[["usize",15]],["option",4]],[[["usize",15]],[["option",4],["complex",3]]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],null,[[]],null,[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[],["u32",15]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["isize",15]]],[[["u128",15]]],[[["i64",15]]],[[["i8",15]]],[[["i128",15]]],[[["usize",15]]],[[["bigint",3]]],[[["u64",15]]],[[["i16",15]]],[[["u32",15]]],[[["i32",15]]],[[["u16",15]]],[[["bigint",3]]],[[["u8",15]]],[[["u32",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u64",15]]],[[["u16",15]]],[[["biguint",3]]],[[["u8",15]]],[[["u128",15]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]],["bool",15]],[[],["bigint",3]],[[],["biguint",3]],[[]],[[]],[[]],[[["vec",3],["u32",15],["sign",4],["global",3]],["bigint",3]],[[["vec",3],["u32",15],["global",3]],["biguint",3]],[[],["complex",3]],[[]],[[]],[[]],[[],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[["u32",15]],[["bigint",3],["option",4]]],[[["u32",15]],[["biguint",3],["option",4]]],[[["bigint",3]],[["ordering",4],["option",4]]],[[["biguint",3]],[["ordering",4],["option",4]]],null,[[["usize",15]]],[[["u32",15]]],[[["f32",15]]],[[["f64",15]]],[[["f64",15]]],[[["f32",15]]],[[["complex",3]]],[[["complex",3]]],[[["complex",3]],["complex",3]],[[]],[[],["complex",3]],[[["i32",15]]],[[["i32",15]],["complex",3]],[[["u32",15]],["complex",3]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[],["complex",3]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],null,null,[[]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["i8",15]]],[[["bigint",3]]],[[["u128",15]]],[[["i128",15]]],[[["u32",15]]],[[["u16",15]]],[[["u64",15]]],[[["i16",15]]],[[["i64",15]]],[[["bigint",3]]],[[["usize",15]]],[[["isize",15]]],[[["i32",15]]],[[["u8",15]]],[[["u8",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u32",15]]],[[["u128",15]]],[[["u16",15]]],[[["u64",15]]],[[["biguint",3]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]]],[[["usize",15]]],[[],["sign",4]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["bigint",3]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[],["bigint",3]],[[],["bigint",3]],[[],["biguint",3]],[[],["biguint",3]],[[],["complex",3]],[[["isize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["i8",15]]],[[["usize",15]]],[[["u8",15]]],[[["u16",15]]],[[["i32",15]]],[[["bigint",3]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["bigint",3]]],[[["i64",15]]],[[["u128",15]]],[[["i128",15]]],[[["u64",15]]],[[["u16",15]]],[[["u128",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u64",15]]],[[["biguint",3]]],[[["u8",15]]],[[["u32",15]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],[["bigint",3],["option",4]]],[[],[["bigint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[]],[[],[["global",3],["u8",15],["vec",3]]],[[]],[[],[["global",3],["u8",15],["vec",3]]],[[]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["isize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],[["global",3],["u8",15],["vec",3]]],[[["u32",15]]],[[["u32",15]],[["global",3],["u8",15],["vec",3]]],[[],[["global",3],["u8",15],["vec",3]]],[[],[["global",3],["u8",15],["vec",3]]],[[["u32",15]],["string",3]],[[["u32",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u32",15]]],[[]],[[],[["vec",3],["u32",15],["global",3]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["u32",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["complex",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[],["bigint",3]],[[],["biguint",3]],[[],["complex",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["sign",4]],[[],["parsebiginterror",3]],[[]],[[]],[[["sign",4]],["ordering",4]],[[],["str",15]],[[["sign",4]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[["sign",4]],["sign",4]],[[["parsebiginterror",3]],["bool",15]],[[],["sign",4]],[[["sign",4]],[["ordering",4],["option",4]]],[[],[["bigint",3],["option",4]]],[[],[["biguint",3],["option",4]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],null,null,null,null,[[]],[[]],[[],["str",15]],[[["parsecomplexerror",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],null,[[]],[[["parsecomplexerror",3]],["bool",15]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],[[],["rangefrom",3]],[[],["rangestepfrom",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepfrom",3]],[[],["rangestepinclusive",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],[["ratio",3],["option",4]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[]],[[]],[[["ratio",3]],["ordering",4]],[[]],[[],["str",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[["ratio",3]],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["option",4],["ratio",3]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f32",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["option",4],["ratio",3]]],[[["f64",15]],[["ratio",3],["option",4]]],[[["f64",15]],[["ratio",3],["option",4]]],[[],[["ratio",3],["option",4]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["ratio",3],["option",4]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i128",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["ratio",3],["option",4]]],[[["i64",15]],[["option",4],["ratio",3]]],[[["i64",15]],[["option",4],["ratio",3]]],[[],["ratio",3]],[[["str",15]],[["parseratioerror",3],["ratio",3],["result",4]]],[[["u32",15],["str",15]],[["parseratioerror",3],["ratio",3],["result",4]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["option",4],["ratio",3]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u128",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["option",4],["ratio",3]]],[[["u64",15]],[["ratio",3],["option",4]]],[[["u64",15]],[["ratio",3],["option",4]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[["ratio",3]],[["ordering",4],["option",4]]],[[["isize",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]],null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],null,[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["u32",15]]],[[]],[[]],[[["i32",15]]],null,[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[]],[[]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i8",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]]],"p":[[8,"Num"],[8,"Float"],[8,"Signed"],[3,"BigInt"],[3,"Complex"],[3,"BigUint"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"PrimInt"],[8,"Integer"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"Saturating"],[8,"ToPrimitive"],[4,"Sign"],[3,"ParseBigIntError"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"AsPrimitive"],[3,"ParseComplexError"],[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[8,"Pow"],[3,"Ratio"],[3,"ParseRatioError"],[8,"FloatConst"],[4,"FloatErrorKind"],[8,"Inv"],[8,"MulAdd"],[3,"ParseFloatError"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","hash","hash","hash","into","into","into","into","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","lcm","lcm","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","neg","neg","new","new","not","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_one","set_one","set_zero","set_zero","shl","shl","shl_assign","shl_assign","shr","shr","shr_assign","shr_assign","sign","signum","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zero","zero"],"q":["num_bigintd":["A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>…","Determines the fewest bits necessary to express the …","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in…","Creates and initializes a <code>BigInt</code> from an array of bytes …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Greatest Common Divisor (GCD) of the …","","","","","","","","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code>…","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in …","Returns the integer in the requested base in …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,2,3,3,2,2,3,3,2,2,3,3,2,2,3,3,2,3,2,2,3,3,2,2,3,3,1,2,3,4,1,2,3,4,2,2,3,3,2,2,3,2,2,3,2,2,3,2,2,3,1,2,3,4,1,2,3,4,1,2,3,2,3,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,1,2,3,4,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,3,2,3,2,3,2,3,2,3,2,3,1,2,3,1,2,3,4,2,3,2,3,2,2,3,2,3,2,2,3,2,3,2,3,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,1,2,3,2,3,2,2,2,3,3,2,3,2,3,1,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,5,2,3,6,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,2,3,4,2,3,2,3,2,2,2,3,2,3,4,2,3,2,3,2,3,1,2,3,4,1,2,3,4,1,2,3,4,2,3],"f":[null,null,null,null,null,null,null,null,null,[[],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["i8",15]]],[[["isize",15]]],[[["u8",15]]],[[["bigint",3]]],[[["i64",15]]],[[["bigint",3]]],[[["i128",15]]],[[["i32",15]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["usize",15]]],[[["i16",15]]],[[["u64",15]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["biguint",3]]],[[["u128",15]]],[[["biguint",3]]],[[["u32",15]]],[[["sign",4]]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[],["usize",15]],[[],["usize",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["bigint",3]],[["option",4],["bigint",3]]],[[["biguint",3]],[["option",4],["biguint",3]]],[[],["sign",4]],[[],["bigint",3]],[[],["biguint",3]],[[],["parsebiginterror",3]],[[]],[[]],[[]],[[]],[[["sign",4]],["ordering",4]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],[[],["bigint",3]],[[],["biguint",3]],[[],["str",15]],[[["isize",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]]],[[["usize",15]]],[[["i16",15]]],[[["i128",15]]],[[["i8",15]]],[[["i64",15]]],[[["isize",15]]],[[["i32",15]]],[[["u128",15]]],[[["u16",15]]],[[["u64",15]]],[[["u8",15]]],[[["bigint",3]]],[[["bigint",3]]],[[["u64",15]]],[[["u128",15]]],[[["u32",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["sign",4]],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]]],[[["biguint",3]]],[[["i64",15]]],[[["i128",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["isize",15]]],[[["u64",15]]],[[["u128",15]]],[[["u8",15]]],[[]],[[["u32",15]]],[[["usize",15]]],[[["u16",15]]],[[["u32",15]]],[[["u8",15]]],[[["u128",15]]],[[["u64",15]]],[[]],[[["usize",15]]],[[]],[[["biguint",3],["sign",4]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["f64",15]],[["option",4],["bigint",3]]],[[["f64",15]],[["option",4],["biguint",3]]],[[["i128",15]],[["option",4],["bigint",3]]],[[["i128",15]],[["option",4],["biguint",3]]],[[["i64",15]],[["option",4],["bigint",3]]],[[["i64",15]],[["option",4],["biguint",3]]],[[["u32",15],["sign",4]],[["option",4],["bigint",3]]],[[["u32",15]],[["option",4],["biguint",3]]],[[["u32",15],["sign",4]],[["option",4],["bigint",3]]],[[["u32",15]],[["option",4],["biguint",3]]],[[],["bigint",3]],[[],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["str",15]],[["bigint",3],["parsebiginterror",3],["result",4]]],[[["str",15]],[["biguint",3],["result",4],["parsebiginterror",3]]],[[["u32",15],["str",15]],[["bigint",3],["parsebiginterror",3],["result",4]]],[[["u32",15],["str",15]],[["biguint",3],["result",4],["parsebiginterror",3]]],[[["u128",15]],[["option",4],["bigint",3]]],[[["u128",15]],[["option",4],["biguint",3]]],[[["u64",15]],[["option",4],["bigint",3]]],[[["u64",15]],[["option",4],["biguint",3]]],[[["bigint",3]],["bigint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[["sign",4]],["sign",4]],[[["u64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["usize",15]]],[[["u128",15]]],[[["bigint",3]]],[[["u8",15]]],[[["u16",15]]],[[["i128",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["bigint",3]]],[[["i32",15]]],[[["i64",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["parsebiginterror",3]],["bool",15]],[[],["sign",4]],[[],["bigint",3]],[[],["biguint",3]],[[["u32",15],["sign",4],["vec",3]],["bigint",3]],[[["u32",15],["vec",3]],["biguint",3]],[[],["bigint",3]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["bigint",3]],[[],["biguint",3]],[[["u32",15]],[["option",4],["bigint",3]]],[[["u32",15]],[["option",4],["biguint",3]]],[[["sign",4]],[["option",4],["ordering",4]]],[[["bigint",3]],[["option",4],["ordering",4]]],[[["biguint",3]],[["option",4],["ordering",4]]],[[]],[[]],[[["i128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["i8",15]]],[[["u16",15]]],[[["i64",15]]],[[["i128",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["i32",15]]],[[["isize",15]]],[[["i16",15]]],[[["bigint",3]]],[[["usize",15]]],[[["bigint",3]]],[[["u8",15]]],[[["u8",15]]],[[["biguint",3]]],[[["u128",15]]],[[["biguint",3]]],[[["u16",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[["usize",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]]],[[["usize",15]]],[[],["sign",4]],[[],["bigint",3]],[[]],[[]],[[]],[[]],[[["u16",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]]],[[["u8",15]]],[[["i32",15]]],[[["usize",15]]],[[["i64",15]]],[[["i128",15]]],[[["u64",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u16",15]]],[[["bigint",3]]],[[["u128",15]]],[[["bigint",3]]],[[["usize",15]]],[[["u16",15]]],[[["u32",15]]],[[["u8",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u128",15]]],[[["u64",15]]],[[]],[[]],[[],[["option",4],["bigint",3]]],[[],[["option",4],["bigint",3]]],[[],[["option",4],["bigint",3]]],[[],[["option",4],["biguint",3]]],[[],[["option",4],["biguint",3]]],[[],[["option",4],["biguint",3]]],[[],[["option",4],["biguint",3]]],[[]],[[],[["vec",3],["u8",15]]],[[]],[[],[["vec",3],["u8",15]]],[[],[["f32",15],["option",4]]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],[["vec",3],["u8",15]]],[[["u32",15]]],[[["u32",15]],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[["u32",15]],["string",3]],[[["u32",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[]],[[],[["u32",15],["vec",3]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bigint",3]],[[],["biguint",3]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[3,"ParseBigIntError"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","Complex32","Complex64","ParseComplexError","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","conj","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","mul","mul","mul","mul","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","new","norm_sqr","one","powi","powu","product","product","re","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","","","","","","","","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","","","","Returns <code>1/self</code>","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","","","","","","","","","","","","","","","Create a new Complex","Returns the square of the norm (since <code>T</code> doesn’t …","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,1,2,1,1],"f":[null,null,null,null,[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["toprimitive",8]],["option",4]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["u32",15]]],[[]],[[]],null,[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","t":[5,5],"n":["get","get_physical"],"q":["num_cpus",""],"d":["Returns the number of available CPUs of the current …","Returns the number of physical cores of the current …"],"i":[0,0],"f":[[[],["usize",15]],[[],["usize",15]]],"p":[]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,2,3,2,3,0,4,4,3,3,0,5,0,5,0,5,0,5,5,3,5,5,3,2,3,0,5,3,0,5,2,3,2,5,5,5,0,5,0,5,0,3,2,2,5,0,4,5,0,4,4,3,2,3,2,3,2,3,3,3],"f":[null,null,null,null,null,[[["average",8]],["average",8]],[[]],[[["average",8]],["average",8]],[[]],[[["integer",8],["clone",8]],[["integer",8],["clone",8]]],[[]],[[]],[[]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]]],[[]],[[["integer",8]]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integer",8]],["integer",8]],[[]],null,[[["integer",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[],[["integer",8],["clone",8]]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15],["roots",8]],["roots",8]],[[["u32",15]]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":[3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["num_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,0,0,0,0,0,0,1,2,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepinclusive",3]],[[],["rangefrom",3]],[[],["rangestepfrom",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["range",3]],[[],["rangefrom",3]],[[],["rangeinclusive",3]],[[],["rangestep",3]],[[],["rangestepfrom",3]],[[],["rangestepinclusive",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"]]},\
"num_rational":{"doc":"Rational numbers","tn":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1],"f":[null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[]],[[]],[[],["ordering",4]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[],["ratio",3]],[[["str",15]],[["result",4],["ratio",3],["parseratioerror",3]]],[[["u32",15],["str",15]],[["result",4],["ratio",3],["parseratioerror",3]]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],[["ordering",4],["option",4]]],[[["u32",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,0,11,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","real","sign","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have…","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,3,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,0,9,9,9,9,9,9,9,9,9,10,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,11,10,10,11,11,10,11,10,10,11,10,11,10,11,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,11,10,10,11,0,0,12,13,0,12,12,13,0,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,21,22,0,23,23,0,0,24,24,25,0,0,0,26,27,28,0,0,0,0,29,30,31,29,32,0,0,0,0,0,0,33,34,35,36,37,38,39,0,0,0,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,41,0,41,41,41,0,41],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["numcast",8],["option",4]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["one",8],["checkedmul",8],["usize",15],["clone",8]],[["one",8],["option",4],["checkedmul",8],["clone",8]]],[[["one",8],["usize",15],["mul",8],["clone",8]],[["one",8],["mul",8],["clone",8]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"],[8,"Signed"]]},\
"owning_ref":{"doc":"An owning reference.","t":[6,6,6,8,8,16,6,6,6,6,16,16,8,6,6,3,3,3,6,6,6,6,6,6,6,8,6,6,8,8,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArcRef","BoxRef","BoxRefMut","CloneStableAddress","Erased","Erased","ErasedArcRef","ErasedBoxRef","ErasedBoxRefMut","ErasedRcRef","Handle","HandleMut","IntoErased","MutexGuardRef","MutexGuardRefMut","OwningHandle","OwningRef","OwningRefMut","RcRef","RefMutRef","RefMutRefMut","RefRef","RwLockReadGuardRef","RwLockWriteGuardRef","RwLockWriteGuardRefMut","StableAddress","StringRef","StringRefMut","ToHandle","ToHandleMut","VecRef","VecRefMut","as_mut","as_owner","as_owner","as_owner","as_owner_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","cmp","deref","deref","deref","deref_mut","deref_mut","eq","eq","erase_owner","erase_owner","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","into","into","into","into_erased","into_owner","into_owner","into_owner","map","map","map_mut","map_owner","map_owner","map_owner_box","map_owner_box","map_with_owner","new","new","new","new_assert_stable_address","new_assert_stable_address","new_mut","new_with_fn","partial_cmp","partial_cmp","to_handle","to_handle_mut","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_map","try_map","try_map_mut","try_map_with_owner","try_new","type_id","type_id","type_id"],"q":["owning_ref","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Typedef of a owning reference that uses a <code>Arc</code> as the …","Typedef of a owning reference that uses a <code>Box</code> as the …","Typedef of a mutable owning reference that uses a <code>Box</code> as …","An unsafe marker trait for types where clones deref to …","Helper trait for an erased concrete type an owner …","Owner with the dereference type substituted to <code>Erased</code>.","Typedef of a owning reference that uses an erased <code>Arc</code> as …","Typedef of a owning reference that uses an erased <code>Box</code> as …","Typedef of a mutable owning reference that uses an erased …","Typedef of a owning reference that uses an erased <code>Rc</code> as …","The type of handle to be encapsulated by the OwningHandle.","The type of handle to be encapsulated by the OwningHandle.","Helper trait for erasing the concrete type of what an …","Typedef of a owning reference that uses a <code>MutexGuard</code> as …","Typedef of a mutable owning reference that uses a …","<code>OwningHandle</code> is a complement to <code>OwningRef</code>. Where <code>OwningRef</code>…","An owning reference.","An mutable owning reference.","Typedef of a owning reference that uses a <code>Rc</code> as the owner.","Typedef of a owning reference that uses a <code>RefMut</code> as the …","Typedef of a mutable owning reference that uses a <code>RefMut</code> …","Typedef of a owning reference that uses a <code>Ref</code> as the …","Typedef of a owning reference that uses a <code>RwLockReadGuard</code> …","Typedef of a owning reference that uses a <code>RwLockWriteGuard</code>…","Typedef of a mutable owning reference that uses a …","An unsafe marker trait for types that deref to a stable …","Typedef of a owning reference that uses a <code>String</code> as the …","Typedef of a mutable owning reference that uses a <code>String</code> …","Trait to implement the conversion of owner to handle for …","Trait to implement the conversion of owner to mutable …","Typedef of a owning reference that uses a <code>Vec</code> as the …","Typedef of a mutable owning reference that uses a <code>Vec</code> as …","","A reference to the underlying owner.","A reference to the underlying owner.","A getter for the underlying owner.","A mutable reference to the underlying owner.","","","","","","","","","","","","","","","","","","","","","Erases the concrete base type of the owner with a trait …","Erases the concrete base type of the owner with a trait …","","","","","","","","","","","","","","","Perform the type erasure.","Discards the reference and retrieves the owner.","Discards the reference and retrieves the owner.","Discards the dependent object and returns the owner.","Converts <code>self</code> into a new owning reference that points at …","Converts <code>self</code> into a new <em>shared</em> owning reference that …","Converts <code>self</code> into a new <em>mutable</em> owning reference that …","Converts <code>self</code> into a new owning reference with a …","Converts <code>self</code> into a new owning reference with a …","Converts <code>self</code> into a new owning reference where the owner …","Converts <code>self</code> into a new owning reference where the owner …","Converts <code>self</code> into a new owning reference that points at …","Creates a new owning reference from a owner initialized …","Creates a new owning reference from a owner initialized …","Create a new <code>OwningHandle</code> for a type that implements …","Like <code>new</code>, but doesn’t require <code>O</code> to implement the …","Like <code>new</code>, but doesn’t require <code>O</code> to implement the …","Create a new mutable <code>OwningHandle</code> for a type that …","Create a new OwningHandle. The provided callback will be …","","","Given an appropriately-long-lived pointer to ourselves, …","Given an appropriately-long-lived pointer to ourselves, …","","","","","","","","Tries to convert <code>self</code> into a new owning reference that …","Tries to convert <code>self</code> into a new <em>shared</em> owning reference …","Tries to convert <code>self</code> into a new <em>mutable</em> owning reference …","Tries to convert <code>self</code> into a new owning reference that …","Create a new OwningHandle. The provided callback will be …","","",""],"i":[0,0,0,0,0,1,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,4,6,4,5,4,5,5,4,6,5,4,6,5,5,5,4,5,4,6,4,6,5,4,5,4,5,4,7,5,5,5,4,4,6,5,4,5,4,6,1,5,4,6,5,4,4,5,4,5,4,5,5,4,6,5,4,6,6,5,4,2,3,5,5,4,6,5,4,6,5,4,4,5,6,5,4,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["owningref",3]],[[],["owningrefmut",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["owningrefmut",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["owningref",3],["sized",8]]],[[],[["owningref",3],["sized",8]]],[[],[["owningrefmut",3],["sized",8]]],[[],["owningref",3]],[[],["owningrefmut",3]],[[],[["box",3],["owningref",3]]],[[],[["owningrefmut",3],["box",3]]],[[],[["owningref",3],["sized",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["owningref",3]]],[[],[["result",4],["owningref",3]]],[[],[["result",4],["owningrefmut",3]]],[[],[["result",4],["owningref",3]]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRefMut"],[3,"OwningRef"],[3,"OwningHandle"],[8,"Erased"]]},\
"parking_lot":{"doc":"This library provides implementations of <code>Mutex</code>, <code>RwLock</code>, …","t":[3,13,13,6,6,6,6,6,6,13,17,3,4,13,3,3,3,6,6,6,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Condvar","Done","InProgress","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","New","ONCE_INIT","Once","OnceState","Poisoned","RawMutex","RawRwLock","RawThreadId","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","WaitTimeoutResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump_exclusive","bump_shared","bump_upgradable","call_once","call_once_force","clone","clone","clone_into","clone_into","default","default","done","downgrade","downgrade_to_upgradable","downgrade_upgradable","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","ne","new","new","nonzero_thread_id","notify_all","notify_one","poisoned","state","timed_out","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_upgrade","try_upgrade_for","try_upgrade_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","upgrade","wait","wait_for","wait_until"],"q":["parking_lot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A Condition Variable","A closure has completed successfully.","A thread is currently executing a closure.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","A closure has not been executed yet","Initialization value for static <code>Once</code> values.","A synchronization primitive which can be used to run a …","Current state of a <code>Once</code>.","A closure was executed but panicked.","Raw mutex type backed by the parking lot.","Raw reader-writer lock type backed by the parking lot.","Implementation of the <code>GetThreadId</code> trait for …","A mutex which can be recursively locked by a single …","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","A type indicating whether a timed wait on a condition …","","","","","","","","","","","","","","","","","","","Performs an initialization routine once and only once. …","Performs the same function as <code>call_once</code> except ignores …","","","","","","","Returns whether the associated <code>Once</code> has successfully …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new condition variable which is ready to be …","Creates a new <code>Once</code> value.","","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","Returns whether the associated <code>Once</code> has been poisoned.","Returns the current state of this <code>Once</code>.","Returns whether the wait was known to have timed out.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …"],"i":[0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,5,5,5,3,3,7,1,7,1,2,3,1,5,5,5,7,1,2,3,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,5,5,5,5,7,2,3,6,2,2,1,3,7,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,5,5,5,4,5,5,5,5,5,5,4,5,5,5,5,5,5,2,3,4,5,6,7,1,4,5,5,4,5,5,5,5,5,2,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["waittimeoutresult",3]],[[],["oncestate",4]],[[]],[[]],[[],["condvar",3]],[[],["once",3]],[[],["bool",15]],[[]],[[]],[[]],[[["waittimeoutresult",3]],["bool",15]],[[["oncestate",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["waittimeoutresult",3]],["bool",15]],[[],["condvar",3]],[[],["once",3]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["oncestate",4]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[["duration",3]],["bool",15]],[[["instant",3]],["bool",15]],[[["duration",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["instant",3]],["bool",15]],[[],["bool",15]],[[["duration",3]],["bool",15]],[[["instant",3]],["bool",15]],[[],["bool",15]],[[["duration",3]],["bool",15]],[[["instant",3]],["bool",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mutexguard",6]]],[[["duration",3],["mutexguard",6]],["waittimeoutresult",3]],[[["instant",3],["mutexguard",6]],["waittimeoutresult",3]]],"p":[[4,"OnceState"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"],[3,"WaitTimeoutResult"]]},\
"parking_lot_core":{"doc":"This library exposes a low-level API for creating your …","t":[12,12,13,17,17,4,13,4,3,13,13,4,13,3,13,13,13,13,13,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,5,5],"n":["0","0","Abort","DEFAULT_PARK_TOKEN","DEFAULT_UNPARK_TOKEN","FilterOp","Invalid","ParkResult","ParkToken","RequeueAll","RequeueOne","RequeueOp","Skip","SpinWait","Stop","TimedOut","Unpark","UnparkOne","UnparkOneRequeueRest","UnparkResult","UnparkToken","Unparked","be_fair","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deadlock","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","have_more_threads","into","into","into","into","into","into","into","is_unparked","ne","ne","ne","ne","new","park","requeued_threads","reset","spin","spin_no_yield","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark_all","unpark_filter","unpark_one","unpark_requeue","unparked_threads","acquire_resource","release_resource"],"q":["parking_lot_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parking_lot_core::deadlock",""],"d":["","","Abort the operation without doing anything.","A default park token to use.","A default unpark token to use.","Operation that <code>unpark_filter</code> should perform for each …","The validation callback returned false.","Result of a park operation.","A value associated with a parked thread which can be used …","Requeue all threads onto the target queue.","Requeue one thread and leave the rest parked on the …","Operation that <code>unpark_requeue</code> should perform.","Don’t unpark the thread and continue scanning the list …","A counter used to perform exponential backoff in spin …","Don’t unpark the thread and stop scanning the list of …","The timeout expired.","Unpark the thread and continue scanning the list of …","Unpark one thread and leave the rest parked. No requeuing …","Unpark one thread and requeue the rest onto the target …","Result of an unpark operation.","A value which is passed from an unparker to a parked …","We were unparked by another thread with the given token.","This is set to true on average once every 0.5ms for any …","","","","","","","","","","","","","","","","","","","","","","","","","","","[Experimental] Deadlock detection","","","","","","","","","","","","","","","","","","","","","","Whether there are any threads remaining in the queue. …","","","","","","","","Returns true if we were unparked by another thread.","","","","","Creates a new <code>SpinWait</code>.","Parks the current thread in the queue associated with the …","The number of threads that were requeued.","Resets a <code>SpinWait</code> to its initial state.","Spins until the sleep threshold has been reached.","Spins without yielding the thread to the OS.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unparks all threads in the queue associated with the …","Unparks a number of threads from the front of the queue …","Unparks one thread from the queue associated with the …","Removes all threads from the queue associated with …","The number of threads that were unparked.","Acquire a resource identified by key in the deadlock …","Release a resource identified by key in the deadlock …"],"i":[1,2,3,0,0,0,4,0,0,3,3,0,5,0,5,4,5,3,3,0,0,4,6,7,4,6,3,5,1,2,7,4,6,3,5,1,2,4,6,3,5,1,2,4,6,3,5,1,2,0,7,6,4,6,3,5,1,2,4,6,3,5,1,2,7,4,6,3,5,1,2,6,7,4,6,3,5,1,2,4,4,6,1,2,7,0,6,7,7,7,4,6,3,5,1,2,7,4,6,3,5,1,2,7,4,6,3,5,1,2,7,4,6,3,5,1,2,0,0,0,0,6,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parkresult",4]],[[],["unparkresult",3]],[[],["requeueop",4]],[[],["filterop",4]],[[],["unparktoken",3]],[[],["parktoken",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["spinwait",3]],[[],["unparkresult",3]],[[["parkresult",4]],["bool",15]],[[["unparkresult",3]],["bool",15]],[[["requeueop",4]],["bool",15]],[[["filterop",4]],["bool",15]],[[["unparktoken",3]],["bool",15]],[[["parktoken",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["parkresult",4]],["bool",15]],[[["unparkresult",3]],["bool",15]],[[["unparktoken",3]],["bool",15]],[[["parktoken",3]],["bool",15]],[[],["spinwait",3]],[[["parktoken",3],["usize",15],["instant",3],["option",4]],["parkresult",4]],null,[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["unparktoken",3]],["usize",15]],[[["usize",15]],["unparkresult",3]],[[["usize",15]],["unparkresult",3]],[[["usize",15]],["unparkresult",3]],null,[[["usize",15]]],[[["usize",15]]]],"p":[[3,"UnparkToken"],[3,"ParkToken"],[4,"RequeueOp"],[4,"ParkResult"],[4,"FilterOp"],[3,"UnparkResult"],[3,"SpinWait"]]},\
"paste":{"doc":"github crates-io docs-rs","t":[14],"n":["paste"],"q":["paste"],"d":[""],"i":[0],"f":[null],"p":[]},\
"ppv_lite86":{"doc":"","t":[8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,10,10,14,14,14,10,10,10,10,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,10,11,11,10,10,10,11,11,10,10,10,0,6,6,3,3,3,3,3,3,6,6,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,19,19,19],"n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage"],"q":["ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","AVX but not AVX2: only 128-bit integer operations, but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,3,4,5,3,4,6,6,6,6,6,7,7,7,7,7,7,8,7,7,9,9,9,10,10,10,11,11,11,11,11,11,11,5,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,12,6,6,13,14,14,6,6,15,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,28,29,30,28,29,30,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,26,27,16,17,18,19,20,21,22,23,24,25,26,27,28,28,28,28,29,29,29,29,30,30,30,30,29,30,29,30,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,28,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,[[["u32",15]]],[[["u32",15]]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["store",8]],[[],["store",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["yess3",3]],[[],["nos3",3]],[[],["yess4",3]],[[],["nos4",3]],[[],["yesa1",3]],[[],["noa1",3]],[[],["yesa2",3]],[[],["noa2",3]],[[],["yesni",3]],[[],["noni",3]],[[],["ssemachine",3]],[[],["avx2machine",3]],[[],["vec128_storage",19]],[[],["vec256_storage",19]],[[],["vec512_storage",19]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec128_storage",19]]],null,null,null],"p":[[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[8,"MultiLane"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Store"],[8,"UnsafeFrom"],[8,"StoreBytes"],[8,"VZip"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"],[19,"vec256_storage"],[19,"vec512_storage"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","IntoIter","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::token_stream","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural …","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","","","","","","","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of …","Returns the span pointing to the opening delimiter of …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","","","","","","",""],"i":[1,2,2,0,0,3,0,3,1,0,0,3,2,2,0,3,0,0,0,0,4,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,7,10,6,7,3,8,2,4,1,9,10,6,7,3,8,2,4,1,9,10,9,6,8,2,1,9,9,6,6,10,10,10,10,5,5,6,6,7,3,3,8,8,2,4,4,1,9,9,10,10,5,6,6,6,7,7,3,3,3,3,3,8,2,4,1,9,10,6,6,6,9,10,10,10,10,10,10,10,10,10,10,5,6,7,3,8,2,4,1,9,10,6,6,10,10,7,7,7,6,8,4,9,9,7,3,8,4,9,10,4,5,3,8,4,9,10,8,8,8,10,10,6,7,3,8,2,4,1,9,10,5,6,3,8,4,9,10,0,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,10,10,10,10,10,10,10,10,10,7,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["char",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["literal",3]],[[],["span",3]],[[["char",15]],["literal",3]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",3]],["ordering",4]],[[]],[[],["delimiter",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["tokentree",4]]],[[]],[[["tokenstream",3]],["tokenstream",3]],[[["span",3]],["span",3]],[[]],[[["literal",3]],["tokentree",4]],[[["ident",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[]],[[["group",3]],["tokentree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],[["tokenstream",3],["lexerror",3],["result",4]]],[[]],[[["i128",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i8",15]],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[],["bool",15]],[[["isize",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["span",3]],[["option",4],["span",3]]],[[["span",3]],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["delimiter",4],["tokenstream",3]],["group",3]],[[["spacing",4],["char",15]],["punct",3]],[[["str",15],["span",3]],["ident",3]],[[["ident",3]],[["option",4],["ordering",4]]],[[["span",3]],["span",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["spacing",4]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["str",15]],["literal",3]],[[["usize",15],["rangebounds",8]],[["option",4],["span",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u128",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u8",15]],["literal",3]],[[],["span",3]],[[["usize",15]],["literal",3]],[[["usize",15]],["literal",3]],null,[[]],[[]],[[],["intoiter",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["tokentree",4],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Spacing"],[4,"Delimiter"],[4,"TokenTree"],[3,"Punct"],[3,"LexError"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,2,0,3,3,0,0,2,2,3,3,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],null,[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,[[],[["span",3],["option",4]]],[[],[["span",3],["option",4]]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","t":[18,8,3,8,18,8,8,16,8,11,11,11,0,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,0,5,11,11,0,11,11,11,11,11,0,11,11,5,11,10,11,11,10,11,11,11,11,13,3,3,4,3,8,13,13,13,3,3,3,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,8,8,8,16,3,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,8,11,11,10,11,10,11,11,10,10,11,10,10,11,11,0,11,11,11,11,10,10,11,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Standard","TooMany","Uniform","WeightedError","WeightedIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into_iter","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AllWeightsZero","InvalidWeight","NoItem","TooMany","WeightedError","WeightedIndex","alias_method","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","into","into","new","sample","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_weights","vzip","vzip","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","OsRng","StdRng","ThreadRng","adapter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","ne","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","ne","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributionsrand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on [<code>RngCore</code>] …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing [<code>Fill</code>] with random data","Fill <code>dest</code> with random data.","","","","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> …","Return a random value supporting the <code>Standard</code> …","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","<code>p < 0</code> or <code>p > 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than …","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new <code>Bernoulli</code> with the probability of success …","","","","","","","","","","Construct a new <code>Bernoulli</code> with the given probability of …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for integer …","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All items in the provided weight collection are zero.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","Too many weights are provided (length greater than …","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","","","","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …","","","","","","","","","","","Update a subset of weights, without changing the number …","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","","","","","","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","","","","Create a <code>StepRng</code>, yielding an arithmetic sequence …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","","Low-level API for sampling indices","","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","","","","Return the value at the given <code>index</code>.","","","","Convert into an iterator over the indices as a sequence …","","","Return result as a <code>Vec<usize></code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,2,0,1,1,1,0,3,3,4,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,1,1,1,4,4,0,0,1,4,0,3,3,3,3,2,0,1,1,0,1,5,3,3,4,1,1,1,1,6,0,0,0,0,0,7,6,6,0,0,0,6,0,0,0,8,7,9,10,11,12,13,14,8,7,9,10,11,12,13,14,8,7,9,10,11,14,8,7,9,10,11,14,7,8,7,7,9,10,11,12,13,14,8,7,9,9,9,10,11,12,13,14,8,8,7,9,10,11,12,13,14,13,8,13,15,8,9,10,10,11,11,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,13,8,7,9,10,11,14,7,8,7,9,10,11,12,13,14,8,7,9,10,11,12,13,14,8,7,9,10,11,12,13,14,0,8,7,9,10,11,12,13,14,0,0,0,0,16,0,0,0,0,0,0,17,18,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,23,17,9,19,19,19,19,19,19,19,19,19,19,19,19,20,21,21,22,17,9,19,19,19,19,19,19,19,19,19,19,19,19,20,21,21,22,17,19,19,19,19,19,19,19,19,19,19,19,19,20,21,21,22,23,17,19,19,19,19,19,19,19,19,19,19,19,19,21,21,17,19,19,19,19,19,19,19,19,19,19,19,19,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,6,6,6,6,0,0,0,24,6,24,6,24,6,24,6,6,24,6,6,24,6,24,6,24,24,24,6,6,24,6,24,6,24,6,24,24,6,0,0,25,25,25,25,25,25,25,25,25,25,0,0,0,0,26,27,28,26,27,28,26,27,28,26,27,28,27,28,26,26,27,28,26,27,28,26,27,28,26,26,26,27,28,0,26,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,0,0,0,29,30,31,29,30,31,31,31,29,31,29,30,30,31,29,30,31,29,30,31,29,31,29,31,29,31,31,30,31,30,29,31,29,30,31,29,30,31,29,30,31,29,30,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,0,34,34,33,35,33,35,35,33,33,35,33,33,34,34,0,34,34,34,34,33,33,34,34,34,34,34,0,0,0,36,37,38,36,37,38,36,38,36,38,36,36,37,38,36,36,36,37,38,36,36,37,38,36,37,38,36,36,36,36,37,38,0,0,37,38,36,38,36,37,38,36,37,38,36,37,38,36,37,38],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["option",4],["nonzerou32",3]]],null,[[]],[[]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["error",3]],["error",3]],[[]],[[["nonzerou32",3]],["error",3]],[[]],[[],[["error",3],["result",4]]],[[]],[[]],[[]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[]],[[]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["error",8]],[[]],[[],["error",3]],[[],["u32",15]],[[],["u64",15]],null,[[]],[[],[["option",4],["i32",15]]],[[],[["error",3],["usize",15],["result",4]]],null,[[["distribution",8]]],[[["distribution",8]]],[[],["distiter",3]],[[],["distiter",3]],[[["u64",15]]],null,[[],[["option",4],["error",8]]],[[],[["global",3],["error",8],["box",3]]],[[],["threadrng",3]],[[],["string",3]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bernoulli",3]],[[],["bernoullierror",4]],[[],["uniform",3]],[[],["openclosed01",3]],[[],["open01",3]],[[],["standard",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bernoullierror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["rangeinclusive",3]],["uniform",3]],[[["range",3]],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["bernoullierror",4],["result",4],["bernoulli",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],[["bernoullierror",4],["result",4],["bernoulli",3]]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[],["u8",15]],[[]],[[]],[[],["wrapping",3]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[]],[[],["u16",15]],[[],["u32",15]],[[]],[[]],[[],["u64",15]],[[]],[[]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["i8",15]],[[],["i16",15]],[[]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i64",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["i128",15]],[[],["char",15]],[[],["nonzerousize",3]],[[],["nonzerou128",3]],[[],["nonzerou64",3]],[[],["nonzerou32",3]],[[],["nonzerou16",3]],[[],["nonzerou8",3]],[[],["isize",15]],[[],["distiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniformint",3]],[[],["uniformchar",3]],[[],["uniformfloat",3]],[[],["uniformduration",3]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["weightedindex",3]],[[],["weightederror",4]],[[]],[[]],[[["weightederror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["weightedindex",3],["weightederror",4],["result",4]]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4],["weightederror",4]]],[[]],[[]],null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["vec",3]],[["result",4],["weightederror",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["stdrng",3]],[[],["threadrng",3]],[[],["osrng",3]],[[]],[[]],[[]],[[],["threadrng",3]],[[],["osrng",3]],[[["stdrng",3]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],null,[[["stdrng",3]],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["reseedingrng",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["readrng",3]],[[["u64",15]]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],[["result",4],["error",3]]],[[],[["option",4],["error",8]]],[[]],[[],["string",3]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["steprng",3]],[[]],[[["steprng",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["steprng",3]],["bool",15]],[[["u64",15]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["slicechooseiter",3]],[[["usize",15]],["vec",3]],[[],["usize",15]],[[["usize",15]],[["result",4],["slicechooseiter",3],["weightederror",4]]],[[],["option",4]],[[],["option",4]],[[],[["result",4],["weightederror",4]]],[[],[["result",4],["weightederror",4]]],[[["formatter",3]],["result",6]],[[]],null,[[]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["indexvec",4]],[[],["indexvecintoiter",4]],[[]],[[]],[[["indexvec",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u32",15],["vec",3]]],[[["vec",3],["usize",15]]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[],["indexvecintoiter",4]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[],["bool",15]],[[],["indexveciter",4]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[["usize",15]],["indexvec",4]],[[["usize",15]],[["indexvec",4],["result",4],["weightederror",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[8,"Rng"],[8,"RngCore"],[8,"Fill"],[4,"WeightedError"],[4,"BernoulliError"],[3,"Bernoulli"],[3,"Uniform"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[8,"Distribution"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[8,"SampleRange"],[3,"WeightedIndex"],[3,"WeightedIndex"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"StepRng"],[8,"SliceRandom"],[3,"SliceChooseIter"],[8,"IteratorRandom"],[4,"IndexVec"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","ne","ne","ne","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,2,3,4,4,5,6,6,1,2,3,4,5,6,1,3,5,2,4,6,1,2,3,4,5,6,1,3,5,2,4,6,2,4,6,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chacha20core",3]],[[],["chacha20rng",3]],[[],["chacha12core",3]],[[],["chacha12rng",3]],[[],["chacha8core",3]],[[],["chacha8rng",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chacha20core",3]],["bool",15]],[[["chacha20rng",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha12rng",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[["chacha8rng",3]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["chacha20core",3]]],[[]],[[]],[[]],[[["chacha12core",3]]],[[]],[[]],[[["chacha8core",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chacha20core",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","t":[18,8,3,18,3,8,16,8,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,0,11,10,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","","","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing [<code>RngCore</code>] for some type …","A wrapper type implementing [<code>RngCore</code>] for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","","","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","","","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[1,0,0,1,0,0,2,0,0,1,3,1,3,3,3,1,3,4,3,1,1,3,1,1,1,3,2,2,2,0,1,1,3,0,1,4,3,4,3,1,4,2,1,1,3,1,4,3,1,3,1,3,1,3,0,0,0,5,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["osrng",3]],[[]],[[],[["option",4],["nonzerou32",3]]],[[],["osrng",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["nonzerou32",3]]],[[["error",3]]],[[]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],null,[[],["error",8]],[[]],[[]],null,[[]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],[["i32",15],["option",4]]],[[],[["error",3],["result",4],["usize",15]]],[[["u64",15]]],[[],[["option",4],["error",8]]],[[],[["box",3],["error",8]]],[[]],[[],["string",3]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[]],[[]],null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[3,"OsRng"],[8,"RngCore"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"]]},\
"rand_distr":{"doc":"Generating random samples from probability distributions.","t":[13,13,13,3,13,3,4,3,4,13,3,4,3,4,3,4,3,8,13,3,3,4,3,4,3,4,4,3,4,3,13,13,3,4,13,3,13,13,13,13,13,13,3,4,3,4,3,3,3,4,3,4,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,3,3,4,3,3,3,3,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,16,3,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AbsoluteBetaNotLessThanAlpha","AlphaNegativeOrNull","AlphaTooSmall","Alphanumeric","BadVariance","Bernoulli","BernoulliError","Beta","BetaError","BetaTooSmall","Binomial","BinomialError","Cauchy","CauchyError","ChiSquared","ChiSquaredError","DistIter","Distribution","DoFTooSmall","Exp","Exp1","ExpError","FisherF","FisherFError","Gamma","GammaError","GeoError","Geometric","HyperGeoError","Hypergeometric","InvalidProbability","InvalidProbability","InverseGaussian","InverseGaussianError","LambdaTooSmall","LogNormal","MTooSmall","MeanNegativeOrNull","MeanTooSmall","ModeRange","ModeRange","NTooSmall","Normal","NormalError","NormalInverseGaussian","NormalInverseGaussianError","Open01","OpenClosed01","Pareto","ParetoError","Pert","PertError","Poisson","PoissonError","PopulationTooLarge","ProbabilityTooLarge","ProbabilityTooLarge","ProbabilityTooSmall","RangeTooSmall","RangeTooSmall","SampleSizeTooLarge","ScaleTooLarge","ScaleTooSmall","ScaleTooSmall","ScaleTooSmall","ScaleTooSmall","ShapeNegativeOrNull","ShapeTooSmall","ShapeTooSmall","ShapeTooSmall","ShapeTooSmall","ShapeTooSmall","Standard","StandardGeometric","StandardNormal","StudentT","Triangular","TriangularError","Uniform","UnitBall","UnitCircle","UnitDisc","UnitSphere","Weibull","WeibullError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mean_cv","from_mean_cv","from_ratio","from_zscore","from_zscore","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_with_shape","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["rand_distrrand_distr::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>|beta| >= alpha</code> or <code>nan</code>.","<code>alpha <= 0</code> or <code>nan</code>.","<code>alpha <= 0</code> or <code>nan</code>.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The standard deviation or other dispersion parameter is …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","The Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>…","Error type returned from <code>Beta::new</code>.","<code>beta <= 0</code> or <code>nan</code>.","The binomial distribution <code>Binomial(n, p)</code>.","Error type returned from <code>Binomial::new</code>.","The Cauchy distribution <code>Cauchy(median, scale)</code>.","Error type returned from <code>Cauchy::new</code>.","The chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …","Error type returned from <code>ChiSquared::new</code> and <code>StudentT::new</code>…","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","<code>0.5 * k <= 0</code> or <code>nan</code>.","The exponential distribution <code>Exp(lambda)</code>.","Samples floating-point numbers according to the …","Error type returned from <code>Exp::new</code>.","The Fisher F distribution <code>F(m, n)</code>.","Error type returned from <code>FisherF::new</code>.","The Gamma distribution <code>Gamma(shape, scale)</code> distribution.","Error type returned from <code>Gamma::new</code>.","Error type returned from <code>Geometric::new</code>.","The geometric distribution <code>Geometric(p)</code> bounded to …","Error type returned from <code>Hypergeometric::new</code>.","The hypergeometric distribution <code>Hypergeometric(N, K, n)</code>.","<code>p < 0 || p > 1</code> or <code>nan</code>","<code>p < 0</code> or <code>p > 1</code>.","The inverse Gaussian distribution","Error type returned from <code>InverseGaussian::new</code>","<code>lambda < 0</code> or <code>nan</code>.","The log-normal distribution <code>ln N(mean, std_dev**2)</code>.","<code>m <= 0</code> or <code>nan</code>.","<code>mean <= 0</code> or <code>nan</code>.","The mean value is too small (log-normal samples must be …","<code>mode < min</code> or <code>mode > max</code> or <code>mode</code> is NaN.","<code>mode < min</code> or <code>mode > max</code> or <code>mode</code> is NaN.","<code>n <= 0</code> or <code>nan</code>.","The normal distribution <code>N(mean, std_dev**2)</code>.","Error type returned from <code>Normal::new</code> and <code>LogNormal::new</code>.","The normal-inverse Gaussian distribution","Error type returned from <code>NormalInverseGaussian::new</code>","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Samples floating-point numbers according to the Pareto …","Error type returned from <code>Pareto::new</code>.","The PERT distribution.","Error type returned from [<code>Pert</code>] constructors.","The Poisson distribution <code>Poisson(lambda)</code>.","Error type returned from <code>Poisson::new</code>.","<code>total_population_size</code> is too large, causing floating …","<code>p > 1</code>.","<code>population_with_feature > total_population_size</code>.","<code>p < 0</code> or <code>nan</code>.","<code>max < min</code> or <code>min</code> or <code>max</code> is NaN.","<code>max < min</code> or <code>min</code> or <code>max</code> is NaN.","<code>sample_size > total_population_size</code>.","<code>1 / scale == 0</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","<code>shape < 0</code> or <code>shape</code> is NaN","<code>lambda <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","A generic random value distribution, implemented for many …","Samples integers according to the geometric distribution …","Samples floating-point numbers according to the normal …","The Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the …","The triangular distribution.","Error type returned from [<code>Triangular::new</code>].","Sample values uniformly between two bounds.","Samples uniformly from the unit ball (surface and …","Samples uniformly from the edge of the unit circle in two …","Samples uniformly from the unit disc in two dimensions.","Samples uniformly from the surface of the unit sphere in …","Samples floating-point numbers according to the Weibull …","Error type returned from <code>Weibull::new</codeonstruct, from mean and coefficient of variation","Construct, from (linear-space) mean and coefficient of …","Construct a new <code>Bernoulli</code> with the probability of success …","Sample from a z-score","Sample from a z-score","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new <code>Binomial</code> with the given shape parameters <code>n</code>…","Construct a new <code>Cauchy</code> with the given shape parameters …","Construct a new <code>Exp</code> with the given shape parameter <code>lambda</code>.","Construct an object representing the <code>Gamma(shape, scale)</code> …","Create a new chi-squared distribution with …","Create a new <code>FisherF</code> distribution, with the given …","Create a new Student t distribution with <code>n</code> degrees of …","Construct an object representing the <code>Beta(alpha, beta)</code> …","Construct a new <code>Geometric</code> with the given shape parameter <code>p</code>…","Constructs a new <code>Hypergeometric</code> with the shape parameters …","Construct a new <code>InverseGaussian</code> distribution with the …","Construct, from mean and standard deviation","Construct, from (log-space) mean and standard deviation","Construct a new <code>NormalInverseGaussian</code> distribution with …","Construct a new Pareto distribution with given <code>scale</code> and …","Set up the PERT distribution with defined <code>min</code>, <code>max</code> and …","Construct a new <code>Poisson</code> with the given shape parameter …","Set up the Triangular distribution with defined <code>min</code>, <code>max</code> …","Construct a new <code>Weibull</code> distribution with given <code>scale</code> and …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Uniform</code> instance which samples uniformly …","Create a new <code>Uniform</code> instance which samples uniformly …","Set up the PERT distribution with defined <code>min</code>, <code>max</code>, <code>mode</code> …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …distribution uniformly sampling numbers within a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for integer …","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,2,0,3,0,0,0,0,2,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,7,0,8,9,3,10,11,8,0,0,0,0,0,0,0,0,0,0,0,0,12,13,12,13,10,11,12,14,15,14,16,17,9,14,16,10,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,32,33,3,34,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,51,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,32,33,3,34,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,51,13,15,7,14,4,8,2,5,12,9,3,1,16,10,18,11,17,6,19,13,13,20,15,15,21,22,7,7,23,14,14,24,4,4,25,8,8,26,27,2,2,28,5,5,29,30,12,12,9,31,32,33,3,3,34,1,35,36,16,16,37,10,10,38,18,18,39,11,11,40,41,42,43,44,17,17,45,6,6,46,47,48,49,50,51,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,46,46,47,48,49,50,51,33,34,45,33,34,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,50,19,20,22,23,24,25,26,27,28,30,31,33,34,35,36,37,38,39,44,45,46,46,37,50,52,19,20,21,21,22,23,24,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,47,48,48,49,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,50,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,32,33,3,34,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,51,13,15,7,14,4,8,2,5,12,3,16,10,18,11,17,6,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,0,19,13,20,15,21,22,7,23,14,24,4,25,8,26,27,2,28,5,29,30,12,9,31,32,33,3,34,1,35,36,16,37,10,38,18,39,11,40,41,42,43,44,17,45,6,46,47,48,49,50,51,0,0,0,53,0,0,0,0,0,0,54,55,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,60,54,56,56,56,56,56,56,56,56,56,56,56,56,57,58,58,59,54,56,56,56,56,56,56,56,56,56,56,56,56,57,58,58,59,54,56,56,56,56,56,56,56,56,56,56,56,56,57,58,58,59,60,54,56,56,56,56,56,56,56,56,56,56,56,56,58,58,54,56,56,56,56,56,56,56,56,56,56,56,56,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59,56,57,58,59],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbinomial",3]],[[],["error",4]],[[],["cauchy",3]],[[],["error",4]],[[],["exp1",3]],[[],["exp",3]],[[],["error",4]],[[],["gamma",3]],[[],["error",4]],[[],["chisquared",3]],[[],["chisquarederror",4]],[[],["fisherf",3]],[[],["fisherferror",4]],[[],["studentt",3]],[[],["beta",3]],[[],["betaerror",4]],[[],["geometric",3]],[[],["error",4]],[[],["standardgeometric",3]],[[],["hypergeometric",3]],[[],["error",4]],[[],["standardnormal",3]],[[],["normal",3]],[[],["error",4]],[[],["lognormal",3]],[[],["pareto",3]],[[],["error",4]],[[],["pert",3]],[[],["perterror",4]],[[],["poisson",3]],[[],["error",4]],[[],["triangular",3]],[[],["triangularerror",4]],[[],["unitball",3]],[[],["unitcircle",3]],[[],["unitdisc",3]],[[],["unitsphere",3]],[[],["weibull",3]],[[],["error",4]],[[],["bernoulli",3]],[[],["bernoullierror",4]],[[],["uniform",3]],[[],["openclosed01",3]],[[],["open01",3]],[[],["standard",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["chisquarederror",4]],["bool",15]],[[["fisherferror",4]],["bool",15]],[[["betaerror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["perterror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["triangularerror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["bernoullierror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["range",3]],["uniform",3]],[[]],[[["rangeinclusive",3]],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[],[["normal",3],["error",4],["result",4]]],[[],[["lognormal",3],["result",4],["error",4]]],[[["u32",15]],[["bernoullierror",4],["result",4],["bernoulli",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15],["u64",15]],[["result",4],["binomial",3],["error",4]]],[[],[["error",4],["result",4],["cauchy",3]]],[[],[["error",4],["result",4],["exp",3]]],[[],[["result",4],["gamma",3],["error",4]]],[[],[["result",4],["chisquared",3],["chisquarederror",4]]],[[],[["fisherf",3],["result",4],["fisherferror",4]]],[[],[["studentt",3],["result",4],["chisquarederror",4]]],[[],[["result",4],["beta",3],["betaerror",4]]],[[["f64",15]],[["error",4],["result",4]]],[[["u64",15]],[["result",4],["error",4]]],[[],[["inversegaussian",3],["error",4],["result",4]]],[[],[["normal",3],["error",4],["result",4]]],[[],[["lognormal",3],["result",4],["error",4]]],[[],[["result",4],["normalinversegaussian",3],["error",4]]],[[],[["result",4],["pareto",3],["error",4]]],[[],[["result",4],["pert",3],["perterror",4]]],[[],[["result",4],["error",4],["poisson",3]]],[[],[["triangularerror",4],["triangular",3],["result",4]]],[[],[["weibull",3],["error",4],["result",4]]],[[["f64",15]],[["bernoullierror",4],["result",4],["bernoulli",3]]],[[],["uniform",3]],[[],["uniform",3]],[[],[["result",4],["pert",3],["perterror",4]]],[[],["option",4]],[[]],[[],["u64",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[],["u8",15]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["char",15]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i16",15]],[[]],[[]],[[],["nonzerou8",3]],[[]],[[],["u8",15]],[[],["nonzerou32",3]],[[],["nonzerousize",3]],[[],["nonzerou64",3]],[[]],[[]],[[],["i8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["u16",15]],[[],["i32",15]],[[]],[[]],[[]],[[],["i64",15]],[[],["u128",15]],[[],["u32",15]],[[]],[[],["f32",15]],[[]],[[]],[[],["wrapping",3]],[[],["usize",15]],[[]],[[]],[[],["i128",15]],[[]],[[]],[[],["f64",15]],[[],["u64",15]],[[],["nonzerou128",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonzerou16",3]],[[]],[[]],[[],["distiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniformint",3]],[[],["uniformchar",3]],[[],["uniformfloat",3]],[[],["uniformduration",3]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],[["u128",15],["uniformint",3]]],[[],[["u64",15],["uniformint",3]]],[[],[["uniformint",3],["u8",15]]],[[],[["uniformint",3],["i16",15]]],[[],[["uniformint",3],["i128",15]]],[[],[["isize",15],["uniformint",3]]],[[],[["uniformint",3],["usize",15]]],[[],[["uniformint",3],["i64",15]]],[[],[["uniformint",3],["i32",15]]],[[],[["u16",15],["uniformint",3]]],[[],[["uniformint",3],["u32",15]]],[[],[["uniformint",3],["i8",15]]],[[],["uniformchar",3]],[[],[["uniformfloat",3],["f64",15]]],[[],[["f32",15],["uniformfloat",3]]],[[],["uniformduration",3]],[[]],[[],[["uniformint",3],["u8",15]]],[[],[["uniformint",3],["i8",15]]],[[],[["uniformint",3],["u32",15]]],[[],[["u64",15],["uniformint",3]]],[[],[["uniformint",3],["i16",15]]],[[],[["uniformint",3],["i128",15]]],[[],[["uniformint",3],["i32",15]]],[[],[["isize",15],["uniformint",3]]],[[],[["uniformint",3],["usize",15]]],[[],[["u128",15],["uniformint",3]]],[[],[["u16",15],["uniformint",3]]],[[],[["uniformint",3],["i64",15]]],[[],["uniformchar",3]],[[],[["uniformfloat",3],["f64",15]]],[[],[["f32",15],["uniformfloat",3]]],[[],["uniformduration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[4,"NormalInverseGaussianError"],[4,"BetaError"],[4,"NormalError"],[4,"ChiSquaredError"],[4,"GeoError"],[4,"BernoulliError"],[4,"ExpError"],[4,"FisherFError"],[4,"InverseGaussianError"],[4,"PertError"],[4,"TriangularError"],[4,"HyperGeoError"],[4,"BinomialError"],[4,"GammaError"],[4,"CauchyError"],[4,"ParetoError"],[4,"WeibullError"],[4,"PoissonError"],[3,"Binomial"],[3,"Cauchy"],[3,"Exp1"],[3,"Exp"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"Geometric"],[3,"StandardGeometric"],[3,"Hypergeometric"],[3,"InverseGaussian"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"NormalInverseGaussian"],[3,"Pareto"],[3,"Pert"],[3,"Poisson"],[3,"Triangular"],[3,"UnitBall"],[3,"UnitCircle"],[3,"UnitDisc"],[3,"UnitSphere"],[3,"Weibull"],[3,"Bernoulli"],[3,"Uniform"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[8,"Distribution"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[8,"SampleRange"]]},\
"rawpointer":{"doc":"Rawpointer adds extra utility methods to raw pointers …","t":[8,11,11,11,10,11,11,11,11,5,11,11],"n":["PointerExt","add","dec","inc","offset","post_dec","post_inc","pre_dec","pre_inc","ptrdistance","stride_offset","sub"],"q":["rawpointer","","","","","","","","","","",""],"d":["Extension methods for raw pointers","","Decrement by 1","Increment by 1","","Decrement the pointer by 1, but return its old value.","Increment the pointer by 1, but return its old value.","Decrement the pointer by 1, and return its new value.","Increment the pointer by 1, and return its new value.","Return the number of elements of <code>T</code> from <code>start</code> to <code>end</code>. …","Offset the pointer by <code>s</code> multiplied by <code>index</code>.",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1],"f":[null,[[["usize",15]]],[[]],[[]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["isize",15],["usize",15]]],[[["usize",15]]]],"p":[[8,"PointerExt"]]},\
"rayon":{"doc":"Data-parallelism library that makes it easy to convert …","tn":["FnContext","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","array","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","build","build_global","build_scoped","collections","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","in_place_scope","in_place_scope","in_place_scope_fifo","in_place_scope_fifo","index","init","init","init","init","init","init","init","install","into","into","into","into","into","into","into","iter","join","join","join_context","migrated","name","new","new","num_threads","option","panic_handler","prelude","range","range_inclusive","result","run","scope","scope","scope_fifo","scope_fifo","slice","source","spawn","spawn","spawn","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","start_handler","str","string","thread_name","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","IntoIter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","opt_len","to_owned","try_from","try_into","type_id","with_producer","binary_heap","btree_map","btree_set","hash_map","hash_set","linked_list","vec_deque","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","len","len","len","len","opt_len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","Chain","Chunks","Cloned","Copied","Either","Empty","Enumerate","Filter","FilterMap","FlatMap","FlatMapIter","Flatten","FlattenIter","Fold","FoldWith","FromParallelIterator","IndexedParallelIterator","Inspect","Interleave","InterleaveShortest","Intersperse","IntoParallelIterator","IntoParallelRefIterator","IntoParallelRefMutIterator","Item","Item","Item","Item","Item","Item","Iter","Iter","Iter","Iter","Iter","IterBridge","Left","Map","MapInit","MapWith","MaxLen","MinLen","MultiZip","Once","PanicFuse","ParallelBridge","ParallelDrainFull","ParallelDrainRange","ParallelExtend","ParallelIterator","Positions","Repeat","RepeatN","Rev","Right","Skip","Split","StepBy","Take","TryFold","TryFoldWith","Update","WhileSome","Zip","ZipEq","all","all","any","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chunks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","collect","collect","collect_into_vec","copied","count","count","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","either","either_with","empty","enumerate","eq","eq","expect_left","expect_right","extend","factor_first","factor_second","filter","filter_map","find_any","find_first","find_last","find_map_any","find_map_first","find_map_last","flat_map","flat_map_iter","flatten","flatten_iter","flip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold_with","for_each","for_each_init","for_each_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_par_iter","ge","gt","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inspect","interleave","interleave_shortest","intersperse","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","is_left","is_right","last","le","left","left_and_then","left_or","left_or_default","left_or_else","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map","map_init","map_left","map_right","map_with","max","max_by","max_by_key","min","min_by","min_by_key","ne","ne","next","next_back","nth","once","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","panic_fuse","par_bridge","par_drain","par_drain","par_extend","par_extend","par_iter","par_iter_mut","partial_cmp","partial_cmp","partition","partition_map","plumbing","position_any","position_first","position_last","positions","product","reduce","reduce_with","repeat","repeatn","rev","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","skip","split","step_by","sum","take","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_fold_with","try_for_each","try_for_each_init","try_for_each_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_reduce_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_left","unwrap_right","unzip","unzip_into_vecs","update","while_some","with_max_len","with_min_len","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","zip","zip","zip_eq","Consumer","Folder","Folder","IntoIter","Item","Item","Output","Producer","ProducerCallback","Reducer","Reducer","Result","Result","UnindexedConsumer","UnindexedProducer","bridge","bridge_producer_consumer","bridge_unindexed","callback","complete","consume","consume_iter","fold_with","fold_with","full","full","into_folder","into_iter","max_len","min_len","reduce","split","split_at","split_at","split_off_left","to_reducer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","ParallelBridge","par_bridge","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Iter","IterMut","ParallelSlice","ParallelSliceMut","Split","SplitMut","Windows","as_parallel_slice","as_parallel_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_remainder","len","len","len","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","par_chunks","par_chunks_exact","par_chunks_exact_mut","par_chunks_mut","par_sort","par_sort_by","par_sort_by_key","par_sort_unstable","par_sort_unstable_by","par_sort_unstable_by_key","par_split","par_split_mut","par_windows","remainder","remainder","take_remainder","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","Bytes","CharIndices","Chars","EncodeUtf16","Lines","MatchIndices","Matches","ParallelString","Split","SplitTerminator","SplitWhitespace","as_parallel_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","par_bytes","par_char_indices","par_chars","par_encode_utf16","par_lines","par_match_indices","par_matches","par_split","par_split_terminator","par_split_whitespace","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","borrow","borrow_mut","deref","deref_mut","drive_unindexed","drop","drop","fmt","from","init","into","into_par_iter","try_from","try_into","type_id","Drain","IntoIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_producer","with_producer"],"q":["rayon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::array","","","","","","","","","","","","","","","","","","","","","","rayon::collections","","","","","","","rayon::collections::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::vec_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::iterrayon::iter::plumbing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::prelude","","rayon::range","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::range_inclusive","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::slicerayon::strrayon::string","","","","","","","","","","","","","","","","rayon::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides the calling context to a closure called by …","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the …","Parallel iterator types for arrays (<code>[T; N]</code>)","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Creates a new <code>ThreadPool</code> initialized using this …","Initializes the global thread pool. This initialization is…","Creates a scoped <code>ThreadPool</code> initialized using this …","Parallel iterator types for standard collections","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread …","Returns true if the current worker thread currently has …","If called from a Rayon worker thread, returns the index …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","","","","","","","","","","","","","","","","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that spawns work into this thread-pool.","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that spawns work into this thread-pool in …","Gets the index of this thread in the pool, within …","","","","","","","","Executes <code>op</code> within the threadpool. Any attempts to use …","","","","","","","","Traits for writing parallel programs using an …","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, …","Sets the number of threads to be used in the rayon …","Parallel iterator types for options","Normally, whenever Rayon catches a panic, it tries to …","The rayon prelude imports the various <code>ParallelIterator</code> …","Parallel iterator types for ranges, the type for values …","Parallel iterator types for inclusive ranges, the type …","Parallel iterator types for results","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","Parallel iterator types for slices","","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Sets a callback to be invoked on thread start.","Parallel iterator types for strings","This module contains the parallel iterator types for …","Sets a closure which takes a thread index and returns the …","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator types for vectors (<code>Vec<T></code>)","Parallel iterator that moves out of an array.","","","","","","","","","","","","","","","","","","","","","","This module contains the parallel iterator types for heaps…","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","Draining parallel iterator that moves out of a binary …","Parallel iterator over a binary heap","Parallel iterator over an immutable reference to a binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree map","Parallel iterator over an immutable reference to a B-Tree …","Parallel iterator over a mutable reference to a B-Tree map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree set","Parallel iterator over an immutable reference to a B-Tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves out of a hash map, …","Parallel iterator over a hash map","Parallel iterator over an immutable reference to a hash …","Parallel iterator over a mutable reference to a hash map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves out of a hash set, …","Parallel iterator over a hash set","Parallel iterator over an immutable reference to a hash …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a linked list","Parallel iterator over an immutable reference to a linked …","Parallel iterator over a mutable reference to a linked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator over a double-ended queue","Parallel iterator over an immutable reference to a …","Parallel iterator over a mutable reference to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …","<code>Chunks</code> is an iterator that groups elements of an …","<code>Cloned</code> is an iterator that clones the elements of an …","<code>Copied</code> is an iterator that copies the elements of an …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Iterator adaptor for the <code>empty()</code> function.","<code>Enumerate</code> is an iterator that returns the current count …","<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …","<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …","<code>FlatMap</code> maps each element to a parallel iterator, then …","<code>FlatMapIter</code> maps each element to a serial iterator, then …","<code>Flatten</code> turns each element to a parallel iterator, then …","<code>FlattenIter</code> turns each element to a serial iterator, then …","<code>Fold</code> is an iterator that applies a function over an …","<code>FoldWith</code> is an iterator that applies a function over an …","<code>FromParallelIterator</code> implements the creation of a …","An iterator that supports “random access” to its …","<code>Inspect</code> is an iterator that calls a function with a …","<code>Interleave</code> is an iterator that interleaves elements of …","<code>InterleaveShortest</code> is an iterator that works similarly to …","<code>Intersperse</code> is an iterator that inserts a particular item …","<code>IntoParallelIterator</code> implements the conversion to a …","<code>IntoParallelRefIterator</code> implements the conversion to a …","<code>IntoParallelRefMutIterator</code> implements the conversion to a …","The type of item that the parallel iterator will produce.","The type of item that the parallel iterator will produce. …","The type of item that will be produced; this is typically …","The type of item that this parallel iterator produces. …","The type of item that the parallel iterator will produce. …","The type of item that the parallel iterator will produce. …","The parallel iterator type that will be created.","The type of the parallel iterator that will be returned.","The type of iterator that will be created.","The draining parallel iterator type that will be created.","The draining parallel iterator type that will be created.","<code>IterBridge</code> is a parallel iterator that wraps a sequential …","A value of type <code>L</code>.","<code>Map</code> is an iterator that transforms the elements of an …","<code>MapInit</code> is an iterator that transforms the elements of an …","<code>MapWith</code> is an iterator that transforms the elements of an …","<code>MaxLen</code> is an iterator that imposes a maximum length on …","<code>MinLen</code> is an iterator that imposes a minimum length on …","<code>MultiZip</code> is an iterator that zips up a tuple of parallel …","Iterator adaptor for the <code>once()</code> function.","<code>PanicFuse</code> is an adaptor that wraps an iterator with a …","Conversion trait to convert an <code>Iterator</code> to a …","<code>ParallelDrainFull</code> creates a parallel iterator that moves …","<code>ParallelDrainRange</code> creates a parallel iterator that moves …","<code>ParallelExtend</code> extends an existing collection with items …","Parallel version of the standard iterator trait.","<code>Positions</code> takes a predicate <code>predicate</code> and filters out …","Iterator adaptor for the <code>repeat()</code> function.","Iterator adaptor for the <code>repeatn()</code> function.","<code>Rev</code> is an iterator that produces elements in reverse …","A value of type <code>R</code>.","<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …","<code>Split</code> is a parallel iterator using arbitrary data and a …","<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …","<code>Take</code> is an iterator that iterates over the first <code>n</code> …","<code>TryFold</code> is an iterator that applies a function over an …","<code>TryFoldWith</code> is an iterator that applies a function over …","<code>Update</code> is an iterator that mutates the elements of an …","<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …","<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …","An <code>IndexedParallelIterator</code> that iterates over two …","Tests that every item in the parallel iterator matches …","","Searches for <strong>some</strong> item in the parallel iterator that …","","","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes two iterators and creates a new iterator over both.","Splits an iterator up into fixed-size chunks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which clones all of its elements.  …","Lexicographically compares the elements of this …","","Creates a fresh collection containing all the elements …","","Collects the results of the iterator into the specified …","Creates an iterator which copies all of its elements.  …","Counts the number of items in this parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Creates a parallel iterator that produces nothing.","Yields an index along with each item.","Determines if the elements of this <code>ParallelIterator</code> are …","","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Applies <code>filter_op</code> to each item of this iterator, …","Applies <code>filter_op</code> to each item of this iterator to get an …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies <code>map_op</code> to each item of this iterator to get …","Applies <code>map_op</code> to each item of this iterator to get …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel fold is similar to sequential fold except that …","","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes <code>OP</code> on the given <code>init</code> value with each item …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an instance of the collection from the parallel …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies <code>inspect_op</code> to a reference to each item of this …","Interleaves elements of this iterator and the other given …","Interleaves elements of this iterator and the other given …","Intersperses clones of an element between items of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Converts <code>self</code> into a parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Determines if the elements of this <code>ParallelIterator</code> are …","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Produces an exact count of how many items this iterator …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the elements of this <code>ParallelIterator</code> are …","Applies <code>map_op</code> to each item of this iterator, producing a …","Map <code>f</code> over the contained value and return the result in …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator …","Computes the item that yields the maximum value for the …","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator …","Computes the item that yields the minimum value for the …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","","Creates a parallel iterator that produces an element …","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps an iterator with a fuse in case of panics, to halt …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Returns a draining parallel iterator over an entire …","Returns a draining parallel iterator over a range of the …","Extends an instance of the collection with the elements …","","Converts <code>self</code> into a parallel iterator.","Creates the parallel iterator from <code>self</code>.","Lexicographically compares the elements of this …","","Partitions the items of a parallel iterator into a pair …","Partitions and maps the items of a parallel iterator into …","Traits and functions used to implement parallel …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Searches for items in the parallel iterator that match …","Multiplies all the items in the iterator.","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","Creates a parallel iterator that endlessly repeats <code>elt</code> (by…","Creates a parallel iterator that produces <code>n</code> repeats of <code>elt</code>…","Produces a new iterator with the elements of this …","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Creates an iterator that skips the first <code>n</code> elements.","The <code>split</code> function takes arbitrary data and a closure …","Creates an iterator that steps by the given amount","Sums up the items in the iterator.","Creates an iterator that yields the first <code>n</code> elements.","Takes only <code>n</code> repeats of the element, similar to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the left value","Returns the right value","Unzips the items of a parallel iterator into a pair of …","Unzips the results of the iterator into the specified …","Mutates each item of this iterator before yielding it.","Creates an iterator over the <code>Some</code> items of this iterator, …","Sets the maximum length of iterators desired to process …","Sets the minimum length of iterators desired to process …","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …","Iterates tuples, repeating the element with items from …","The same as <code>Zip</code>, but requires that both iterators have …","A consumer is effectively a generalized “fold” …","The <code>Folder</code> trait encapsulates the standard fold operation…","The type of folder that this consumer can be converted …","The type of iterator we will become.","The type of item that will be produced by this producer …","The type of item returned by this producer.","The type of value returned by this callback. Analogous to …","A <code>Producer</code> is effectively a “splittable <code>IntoIterator</code>”…","The <code>ProducerCallback</code> trait is a kind of generic closure, …","The reducer is the final step of a <code>Consumer</code> – after a …","The type of reducer that is produced if this consumer is …","The type of result that this consumer will ultimately …","The type of result that will ultimately be produced by …","A stateless consumer can be freely copied. These …","A variant on <code>Producer</code> which does not know its exact …","This helper function is used to “connect” a parallel …","This helper function is used to “connect” a producer …","A variant of <code>bridge_producer_consumer</code> where the producer …","Invokes the callback with the given producer as argument. …","Finish consuming items, produce final result.","Consume next item and return new sequential state.","Consume items from the iterator until full, and return …","Iterate the producer, feeding each element to <code>folder</code>, and …","Iterate the producer, feeding each element to <code>folder</code>, and …","Hint whether this <code>Consumer</code> would like to stop processing …","Hint whether this <code>Folder</code> would like to stop processing …","Convert the consumer into a folder that can consume items …","Convert <code>self</code> into an iterator; at this point, no more …","The maximum number of items that we will process …","The minimum number of items that we will process …","Reduce two final results into one; this is executed after …","Split midway into a new producer if possible, otherwise …","Split into two producers; one produces items <code>0..index</code>, the…","Divide the consumer into two consumers, one processing …","Splits off a “left” consumer and returns it. The <code>self</code> …","Creates a reducer that can be used to combine the results …","A parallel iterator over the value in <code>Some</code> variant of an …","A parallel iterator over a reference to the <code>Some</code> variant …","A parallel iterator over a mutable reference to the <code>Some</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Conversion trait to convert an <code>Iterator</code> to a …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Parallel iterator over a range, implemented for all …","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over an inclusive range, implemented …","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a result","Parallel iterator over an immutable reference to a result","Parallel iterator over a mutable reference to a result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over immutable non-overlapping chunks …","Parallel iterator over immutable non-overlapping chunks …","Parallel iterator over mutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of …","Parallel iterator over immutable items in a slice","Parallel iterator over mutable items in a slice","Parallel extensions for slices.","Parallel extensions for mutable slices.","Parallel iterator over slices separated by a predicate","Parallel iterator over mutable slices separated by a …","Parallel iterator over immutable overlapping windows of a …","Returns a plain slice, which is used to implement the …","Returns a plain mutable slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over at most <code>chunk_size</code> …","Sorts the slice in parallel.","Sorts the slice in parallel with a comparator function.","Sorts the slice in parallel with a key extraction …","Sorts the slice in parallel, but may not preserve the …","Sorts the slice in parallel with a comparator function, …","Sorts the slice in parallel with a key extraction …","Returns a parallel iterator over subslices separated by …","Returns a parallel iterator over mutable subslices …","Returns a parallel iterator over all contiguous windows …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over the bytes of a string","Parallel iterator over the characters of a string, with …","Parallel iterator over the characters of a string","Parallel iterator over a string encoded as UTF-16","Parallel iterator over lines in a string","Parallel iterator over substrings that match a pattern, …","Parallel iterator over substrings that match a pattern","Parallel extensions for strings.","Parallel iterator over substrings separated by a pattern","Parallel iterator over substrings separated by a …","Parallel iterator over substrings separated by whitespace","Returns a plain string slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a parallel iterator over the bytes of a string.","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over a string encoded as …","Returns a parallel iterator over the lines of a string, …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings separated by a…","Returns a parallel iterator over substrings terminated by …","Returns a parallel iterator over the sub-slices of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range of …","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator that moves out of a vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,5,5,5,5,0,0,4,4,0,4,5,1,2,3,4,5,6,7,1,2,3,4,5,6,7,6,1,2,3,4,4,5,6,7,5,1,2,3,4,5,6,6,7,1,2,3,4,5,6,7,0,4,0,4,1,1,2,3,4,5,6,7,4,1,2,3,4,5,6,7,0,0,4,0,7,1,4,5,5,0,5,0,0,0,0,1,0,4,0,4,0,6,0,2,4,0,3,4,5,1,5,5,0,0,5,6,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,9,10,11,9,10,11,9,10,9,10,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,9,10,9,10,11,9,10,11,9,10,11,9,10,11,0,0,0,12,13,14,12,13,14,13,13,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,13,12,13,14,12,13,14,12,13,14,0,0,15,16,15,16,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,15,16,0,0,0,0,17,18,19,20,17,18,19,20,18,18,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,17,18,19,20,18,17,18,19,20,17,18,19,20,17,18,19,20,0,0,0,21,22,23,21,22,23,22,22,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,21,22,23,22,21,22,23,21,22,23,21,22,23,0,0,0,24,25,26,24,25,26,24,25,24,25,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,26,24,25,24,25,26,24,25,26,24,25,26,0,0,0,0,27,28,29,30,27,28,29,30,27,28,27,28,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,33,34,35,36,31,32,33,35,36,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,34,37,34,37,37,37,37,37,37,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,34,79,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,34,79,37,34,37,79,34,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,79,38,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,37,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,0,79,79,37,37,37,37,37,37,34,34,34,34,34,34,34,34,34,34,34,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,34,37,34,34,34,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,80,79,79,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,34,79,79,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,37,37,31,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,37,79,37,37,37,37,37,79,38,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,37,79,34,37,34,37,37,34,34,34,34,34,34,34,79,37,37,37,37,0,38,34,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,37,34,81,35,36,82,37,32,33,79,37,34,34,0,79,79,79,79,34,34,34,0,0,79,37,37,37,37,37,37,79,0,79,34,79,66,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,34,34,34,34,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,34,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,37,37,37,34,79,34,34,79,79,79,38,39,40,41,42,43,52,53,54,55,56,57,58,59,60,61,61,61,61,61,61,61,61,61,61,61,61,62,63,67,68,69,71,74,76,77,78,37,79,66,79,0,0,83,84,84,85,86,0,0,0,83,83,87,0,0,0,0,0,86,87,87,87,85,84,83,87,83,84,84,84,88,85,84,83,89,89,0,0,0,90,91,92,90,91,92,90,91,90,91,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,92,90,91,90,91,92,90,91,92,90,91,92,90,91,92,0,81,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,0,0,95,96,97,95,96,97,95,96,95,96,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,97,95,96,95,96,97,95,96,97,95,96,97,95,96,97,0,0,0,0,0,0,0,0,0,0,0,98,99,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,102,103,104,105,100,102,103,104,105,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,108,102,103,104,105,106,107,108,102,103,104,105,106,107,108,98,98,99,99,99,99,99,99,99,99,98,99,98,104,108,108,100,102,103,104,105,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,100,101,102,103,104,105,106,107,108,102,103,104,105,106,107,108,0,0,0,0,0,0,0,0,0,0,0,109,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,109,109,109,109,109,109,109,109,109,109,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,110,111,112,113,114,115,116,117,118,119,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,121,122,121,122,121,121,121,122,121,122,121,122,121,122,121,122,122,121,122,121,122,121,122,121,122,121,122,121,122,121,122,121,121,122,121,122,121,122,121,122],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["threadpoolbuilder",3]],[[],[["result",4],["threadpool",3],["threadpoolbuilderror",3]]],[[],[["threadpoolbuilderror",3],["result",4]]],[[],[["threadpoolbuilderror",3],["result",4]]],null,[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["bool",15]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["defaultspawn",3],["threadpoolbuilder",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["threadpoolbuilder",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[],["bool",15]],[[],[["option",4],["str",15]]],[[["configuration",3]],[["box",3],["threadpool",3],["result",4]]],[[],[["defaultspawn",3],["threadpoolbuilder",3]]],[[["usize",15]],["threadpoolbuilder",3]],null,[[],["threadpoolbuilder",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[],[["option",4],["error",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["customspawn",3],["threadpoolbuilder",3]]],[[],[["usize",15],["option",4]]],[[["usize",15]],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],null,null,[[],["threadpoolbuilder",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["intoiter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[]],[[]],[[],["either",4]],[[]],[[],["either",4]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chain",3]],[[["usize",15]],["chunks",3]],[[]],[[],["chain",3]],[[],["chunks",3]],[[],["cloned",3]],[[],["copied",3]],[[],["enumerate",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[],["fold",3]],[[],["foldwith",3]],[[],["inspect",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[],["minlen",3]],[[],["maxlen",3]],[[],["map",3]],[[],["mapwith",3]],[[],["mapinit",3]],[[],["multizip",3]],[[],["once",3]],[[],["panicfuse",3]],[[],["iterbridge",3]],[[],["positions",3]],[[],["repeat",3]],[[],["repeatn",3]],[[],["rev",3]],[[],["skip",3]],[[],["split",3]],[[],["take",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[],["update",3]],[[],["whilesome",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["stepby",3]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cloned",3]],[[],["ordering",4]],[[["either",4]],["ordering",4]],[[]],[[]],[[["vec",3]]],[[],["copied",3]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[["consumer",8]]],[[["consumer",8]]],[[]],[[]],[[]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],[["send",8],["empty",3]]],[[],["enumerate",3]],[[],["bool",15]],[[["either",4]],["bool",15]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["filter",3]],[[],["filtermap",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["fold",3]],[[]],[[],["foldwith",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["either",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["inspect",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["map",3]],[[],["either",4]],[[],["mapinit",3]],[[],["either",4]],[[],["either",4]],[[],["mapwith",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[["either",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["send",8]],[["send",8],["once",3]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["panicfuse",3]],[[],["iterbridge",3]],[[]],[[["rangebounds",8]]],[[]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[["either",4]],[["option",4],["ordering",4]]],[[]],[[]],null,[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["positions",3]],[[]],[[]],[[],["option",4]],[[["send",8],["clone",8]],[["send",8],["clone",8],["repeat",3]]],[[["send",8],["clone",8],["usize",15]],[["repeatn",3],["clone",8],["send",8]]],[[],["rev",3]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[["usize",15]],["skip",3]],[[],["split",3]],[[["usize",15]],["stepby",3]],[[]],[[["usize",15]],["take",3]],[[["usize",15]],["repeatn",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["vec",3],["vec",3]]],[[],["update",3]],[[],["whilesome",3]],[[["usize",15]],["maxlen",3]],[[["usize",15]],["minlen",3]],[[["producercallback",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["zip",3]],[[],[["repeatn",3],["zip",3]]],[[],["zipeq",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[],["iterbridge",3]],null,[[]],[[]],[[],["iter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],[[],["iter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[["usize",15]],["chunks",3]],[[["usize",15]],["chunksexact",3]],[[["usize",15]],["chunksexactmut",3]],[[["usize",15]],["chunksmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["split",3]],[[],["splitmut",3]],[[["usize",15]],["windows",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chars",3]],[[],["charindices",3]],[[],["bytes",3]],[[],["encodeutf16",3]],[[],["split",3]],[[],["splitterminator",3]],[[],["lines",3]],[[],["splitwhitespace",3]],[[],["matches",3]],[[],["matchindices",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[],["charindices",3]],[[],["chars",3]],[[],["encodeutf16",3]],[[],["lines",3]],[[["pattern",8]],[["pattern",8],["matchindices",3]]],[[["pattern",8]],[["matches",3],["pattern",8]]],[[["pattern",8]],[["pattern",8],["split",3]]],[[["pattern",8]],[["pattern",8],["splitterminator",3]]],[[],["splitwhitespace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"ThreadPoolBuildError"],[3,"FnContext"],[3,"IntoIter"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"ParallelDrainFull"],[8,"ParallelDrainRange"],[4,"Either"],[3,"Empty"],[3,"Chain"],[3,"Chunks"],[3,"Cloned"],[3,"Copied"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"FlatMapIter"],[3,"Flatten"],[3,"FlattenIter"],[3,"Fold"],[3,"FoldWith"],[3,"Inspect"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"MinLen"],[3,"MaxLen"],[3,"Map"],[3,"MapWith"],[3,"MapInit"],[3,"MultiZip"],[3,"Once"],[3,"PanicFuse"],[3,"IterBridge"],[3,"Positions"],[3,"Repeat"],[3,"RepeatN"],[3,"Rev"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Update"],[3,"WhileSome"],[3,"Zip"],[3,"ZipEq"],[3,"StepBy"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelBridge"],[8,"ParallelExtend"],[8,"Consumer"],[8,"Producer"],[8,"UnindexedProducer"],[8,"ProducerCallback"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"Chunks"],[3,"ChunksExact"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"ChunksExactMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"]]},\
"rayon_core":{"doc":"Rayon-core houses the core stable APIs of Rayon.","t":[3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Configuration","FnContext","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","breadth_first","build","build","build_global","build_scoped","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","exit_handler","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","in_place_scope","in_place_scope","in_place_scope_fifo","in_place_scope_fifo","index","init","init","init","init","init","init","init","init","initialize","install","into","into","into","into","into","into","into","into","join","join","join_context","migrated","name","new","new","new","num_threads","num_threads","panic_handler","panic_handler","run","scope","scope","scope_fifo","scope_fifo","source","spawn","spawn","spawn","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","stack_size","start_handler","start_handler","thread_name","thread_name","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["rayon_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Contains the rayon thread pool configuration. Use …","Provides the calling context to a closure called by …","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the …","","","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Deprecated in favor of <code>ThreadPoolBuilder::breadth_first</code>.","Creates a new <code>ThreadPool</code> initialized using this …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Initializes the global thread pool. This initialization is…","Creates a scoped <code>ThreadPool</code> initialized using this …","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread …","If called from a Rayon worker thread, indicates whether …","Returns true if the current worker thread currently has …","If called from a Rayon worker thread, returns the index …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","Deprecated in favor of <code>ThreadPoolBuilder::exit_handler</code>.","","","","","","","","","","","","","","","","","","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that spawns work into this thread-pool.","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that spawns work into this thread-pool in …","Gets the index of this thread in the pool, within …","","","","","","","","","Deprecated in favor of <code>ThreadPoolBuilder::build_global</code>.","Executes <code>op</code> within the threadpool. Any attempts to use …","","","","","","","","","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, …","Creates and return a valid rayon thread pool …","Sets the number of threads to be used in the rayon …","Deprecated in favor of <code>ThreadPoolBuilder::num_threads</code>.","Normally, whenever Rayon catches a panic, it tries to …","Deprecated in favor of <code>ThreadPoolBuilder::panic_handler</code>.","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Deprecated in favor of <code>ThreadPoolBuilder::stack_size</code>.","Sets a callback to be invoked on thread start.","Deprecated in favor of <code>ThreadPoolBuilder::start_handler</code>.","Sets a closure which takes a thread index and returns the …","Deprecated in favor of <code>ThreadPoolBuilder::thread_name</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,5,6,5,6,5,5,0,4,0,4,0,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,7,1,2,3,4,4,5,6,7,8,5,6,1,2,3,4,5,6,7,7,8,1,2,3,4,5,6,7,8,0,4,0,4,1,1,2,3,4,5,6,7,8,0,4,1,2,3,4,5,6,7,8,0,4,0,8,1,4,5,6,5,6,5,6,1,0,4,0,4,7,0,2,4,0,3,4,5,1,5,6,5,6,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["threadpoolbuilderror",3],["threadpool",3]]],[[],[["box",3],["result",4],["threadpool",3]]],[[],[["threadpoolbuilderror",3],["result",4]]],[[],[["threadpoolbuilderror",3],["result",4]]],[[],["usize",15]],[[],["usize",15]],[[],[["bool",15],["option",4]]],[[],[["bool",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["configuration",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["configuration",3]],[["result",4],["box",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["str",15],["option",4]]],[[["configuration",3]],[["box",3],["threadpool",3],["result",4]]],[[]],[[],["configuration",3]],[[["usize",15]]],[[["usize",15]],["configuration",3]],[[]],[[],["configuration",3]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["customspawn",3],["threadpoolbuilder",3]]],[[],[["usize",15],["option",4]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["configuration",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"ThreadPoolBuildError"],[3,"FnContext"]]},\
"risq":{"doc":"This is a comment.","t":[0,0,5,0,0,0,0,0,0,0,13,3,4,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,0,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,5,11,11,11,12,12,12,12,12,11,11,12,11,11,11,11,11,11,11,12,11,3,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,12,11,11,11,11,11,11,11,12,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,12,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,11,11,11,11,11,11,5,5,5,5,13,3,13,4,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,5,0,0,0,0,0,3,3,3,3,5,5,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,5,12,12,11,11,11,11,11,11,11,11,0,0,0,0,0,0,5,5,0,5,0,0,0,13,4,13,13,13,13,4,13,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,3,5,5,11,11,11,11,11,11,11,11,5,5,11,11,11,11,12,12,5,5,11,11,11,11,11,11,11,12,11,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,12,11,12,0,12,12,11,11,11,11,11,12,11,5,11,11,11,11,12,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["excite","ham","main","pt","rng","semistoch","stoch","utils","var","wf","Double","Excite","Orbs","Single","StoredExcite","abs_h","abs_h","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","init","init","init","init","init","inlined_clone","into","into","into","is_alpha","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iterator","ne","sum_remaining_abs_h","sum_remaining_h_squared","target","target","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ExciteGenerator","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","init","init_excite_generator","into","is_in_subset","is_in_subset","max_opp_doub","max_same_doub","max_sing","opp_doub_sorted_list","same_doub_sorted_list","sample_excite","sample_excites_from_all_pairs","sing_sorted_list","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","valence","vzip","Ham","borrow","borrow_mut","core_orbs","default","deref","deref_mut","diag_computed","direct","direct_plus_exchange","drop","from","from_subset","from_subset","get_int","ham_diag","ham_doub","ham_off_diag","ham_off_diag_no_excite","ham_sing","init","into","ints","is_in_subset","is_in_subset","one_body","read_ints","screen_single_nonzero","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","valence_orbs","vzip","Ints","borrow","borrow_mut","default","deref","deref_mut","drop","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","nuc","one_body","read_ints","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","two_body","type_id","vzip","PtSamples","add_sample_compute_diag","add_sample_diag_already_stored","borrow","borrow_mut","clear","default","deref","deref_mut","drop","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","n","perturbative","print","pt_estimator","samples","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","Rand","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","init","init_rand","into","is_in_subset","is_in_subset","rng","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","fast_stoch_enpt2","faster_semistoch_enpt2","importance_sampled_semistoch_enpt2","old_semistoch_enpt2","AbsHc","DetOrbSample","HcSquared","ImpSampleDist","ScreenedSampler","alias","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","det","det_orb_sampler_abs_hc","det_orb_sampler_hc_squared","drop","drop","drop","elements","eps","eq","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","generate_screened_sampler","hash","init","init","init","init","inlined_clone","into","into","into","is_alpha","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","matmul_sample_remaining","sum_abs_h","sum_abs_hc","sum_abs_hc_all_dets_orbs","sum_h_squared","sum_hc_squared","sum_hc_squared_all_dets_orbs","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","Alias","alias","alias_prob","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","new","roll_die_and_flip_coin","sample","sample_prob","sample_with_prob","select_element","select_element_and_prob","test","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","uniform","vzip","sample_cdf","test_cdf","bits","display","ints","iter","read_input","BitPairs","BitPairsIntoIterator","Bits","BitsIntoIterator","bit_pairs","bits","bits_left","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btest","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","det","det","det_bits","drop","drop","drop","drop","first_bit","first_bits_left","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","ibclr","ibset","init","init","init","init","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","next","next","parity","second_bits_left","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","DetByCoeff","borrow","borrow_mut","cmp","deref","deref_mut","det","drop","eq","fmt_det","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","partial_cmp","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","combine_2","combine_2_usize","combine_4","permute","permute_2","read_lines","Global","borrow","borrow_mut","deref","deref_mut","deserialize","drop","eps_pt_dtm","eps_var","fmt","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","n_batches","n_cross_term_samples","n_samples_per_batch","n_states","ndn","norb","norb_core","nup","opp_algo","read_input","same_algo","target_uncertainty","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","davidson","eigenvalues","ham_gen","off_diag","sparse","utils","variational","sparse_optimize","algorithms","main","matrix_operations","modified_gram_schmidt","utils","DPR","DavidsonCorrection","GJD","HPR","Highest","Lowest","SpectrumTarget","Target","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","davidson","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","from_subset","from_subset","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","lanczos","ne","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Config","CorrectionMethod","Davidson","DavidsonError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compute_correction","compute_dpr_correction","compute_gjd_correction","compute_hpr_correction","compute_residues","create_results","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eigenvalues","eigenvectors","energy_tolerance","eq","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","generate_subspace","init","init","init","init","init_dim","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","max_iters","max_search_space","method","method","new","new","new","reset_dim","sort_diagonal","spectrum_target","target","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","tolerance","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_dim","update_subspace","vzip","vzip","vzip","vzip","HermitianLanczos","LanczosError","borrow","borrow","borrow_mut","borrow_mut","construct_tridiagonal","deref","deref","deref_mut","deref_mut","drop","drop","eigenvalues","eigenvectors","eq","fmt","fmt","from","from","from_subset","from_subset","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MatrixOperations","diagonal","matrix_matrix_prod","matrix_vector_prod","ncols","nrows","set_diagonal","MGS","basis","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","orthonormalize","project","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","generate_diagonal_dominant","generate_random_sparse_symmetric","generate_random_symmetric","sort_eigenpairs","sort_vector","Unique","all_opposite_spin_excites","all_same_spin_excites","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","gen_doubles","gen_sparse_ham_fast","init","into","is_in_subset","is_in_subset","n_dets","n_dets_remaining","opposite_spin_excites","same_spin_excites","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","up","vzip","OffDiagElemsNoHash","add_el","add_el_and_spin_flipped","borrow","borrow_mut","default","deref","deref_mut","drop","expand_rows","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","n","new","nnz","nonzero","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","SparseMat","SparseMatDoubles","SparseMatUpperTri","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","diag","diag","diag","diagonal","diagonal","diagonal","doubles","drop","drop","drop","from","from","from","from_dense","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","ham","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","matrix_matrix_prod","matrix_matrix_prod","matrix_matrix_prod","matrix_vector_prod","matrix_vector_prod","matrix_vector_prod","n","n","n","ncols","ncols","ncols","nnz","nrows","nrows","nrows","off_diag","off_diag","set_diagonal","set_diagonal","set_diagonal","singles","sort_remove_duplicates","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wf","Intersection","IntersectionIntoIterator","Remove1","Remove1IntoIterator","Remove2","Remove2IntoIterator","bits_left","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","config","config","config","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","first_bit","first_bits_left","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","ind1","ind2","init","init","init","init","init","init","intersection","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","linear","n1","n2","new","new","new","next","next","next","remove_1e","remove_2e","second_bits_left","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","v1","v1","v2","v2","vzip","vzip","vzip","vzip","vzip","vzip","Wf","add_det_with_coeff","approx_matmul_external","approx_matmul_external_dtm_only","approx_matmul_external_dtm_singles","approx_matmul_external_no_singles","approx_matmul_external_semistoch_singles","approx_matmul_off_diag_variational_no_singles","approx_matmul_variational","borrow","borrow_mut","converged","default","deref","deref_mut","det","dets","drop","energy","eps","eps","eps_iter","expand_sparse_ham_rows","find_new_dets","from","from_subset","from_subset","inds","init","init_var_wf","into","is_in_subset","is_in_subset","iterate_excites","n","n_states","n_stored_h","n_stored_h","new_sparse_ham","print","print_largest","push","sparse_ham","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","update_n_stored_h","vzip","Config","Det","approx_matmul_external_dtm_only_compute_diags","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coeff","config","deref","deref","deref_mut","deref_mut","diag","dn","drop","drop","eq","eq","excite_det","fmt","fmt","fmt","fmt","from","from","from_subset","from_subset","from_subset","from_subset","hash","hash","init","init","inlined_clone","inlined_clone","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_valid","is_valid_stored","ne","new_diag","new_diag_opp","new_diag_same","new_diag_sing","safe_excite_det","to_owned","to_owned","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","up","vzip","vzip","Eps","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","from","from_subset","from_subset","init","init_eps","into","into_iter","is_in_subset","is_in_subset","next","next","target","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":["risq","","","","","","","","","","risq::excite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::excite::init","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::ham","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::ham::read_ints","","","","","","","","","","","","","","","","","","","","","","","","","","risq::pt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::rng","","","","","","","","","","","","","","","","","","","","","","","risq::semistoch","","","","risq::stoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::stoch::alias","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::stoch::utils","","risq::utils","","","","","risq::utils::bits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::utils::display","","","","","","","","","","","","","","","","","","","","","","","","","","risq::utils::ints","","","","","","risq::utils::read_input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var","","","","","","","risq::var::davidson","risq::var::eigenvalues","","","","","risq::var::eigenvalues::algorithms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::algorithms::davidson","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::algorithms::lanczos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::matrix_operations","","","","","","","risq::var::eigenvalues::modified_gram_schmidt","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::utils","","","","","risq::var::ham_gen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::off_diag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::sparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::wf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::wf::det","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::wf::eps","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"dhis function ‘rolls the unweighted die’ (selects an …","","","","This function selects an element from the VoseAlias table …","This function selects an element from the VoseAlias table …lgorithms to compute (some) eigenvalues/eigenvectors for …","","Common matrix operations for all the matrix …","Modified Gram-Schmidt (MGS)","Auxiliar functions to manipulate arrays","","Correction method for the Davidson algorithm","","","","","Option to compute the lowest, highest or somewhere in the …","","","","","","","","","","Davidson Diagonalization","","","","","","","","","","","","","","","","","","","","","","","Hermitian Lanczos algorithm","","","","","","","","","","","","","","","","","","","","Structure containing the initial configuration data","Structure containing the correction methods","Structure with the configuration data","","","","","","","","","","compute the correction vectors using either DPR or GJD","Use the Diagonal-Preconditioned-Residue (DPR) method to …","Use the Generalized Jacobi Davidson (GJD) to compute the …","Use the Heatbath-Preconditioned-Residue (HPR) method to …","Residue vectors","Extract the requested eigenvalues/eigenvectors pairs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate initial orthonormal subspace","","","","","","","","","","","","","","","","","","","","","Method used to compute the correction","Choose sensible default values for the davidson …","The new static method takes the following arguments:","","","","","The initial target matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the subpace with new vectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The new static method takes the following arguments:","","","","","","","","","","","","","","","","","","Trait containing the matrix free operations","Get the matrix diagonal","Matrix matrix multiplication","Matrix vector multiplication","Get the number of columns","Get the number of rows","Set the matrix diagonal","","","","","","","","","","","","","","","The orthonormalize static method takes three argument:","","","","","","","","","","Generate a random highly diagonal symmetric matrix","Random Sparse matrix","Random symmetric matrix","Sort the eigenvalues and their corresponding eigenvectors …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,2,3,2,1,3,2,1,3,1,3,1,3,2,1,3,2,1,3,2,1,3,1,3,1,1,2,1,3,2,2,1,1,3,3,1,3,0,2,1,3,2,1,2,1,3,2,2,2,1,1,3,3,0,1,3,3,2,3,1,3,1,2,2,1,1,3,3,2,2,1,1,3,3,2,1,3,2,1,3,2,1,3,2,1,3,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,9,0,9,0,0,0,10,9,11,10,9,11,9,11,9,11,10,9,11,10,9,11,11,10,10,10,9,11,10,10,11,11,11,10,9,11,10,10,9,9,11,11,0,11,10,9,11,11,11,10,9,11,11,10,10,9,9,11,11,0,11,11,10,11,11,10,9,11,11,10,10,9,9,11,11,10,10,9,9,11,11,10,9,11,10,9,11,10,9,11,0,10,9,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,15,16,13,14,15,16,13,0,13,13,14,15,16,13,14,15,16,13,14,15,0,14,15,16,13,16,16,14,15,16,13,14,14,15,15,16,16,13,13,0,0,14,15,16,13,14,15,16,13,14,15,16,13,14,14,15,15,16,16,13,13,14,15,16,13,0,16,13,14,14,15,15,16,16,13,13,14,14,15,15,16,16,13,13,14,15,16,13,14,15,16,13,14,15,16,13,14,15,16,13,0,17,17,17,17,17,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,19,19,20,20,0,20,20,19,20,19,20,19,20,19,0,20,19,20,19,20,19,20,19,20,19,20,20,19,19,20,19,20,19,20,20,19,19,0,20,20,19,20,20,19,19,20,20,19,19,20,19,20,19,20,19,20,19,0,0,0,0,21,22,23,24,21,22,23,24,23,23,23,23,22,22,21,22,23,24,21,22,23,24,21,22,23,24,22,22,21,24,24,24,21,22,23,24,21,21,22,22,23,23,24,24,22,21,22,23,24,21,21,22,23,24,21,21,22,22,23,23,24,24,21,21,21,23,21,22,23,21,0,21,23,24,21,21,22,22,23,23,24,24,21,21,22,22,23,23,24,24,21,21,22,23,24,21,22,23,24,21,22,23,24,21,0,21,22,23,24,0,0,25,26,25,26,25,25,26,25,26,25,26,25,25,26,26,26,25,26,25,25,26,26,25,26,25,26,25,25,26,26,25,26,25,25,26,26,25,25,26,26,25,26,25,26,25,26,25,26,0,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,0,0,29,29,29,29,29,29,0,0,29,29,29,29,29,29,29,29,29,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,31,32,33,31,32,33,33,31,32,33,31,32,33,31,32,33,31,32,33,32,31,32,33,31,32,33,31,31,31,32,32,33,33,32,31,32,33,31,32,33,31,31,32,32,33,33,31,32,33,31,32,33,31,32,33,31,32,33,33,31,32,33,31,33,31,32,33,32,33,31,31,32,32,33,33,31,31,32,32,33,33,31,32,33,31,32,33,31,32,33,31,32,33,32,0,0,0,0,0,0,34,35,36,37,38,39,34,35,36,37,38,39,34,34,34,35,36,37,34,35,36,37,38,39,34,35,36,37,38,39,34,35,36,37,38,39,34,37,37,35,36,37,38,39,34,35,35,36,36,37,37,38,38,39,39,34,34,39,39,35,36,37,38,39,34,0,35,36,37,38,39,34,35,36,37,38,39,34,35,35,36,36,37,37,38,38,39,39,34,34,39,39,39,35,36,38,37,39,34,0,0,37,34,35,35,36,36,37,37,38,38,39,39,34,34,35,35,36,36,37,37,38,38,39,39,34,34,35,36,37,38,39,34,35,36,37,38,39,34,35,36,37,38,39,34,38,39,38,39,35,36,37,38,39,34,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,40,40,40,0,40,40,40,40,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,42,41,42,41,42,41,42,41,41,41,42,41,42,41,41,42,42,41,42,41,42,42,42,41,41,42,41,42,42,41,41,42,41,42,41,42,41,42,41,42,42,41,41,42,42,42,41,41,41,41,42,42,41,42,41,42,42,41,41,42,42,41,41,42,41,42,41,42,41,42,42,41,0,43,43,43,43,43,43,43,43,43,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43],"f":[null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["orbs",4]],[[],["storedexcite",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["orbs",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["orbs",4]],["bool",15]],null,null,null,null,[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[["global",3],["ham",3]],["excitegenerator",3]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[["bool",15],["orbs",4],["option",4],["rand",3]],["option",4]],[[["rand",3],["config",3]],["vec",3]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[]],[[]],null,[[],["ham",3]],[[["usize",15]]],[[["usize",15]]],null,[[["i32",15]],["f64",15]],[[["i32",15]],["f64",15]],[[["usize",15]]],[[]],[[]],[[]],[[["i32",15]],["f64",15]],[[["config",3]],["f64",15]],[[["config",3]],["f64",15]],[[["config",3],["excite",3]],["f64",15]],[[["config",3]],["f64",15]],[[["config",3]],["f64",15]],[[],["usize",15]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["f64",15]],null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[]],[[]],[[],["ints",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["global",3],["str",15]],["ham",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[]],null,[[["det",3],["ham",3],["excite",3],["f64",15]]],[[["f64",15],["det",3]]],[[]],[[]],[[]],[[],["ptsamples",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["global",3],["excitegenerator",3],["ham",3],["wf",3]]],[[]],[[["f64",15],["i32",15]],["f64",15]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["rand",3]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["global",3],["excitegenerator",3],["ham",3],["wf",3],["rand",3]]],[[["global",3],["excitegenerator",3],["ham",3],["wf",3],["rand",3]]],[[["global",3],["excitegenerator",3],["ham",3],["wf",3],["rand",3]]],[[["global",3],["bool",15],["excitegenerator",3],["ham",3],["wf",3],["rand",3]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["impsampledist",4]],[[],["detorbsample",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15],["detorbsample",3],["vec",3]],["screenedsampler",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["screenedsampler",3],["impsampledist",4],["excitegenerator",3],["ham",3],["rand",3]]],null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["alias",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["vec",3],["f64",15]],["alias",3]],[[["rand",3]]],[[["rand",3]],["usize",15]],null,[[["rand",3]]],[[["usize",15],["f64",15]],["usize",15]],[[["usize",15],["f64",15]]],[[["i32",15],["rand",3]]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[["option",4],["rand",3],["vec",3],["impsampledist",4],["f64",15]],["option",4]],[[["option",4],["rand",3],["i32",15],["f64",15],["impsampledist",4],["vec",3]]],null,null,null,null,null,null,null,null,null,[[["u128",15]]],[[["u128",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u128",15],["i32",15]],["bool",15]],[[],["bitsintoiterator",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["config",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u128",15],["i32",15]],["u128",15]],[[["u128",15],["i32",15]],["u128",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u128",15]],["bits",3]],[[["u128",15]],["bitpairs",3]],[[],["option",4]],[[],[["option",4],["i32",15]]],[[["u128",15]],["i32",15]],null,[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["ordering",4]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[],["bool",15]],[[["u128",15]],["string",3]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["ordering",4]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["i32",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["u128",15]],["i32",15]],[[["u128",15]],["i32",15]],[[],[["lines",3],["result",6]]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[["asref",8],["path",3]],[["result",6],["global",3]]],null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[["global",3],["excitegenerator",3],["ham",3],["wf",3]]],[[["global",3],["bool",15],["excitegenerator",3],["ham",3],["f64",15],["wf",3]]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["spectrumtarget",4]],[[],["davidsoncorrection",4]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["spectrumtarget",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["spectrumtarget",4]],["bool",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dmatrix",6],["excitegenerator",3],["dvector",6],["usize",15],["ham",3],["wf",3]],[["dmatrix",6],["f64",15]]],[[["dvector",6],["usize",15],["dmatrix",6]],[["dmatrix",6],["f64",15]]],[[["dvector",6],["dmatrix",6]],[["dmatrix",6],["f64",15]]],[[["f64",15],["dmatrix",6],["excitegenerator",3],["dvector",6],["usize",15],["ham",3],["wf",3]],[["dmatrix",6],["f64",15]]],[[["dmatrix",6],["symmetriceigen",3]],[["dmatrix",6],["f64",15]]],[[["dvector",6],["usize",15],["dmatrix",6]],["davidson",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[["davidsonerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["config",3],["dvector",6],["dmatrix",6],["option",4]],[["dmatrix",6],["f64",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,[[["spectrumtarget",4],["davidsoncorrection",4],["usize",15],["f64",15]]],[[["spectrumtarget",4],["ham",3],["usize",15],["dmatrix",6],["wf",3],["davidsoncorrection",4],["excitegenerator",3],["f64",15],["option",4]],[["davidsonerror",3],["result",4]]],[[["davidsoncorrection",4]],["correctionmethod",3]],null,[[["config",3],["vec",3]]],null,null,[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["dmatrix",6],["dmatrix",6],["f64",15]]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[["dvector",6]],[["dmatrix",6],["f64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["lanczoserror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["spectrumtarget",4],["usize",15],["matrixoperations",8]],[["lanczoserror",3],["result",4]]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],[["f64",15],["dvector",6]]],[[["f64",15],["dmatrixslice",6]],[["dmatrix",6],["f64",15]]],[[["dvectorslice",6],["f64",15]],[["f64",15],["dvector",6]]],[[],["usize",15]],[[],["usize",15]],[[["dvector",6]]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["dmatrix",6],["usize",15]],["bool",15]],[[["dvectorslice",6]],[["f64",15],["dvector",6]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15],["f64",15]],[["dmatrix",6],["f64",15]]],[[["usize",15],["f64",15]],[["dmatrix",6],["f64",15]]],[[["usize",15],["f64",15]],[["dmatrix",6],["f64",15]]],[[["bool",15],["f64",15],["symmetriceigen",3],["dynamic",3]],[["f64",15],["symmetriceigen",3],["dynamic",3]]],[[["bool",15],["vec",3]]],null,[[["global",3],["hashmap",3],["ham",3],["vec",3],["wf",3],["vec",3],["excitegenerator",3],["hashmap",3],["hashmap",3]]],[[["global",3],["usize",15],["ham",3],["vec",3],["wf",3],["hashmap",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["ham",3],["wf",3],["excitegenerator",3]],[["hashmap",3],["vec",3]]],[[["global",3],["excitegenerator",3],["ham",3],["wf",3]]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["global",3],["hashmap",3],["ham",3],["vec",3],["wf",3],["excitegenerator",3],["hashmap",3],["unique",3],["hashmap",3]]],[[["global",3],["unique",3],["ham",3],["usize",15],["wf",3],["hashmap",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[["option",4],["ham",3],["usize",15],["wf",3],["f64",15]]],[[["ham",3],["usize",15],["wf",3]]],[[]],[[]],[[],["offdiagelemsnohash",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["usize",15]]],null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["sparsematuppertri",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[],[["f64",15],["dvector",6]]],[[],[["f64",15],["dvector",6]]],[[],[["f64",15],["dvector",6]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["dmatrix",6],["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15],["dmatrixslice",6]],[["dmatrix",6],["f64",15]]],[[["f64",15],["dmatrixslice",6]],[["dmatrix",6],["f64",15]]],[[["f64",15],["dmatrixslice",6]],[["dmatrix",6],["f64",15]]],[[["dvectorslice",6],["f64",15]],[["f64",15],["dvector",6]]],[[["dvectorslice",6],["f64",15]],[["f64",15],["dvector",6]]],[[["dvectorslice",6],["f64",15]],[["f64",15],["dvector",6]]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[["dvector",6]]],[[["dvector",6]]],[[["dvector",6]]],null,[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["remove1intoiterator",3]],[[]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["u128",15]],["remove1",3]],[[["u128",15]],["remove2",3]],[[["vec",3]],["intersection",3]],[[],[["u128",15],["option",4]]],[[],["option",4]],[[],[["u128",15],["option",4]]],[[["u128",15]]],[[["u128",15]]],null,[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["det",3],["ham",3],["excite",3],["f64",15],["config",3]]],[[["ham",3],["f64",15],["excitegenerator",3]]],[[["ham",3],["f64",15],["excitegenerator",3]]],[[["global",3],["excitegenerator",3],["ham",3],["f64",15]]],[[["ham",3],["f64",15],["excitegenerator",3]]],[[["ham",3],["f64",15],["excitegenerator",3]]],[[["excitegenerator",3],["ham",3],["matrix",3],["f64",15]],[["vec",3],["f64",15]]],[[["excitegenerator",3],["ham",3],["vec",3],["f64",15]],[["vec",3],["f64",15]]],[[]],[[]],null,[[],["wf",3]],[[["usize",15]]],[[["usize",15]]],null,null,[[["usize",15]]],null,null,null,null,[[]],[[["global",3],["ham",3],["excitegenerator",3]],["bool",15]],[[]],[[]],[[]],null,[[],["usize",15]],[[["global",3],["ham",3],["excitegenerator",3]],["wf",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[["global",3],["bool",15],["excitegenerator",3],["ham",3],["f64",15]],["wf",3]],null,null,[[],["usize",15]],null,[[]],[[]],[[["usize",15]]],[[["det",3]]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[]],null,null,[[["excitegenerator",3],["ham",3],["f64",15],["wf",3]],["wf",3]],[[]],[[]],[[]],[[]],[[],["config",3]],[[],["det",3]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["usize",15]]],[[["usize",15]]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["excite",3]],["config",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["excite",3]],["bool",15]],[[["bool",15],["option",4],["storedexcite",3]],["bool",15]],[[["config",3]],["bool",15]],[[["ham",3],["excite",3]],["f64",15]],[[["ham",3]],["f64",15]],[[["ham",3],["bool",15]],["f64",15]],[[["ham",3],["bool",15],["i32",15]],["f64",15]],[[["excite",3]],[["option",4],["config",3]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["eps",3]],[[]],[[],["eps",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[["global",3],["wf",3],["excitegenerator",3]],["eps",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["f64",15],["option",4]]],null,null,[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"Orbs"],[3,"Excite"],[3,"StoredExcite"],[3,"ExciteGenerator"],[3,"Ham"],[3,"Ints"],[3,"PtSamples"],[3,"Rand"],[4,"ImpSampleDist"],[3,"ScreenedSampler"],[3,"DetOrbSample"],[3,"Alias"],[3,"BitsIntoIterator"],[3,"Bits"],[3,"BitPairs"],[3,"BitPairsIntoIterator"],[3,"DetByCoeff"],[3,"Global"],[4,"DavidsonCorrection"],[4,"SpectrumTarget"],[3,"Config"],[3,"Davidson"],[3,"CorrectionMethod"],[3,"DavidsonError"],[3,"HermitianLanczos"],[3,"LanczosError"],[8,"MatrixOperations"],[3,"MGS"],[3,"Unique"],[3,"OffDiagElemsNoHash"],[3,"SparseMat"],[3,"SparseMatDoubles"],[3,"SparseMatUpperTri"],[3,"Remove1IntoIterator"],[3,"Remove1"],[3,"Remove2"],[3,"Remove2IntoIterator"],[3,"Intersection"],[3,"IntersectionIntoIterator"],[3,"Wf"],[3,"Det"],[3,"Config"],[3,"Eps"]]},\
"rolling_stats":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["Info","Stats","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","deserialize","deserialize","fmt","fmt","fmt","from","from","into","into","max","mean","merge","min","new","serialize","serialize","std_dev","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update"],"q":["rolling_stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Stats object calculates continuous min/max/mean/deviation …","","","","","","","","","Number of values collected","","","","","","","","","","Maximum value","Mean of sample set","Merge a set of stats objects for analysis This performs a …","Minimum value","Create a new stats object","","","Standard deviation of sample","","","","","","","","","","Update the stats object"],"i":[0,0,1,2,1,2,1,2,1,2,1,1,2,1,1,2,1,2,1,2,1,1,1,1,1,1,2,1,1,2,1,1,2,1,2,1,2,1],"f":[null,null,[[]],[[]],[[]],[[]],[[],["stats",3]],[[],["info",3]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["iterator",8]],["stats",3]],null,[[],["stats",3]],[[],["result",4]],[[],["result",4]],null,[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[3,"Stats"],[3,"Info"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,0,11,11,11,5,5],"n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":["ryu","","","","","","","","","","","","","","","ryu::raw",""],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","","","This is a cheap operation; you don’t need to worry …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[null,null,[[]],[[]],[[]],[[]],[[["float",8]],["str",15]],[[["float",8]],["str",15]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["f32",15]],["usize",15]],[[["f64",15]],["usize",15]]],"p":[[3,"Buffer"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected …","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","","","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred …","","","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through …"],"i":[0,0,0,1,2,1,2,0,1,1,1,1,2,1,2,0,1,2,1,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["always",4],["scopeguard",3]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during …","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not …","The input contained a newtype variant that was not …","The input contained an <code>Option<T></code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a struct variant that was not …","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects …","","Format an explanation of what data was being expected. …","","","","","","","","","","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string …","","The input contains a string and ownership of the string …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&str</code> with a lifetime tied to …","A deserializer holding a <code>&[u8]</code>. Always calls […","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow<str></code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new borrowed deserializer from the given string.","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given …","Construct a new <code>MapDeserializer<I, E></code>.","Construct a new <code>SeqDeserializer<I, E></code>.","Construct a new <code>SeqAccessDeserializer<A></code>.","Construct a new <code>MapAccessDeserializer<A></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during …","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","","","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,0,0,0,0,6,5,0,0,1,7,8,9,10,0,5,0,0,5,0,5,5,5,5,5,0,5,5,5,5,0,5,5,5,11,12,9,0,0,13,5,13,5,13,5,13,5,14,13,3,11,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,5,12,13,15,15,13,13,5,5,13,5,13,5,6,14,14,14,1,14,5,10,10,7,7,8,8,8,8,8,8,7,8,10,13,5,5,13,5,13,5,10,13,5,10,14,14,0,9,9,12,13,12,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,13,12,12,12,13,12,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,25,25,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,24,41,25,16,17,18,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,19,22,23,24,41,42,43,24,41,24,24,24,24,24,41,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,17,18,19,20,21,43,0,2,44,45,46,47,48,49,50,0,2,44,45,46,47,48,49,50,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,51,51,2,2,2,52,44,45,46,47,48,49,50,51,51,51,51,51,51,51,51,51,2,4,2,2,2,44,45,51,51,48,2,2,46,47,49,50,51,51,51,51,2,2,2,2,2,48,51,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,48,51,49,50,51,51,51],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],null,[[],["bool",15]],[[],["bool",15]],null,null,[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[["usize",15],["option",4]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["unexpected",4]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["ignoredany",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[],["bool",15]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[["str",15]]],[[["str",15]]],null,[[],["result",4]],[[],["result",4]],[[["bool",15]],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["vec",3],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[["u128",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["bool",15]],[[["str",15]],["borrowedstrdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],["result",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["bool",15]],[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[["usize",15],["option",4]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_json":{"doc":"Serde JSON","tn":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_iter","into_iter","invalid_type","json","map","ne","next","ser","serialize","serialize","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","byte_offset","byte_offset","byte_offset","decode_hex_escape","decode_hex_escape","decode_hex_escape","discard","discard","discard","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","ignore_str","ignore_str","ignore_str","into","into","into","into_iter","new","new","new","new","new","next","next","next","parse_str","parse_str","parse_str","parse_str_raw","parse_str_raw","parse_str_raw","peek","peek","peek","peek_position","peek_position","peek_position","position","position","position","set_failed","set_failed","set_failed","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_char_escape","write_f32","write_f64","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u16","write_u32","write_u64","write_u8","Array","Bool","Index","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","ne","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["serde_jsonserde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","","","","","","Convert copy-on-write string to <code>Value</code>","","Convert string slice to <code>Value</code>","","Convert <code>Number</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert a slice to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","","","","","","","","","","Convert 32-bit floating point number to <code>Value</code>","Convert 64-bit floating point number to <code>Value</code>","Convert boolean to <code>Value</code>","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> …","","Write into a <code>serde_json::Value</code> using the syntax …","","","","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","Serialize a Rust data structure into JSON data.","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","","","","","","","","","","The <code>Deserializer::end</code> method should be called after a …","","","","Deserialize an instance of type <code>T</code> from an IO stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&str</code>.","","","","","","","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","","","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to …","Returns true if this error was caused by input that was …","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into Self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the …","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","","","","","","","","","","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Removes a key from the map, returning the value at the …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as …","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it …","An escaped quote <code>\\\"</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written …","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","","","","","","","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a …","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be …","Mutably index into a JSON array or map. A string index …","","","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[1,1,0,0,0,1,0,1,1,0,0,0,1,0,2,3,4,5,6,1,2,3,4,5,6,1,5,1,5,1,4,4,0,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,5,4,4,5,1,1,2,3,4,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,0,0,0,1,0,5,1,5,1,2,3,4,5,6,1,1,3,5,4,0,0,1,3,0,5,1,4,5,1,0,4,1,0,0,0,0,0,0,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,0,0,0,0,0,0,0,7,8,9,7,8,9,3,7,8,9,7,8,9,7,8,9,2,7,8,9,0,2,0,2,0,2,7,8,9,7,8,9,2,2,3,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,0,10,10,0,10,0,10,10,10,4,10,10,4,10,10,10,10,4,4,4,4,4,10,10,10,10,0,0,0,0,0,0,11,0,11,0,0,0,11,5,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,5,5,5,11,12,13,14,15,16,17,18,19,5,13,5,13,5,12,13,11,12,13,14,15,16,17,18,19,14,15,16,17,18,19,13,5,5,5,11,12,13,5,5,14,15,16,17,18,19,5,14,15,16,17,18,19,14,15,16,17,18,19,11,11,5,13,5,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,5,5,5,20,20,20,0,0,20,0,20,0,20,20,0,20,20,21,22,21,22,21,22,21,22,21,22,21,20,23,22,20,23,22,23,22,23,22,22,21,22,21,22,21,22,21,21,22,21,23,22,20,23,22,20,23,22,6,6,22,6,23,22,0,0,0,0,0,0,20,23,22,20,23,22,20,23,22,6,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,1,1,0,1,0,1,1,0,1,0,1,1,1,1,24,1,24,1,1,1,1,1,24,25,24,25,24,24,24,25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,24,24,24,24,24,24,24,24,24,24,24,24,24,0,1,1,25,24,1,1,1,24,1,24,1,1,1,1,1,24,24,1,1,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,1,24,24,0,25,24,25,24,25,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[]],[[]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],null,[[]],[[],["value",4]],[[],["result",4]],[[],[["value",4],["result",4]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[["usize",15]],[["result",4],["error",3]]],[[["str",15],["usize",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["u8",15]],["bool",15]],[[["u16",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["value",4]],["bool",15]],[[["isize",15]],["bool",15]],[[],["bool",15]],[[["i8",15]],["bool",15]],[[["i16",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i64",15]],["bool",15]],null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["cow",4],["str",15]]],[[["i8",15]]],[[["str",15]]],[[]],[[["number",3]]],[[["map",3],["value",4],["string",3]]],[[["vec",3]]],[[]],[[]],[[["string",3]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["isize",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["usize",15]]],[[["f32",15]]],[[["f64",15]]],[[["bool",15]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[["str",15]],[["value",4],["error",3],["result",4]]],[[["value",4]],[["result",4],["error",3]]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unexpected",4],["expected",8]]],null,null,[[["value",4]],["bool",15]],[[],[["option",4],["result",6]]],null,[[],["result",4]],[[],["result",4]],[[],[["error",8],["option",4]]],[[]],[[]],[[],[["result",6],["string",3]]],[[],["string",3]],[[],["string",3]],[[],[["result",6],["string",3]]],[[],[["value",4],["error",3],["result",4]]],[[],[["result",6],["vec",3]]],[[],[["result",6],["vec",3]]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["result",6],["u16",15]]],[[],[["result",6],["u16",15]]],[[],[["result",6],["u16",15]]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[],["result",6]],[[]],[[],["result",6]],[[]],[[["str",15]],["result",6]],[[["str",15]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[],["streamdeserializer",3]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[["vec",3]],[["result",6],["reference",4]]],[[["vec",3]],[["result",6],["reference",4]]],[[["vec",3]],[["result",6],["reference",4]]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["result",6],["reference",4]]],[[["vec",3]],[["result",6],["reference",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["category",4]],[[],["category",4]],[[]],[[],["usize",15]],[[["category",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["entry",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["value",4],["option",4]]],[[],["value",4]],[[],[["value",4],["option",4]]],[[],["value",4]],[[["value",4],["string",3]],[["value",4],["option",4]]],[[["value",4]],["value",4]],[[["value",4]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["value",4]],["value",4]],[[],["value",4]],[[],[["value",4],["option",4]]],[[],["value",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["compactformatter",3]],[[],["prettyformatter",3]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",6],["string",3]]],[[],[["result",6],["string",3]]],[[],[["result",6],["vec",3]]],[[],[["result",6],["vec",3]]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["bool",15]],["result",6]],[[["charescape",4]],["result",6]],[[["f32",15]],["result",6]],[[["f64",15]],["result",6]],[[["i16",15]],["result",6]],[[["i32",15]],["result",6]],[[["i64",15]],["result",6]],[[["i8",15]],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["u16",15]],["result",6]],[[["u32",15]],["result",6]],[[["u64",15]],["result",6]],[[["u8",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,[[],[["vec",3],["option",4]]],[[],[["option",4],["vec",3]]],[[],[["bool",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],["option",4]],[[],[["option",4],["map",3]]],[[],[["map",3],["option",4]]],[[],[["str",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[]],[[]],[[]],[[]],[[],["number",3]],[[]],[[],[["value",4],["result",6]]],[[],[["number",3],["result",4]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[["str",15]],["result",4]],[[["number",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]]],[[["u8",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[]],[[["i32",15]]],[[["i64",15]]],[[["f64",15]],[["option",4],["number",3]]],[[["str",15]],["result",4]],[[["value",4]],[["result",4],["error",3]]],[[["index",8]],[["value",4],["option",4]]],[[["index",8]],[["value",4],["option",4]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["number",3]],["bool",15]],[[["str",15]],[["value",4],["option",4]]],[[["str",15]],[["value",4],["option",4]]],[[],["result",4]],[[["bool",15]],[["value",4],["result",6]]],[[],[["value",4],["result",6]]],[[["char",15]],[["value",4],["result",6]]],[[["f32",15]],[["value",4],["result",6]]],[[["f64",15]],[["value",4],["result",6]]],[[["i16",15]],[["value",4],["result",6]]],[[["i32",15]],[["value",4],["result",6]]],[[["i64",15]],[["value",4],["result",6]]],[[["i8",15]],[["value",4],["result",6]]],[[["usize",15],["option",4]],["result",6]],[[["str",15]],[["value",4],["result",6]]],[[["str",15],["u32",15]],[["value",4],["result",6]]],[[],[["value",4],["result",6]]],[[["usize",15],["option",4]],["result",6]],[[],[["value",4],["result",6]]],[[["str",15]],[["value",4],["result",6]]],[[["str",15],["usize",15]],["result",6]],[[["str",15],["u32",15],["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["str",15],["usize",15]],["result",6]],[[["str",15],["u32",15],["usize",15]],["result",6]],[[["u16",15]],[["value",4],["result",6]]],[[["u32",15]],[["value",4],["result",6]]],[[["u64",15]],[["value",4],["result",6]]],[[["u8",15]],[["value",4],["result",6]]],[[],[["value",4],["result",6]]],[[["str",15]],[["value",4],["result",6]]],[[["str",15],["u32",15]],[["value",4],["result",6]]],[[],["value",4]],[[]],[[],["string",3]],[[],[["value",4],["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[3,"Map"],[3,"Serializer"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[3,"CompactFormatter"],[3,"Number"],[3,"Serializer"]]},\
"simba":{"doc":"<strong>Simba</strong> is a crate defining a set of trait for writing code …","tn":["scalar","simd","ClosedAdd","ClosedDiv","ClosedMul","ClosedNeg","ClosedSub","ComplexField","Field","RealField","RealField","SubsetOf","SupersetOf","abs","acos","acosh","argument","asin","asinh","atan","atan2","atanh","cbrt","ceil","clamp","conjugate","copysign","cos","cosc","cosc","cosh","coshc","coshc","e","exp","exp2","exp_m1","floor","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","from_real","from_subset","from_superset","from_superset","from_superset_unchecked","hypot","imaginary","is_finite","is_in_subset","is_in_subset","is_sign_negative","is_sign_positive","ln","ln_10","ln_1p","ln_2","log","log10","log10_e","log2","log2_e","max","min","modulus","modulus_squared","mul_add","norm1","pi","powc","powf","powi","real","recip","round","scale","signum","signum","sin","sin_cos","sinc","sinc","sinh","sinh_cosh","sinh_cosh","sinhc","sinhc","sqrt","tan","tanh","to_exp","to_exp","to_polar","to_polar","to_subset","to_subset","to_subset_unchecked","to_superset","trunc","try_sqrt","two_pi","unscale","0","0","AutoBoolSimd","AutoBoolx1","AutoBoolx16","AutoBoolx2","AutoBoolx32","AutoBoolx4","AutoBoolx8","AutoF32x16","AutoF32x2","AutoF32x4","AutoF32x8","AutoF64x2","AutoF64x4","AutoF64x8","AutoI128x1","AutoI128x2","AutoI128x4","AutoI16x16","AutoI16x2","AutoI16x32","AutoI16x4","AutoI16x8","AutoI32x16","AutoI32x2","AutoI32x4","AutoI32x8","AutoI64x2","AutoI64x4","AutoI64x8","AutoI8x16","AutoI8x2","AutoI8x32","AutoI8x4","AutoI8x8","AutoIsizex2","AutoIsizex4","AutoIsizex8","AutoSimd","AutoU128x1","AutoU128x2","AutoU128x4","AutoU16x16","AutoU16x2","AutoU16x32","AutoU16x4","AutoU16x8","AutoU32x16","AutoU32x2","AutoU32x4","AutoU32x8","AutoU64x2","AutoU64x4","AutoU64x8","AutoU8x16","AutoU8x2","AutoU8x32","AutoU8x4","AutoU8x8","AutoUsizex2","AutoUsizex4","AutoUsizex8","Element","PrimitiveSimdValue","SimdBool","SimdBool","SimdComplexField","SimdOption","SimdPartialOrd","SimdRealField","SimdRealField","SimdSigned","SimdValue","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all","and","and","and","and","and","and","and","any","any","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","map_lanes","map_lanes","mask","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","none","none","none","none","none","none","none","not","not","not","not","not","not","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","option","or","or","or","or","or","or","or","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unwrap","simd_unwrap_or","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_string","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","xor","xor","xor","xor","xor","xor","xor","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zip_map_lanes","zip_map_lanes"],"q":["simba","","simba::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simba::simdd":["Traits implemented by scalar, non-SIMD, types.","Traits implemented by SIMD types and non-SIMD types.","Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Neg</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>…","Trait shared by all complex fields and its subfields …","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Nested sets and conversions between them (using an …","Nested sets and conversions between them. Useful to work …","The absolute value of this complex number: …","","","The argument of this complex number.","","","","","","","","","","Copies the sign of <code>self</code> to <code>to</code>.","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","The inclusion map: converts <code>self</code> to the equivalent …","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_superset</code> but without any …","Computes (self.conjugate() * self + other.conjugate() * …","The imaginary part of this complex number.","","Checks if <code>element</code> is actually part of the subset <code>Self</code> …","Checks if <code>self</code> is actually part of its subset <code>T</code> (and can …","Is the sign of this real number negative?","Is the sign of this real number positive?","","","","","","","","","","","","The modulus of this complex number.","The squared modulus of this complex number.","","The sum of the absolute value of this complex number’s …","","","","","The real part of this complex number.","","","Multiplies this complex number by <code>factor</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","Cardinal sine","Cardinal sine","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_subset</code> but without any …","The inclusion map: converts <code>self</code> to the equivalent …","","","","Divides this complex number by <code>factor</code>.","","","An Simd boolean structure that implements all the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Simd structure that implements all the relevant traits …","","","","","","","","","","","","","","","","","","","","","","","","The type of the elements of each lane of this SIMD value.","Marker trait implemented by SIMD and non-SIMD primitive …","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD …","Generalization of Option for SIMD computation.","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","A lane-wise generalization of <code>num::Signed</code> for SIMD values.","Base trait for every SIMD types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes true?","","","","","","","Lane-wise bitwise and of the vector elements.","","","","","","","Is any vector lane true?","","","","","","","","","","","","","A bit mask representing the boolean state of each lanes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code> without bound-checkinguilds a pure-real complex number from the given valueerges the value of <code>if_value()</code> and <code>else_value()</code> depending …","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests which lane is negative.","","","","","","","","Tests which lane is positive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of lanes of this SIMD value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code>.","Return the underlying SIMD boolean mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SIMD option by combining a value and a mask …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes false?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this SIMD option to a strandard Option.","Lane-wise bitwise or of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The absolute value of this complex number: …","The absolute value of each lane of <code>self</code>.","","","","","","","","","","","","","","","The absolute difference of each lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","The argument of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","","","","","","","","","","","","","","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>>=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater than</em> <code>></code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The max value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The min value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the product of all the lanes of <code>self</code>.","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","The imaginary part of this complex number.","","","","","","","","Lanewise <em>less or equal</em> <code><=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code><</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise max value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise min value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The modulus of this complex number.","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The sum of the absolute value of this complex number’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","The signum of each lane of <code>Self</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cardinal sine","Cardinal sine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","","","","","","","","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","Retrieve the underlying value if all the bits of <code>self.mask</code>…","Merges the value of <code>self</code> with the value of <code>other</code>.","Initializes an SIMD value with each lanes set to <code>val</codeeturn the underlying unfiltered value.","Lane-wise bitwise xor of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code> paired with the …","Applies a function to each lane of <code>self</code> paired with the …"],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,2,1,1,1,2,1,2,1,1,1,1,1,1,2,1,1,1,1,2,2,2,2,2,2,2,2,1,1,3,4,4,4,1,1,1,4,3,2,2,1,2,1,2,1,1,2,1,2,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,4,1,1,2,1,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,8,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,6,10,5,6,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,10,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,8,8,5,5,5,5,5,5,5,8,8,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,11,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,8,8,5,5,5,5,5,5,5,8,8,8,8,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,8,5,5,5,5,5,5,5,8,8,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,10,10,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,6,10,5,6,10,5,6,10,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["autosimd",3]],[[],["autoboolsimdautosimd",3]],["bool",15]],[[["autoboolsimd",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usizeautosimd",3]],["bool",15]],[[["autoboolsimd",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["u8",15]]],[[["i8",15]]],[[["i128",15]]],[[["i128",15]]],[[["bool",15]]],[[["i16",15]]],[[["i16",15]]],[[["i16",15]]],[[["i8",15]]],[[["i16",15]]],[[["i16",15]]],[[["i32",15]]],[[["usize",15]]],[[["i32",15]]],[[["i32",15]]],[[["i8",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i64",15]]],[[["i8",15]]],[[["u16",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["usize",15]]],[[["u128",15]]],[[["bool",15]]],[[["bool",15]]],[[["f32",15]]],[[["isize",15]]],[[["f32",15]]],[[["f32",15]]],[[["usize",15]]],[[["i128",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["bool",15]]],[[["u8",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["bool",15]]],[[["u32",15]]],[[["u32",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["i8",15]]],[[["u128",15]]],[[["u128",15]]],[[["isize",15]]],[[["isize",15]]],[[["bool",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["boolusize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usizei32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["istring",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"ComplexField"],[8,"RealField"],[8,"SupersetOf"],[8,"SubsetOf"],[3,"AutoSimd"],[3,"AutoBoolSimd"],[8,"SimdValue"],[8,"SimdComplexField"],[8,"SimdBool"],[3,"SimdOption"],[8,"SimdSigned"],[8,"SimdRealField"],[8,"SimdPartialOrd"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","t":[13,8,13,4,3,3,16,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["AllocErr","Array","CapacityOverflow","CollectionAllocErr","Drain","IntoIter","Item","SmallVec","ToSmallVec","append","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into","into_boxed_slice","into_inner","into_iter","into_iter","into_iter","into_vec","is_empty","len","len","new","next","next","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","to_owned","to_smallvec","to_string","truncate","try_from","try_from","try_from","try_from","try_grow","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","layout"],"q":["smallvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","smallvec::CollectionAllocErr"],"d":["The allocator return an error","Types that can be used as the backing store for a SmallVec","Overflow <code>usize::MAX</code> or other error during size computation","Error type for APIs with fallible heap allocation","An iterator that removes the items from a <code>SmallVec</code> and …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Convenience trait for constructing a <code>SmallVec</code>","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a raw mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","Returns the remaining items of this iterator as a mutable …","Returns a raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","Creates a draining iterator that removes the specified …","","","","","","Copy elements from a slice and append them to the vector.","","","","","","","","","","","","","","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec<A::Item></code>.","Re-allocate to set the capacity to …","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","","","","","Converts a <code>SmallVec</code> into a <code>Box<[T]></code> without reallocating …","Convert the SmallVec into an <code>A</code> if possible. Otherwise …","","","","Convert a SmallVec to a Vec, without reallocating if the …","Returns <code>true</code> if the vector is empty","","The number of elements stored in the vector","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Append an item to the vector.","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …","Retains only the elements specified by the predicate.","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a [<code>SmallVec</code>] containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","","Construct a new <code>SmallVec</code> from a slice.","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","Re-allocate to set the capacity to …","","","","","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","","","","","Construct an empty vector with enough capacity …","The layout that was passed to the allocator"],"i":[1,0,1,0,0,0,2,0,0,3,3,3,3,4,3,3,3,4,5,3,3,4,1,5,3,3,4,1,3,3,3,4,3,4,3,3,3,3,3,3,3,3,5,3,4,3,3,3,5,3,4,1,1,5,3,3,3,3,3,4,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,3,4,1,3,3,5,3,4,3,3,5,3,3,5,4,5,4,3,3,3,3,3,3,3,3,3,3,3,2,5,4,0,3,3,3,4,6,1,3,5,3,4,1,3,5,3,4,1,3,3,5,3,4,1,3,7],"f":[null,null,null,null,null,null,null,null,null,[[["smallvec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["smallvec",3]],[[],["intoiter",3]],[[]],[[]],[[["smallvec",3]],["ordering",4]],[[]],[[]],[[]],[[],["smallvec",3]],[[]],[[]],[[],["drain",3]],[[]],[[]],[[]],[[["smallvec",3]],["bool",15]],[[["intoiterator",8]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["smallvec",3]],[[],["smallvec",3]],[[["vec",3]],["smallvec",3]],[[]],[[]],[[]],[[["layouterr",6]]],[[]],[[],["smallvec",3]],[[["usize",15]],["smallvec",3]],[[["usize",15],["maybeuninit",19]],["smallvec",3]],[[["usize",15]]],[[["intoiterator",8]],["smallvec",3]],[[["usize",15]],["smallvec",3]],[[]],[[["vec",3]],["smallvec",3]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["intoiterator",8]]],[[]],[[]],[[]],[[]],[[],["box",3]],[[],["result",4]],[[]],[[]],[[]],[[],["vec",3]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["smallvec",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["smallvec",3]],[["ordering",4],["option",4]]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["fnmut",8]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],null,[[],["bool",15]],[[["usize",15]]],[[]],[[]],[[],["smallvec",3]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["collectionallocerr",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["collectionallocerr",4],["result",4]]],[[["usize",15]],[["collectionallocerr",4],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],null],"p":[[4,"CollectionAllocErr"],[8,"Array"],[3,"SmallVec"],[3,"IntoIter"],[3,"Drain"],[8,"ToSmallVec"],[13,"AllocErr"]]},\
"sprs":{"doc":"sprs is a sparse linear algebra library for Rust.","t":[13,13,13,13,13,4,3,6,3,6,6,6,6,6,6,6,6,6,6,6,3,6,6,6,6,6,8,8,13,13,4,6,3,6,6,6,8,13,16,6,6,6,6,3,4,13,16,6,8,4,6,3,6,3,6,6,6,6,11,11,11,11,11,11,11,0,11,5,11,11,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,10,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,0,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,5,11,11,11,11,11,10,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,13,4,13,13,13,13,3,13,3,13,13,4,13,4,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,13,13,13,13,4,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,0,0,5,0,6,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,5,11,11,11,11,11,11,11,11,0,12,5,0,11,11,11,11,11,8,3,3,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,13,13,13,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,5,5,11,11,11,11,11,11,5,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,6,3,6,6,8,16,13,4,3,3,13,8,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11],"n":["CAMDSuiteSparse","CSC","CSR","CheckPerm","CheckSymmetry","CompressedStorage","CsIter","CsMat","CsMatBase","CsMatI","CsMatVecView","CsMatView","CsMatViewI","CsMatViewMut","CsMatViewMutI","CsStructure","CsStructureI","CsStructureView","CsStructureViewI","CsVec","CsVecBase","CsVecI","CsVecView","CsVecViewI","CsVecViewMut","CsVecViewMutI","DenseVector","DenseVectorMut","DontCheckPerm","DontCheckSymmetry","FillInReduction","IndPtr","IndPtrBase","IndPtrView","Ix1","Ix2","MulAcc","NoReduction","Owned","PermOwned","PermOwnedI","PermView","PermViewI","Permutation","PermutationCheck","ReverseCuthillMcKee","Scalar","Shape","SparseMat","SymmetryCheck","TriMat","TriMatBase","TriMatI","TriMatIter","TriMatView","TriMatViewI","TriMatViewMut","TriMatViewMutI","add_triplet","add_triplet","append","append_outer","append_outer","append_outer_csvec","append_outer_csvec","array_backend","as_slice","assign_to_dense","at","at_inv","binop","bmat","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_compressed_structure","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","col_inds","cols","cols","cols","cols","cols","cols","csc_from_dense","csc_from_dense","csr_from_dense","csr_from_dense","data","data","data_mut","degrees","density","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diag","diag_iter","diag_iter_mut","dim","dim","dim","div_assign","dot","dot","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","errors","eye","eye","eye_csc","eye_csc","find_locations","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_triplets","from_triplets","get","get_mut","get_outer_inner","get_outer_inner_mut","get_rbr","hash","hash","hash","hash","hstack","identity","identity","index","index","index","index_mut","index_mut","indexing","indices","indptr","init","init","init","init","init","init","init","init","init","init","inner_dims","insert","insert","into","into","into","into","into","into","into","into","into","into","into_col_inds","into_cs","into_csc","into_csc","into_csc","into_csr","into_csr","into_csr","into_data","into_iter","into_iter","into_iter","into_iter","into_raw_storage","into_raw_storage","into_row_inds","into_sparse_vec_iter","inv","inv_vec","io","is_csc","is_csr","is_empty","is_identity","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_proper","is_symmetric","is_zero","iter","iter_outer","iter_outer_nnz_inds","iter_outer_sz","iter_rbr","iter_rbr","kronecker_product","len","linalg","map","map_inplace","max_outer_nnz","middle_outer_views","middle_outer_views","modify","mul","mul_acc","mul_assign","ne","ne","ne","ne","neg","new","new","new","new","new","new","new_checked","new_csc","new_from_unsorted","new_from_unsorted_csc","new_unchecked","next","next","nnz","nnz","nnz","nnz","nnz","nnz","nnz","nnz_i","nnz_in_outer","nnz_in_outer_sz","nnz_index","nnz_index_outer_inner","num_kinds","operate","other_storage","outer_block_iter","outer_dims","outer_dims","outer_inds","outer_inds_slice","outer_inds_sz","outer_iterator","outer_iterator_mut","outer_view","outer_view_mut","owned_clone","perm_is_valid","prod","proper_indptr","raw_storage","reborrow","reborrow_inv","reserve","reserve","reserve","reserve_exact","reserve_exact","reserve_exact","reserve_nnz","reserve_nnz","reserve_nnz_exact","reserve_nnz_exact","reserve_outer_dim","reserve_outer_dim","reserve_outer_dim_exact","reserve_outer_dim_exact","row_inds","rows","rows","rows","rows","rows","rows","scale","set","set_triplet","shape","shape","shape","size_hint","size_hint","slice_outer","slice_outer_mut","slice_outer_rbr","slice_outer_rbr","smmp","special_mats","stack","storage","structure_view","to_csc","to_csc","to_csr","to_csr","to_dense","to_inner_onehot","to_other_idx_type","to_other_storage","to_other_types","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_proper","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform_mat_papt","transpose_into","transpose_into","transpose_mut","transpose_view","transpose_view","triplet_iter","triplet_iter_rbr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new_csc","two_sided_inverse","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","vec","view","view","view","view","view_mut","view_mut","visu","vstack","with_capacity","with_capacity","zero","zero","zero","zeros","Array2","borrow","borrow_mut","clone","clone_into","data","deref","deref","deref_mut","deref_mut","drop","fmt","from","from_subset","init","into","is_in_subset","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","add_dense_mat_same_ordering","csmat_binop","csmat_binop_dense_raw","csmat_binop_same_storage_raw","csvec_binop","mul_dense_mat_same_ordering","mul_mat_same_storage","Linalg","LinalgError","NonSquareMatrix","OutOfRange","OutOfRange","ShapeMismatch","ShapeMismatchInfo","SingularMatrix","SingularMatrixInfo","SizeMismatch","SizeMismatch","SprsError","Structure","StructureError","StructureErrorKind","ThirdPartyError","Unsorted","Unsorted","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","expected","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","index","init","init","init","init","init","init","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","kind","ne","ne","ne","ne","ne","reason","received","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","SpIndex","from_usize","from_usize_unchecked","index","index_unchecked","try_from_usize","try_index","BadMatrixMarketFile","General","Hermitian","Io","IoError","SkewSymmetric","Symmetric","SymmetryMode","UnsupportedMatrixMarketFormat","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","fmt","from","from","from","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","read_matrix_market","read_matrix_market_from_bufread","to_owned","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","write_matrix_market","write_matrix_market_sym","diag_solve","etree","ordering","reverse_cuthill_mckee","trisolve","Parent","Parents","ParentsOwned","ParentsView","ParentsViewMut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","from_subset","get_parent","init","into","is_in_subset","is_root","nb_nodes","new","set_parent","set_root","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","uproot","view","view_mut","Ordering","borrow","borrow_mut","connected_parts","cuthill_mckee_custom","deref","deref_mut","drop","from","from_subset","init","into","is_in_subset","order","perm","reverse_cuthill_mckee","start","to_subset","to_subset_unchecked","try_from","try_into","type_id","DirectedOrdering","Forward","Reversed","add_component_delimeter","add_component_delimeter","add_component_delimeter","add_transposition","add_transposition","add_transposition","borrow","borrow","borrow_mut","borrow_mut","default","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_subset","from_subset","init","init","into","into","into_ordering","into_ordering","into_ordering","is_in_subset","is_in_subset","new","new","prepare","prepare","prepare","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","MinimumDegree","Next","PseudoPeripheral","Strategy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","find_start_vertex","find_start_vertex","find_start_vertex","find_start_vertex","from","from","from","from_subset","from_subset","from_subset","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","new","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","lsolve_csc_dense_rhs","lsolve_csc_sparse_rhs","lsolve_csr_dense_rhs","usolve_csc_dense_rhs","usolve_csr_dense_rhs","Complex","Float","Integer","NumKind","PrimitiveKind","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from_subset","init","into","is_in_subset","num_kind","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","csc_mulacc_dense_colmaj","csc_mulacc_dense_rowmaj","csr_mul_csvec","csr_mulacc_dense_colmaj","csr_mulacc_dense_rowmaj","csvec_dot_by_binary_search","mul_acc_mat_vec_csc","mul_acc_mat_vec_csr","workspace_csc","workspace_csr","Automatic","AutomaticPhysical","Fixed","ThreadingStrategy","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","from_subset","init","into","is_in_subset","mul_csr_csr","mul_csr_csr_with_workspace","ne","numeric","set_thread_threading_strategy","symbolic","thread_threading_strategy","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","tri_mesh_graph_laplacian","DStack","Enter","Exit","StackVal","borrow","borrow","borrow_mut","borrow_mut","capacity","clear_left","clear_right","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","extract_stack_val","fmt","fmt","from","from","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","is_left_empty","is_right_empty","iter_right","len_right","ne","pop_left","pop_right","push_left","push_left_on_right","push_right","push_right_on_left","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","with_capacity","0","Both","CsVec","CsVecBase","CsVecView","CsVecViewMut","IntoSparseVecIter","IterType","Left","NnzEither","NnzIndex","NnzOrZip","Right","SparseIterTools","VecDim","VectorIterator","VectorIteratorMut","add","add","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_structure","clear","clone","clone","clone_into","clone_into","col_view","data","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dim","dim","dim","dim","div_assign","dot","dot_dense","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get","get_mut","get_rbr","hash","index","index","index","index","index_mut","index_mut","indices","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_raw_storage","into_sparse_vec_iter","is_dense","is_dense","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iter","iter_mut","l1_norm","l2_norm","map","map_inplace","mul_assign","ne","ne","ne","new","new_from_unsorted","new_uncheked","next","next","next","nnz","nnz_index","nnz_or_zip","nnz_or_zip","nnz_zip","nnz_zip","norm","reserve","reserve_exact","row_view","scatter","size_hint","size_hint","size_hint","squared_l2_norm","to_dense","to_other_types","to_owned","to_owned","to_owned","to_set","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","unit_normalize","view","view_mut","NnzPatternFormatter","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from_subset","init","into","is_in_subset","nnz_image","nnz_pattern_formatter","print_nnz_pattern","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id"],"q":["sprssprs::array_backend","","","","","","","","","","","","","","","","","","","","","","","sprs::binop","","","","","","","sprs::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::indexing","","","","","","","sprs::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::linalg","","","","","sprs::linalg::etree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::linalg::ordering","","","","","","","","","","","","","","","","","","","","","","sprs::linalg::ordering::order","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::linalg::ordering::start","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::linalg::trisolve","","","","","sprs::num_kinds","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::prod","","","","","","","","","","sprs::smmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::special_mats","sprs::stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sprs::vecsprs::visu","","","","","","","","","","","","","","","","","","","",""],"d":["","Compressed column storage","Compressed row storage","","","Describe the storage of a <code>CsMat</code>","","","Compressed matrix in the CSR or CSC format, with sorted …","","","","","","","","","","","","A sparse vector, storing the indices of its non-zero data.","","","","","","A trait for types representing dense vectors, useful for …","Trait for dense vectors that can be modified, useful for …","","","The different kinds of fill-in-reduction algorithms …","","","","","","Trait for types that have a multiply-accumulate …","","","","","","","","Configuration enum to ask for permutation checks in …","","","The shape of a matrix. This a 2-tuple with the first …","A trait for common members of sparse matrices","Configuration enum to ask for symmetry checks in …","","Sparse matrix in the triplet format.","","An iterator over elements of a sparse matrix, in the …","","","","","Append a non-zero triplet to this matrix.","Append a non-zero triplet to this matrix.","Append an element to the sparse vector. Used for …","Append an outer dim to an existing matrix, compressing it …","Append an outer dim to an existing matrix, compressing it …","Append an outer dim to an existing matrix, provided by a …","Append an outer dim to an existing matrix, provided by a …","Fixed size arrays usable for sparse matrices.","Return a view on the underlying slice if it is a proper …","Assign a sparse matrix into a dense matrix","","","Sparse matrix addition, subtraction","Specify a sparse matrix by constructing it from blocks of …","","","","","","","","","","","","","","","","","","","","","Check the structure of <code>CsMat</code> components This will ensure …","Clear the underlying storage","","","","","","","","","","","","","","","","","The non-zero column indices","The number of columns of this matrix","","The number of cols of this matrix","","The number of cols of the matrix","The number of cols of the matrix","Create a CSC matrix from a dense matrix, ignoring …","Create a CSC matrix from a dense matrix, ignoring …","Create a CSR matrix from a dense matrix, ignoring …","Create a CSR matrix from a dense matrix, ignoring …","The non-zero values. See the documentation of indptr() …","The non-zero values","Mutable access to the non zero values","Get the degrees of each vertex on a symmetric matrix","The density of the sparse matrix, defined as the number …","","","","","","","","","","","","","","","","","","","","","Get the diagonal of a sparse matrix","Iteration over all entries on the diagonal","Iteration over all entries on the diagonal","The dimension of the vector","","","","","","","","","","","","","","","","Create an empty <code>CsMat</code> for building purposes","Create an empty <code>CsVec</code>, which can be used for incremental …","Create an empty <code>CsMat</code> for building purposes","","","","","","","","","","Error type for sprs","Identity matrix, stored as a CSR matrix.","Identity matrix, stored as a CSR matrix.","Identity matrix, stored as a CSC matrix.","Identity matrix, stored as a CSC matrix.","Find all non-zero entries at the location given by <code>row</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a triplet matrix from its raw components. All …","Create a triplet matrix from its raw components. All …","Access the element located at row i and column j. Will …","Get a mutable reference to the element located at row i …","Access an element given its <code>outer_ind</code> and <code>inner_ind</code>. Will …","Get a mutable reference to an element given its <code>outer_ind</code> …","Access element at given index, with logarithmic complexity","","","","","Construct a sparse matrix by horizontally stacking other …","","","Random access to an element in the vector.","","Return the value of the indptr at index i. This method is …","Random mutable access to an element in the vector.","","","The inner dimension location for each non-zero value. See …","The array of offsets in the indices() and data() slices. …","","","","","","","","","","","Number of inner dimensions, that ie equal to self.cols() …","Insert an element in the matrix. If the element is …","Insert an element in the matrix. If the element is …","","","","","","","","","","","","Consume <code>TriMatIter</code> and produce a <code>CsMat</code> matrix with the …","Create a new CSC matrix equivalent to this one. If this …","Create a new CSC matrix equivalent to this one. If this …","Consume <code>TriMatIter</code> and produce a CSC matrix","Create a new CSR matrix equivalent to this one. If this …","Create a new CSR matrix equivalent to this one. If this …","Consume <code>TriMatIter</code> and produce a CSR matrix","","","","","","Destruct the matrix object and recycle its storage …","Consume <code>self</code> and return the underlying storage","","","","Get a vector representing the inverse of this permutation","Serialization and deserialization of sparse matrices","Test whether the matrix is in CSC storage","Test whether the matrix is in CSR storage","Tests whether this indptr is empty","Check whether the permutation is the identity.","","","","","","","","","","","Indicates whether the underlying storage is proper, which …","","","Get an iterator that yields the non-zero locations and …","Iterate over outer dimensions, yielding start and end …","Iterate over the nonzeros represented by this indptr, …","Iterate over outer dimensions, yielding start and end …","Get an iterator that yields the non-zero locations and …","Get an iterator that yields the non-zero locations and …","Compute the Kronecker product between two matrices","The length of the underlying storage","","Return a new sparse matrix with the same sparsity …","Apply a function to every non-zero element","Get the max number of nnz for each outer dim","Get a view into count contiguous outer dimensions, …","Get a view into count contiguous outer dimensions, …","Modify the matrix’s structure without changing its …","","Multiply and accumulate in this variable, formally …","","","","","","","Create a new triplet matrix of shape <code>(nb_rows, nb_cols)</code>","","Create a new <code>CSR</code> sparse matrix","Create a new triplet matrix of shape <code>(nb_rows, nb_cols)</code>","Create a new <code>TriMatIter</code> from iterators","","","Create a new <code>CSC</code> sparse matrix","Try create a <code>CSR</code> matrix which acts as an owner of its …","Try create a <code>CSC</code> matrix which acts as an owner of its …","Create a <code>CsMat</code> matrix from raw data, without checking …","","","The number of nonzeros of this matrix","The number of non-zero elements this matrix stores. This …","","","The number of non-zero entries","The number of non-zero entries","The number of nonzero elements described by this indptr","The number of nonzero elements described by this indptr, …","Get the number of nonzeros in the requested outer …","Get the number of nonzeros in the requested outer …","Find the non-zero index of the element specified by row …","Find the non-zero index of the element specified by …","Trait to be able to know at runtime if a generic scalar …","","Get the other storage, ie return CSC if we were CSR, and …","Iteration on outer blocks of size <code>block_size</code>","Number of outer dimensions, that ie equal to self.rows() …","The number of outer dimensions this indptr represents","Get the start and end indices for the requested outer …","Get the start and end indices for the requested outer …","Get the start and end indices for the requested outer …","Return an outer iterator for the matrix","Return a mutable outer iterator for the matrix","Get a view into the i-th outer dimension (eg i-th row for …","Get a mutable view into the i-th outer dimension (eg i-th …","","","","Get an indptr representation suitable for ffi, cloning if …","Return a view of the underlying storage. Should be used …","","","Reserve <code>size</code> additional non-zero values.","Reserve <code>cap</code> additional non-zeros","Reserve <code>cap</code> additional non-zeros","Reserve exactly <code>exact_size</code> non-zero values.","Reserve exactly <code>cap</code> non-zeros","Reserve exactly <code>cap</code> non-zeros","Reserve the storage for the given additional number of …","Reserve the storage for the given additional number of …","Reserve the storage for the given number of nonzero data","Reserve the storage for the given number of nonzero data","Reserve the storage for the given additional number of …","Reserve the storage for the given additional number of …","Reserve the storage for the given number of nonzero data","Reserve the storage for the given number of nonzero data","The non-zero row indices","The number of rows of this matrix","","The number of rows of this matrix","","The number of rows of the matrix","The number of rows of the matrix","Sparse matrix self-multiplication by a scalar","Set the value of the non-zero element located at (row, …","Replace a non-zero value at the given index. Indices can …","The shape of the matrix. Equivalent to …","The shape of the matrix, as a <code>(rows, cols)</code> tuple","The shape of the matrix, as a <code>(rows, cols)</code> tuple","","","Slice the outer dimension of the matrix according to the …","Slice the outer dimension of the matrix according to the …","Slice the outer dimension of the matrix according to the …","Slice the outer dimension of the matrix according to the …","Implementation of the paper Bank and Douglas, 2001, …","","","The underlying storage of this matrix","","Create a new CSC matrix equivalent to this one. A new …","Create a CSC matrix from this triplet matrix","Create a new CSR matrix equivalent to this one. A new …","Create a CSR matrix from this triplet matrix","","Generate a one-hot matrix, compressing the inner …","","Create a matrix mathematically equal to this one, but …","Clone the matrix with another integer type for indptr and …","Copies this vector into an owned version","Get an owned version of this matrix. If the matrix was …","","","","","","","","","","Returns a proper indptr representation, cloning if we do …","","","","","","","","","","","","","","","","","","","","","Compute the square matrix resulting from the product P * …","Transpose a matrix in place No allocation required (this …","","Transpose a matrix in place No allocation required (this …","Transposed view of this matrix No allocation required …","Get a transposed view of this matrix","Get an iterator over non-zero elements stored by this …","Get an iterator over non-zero elements stored by this …","","","","","","","","","","","","","","","","","","","","","Try to create a new <code>CSR</code> sparse matrix","Try to create a new <code>CSC</code> sparse matrix","","","","","","","","","","","","","Get a vector representing this permutation","Return a view into the current matrix","","","","Return a mutable view into the current matrix","","","Construct a sparse matrix by vertically stacking other …","Create a new triplet matrix of shape <code>(nb_rows, nb_cols)</code>, …","Create a new triplet matrix of shape <code>(nb_rows, nb_cols)</code>, …","Create a new <code>CsMat</code> representing the zero matrix. Hence it …","","Create a new <code>CsMat</code> representing the zero matrix. Hence it …","Create an owned version of this dense vector type, filled …","Wrapper around a size 2 array, with <code>Deref</code> implementation.","","","","","","","","","","","","","","","","","","","","","","","Compute alpha * lhs + beta * rhs with lhs a sparse matrix …","Applies a binary operation to matching non-zero elements …","Raw implementation of sparse/dense binary operations with …","Raw implementation of scalar binary operation for …","Binary operations for <code>CsVec</code>","Compute coeff wise <code>alpha * lhs * rhs</code> with <code>lhs</code> a sparse …","Sparse matrix scalar multiplication, with same storage …","","","","","","","","","","","","Convenience wrapper around more precise error types. Not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse matrix index","Convert from usize.","Convert from usize without checking for overflows.","Convert to usize.","Convert to usize without checking for overflows.","Try convert from usize.","Try convert to usize.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read a sparse matrix file in the Matrix Market format and …","Read a sparse matrix in the Matrix Market format from an …","","","","","","","","","","","","","Write a sparse matrix into the matrix market format.","Write a symmetric sparse matrix into the matrix market …","Diagonal solve","","","The reverse Cuthill-McKee algorithm.","","","Store an etree as the parent information of each node. …","","","","","","","","","","","","","","Get the parent of a node. Returns None if the node is a …","","","","Test whether a node is a root.","The number of nodes in this tree.","Create a new tree with all nodes set as root","Set the parent of a node.","Set a node as a root.","","","","","","","Give a parent to a root of the tree. No-op if the node …","Get a view of this object","","","","","Indices inside the permutation delimiting connected …","A customized Cuthill-McKee algorithm.","","","","","","","","","","The computed permutation","The reverse Cuthill-McKee algorithm.","","","","","","","This trait is very deeply integrated with the inner …","Indicates the Cuthill-McKee ordering should be built in …","Indicates the Cuthill-McKee ordering should be built in …","Adds an index indicating the start of a new connected …","","","Adds a new <code>vertex_index</code> as computed in the algorithms …","","","","","","","","","","","","","","","","","","","","","","","Transforms this directed ordering into an ordering to …","","","","","Creates a new instance of this conceptual enum variant.","Creates a new instance of this conceptual enum variant.","Prepares this directed ordering for working with the …","","","","","","","","","","","","","This strategy chooses a vertex of minimum degree as …","This strategy chooses some next available vertex as …","This strategy employs an pseudoperipheral vertex finder …","This trait abstracts over possible strategies to choose a …","","","","","","","","","","","","","","","","","<strong>Contract:</strong> This function must always be called with at …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Solve a sparse lower triangular matrix system, with a csc …","Sparse triangular CSC / sparse vector solve","Solve a sparse lower triangular matrix system, with a csr …","Solve a sparse upper triangular matrix system, with a csc …","Solve a sparse lower triangular matrix system, with a csr …","","","","","","","","","","","","","","","","","","","","Informs whether a generic primitive type contains an …","","","","","","","CSC-dense colmaj multiplication","CSC-dense rowmaj multiplication","CSR-vector multiplication","CSR-dense colmaj multiplication","CSR-dense rowmaj multiplication","Compute the dot product of two sparse vectors, using …","Multiply a sparse CSC matrix with a dense vector and …","Multiply a sparse CSR matrix with a dense vector and …","Allocate the appropriate workspace for a CSC-CSC product","Allocate the appropriate workspace for a CSR-CSR product","","","","Control the strategy used to parallelize the matrix …","","","","","","","","","","","","","","","Compute a sparse matrix product using the SMMP routines","Compute a sparse matrix product using the SMMP routines, …","","Numeric part of the matrix product C = A * B with A, B …","Set the threading strategy for matrix products in this …","Compute the symbolic structure of the matrix product C = …","","","","","","","","Compute the graph laplacian of a triangle mesh","A double stack of fixed capacity, growing from the left …","","","","","","","","Capacity of the dstack","Clear the left stack","Clear the right stack","","","","","","","","","","","","","Enable extraction of stack val from iterators","","","","","","","","","","","","","Test whether the left stack is empty","Test whether the right stack is empty","Iterates along the right stack without removing items","Number of right elements this double stack contains","","Pop a value from the left stack","Pop a value from the right stack","Push a value on the left stack","Push the values of the left stack onto the right stack.","Push a value on the right stack","Push the values of the right stack onto the left stack.","","","","","","","","","","","","","Create a new double stacked suited for containing at most …","","","","A sparse vector, storing the indices of its non-zero data.","","","Trait for types that can be iterated as sparse vectors","","","","Hold the index of a non-zero element in the compressed …","An iterator over the non zeros of either of two vector …","","","A trait to represent types which can be interpreted as …","An iterator over the non-zero elements of a sparse vector","An iterator over the mutable non-zero elements of a …","","","Append an element to the sparse vector. Used for …","","","","","","","","","","","","","Check the sparse structure, namely that:","Clear the underlying storage","","","","","View this vector as a matrix with only one column.","The underlying non zero values.","","","","","","","","","","","","","The dimension of the vector","The dimension of the vector","","The dimension of this vector.","","Sparse vector dot product. The right-hand-side can be any …","Sparse-dense vector dot product. The right-hand-side can …","","","","","","","Create an empty <code>CsVec</code>, which can be used for incremental …","","","","","","","","","","","","","","","","","","","Access element at given index, with logarithmic complexity","Access element at given index, with logarithmic complexity","Access element at given index, with logarithmic complexity","","Random access to an element in the vector.","Random access to an element in the vector.","","","","","The underlying indices.","","","","","","","","","","","","","","","","Destruct the vector object and recycle its storage …","Transform self into an iterator that yields (usize, &N) …","Indicator to check whether the vector is actually dense","Indicator to check whether the vector is actually dense","","","","","","","Iterate over the non zero values.","Mutable iteration over the non-zero values of a sparse …","Compute the L1-norm.","Compute the L2-norm.","Apply a function to each non-zero element, yielding a new …","Apply a function to each non-zero element, mutating it","","","","","Create a sparse vector","Creates a sparse vector","Create a <code>CsVec</code> without checking the structure","","","","The non zero count of this vector.","Find the non-zero index of the requested dimension index, …","Iterate over non-zero elements of either of two vectors. …","Iterate over non-zero elements of either of two vectors. …","Iterate over the matching non-zero elements of both …","Iterate over the matching non-zero elements of both …","Compute the vector norm for the given order p.","Reserve <code>size</code> additional non-zero values.","Reserve exactly <code>exact_size</code> non-zero values.","View this vector as a matrix with only one row.","Fill a dense vector with our values","","","","Compute the squared L2-norm.","Convert the sparse vector to a dense one","Clone the vector with another integer type for its indices","Allocate a new vector equal to this one.","","","Transform this vector into a set of (index, value) tuples","","","","","","","","","","","","","","","","","","","","","","","","","Try create a sparse vector from the given buffers","","","","","","","Divides the vector by its own L2-norm.","Get a view of this vector.","","","","","","","","","","","","","","Create an array holding a black and white image …","","","","","","","",""],"i":[1,2,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,1,5,0,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,6,7,8,9,10,9,10,0,11,0,12,12,0,0,13,10,7,14,2,11,12,4,3,1,13,10,7,14,2,11,12,4,3,1,10,8,10,14,2,11,12,4,3,1,10,14,2,11,12,4,3,1,7,15,10,10,7,7,14,9,10,9,10,10,7,10,10,10,13,10,7,14,2,11,12,4,3,1,13,10,7,14,2,11,12,4,3,1,10,10,10,5,16,12,10,10,10,13,10,7,14,2,11,12,4,3,1,9,8,10,10,7,14,2,11,11,4,3,1,0,9,10,9,10,7,10,7,14,2,11,12,4,3,1,13,10,7,14,2,11,12,4,3,1,13,10,7,14,2,11,12,4,3,1,6,7,10,10,10,10,16,10,7,2,11,0,8,12,5,10,11,17,10,0,10,10,13,10,7,14,2,11,12,4,3,1,10,9,10,13,10,7,14,2,11,12,4,3,1,14,14,9,10,14,9,10,14,14,18,19,13,14,10,11,14,16,12,12,0,10,10,11,12,13,10,7,14,2,11,12,4,3,1,11,0,8,10,11,11,11,18,10,0,11,0,10,10,10,18,10,10,12,20,10,10,7,14,11,8,6,21,10,7,14,12,11,10,10,10,10,13,14,15,10,10,7,7,14,11,11,11,11,10,10,0,8,2,10,10,11,11,11,11,10,10,10,10,12,0,0,10,11,12,12,8,6,7,8,6,7,9,10,9,10,9,10,9,10,7,15,10,10,7,7,14,10,10,7,10,7,14,13,14,10,10,18,10,0,0,0,10,10,10,7,10,7,10,10,12,10,10,5,10,10,14,2,11,11,12,4,3,1,11,13,10,7,14,2,11,12,4,3,1,13,10,7,14,2,11,12,4,3,1,0,10,14,10,10,7,7,7,13,10,7,14,2,11,12,4,3,1,13,10,7,14,2,11,12,4,3,1,10,10,8,13,10,7,14,2,11,12,4,3,1,0,12,10,7,11,12,10,7,0,0,6,7,9,8,10,5,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,23,0,24,25,26,24,0,24,0,25,26,0,23,0,0,24,25,26,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,27,25,25,26,27,28,24,24,23,23,25,26,27,28,24,23,23,23,25,26,27,28,24,23,28,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,25,27,28,24,23,28,27,25,26,27,28,24,23,25,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,25,26,27,28,24,23,0,29,29,29,29,29,29,30,31,31,30,0,31,31,0,30,30,31,30,31,31,31,30,31,30,31,30,31,30,31,30,30,31,30,30,31,30,31,30,31,30,31,30,31,0,0,31,30,30,31,30,31,30,31,30,31,30,31,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,0,33,33,33,33,33,33,33,33,0,33,0,0,33,33,33,33,33,0,0,0,34,35,36,34,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,35,36,34,35,36,35,36,35,36,34,35,36,35,36,35,36,35,36,35,36,35,36,0,0,0,0,37,38,39,37,38,39,39,37,38,39,37,38,39,37,38,39,40,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,39,37,38,39,37,38,39,37,38,39,37,38,39,37,38,39,0,0,0,0,0,41,41,41,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,41,41,41,41,41,41,0,0,0,0,0,0,0,0,0,0,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,43,0,0,0,0,43,43,43,43,43,43,0,0,44,44,0,45,44,45,44,45,45,45,45,44,45,44,44,45,44,45,44,45,44,44,0,45,44,45,44,45,44,45,44,45,44,45,44,45,45,45,45,44,45,45,45,45,45,45,45,44,45,44,45,44,45,44,45,44,45,44,45,46,47,0,0,0,0,0,48,47,0,0,0,47,0,0,0,0,49,49,49,50,51,52,49,46,47,50,51,52,49,46,47,49,49,49,46,49,46,49,49,50,51,52,49,46,47,50,51,52,49,46,47,53,48,49,49,49,49,49,50,51,52,49,46,47,49,49,46,47,49,46,47,50,51,52,49,46,47,50,51,52,49,46,47,49,49,49,49,48,48,49,49,49,49,49,50,51,52,49,46,47,50,51,52,49,46,47,50,51,52,49,48,48,48,50,51,52,49,46,47,49,49,49,49,49,49,49,49,46,47,49,49,49,50,51,52,49,49,54,54,54,54,49,49,49,49,49,50,51,52,49,49,49,49,49,46,49,50,51,52,49,46,47,50,51,52,49,46,47,50,51,52,49,46,47,50,51,52,49,46,47,49,50,51,52,49,46,47,49,49,49,0,55,55,55,55,55,55,55,55,55,55,55,0,0,0,55,55,55,55,55,55],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["csvecviewi",6]]],[[["csvecviewi",6]]],null,[[],["option",4]],[[["ix2",6],["arrayviewmut",6],["csmatviewi",6]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],null,[[],["csmati",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["structureerror",4],["result",4]]],[[]],[[],["csmatbase",3]],[[],["trimatiter",3]],[[],["compressedstorage",4]],[[],["indptrbase",3]],[[],["permutation",3]],[[],["symmetrycheck",4]],[[],["permutationcheck",4]],[[],["fillinreduction",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["arrayview",6],["ix2",6]]],[[["arrayview",6],["ix2",6]]],[[["arrayview",6],["ix2",6]]],[[["arrayview",6],["ix2",6]]],[[]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[],["f64",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["csveci",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["arraybase",3]],[["array",6],["ix1",6]]],[[["arraybase",3]],[["ix2",6],["array",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["compressedstorage",4]]],[[["usize",15]]],[[["usize",15],["compressedstorage",4]]],[[["csmatbase",3]],["bool",15]],[[["trimatbase",3]],["bool",15]],[[["trimatiter",3]],["bool",15]],[[["compressedstorage",4]],["bool",15]],[[["indptrbase",3]],["bool",15]],[[],["bool",15]],[[["symmetrycheck",4]],["bool",15]],[[["permutationcheck",4]],["bool",15]],[[["fillinreduction",4]],["bool",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["vec",3],["tripletindex",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["vec",3]]],[[["vec",3],["vec",3]]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["csmati",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],null,[[]],[[],["indptrview",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compressedstorage",4]],[["csmati",6],["spindex",8]]],[[]],[[]],[[],[["csmati",6],["spindex",8]]],[[]],[[]],[[],[["csmati",6],["spindex",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vectoriterator",3]],[[],["permviewi",6]],[[],["vec",3]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["csmatbase",3]],["bool",15]],[[],["bool",15]],[[],["csiter",3]],[[]],[[]],[[]],[[],["csiter",3]],[[],["csiter",3]],[[["csmatviewi",6]],["csmati",6]],[[],["usize",15]],null,[[],["csmati",6]],[[]],[[],["usize",15]],[[["usize",15]],["csmatviewi",6]],[[["usize",15]],["csmatviewi",6]],[[]],[[]],[[]],[[]],[[["csmatbase",3]],["bool",15]],[[["trimatbase",3]],["bool",15]],[[["trimatiter",3]],["bool",15]],[[["indptrbase",3]],["bool",15]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["usize",15]]],[[["vec",3]]],[[],["result",4]],[[]],[[["shape",6]],["result",4]],[[["shape",6]],["result",4]],[[["shape",6],["compressedstorage",4]]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],[["nnzindex",3],["option",4]]],[[["usize",15]],[["nnzindex",3],["option",4]]],null,[[]],[[]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["range",3]],[[["usize",15]],[["range",3],["usize",15]]],[[["usize",15]],[["range",3],["usize",15]]],[[]],[[]],[[["usize",15]],[["option",4],["csvecviewi",6]]],[[["usize",15]],[["option",4],["csvecviewmuti",6]]],[[],["permownedi",6]],[[],["bool",15]],null,[[],["cow",4]],[[]],[[],["permviewi",6]],[[],["permviewi",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15],["tripletindex",3]]],[[],["shape",6]],[[]],[[]],[[]],[[]],[[["range",8]],["csmatviewi",6]],[[["range",8]],["csmatviewmuti",6]],[[],["csmatviewi",6]],[[],["csmatviewi",6]],null,null,null,[[],["compressedstorage",4]],[[],["csstructureviewi",6]],[[],["csmati",6]],[[],[["csmati",6],["spindex",8]]],[[],["csmati",6]],[[],[["csmati",6],["spindex",8]]],[[],[["ix2",6],["array",6]]],[[],["csmati",6]],[[],["permownedi",6]],[[],["csmati",6]],[[],["csmati",6]],[[]],[[],["csmati",6]],[[]],[[]],[[]],[[]],[[],["indptr",6]],[[]],[[]],[[]],[[]],[[],["cow",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["permviewi",6],["csmatviewi",6]],["csmati",6]],[[]],[[],["trimatiter",3]],[[]],[[],["csmatviewi",6]],[[],["trimatviewi",6]],[[],[["iter",3],["iter",3],["trimatiter",3]]],[[],[["iter",3],["iter",3],["trimatiter",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["vec",3]],[[],["csmatviewi",6]],[[],["trimatviewi",6]],[[],["indptrview",6]],[[],["permviewi",6]],[[],["csmatviewmuti",6]],[[],["trimatviewmuti",6]],null,[[],["csmati",6]],[[["usize",15]]],[[["usize",15]]],[[["shape",6]]],[[]],[[["shape",6]]],[[["usize",15]]],null,[[]],[[]],[[],["array2",3]],[[]],null,[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arraybase",3]],[["ix2",6],["array",6]]],[[["csmatviewi",6]],["csmati",6]],[[["ix2",6],["arrayviewmut",6],["arrayview",6],["csmatviewi",6]]],[[["csmatviewi",6]],["usize",15]],[[["csvecviewi",6]],[["result",4],["csveci",6],["structureerror",4]]],[[["arraybase",3]],[["ix2",6],["array",6]]],[[],["csmati",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["structureerror",4]],[[],["structureerrorkind",4]],[[],["shapemismatchinfo",3]],[[],["singularmatrixinfo",3]],[[],["linalgerror",4]],[[],["sprserror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["structureerror",4]],["bool",15]],[[["structureerrorkind",4]],["bool",15]],[[["shapemismatchinfo",3]],["bool",15]],[[["singularmatrixinfo",3]],["bool",15]],[[["linalgerror",4]],["bool",15]],[[["sprserror",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["linalgerror",4]]],[[["structureerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["structureerrorkind",4]],[[["structureerror",4]],["bool",15]],[[["shapemismatchinfo",3]],["bool",15]],[[["singularmatrixinfo",3]],["bool",15]],[[["linalgerror",4]],["bool",15]],[[["sprserror",4]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],[["usize",15],["option",4]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["symmetrymode",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[["symmetrymode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["ioerror",4],["trimati",6]]],[[],[["result",4],["ioerror",4],["trimati",6]]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["error",3],["result",4]]],[[["symmetrymode",4]],[["error",3],["result",4]]],[[]],null,null,[[["csmatviewi",6]],["ordering",3]],null,null,null,null,null,null,[[]],[[]],[[],["parents",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["usize",15]],[["usize",15],["option",4]]],[[],["usize",15]],[[]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[["usize",15]],["parentsowned",6]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[],["parentsview",6]],[[],["parentsviewmut",6]],null,[[]],[[]],null,[[["csmatviewi",6]],["ordering",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],null,null,[[["csmatviewi",6]],["ordering",3]],null,[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["forward",3]],[[],["reversed",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["ordering",3]],[[],["ordering",3]],[[],["ordering",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["pseudoperipheral",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["csmatviewi",6]],["usize",15]],[[["csmatviewi",6]],["usize",15]],[[["csmatviewi",6]],["usize",15]],[[["csmatviewi",6]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["csmatviewi",6]],[["result",4],["linalgerror",4]]],[[["dstack",3],["csvecviewi",6],["csmatviewi",6]],[["result",4],["linalgerror",4]]],[[["csmatviewi",6]],[["result",4],["linalgerror",4]]],[[["csmatviewi",6]],[["result",4],["linalgerror",4]]],[[["csmatviewi",6]],[["result",4],["linalgerror",4]]],null,null,null,null,null,[[]],[[]],[[],["numkind",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["numkind",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["numkind",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["ix2",6],["arrayviewmut",6],["arrayview",6],["csmatviewi",6]]],[[["ix2",6],["arrayviewmut",6],["arrayview",6],["csmatviewi",6]]],[[["csvecviewi",6],["csmatviewi",6]],["csveci",6]],[[["ix2",6],["arrayviewmut",6],["arrayview",6],["csmatviewi",6]]],[[["ix2",6],["arrayviewmut",6],["arrayview",6],["csmatviewi",6]]],[[["csvecviewi",6]]],[[["csmatviewi",6]]],[[["csmatviewi",6]]],[[],["vec",3]],[[],["vec",3]],null,null,null,null,[[]],[[]],[[],["threadingstrategy",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["threadingstrategy",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["csmatviewi",6]],["csmati",6]],[[["csmatviewi",6]],["csmati",6]],[[["threadingstrategy",4]],["bool",15]],[[["mulacc",8],["zero",8],["csmatviewmuti",6],["spindex",8],["csmatviewi",6]]],[[["threadingstrategy",4]]],[[["csstructureviewi",6],["vec",3],["spindex",8]]],[[],["threadingstrategy",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["arrayview2",6],["usize",15]],[["f64",15],["csmati",6]]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["dstack",3]],[[],["stackval",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["stackval",4]],["bool",15]],[[["stackval",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[["stackval",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["csvecbase",3]],["csveci",6]],[[["csvecbase",3]],["csveci",6]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["structureerror",4],["result",4]]],[[]],[[],["csvecbase",3]],[[],["nnzindex",3]],[[]],[[]],[[],[["array2",3],["csmatbase",3],["spindex",8]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["intosparseveciter",8]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["csvecbase",3]],["bool",15]],[[["nnzindex",3]],["bool",15]],[[["nnzeither",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["nnzindex",3]]],[[["nnzindex",3]]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["vectoriterator",3]],[[],["vectoriteratormut",3]],[[]],[[]],[[],["csveci",6]],[[]],[[]],[[["csvecbase",3]],["bool",15]],[[["nnzindex",3]],["bool",15]],[[["nnzeither",4]],["bool",15]],[[["usize",15]]],[[["usize",15]],["result",4]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["nnzeither",4]]],[[],["usize",15]],[[["usize",15]],[["nnzindex",3],["option",4]]],[[],["nnzorzip",3]],[[],["nnzorzip",3]],[[],[["filtermap",3],["nnzorzip",3]]],[[],[["filtermap",3],["nnzorzip",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["array2",3],["csmatbase",3],["spindex",8]]],[[]],[[]],[[]],[[]],[[]],[[],[["array",6],["ix1",6]]],[[],["csveci",6]],[[],["csveci",6]],[[]],[[]],[[],["hashset",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["csvecviewi",6]],[[],["csvecviewmuti",6]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["csmatviewi",6]],[["u8",15],["array2",6]]],[[["csmatviewi",6]],["nnzpatternformatter",3]],[[["csmatviewi",6]]],[[],["string",3]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"FillInReduction"],[4,"CompressedStorage"],[4,"PermutationCheck"],[4,"SymmetryCheck"],[8,"DenseVector"],[6,"TriMatI"],[3,"TriMatBase"],[6,"CsVecI"],[6,"CsMatI"],[3,"CsMatBase"],[3,"IndPtrBase"],[3,"Permutation"],[3,"CsIter"],[3,"TriMatIter"],[8,"SparseMat"],[6,"CsVecViewI"],[8,"DenseVectorMut"],[6,"CsMatViewI"],[6,"TriMatViewI"],[8,"MulAcc"],[6,"PermOwnedI"],[3,"Array2"],[4,"SprsError"],[4,"LinalgError"],[4,"StructureError"],[4,"StructureErrorKind"],[3,"ShapeMismatchInfo"],[3,"SingularMatrixInfo"],[8,"SpIndex"],[4,"IoError"],[4,"SymmetryMode"],[3,"Parents"],[3,"Ordering"],[8,"DirectedOrdering"],[3,"Forward"],[3,"Reversed"],[3,"Next"],[3,"MinimumDegree"],[3,"PseudoPeripheral"],[8,"Strategy"],[4,"NumKind"],[8,"PrimitiveKind"],[4,"ThreadingStrategy"],[4,"StackVal"],[3,"DStack"],[3,"NnzIndex"],[4,"NnzEither"],[8,"IntoSparseVecIter"],[3,"CsVecBase"],[3,"VectorIterator"],[3,"VectorIteratorMut"],[3,"NnzOrZip"],[8,"VecDim"],[8,"SparseIterTools"],[3,"NnzPatternFormatter"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":[8,8],"n":["CloneStableDeref","StableDeref"],"q":["stable_deref_trait",""],"d":["An unsafe marker trait for types where clones deref to …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[null,null],"p":[]},\
"static_assertions":{"doc":"Banner","t":[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"n":["assert_cfg","assert_eq_align","assert_eq_size","assert_eq_size_ptr","assert_eq_size_val","assert_fields","assert_impl_all","assert_impl_any","assert_impl_one","assert_not_impl_all","assert_not_impl_any","assert_obj_safe","assert_trait_sub_all","assert_trait_super_all","assert_type_eq_all","assert_type_ne_all","const_assert","const_assert_eq","const_assert_ne"],"q":["static_assertions","","","","","","","","","","","","","","","","","",""],"d":["Asserts that a given configuration is set.","Asserts that types are equal in alignment.","Asserts that types are equal in size.","Asserts that values pointed to are equal in size.","Asserts that values are equal in size.","Asserts that the type has the given fields.","Asserts that the type implements <em>all</em> of the given traits.","Asserts that the type implements <em>any</em> of the given traits.","Asserts that the type implements exactly one in a set of …","Asserts that the type does <strong>not</strong> implement <em>all</em> of the given …","Asserts that the type does <strong>not</strong> implement <em>any</em> of the given …","Asserts that the traits support dynamic dispatch (…","Asserts that the trait is a child of all of the other …","Asserts that the trait is a parent of all of the other …","Asserts that <em>all</em> types in a list are equal to each other.","Asserts that <em>all</em> types are <strong>not</strong> equal to each other.","Asserts that constant expressions evaluate to <code>true</code>.","Asserts that constants are equal in value.","Asserts that constants are <strong>not</strong> equal in value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"syn":{"doc":"github crates-io docs-rs","t":[3,13,13,13,13,3,13,13,13,13,13,4,3,6,13,13,3,4,13,3,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,13,4,3,3,3,13,13,3,13,13,13,13,13,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,13,4,3,3,13,13,13,4,4,3,13,13,13,3,13,3,13,3,13,13,13,13,13,13,13,3,13,13,13,13,3,13,4,13,13,3,3,3,3,3,3,3,13,13,3,13,13,4,13,13,4,4,13,3,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,3,13,13,13,4,3,3,3,3,13,13,3,13,13,13,13,13,13,13,13,6,13,4,13,13,13,13,13,13,4,13,13,13,13,14,13,3,4,13,13,13,13,13,3,4,13,13,13,13,13,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,4,13,13,13,13,13,13,3,3,13,13,13,3,3,3,4,3,4,13,13,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,14,12,12,12,12,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,12,12,12,14,14,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,0,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,14,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,14,11,11,11,11,14,5,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,0,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,18,10,3,3,3,16,8,3,6,8,8,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,3,3,3,3,4,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Bool","BoundLifetimes","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Eq","Eq","Error","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulEq","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemEq","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlEq","Shr","ShrEq","Slice","Str","StrStyle","Struct","Struct","Sub","SubEq","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variadic","Variant","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","const_params","const_params_mut","const_token","const_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","discriminant","display","display","display","display","display","display","display","display","display","display","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","get_ident","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_empty","is_ident","iter","iter_mut","leading_colon","left","len","len","lhs_ty","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lit","lt_token","lt_token","lt_token","lt_token","mac","make_where_clause","member","modifier","mutability","mutability","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","rhs_ty","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern \\\"C\\\"</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&&</code> operator (logical and)","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","Angle bracketed arguments of a path segment: the <code><K, V></code> …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -> bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: …","The <code>&</code> operator (bitwise and)","The <code>&=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","A box expression: <code>box f</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>\'a\'</code>.","A closure expression: <code>|a, b| a + b</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator<Item: Display></code>.","An associated type bound: <code>Iterator<Item: Display></code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>\\\"data\\\"</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>>=</code> operator (greater than or equal to)","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>></code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code><=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>\'a</code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A lifetime argument.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>\\\"new_name\\\"</code> in …","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code><</code> operator (less than)","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::<T>(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","Arguments of a function path segment: the <code>(A, B) -> C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##\\\"data\\\"##</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code><<</code> operator (shift left)","The <code><<=</code> operator","The <code>>></code> operator (shift right)","The <code>>>=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code>…","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A generic type parameter: <code>T: Into<String></code>.","A type predicate in a <code>where</code> clause: …","A particular type is returned.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into<String></code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code><X, Y></code> into a turbofish …","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content …","A stably addressed token buffer supporting efficient …eturns an Iterator<Item = &ConstParam> over the constant …","Returns an Iterator<Item = &mut ConstParam> over the …","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variantenerics required to complete the definition.","If this path consists of a single ident, returns the …","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","Name of the struct or enum.","","","","","","","","","<code>(A, B)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to …","Get an iterator over the borrowed [<code>Field</code>] items in this …","Get an iterator over the mutably borrowed [<code>Field</code>] items …","","","Returns the number of fields.","","","","","","Returns an Iterator<Item = &LifetimeDef> over the …","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator<Item = &mut LifetimeDef> over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","","","","","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the identifier that begins this structured meta …","","","","","","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","","","","","","","","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","A trait that can provide the <code>Span</code> of the complete …","Split a type’s generics into the pieces required for …okens representing Rust punctuation, keywords, and …ype of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator<Item = &TypeParam> over the type …","Returns an Iterator<Item = &mut TypeParam> over the type …","","","","","","","","","","","","","","Visibility of the field.","Visibility of the struct or enum.","","","In some positions, types may not contain the <code>+</code> character, …","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple …","Creates a cursor referencing the first token in the …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the …","","","","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","","","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at an <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or …","","Copies all remaining tokens visible from this cursor into …","If the cursor is pointing at a <code>TokenTree</code>, returns it …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","","","","","","","","","","","Render the error as an invocation of <code>compile_error!</code>.","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or…","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","","","","","","","","","","","","Inserts an element at position <code>index</code>.","","","","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Appends a syntax tree node onto the end of this …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&</code>","<code>&&</code>","<code>&=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=></code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>>=</code>","None-delimited group","<code>></code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code><-</code>","<code><=</code>","<code>let</code>","<code>loop</code>","<code><</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-></code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code><<</code>","<code><<=</code>","<code>>></code>","<code>>>=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codei":[0,1,1,1,2,0,3,4,3,3,3,0,0,0,3,4,0,0,3,0,5,1,1,1,1,1,1,3,6,0,3,7,7,3,6,6,3,3,6,3,8,5,0,0,5,3,9,10,0,0,0,0,11,12,0,1,1,13,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,6,3,1,0,0,0,3,4,1,0,3,0,4,0,3,4,10,15,6,1,3,0,8,16,14,5,0,17,0,18,3,0,0,0,0,0,0,0,3,1,0,3,4,0,3,19,0,0,18,0,0,3,1,1,17,20,21,1,12,0,4,19,2,12,1,15,3,7,4,2,0,0,17,3,4,0,0,0,0,0,4,10,0,3,9,3,4,1,1,3,10,0,3,0,1,1,1,1,4,6,0,3,13,1,1,0,16,0,0,4,3,3,3,4,0,0,3,8,14,11,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,13,20,20,21,3,0,0,3,6,4,0,0,0,0,0,0,3,3,22,23,24,25,26,27,28,29,30,31,32,33,25,28,34,35,36,37,38,39,40,41,42,43,44,45,46,47,34,48,49,48,49,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,95,40,41,95,96,108,115,120,55,104,0,52,35,106,114,0,0,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,33,25,28,34,35,36,37,38,39,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,33,25,28,34,35,36,37,38,39,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,24,122,26,32,40,41,42,95,96,120,91,91,42,113,58,0,0,43,91,92,2,40,42,46,31,24,6,98,99,100,101,48,49,102,122,34,45,115,106,107,111,113,23,114,116,104,24,21,90,122,122,54,40,42,97,119,28,35,37,39,0,117,31,103,105,24,21,90,48,49,122,122,122,22,92,50,30,51,24,52,15,17,17,17,17,53,54,18,18,18,31,20,20,20,55,56,32,10,10,10,10,57,58,59,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,90,91,8,8,8,8,40,40,41,42,92,16,16,16,93,19,94,14,14,14,14,95,96,97,6,6,6,6,6,6,6,6,98,99,100,101,48,48,49,49,102,9,46,7,43,13,13,13,13,103,104,105,1,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,118,27,27,2,5,26,119,120,121,29,122,122,122,122,122,122,122,25,43,118,107,91,92,26,29,24,21,90,122,24,31,32,40,42,43,27,119,120,108,59,35,90,22,121,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,20,20,2,118,20,20,118,33,20,106,97,41,96,23,91,92,93,95,22,91,54,36,91,92,26,29,110,91,34,93,113,23,117,44,55,53,24,41,6,98,99,100,101,48,49,102,122,33,39,22,121,91,53,56,59,25,37,93,22,111,116,121,0,0,0,24,17,53,54,18,31,55,56,10,3,36,38,21,90,91,8,40,41,42,92,16,93,19,94,14,6,98,98,99,100,101,48,49,102,46,43,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,11,118,27,5,26,119,121,122,0,122,52,52,46,46,52,0,52,118,32,52,0,0,32,98,24,122,17,52,53,54,59,38,93,46,112,24,6,98,99,100,101,48,49,102,122,29,52,94,57,59,0,38,112,97,33,118,103,106,24,6,98,99,100,101,48,49,102,122,50,30,51,24,24,52,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,21,90,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,6,98,98,99,99,100,100,101,101,48,48,49,49,102,102,46,43,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,122,122,122,90,102,0,91,113,103,52,6,98,99,100,101,48,49,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,33,25,28,34,35,36,37,38,39,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,24,48,49,122,50,30,51,24,52,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,46,43,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,122,0,52,46,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,32,28,42,44,119,29,50,30,51,24,52,15,17,53,54,18,31,20,55,56,32,10,57,58,59,3,60,61,62,63,64,33,65,66,67,25,28,68,69,34,70,71,72,35,73,36,74,75,76,77,37,38,78,79,80,81,82,83,84,85,86,39,87,88,89,21,90,91,8,40,41,42,92,16,93,19,94,14,95,96,97,6,98,99,100,101,48,49,102,9,46,7,43,13,103,104,105,1,12,4,106,22,107,108,109,110,47,111,112,113,23,114,115,116,117,44,45,11,118,27,2,5,26,119,120,121,29,122,91,91,109,105,56,122,22,98,99,100,101,102,102,22,104,32,43,91,94,4,115,11,0,0,123,123,124,123,124,124,124,124,124,124,123,124,124,124,123,124,124,124,123,123,124,124,124,124,124,123,124,123,124,123,124,0,125,125,125,0,0,0,126,0,0,0,0,0,0,0,127,128,127,129,130,131,128,127,129,130,131,127,129,131,129,131,131,127,129,0,127,128,127,129,131,127,127,131,131,127,128,127,129,130,131,131,128,127,129,130,131,131,131,127,127,131,131,132,127,126,130,126,126,127,128,127,127,127,127,131,127,131,129,131,127,131,128,127,129,130,131,128,127,129,130,131,128,127,129,130,131,0,133,134,0,0,0,0,0,0,0,0,134,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,134,135,135,136,138,139,140,134,135,136,138,139,140,134,135,135,135,135,135,135,135,136,137,138,139,140,141,134,135,135,135,135,135,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,135,134,134,135,135,135,135,135,135,136,137,138,139,140,141,135,134,136,137,138,139,140,141,136,137,138,139,140,141,135,135,135,135,135,135,135,134,135,135,135,136,137,138,139,140,141,135,134,135,136,138,139,140,134,135,134,135,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,134,135,136,137,138,139,140,141,134,134,134,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,196,198,201,202,203,205,207,208,210,211,215,218,220,223,226,227,230,233,238,239,241,143,196,198,201,202,203,205,207,208,210,211,215,218,220,223,226,227,230,233,238,239,241,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,242,243,244,245,143,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["turbofish",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["result",6]],[[],["resultnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ident",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lifetime",3]],["ordering",4]],[[["ident",3]],["ordering",4]],null,null,null,null,null,null,null,null,[[],["constparams",3]],[[],["constparamsmut",3]],null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ident",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["path",3]],["meta",4]],[[["metalist",3]],["meta",4]],[[]],[[["metanamevalue",3]],["meta",4]],[[]],[[]],[[]],[[["meta",4]],["nestedmeta",4]],[[["lit",4]],["nestedmeta",4]],[[]],[[["fieldsunnamed",3]],["fields",4]],[[["fieldsnamed",3]],["fields",4]],[[]],[[]],[[]],[[]],[[["visrestricted",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[]],[[["vispublic",3]],["visibility",4]],[[]],[[]],[[]],[[["exprunsafe",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[]],[[["exprcontinue",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["exprarray",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["index",3]],[[]],[[["typeparam",3]],["genericparam",4]],[[]],[[["constparam",3]],["genericparam",4]],[[["lifetimedef",3]],["genericparam",4]],[[["ident",3]]],[[]],[[]],[[]],[[]],[[["lifetime",3]],["typeparambound",4]],[[]],[[["traitbound",3]],["typeparambound",4]],[[]],[[]],[[]],[[["predicatetype",3]],["wherepredicate",4]],[[]],[[["predicateeq",3]],["wherepredicate",4]],[[["predicatelifetime",3]],["wherepredicate",4]],[[]],[[]],[[]],[[]],[[["litbyte",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[["litstr",3]],["lit",4]],[[["litint",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[]],[[]],[[]],[[]],[[]],[[["literal",3]]],[[["literal",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dataenum",3]],["data",4]],[[]],[[["datastruct",3]],["data",4]],[[["dataunion",3]],["data",4]],[[]],[[]],[[]],[[]],[[]],[[["typegroup",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typetuple",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[["typearray",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typepath",3]],["type",4]],[[]],[[["typemacro",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["underscore",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["extern",3]],["ident",3]],[[["super",3]],["ident",3]],[[["selfvalue",3]],["ident",3]],[[["crate",3]],["ident",3]],null,null,[[],[["option",4],["ident",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["iter",3],["field",3]]],[[],[["itermut",3],["field",3]]],null,null,[[],["usize",15]],null,null,null,null,null,[[],["lifetimes",3]],null,null,null,null,[[],["lifetimesmut",3]],null,null,null,null,null,null,null,[[],["whereclause",3]],null,null,null,null,null,null,null,null,[[["str",15],["span",3]]],[[["lifetime",3]]],[[["literal",3]]],[[["str",15],["span",3]]],[[["span",3]]],[[["u8",15],["span",3]]],[[["span",3],["char",15]]],[[["str",15],["span",3]]],[[["str",15],["span",3]]],[[["bool",15],["span",3]]],[[["span",3],["str",15]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["result",6],["parse",8]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[],[["result",6],["parse",8]]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],null,[[],[["result",6],["meta",4]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],null,[[["str",15]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parser",8]],["result",6]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[["ident",3]],[["option",4],["ordering",4]]],[[],["path",3]],null,null,null,null,null,null,null,null,[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["option",4],["span",3]]],[[],["span",3]],[[],[["option",4],["span",3]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["option",4],["span",3]]],[[],["span",3]],null,null,null,[[]],null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeparams",3]],[[],["typeparamsmut",3]],null,null,null,[[],["ident",3]],null,[[],["string",3]],[[],[["vec",3],["u8",15]]],[[],["u8",15]],[[],["char",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,[[],["cursor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["option",4]],[[],["span",3]],[[]],[[],["tokenstream",3]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["error",3]]],[[],["cursor",3]],[[]],null,[[]],[[],["error",3]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lexerror",3]]],[[]],[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[]],[[],["bool",15]],[[],["lookahead1",3]],[[["display",8],["span",3]]],[[["display",8],["totokens",8]]],[[["parsestream",6]],["result",6]],[[],[["result",6],["parse",8]]],[[["tokenstream",3]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],[[],[["punctuated",3],["result",6]]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["result",6]],[[],["tokenstream",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intopairs",3]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["pairs",3]],[[],["pairsmut",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["option",4],["pair",4]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullstr",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["strparsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"BinOp"],[4,"PathArguments"],[4,"Expr"],[4,"Type"],[4,"GenericArgument"],[4,"Lit"],[4,"MacroDelimiter"],[4,"GenericParam"],[4,"StrStyle"],[4,"Visibility"],[4,"ReturnType"],[4,"UnOp"],[4,"Data"],[4,"WherePredicate"],[4,"AttrStyle"],[4,"TypeParamBound"],[4,"Meta"],[4,"NestedMeta"],[4,"TraitBoundModifier"],[4,"Fields"],[4,"Member"],[3,"TypeBareFn"],[3,"TypeReference"],[3,"Lifetime"],[3,"ExprCall"],[3,"AngleBracketedGenericArguments"],[3,"PathSegment"],[3,"ExprCast"],[3,"QSelf"],[3,"TypeGenerics"],[3,"Variant"],[3,"Field"],[3,"ExprBinary"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"DeriveInput"],[3,"BareFnArg"],[3,"Variadic"],[3,"Macro"],[3,"TypeNever"],[3,"LitInt"],[3,"LitFloat"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprLet"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"Generics"],[3,"BoundLifetimes"],[3,"TraitBound"],[3,"WhereClause"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"TypeArray"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"Path"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Ident"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[8,"Parser"],[3,"ParseBuffer"],[3,"Lookahead1"],[3,"StepCursor"],[3,"Nothing"],[3,"Error"],[8,"Parse"],[8,"Speculative"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"]]},\
"threads_pool":{"doc":"","t":[3,8,13,13,13,4,3,8,13,8,13,8,8,3,3,8,13,4,13,11,10,11,10,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,11,11,11,11,11,11,10,11,10,11,11,11,11,10,11,14,10,11,0,10,11,10,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,10,11,11,11,10,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,5,5,5,5,5,5,5,5,5,5],"n":["Config","ConfigStatus","DirectRun","Disconnected","Drop","ExecutionError","FutPool","Hibernation","LossyRetry","PoolManager","PoolPoisoned","PoolState","StatusBehaviorSetter","StatusBehaviors","ThreadPool","ThreadPoolStates","Timeout","TimeoutPolicy","Uninitialized","activate","auto_adjust","auto_adjust","auto_expire","auto_expire","auto_scale_enabled","auto_scale_enabled","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_with_config","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","close","close","default","default","drop","exec","execute","extend","extend","fmt","force_close","force_close","from","from","from","from","from","from","get_exec_timeout","get_exec_timeout","get_first_worker_id","get_first_worker_id","get_last_worker_id","get_last_worker_id","get_next_worker_id","get_next_worker_id","get_priority_queue_length","get_priority_queue_length","get_queue_length","get_queue_length","get_queue_size_threshold","get_queue_size_threshold","get_size","get_size","hibernate","hibernate","index_mode","into","into","into","into","into","into","is_hibernating","is_hibernating","kill_worker","kill_worker","new","new","new_with_config","non_blocking","non_blocking","pin_mut","pool_name","pool_name","prelude","refresh_period","refresh_period","resize","resize","set_after_drop","set_after_drop","set_after_drop","set_after_start","set_after_start","set_after_start","set_before_drop","set_before_drop","set_before_drop","set_before_start","set_before_start","set_before_start","set_exec_timeout","set_exec_timeout","set_exec_timeout","set_none_blocking","set_none_blocking","set_pool_name","set_pool_name","set_queue_size_threshold","set_queue_size_threshold","set_refresh_period","set_refresh_period","set_thread_size","set_thread_size","set_timeout_policy","set_timeout_policy","set_worker_behavior","set_worker_behavior","shared_mode","shrink","shrink","spawn","sync_block","thread_size","thread_size","timeout_policy","timeout_policy","to_owned","to_owned","to_owned","toggle_auto_scale","toggle_auto_scale","toggle_auto_scale","toggle_blocking","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unhibernate","unhibernate","worker_behavior","worker_behavior","close","initialize","resize_pool","run_with","block_on","close","init_with_config","initialize","resize","run"],"q":["threads_poolthreads_pool::index_mode","","","","threads_pool::prelude","threads_pool::shared_mode","","","",""],"d":["","","","The pool is shutting down, or the internal pipeline is …","","Enumeration to indicate possible reasons a job execution …","","","","","Pool’s internal states have been corrupted","","","","The standalone thread pool, which gives users more …","","The job can’t be executed because the queue is full …","","The pool hasn’t been initialized (i.e. lazy created), …","If the pool is lazy created, user is responsible for …","","Automatically adjust the pool size according to criteria: …","","Let extended workers to expire when idling for too long.","","Check if the auto-scale feature is turned on or not","","","","","","","","","","","","","","Create the <code>ThreadPool</code> with default pool configuration …","Create the <code>ThreadPool</code> with provided pool configuration …","","Clear the pool. Note this will not kill all workers …","","","","","","","","Signal the threads in the pool that we’re closing, but …","","","","<code>exec</code> will dispatch a closure to a free thread to be …","Similar to <code>exec</code>, yet this is the simplified version …","","Manually extend the size of the pool. If another …","","","Signal the threads that they must quit now, and all …","","","","","","","","Check the currently set timeout period. If the result is …","","","","","","","","","","","","","","","","Put the pool into hibernation mode. In this mode, all …","","","","","","","","","Check if the pool is in hibernation mode.","","Remove a thread worker from the pool with the given …","Create a <code>ThreadPool</code> with default configurations","","Create a <code>ThreadPool</code> with supplied configurations","","Check if the config has turned on the <code>non_blocking</code> mode","","","Check the pool name from the config, if it’s set","","","Check the auto balancing period for the <code>index_mode</code>","","Resize the pool to the desired size. This will either …","","","","","","","","","","","","","","Set the job timeout period.","Set the time out period for a job to be queued. If <code>timeout</code>…","","Toggle on/off of the pool’s non-blocking mode. If the …","","","","","","","","","","","","","","","Manually shrink the size of the pool and release system …","","","","Check the desired stack size for each thread in the pool","","Check the timeout policy for the job","","","","","Toggle if we can add temporary workers when the <code>ThreadPool</code>…","Toggle if we shall scale the pool automatically when the …","Toggle if we should block the execution APIs when all …","","","","","","","","","","","","","","","","","","","","This will unhibernate the pool if it’s currently in the …","","Obtain a copy of the status behavior object","","","","","","","","","",""],"i":[0,0,1,2,1,0,0,0,1,0,2,0,0,0,0,0,2,0,2,3,4,3,4,3,5,3,0,6,3,1,7,8,2,6,3,1,7,8,2,3,3,4,3,1,7,8,1,7,8,4,3,7,8,3,3,3,4,3,2,4,3,6,3,1,7,8,2,5,3,9,3,9,3,9,3,9,3,9,3,9,3,9,3,10,3,0,6,3,1,7,8,2,10,3,4,3,3,7,3,11,7,0,11,7,0,11,7,4,3,12,7,8,12,7,8,12,7,8,12,7,8,5,3,3,11,7,11,7,9,3,11,7,11,7,11,7,11,7,0,4,3,6,3,11,7,11,7,1,7,8,5,3,3,3,6,3,1,7,8,2,6,3,1,7,8,2,6,3,1,7,8,2,10,3,11,7,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["option",4],["duration",3]]],[[["option",4],["duration",3]]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["executionerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["threadpool",3]],[[["config",3],["usize",15]],["threadpool",3]],[[]],[[]],[[],["timeoutpolicy",4]],[[],["config",3]],[[],["statusbehaviors",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["send",8],["fnonce",8],["bool",15]],[["result",4],["executionerror",4]]],[[["send",8],["fnonce",8]],[["result",4],["executionerror",4]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["duration",3]]],[[],[["option",4],["duration",3]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["threadpool",3]],[[]],[[["config",3],["usize",15]],["threadpool",3]],[[],["bool",15]],[[],["bool",15]],null,[[],[["string",3],["option",4]]],[[],[["string",3],["option",4]]],null,[[],[["option",4],["duration",3]]],[[],[["option",4],["duration",3]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4],["duration",3]]],[[["option",4],["duration",3]]],[[["option",4],["duration",3]]],[[["bool",15]]],[[["bool",15]]],[[["string",3]]],[[["string",3]]],[[["usize",15]]],[[["usize",15]]],[[["option",4],["duration",3]]],[[["option",4],["duration",3]]],[[["usize",15]]],[[["usize",15]]],[[["timeoutpolicy",4]]],[[["timeoutpolicy",4]]],[[["statusbehaviors",3]]],[[["statusbehaviors",3]]],null,[[["usize",15]]],[[["usize",15]]],[[],["receiver",3]],[[],[["executionerror",4],["result",4]]],[[],["usize",15]],[[],["usize",15]],[[],["timeoutpolicy",4]],[[],["timeoutpolicy",4]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["statusbehaviors",3]],[[],["statusbehaviors",3]],[[]],[[["string",3],["usize",15],["hashmap",3]]],[[["string",3],["usize",15]]],[[["send",8],["string",3],["fnonce",8]]],[[],[["result",4],["executionerror",4]]],[[]],[[["config",3],["usize",15]]],[[["usize",15]]],[[["usize",15]],["joinhandle",3]],[[["send",8],["fnonce",8]]]],"p":[[4,"TimeoutPolicy"],[4,"ExecutionError"],[3,"ThreadPool"],[8,"PoolManager"],[8,"ThreadPoolStates"],[3,"FutPool"],[3,"Config"],[3,"StatusBehaviors"],[8,"PoolState"],[8,"Hibernation"],[8,"ConfigStatus"],[8,"StatusBehaviorSetter"]]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":[3,6,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,14,14,0,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,14,0,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,8,18,18,18,18,18,18,18,18,18,18,8,8,8,8,8,18,18,18,18,18,18,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,8,6,16,16,8,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equal","False","Greater","Less","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","array","assert_type","assert_type_eq","bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","cmp","consts","default","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","int","into","into","into","marker_traits","op","operator_aliases","partial_cmp","partial_cmp","partial_cmp","powi","powi","powi","tarr","to_ordering","to_ordering","to_ordering","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_operators","uint","ATerm","TArr","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","mul","mul","ne","neg","neg","partial_cmp","partial_cmp","partial_div","partial_div","rem","rem","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","compare","compare","compare","compare","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","max","max","max","max","min","min","min","min","new","new","new","new","not","not","partial_cmp","partial_cmp","to_bool","to_bool","to_u8","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","NInt","PInt","Z0","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","compare","compare","compare","compare","compare","compare","compare","compare","compare","default","default","default","div","div","div","div","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","ne","ne","neg","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_div","partial_div","partial_div","powi","powi","powi","powi","powi","powi","powi","powi","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i16","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i8","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_isize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BOOL","Bit","I16","I16","I32","I32","I64","I64","I8","I8","ISIZE","ISIZE","Integer","NonZero","Ord","PowerOfTwo","TypeArray","U16","U32","U64","U8","U8","USIZE","Unsigned","Zero","new","to_bool","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_ordering","to_u16","to_u32","to_u64","to_u8","to_u8","to_usize","AbsVal","Add1","And","Compare","Cube","Diff","Double","Eq","Exp","Gcf","Gr","GrEq","Le","LeEq","Length","Log2","Maximum","Minimum","Mod","Negate","NotEq","Or","PartialQuot","Prod","Quot","Shleft","Shright","Sqrt","Square","Sub1","Sum","Xor","Abs","Cmp","Gcd","IsEqual","IsGreater","IsGreaterOrEqual","IsLess","IsLessOrEqual","IsNotEqual","Len","Logarithm2","Max","Min","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","PartialDiv","Pow","Same","SquareRoot","ToInt","is_equal","is_greater","is_greater_or_equal","is_less","is_less_or_equal","is_not_equal","len","max","min","partial_div","powi","to_int","GetBit","GetBitOut","Output","Output","SetBit","SetBitOut","UInt","UTerm","add","add","add","add","add","add","add","add","add","add","add","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","compare","compare","compare","compare","compare","compare","compare","default","default","div","div","eq","eq","fmt","fmt","from","from","get_bit","get_bit","get_bit","hash","hash","into","into","len","len","max","max","min","min","mul","mul","mul","mul","mul","mul","mul","mul","ne","new","new","partial_cmp","partial_cmp","partial_div","partial_div","powi","powi","rem","rem","set_bit","set_bit","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["typenumtypenum::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::bit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::conststypenum::int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::marker_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::operator_aliases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::type_operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A potential output from <code>Cmp</code>, this is the type equivalent …","","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …type-level array of type-level numbers.","Asserts that a type is <code>True</code>, aka <code>B1</code>.","Asserts that two types are the same.","Type-level bits.","","","","","","","","","","","","","A convenience macro for comparing type numbers. Use <code>op!</code> …","Type aliases for many constants.","","","","","","","","","","","","","","","","Type-level signed integers.","","","","All of the <strong>marker traits</strong> used in typenum.","Convenient type operations.","Aliases for the type operators used in this crate. Their …","","","","","","","Create a new type-level arrray. Only usable on Rust …","","","","","","","","","","","","","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","Type-level unsigned integers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type-level signed integers with negative sign.","Type-level signed integers with positive sign.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time bits.","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","The <strong>marker trait</strong> for type-level numbers which are a power …","The <strong>marker trait</strong> for type-level arrays of type-level …","","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","A <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …","Instantiates a singleton representing this bit.","","","","","","","","","","","","","","","","","","","Alias for the associated type of <code>Abs</code>: …","Alias to make it easy to add 1: …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias to make it easy to cube. …","Alias for the associated type of <code>Sub</code>: …","Alias to make it easy to multiply by 2. …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>SquareRoot</code>: …","Alias to make it easy to square. …","Alias to make it easy to subtract 1: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>BitXor</code>: …","A <strong>type operator</strong> that returns the absolute value.","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","A <strong>type operator</strong> that computes the greatest common divisor …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self > Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self >= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self < Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self <= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","A <strong>type operator</strong> for taking the integer binary logarithm …","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","Should always be <code>Self</code>","The absolute value.","The result of the exponentiation.","The result of the comparison. It should only ever be one …","The length as a type-level unsigned integer.","The type of the result of the division","The type of the minimum of <code>Self</code> and <code>Rhs</code>","The type of the maximum of <code>Self</code> and <code>Rhs</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The result of the integer square root.","The result of the integer binary logarithm.","The greatest common divisor.","Division as a partial function. This <strong>type operator</strong> …","A <strong>type operator</strong> that provides exponentiation by repeated …","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>…","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>…","A <strong>type operator</strong> for taking a concrete integer value from …","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","This function isn’t used in this crate, but may be …","Method returning the maximum","Method returning the minimum","Method for performing the division","This function isn’t used in this crate, but may be …","Method returning the concrete value for the type.","","","","","A <strong>type operator</strong> that, when implemented for unsigned …","Alias for the result of calling <code>SetBit</code>: …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","The terminating type for <code>UInt</code>; it always comes after the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this unsigned …","Instantiates a singleton representing this unsigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,0,0,0,1,2,3,4,5,5,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,8,9,9,8,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,9,8,9,8,8,9,9,8,8,9,9,8,8,9,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,11,11,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,10,10,11,11,11,12,12,12,10,11,12,10,10,11,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,10,10,11,11,11,12,12,12,10,10,10,11,11,11,12,12,12,10,10,10,10,10,11,11,11,11,11,12,12,12,10,11,10,11,12,10,11,12,10,11,12,10,11,12,10,10,11,11,11,12,12,12,10,10,11,11,12,10,10,10,11,11,11,12,12,12,10,11,12,10,11,12,10,11,12,10,11,12,10,10,10,10,11,11,11,11,12,12,12,12,10,11,12,10,11,12,10,11,12,10,11,12,13,0,14,15,14,15,14,15,14,15,14,15,0,0,0,0,0,14,14,14,13,14,14,0,0,13,13,14,15,14,15,14,15,14,15,14,15,16,14,14,14,13,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,0,0,0,0,0,26,27,30,25,28,29,21,24,23,22,19,34,0,0,35,36,0,0,0,0,37,37,37,37,37,37,37,37,38,38,38,37,38,37,37,37,37,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,37,37,38,38,37,38,37,38,37,38,37,38,37,38,37,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,37,37,38,38,38,37,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,37,38,38,38,37,37,37,37,38,38,38,37,37,37,37,37,38,38,37,38,37,38,37,38,37,38,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["greater",3]],[[],["less",3]],[[],["equal",3]],[[["greater",3]],["ordering",4]],[[["less",3]],["ordering",4]],[[["equal",3]],["ordering",4]],null,null,[[],["greater",3]],[[],["less",3]],[[],["equal",3]],[[["greater",3]],["bool",15]],[[["less",3]],["bool",15]],[[["equal",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[["greater",3]],[["ordering",4],["option",4]]],[[["less",3]],[["ordering",4],["option",4]]],[[["equal",3]],[["ordering",4],["option",4]]],[[["nint",3]]],[[["nint",3],["uint",3]]],[[["uint",3],["nint",3]]],null,[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["aterm",3]]],[[["tarr",3]]],[[]],[[]],[[]],[[]],[[],["aterm",3]],[[],["tarr",3]],[[["aterm",3]],["ordering",4]],[[["tarr",3]],["ordering",4]],[[]],[[]],[[["aterm",3]],["bool",15]],[[["tarr",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tarr",3]],["bool",15]],[[]],[[]],[[["aterm",3]],[["ordering",4],["option",4]]],[[["tarr",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[]],[[]],[[]],[[],["b0",3]],[[],["b1",3]],[[["b0",3]],["ordering",4]],[[["b1",3]],["ordering",4]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[],["b0",3]],[[],["b1",3]],[[["b0",3]],["bool",15]],[[["b1",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["b1",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[["b0",3]],["b1",3]],[[["b0",3]],["b0",3]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[]],[[],["b0",3]],[[],["b1",3]],[[]],[[]],[[]],[[["b0",3]],[["ordering",4],["option",4]]],[[["b1",3]],[["ordering",4],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[["pint",3]],["ordering",4]],[[["nint",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[]],[[["pint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["tarr",3]]],[[["aterm",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["tarr",3]]],[[["aterm",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[]],[[["tarr",3]]],[[["aterm",3]]],[[["pint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[]],[[]],[[]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[["pint",3]],[["ordering",4],["option",4]]],[[["nint",3]],[["ordering",4],["option",4]]],[[["z0",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[["pint",3]]],[[["z0",3]]],[[["pint",3],["uint",3]]],[[["z0",3]]],[[["pint",3],["uint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[],["i16",15]],[[],["i16",15]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i8",15]],[[],["i8",15]],[[],["i64",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i16",15]],[[],["i8",15]],[[],["i64",15]],[[],["i32",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["bool",15]],[[],["i16",15]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i8",15]],[[],["isize",15]],[[],["isize",15]],[[],["ordering",4]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u8",15]],[[],["u8",15]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["b1",3],["uint",3]]],[[["b1",3]]],[[["uterm",3]]],[[["b1",3]]],[[["b0",3]]],[[["b0",3],["uint",3]]],[[["b1",3],["uint",3]]],[[["b0",3],["uint",3]]],[[]],[[["b1",3]]],[[["b0",3]]],[[]],[[]],[[["b0",3],["uint",3]]],[[["b0",3],["uint",3]]],[[["b1",3],["uint",3]]],[[["b1",3],["uint",3]]],[[["uterm",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uint",3]],[[],["uterm",3]],[[["uint",3]],["ordering",4]],[[["uterm",3]],["ordering",4]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uterm",3]]],[[["uint",3]]],[[["uterm",3]]],[[["uint",3]]],[[],["uint",3]],[[],["uterm",3]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]],["bool",15]],[[["uterm",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["uint",3]]],[[["u0",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[["uterm",3]]],[[["uint",3]]],[[["uint",3]]],[[["b0",3]]],[[["b1",3]]],[[]],[[["uint",3]],["bool",15]],[[],["uint",3]],[[],["uterm",3]],[[["uint",3]],[["ordering",4],["option",4]]],[[["uterm",3]],[["ordering",4],["option",4]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["b1",3]]],[[["uterm",3]]],[[["b0",3]]],[[["uint",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[["uterm",3]]],[[["b0",3]]],[[["b1",3]]],[[["uint",3]]],[[["b0",3]]],[[["b1",3]]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[["uterm",3]]],[[],["i16",15]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i8",15]],[[],["i64",15]],[[],["u32",15]],[[],["u64",15]],[[],["i8",15]],[[],["usize",15]],[[],["u16",15]],[[],["i32",15]],[[],["u8",15]],[[],["i16",15]],[[],["u8",15]],[[],["i64",15]],[[],["i32",15]],[[],["i16",15]],[[],["i8",15]],[[],["u64",15]],[[],["usize",15]],[[],["u32",15]],[[],["u16",15]],[[],["isize",15]],[[],["isize",15]],[[],["u16",15]],[[],["u16",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u8",15]],[[],["u8",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Greater"],[3,"Less"],[3,"Equal"],[6,"P1"],[6,"N1"],[3,"ATerm"],[3,"TArr"],[3,"B0"],[3,"B1"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Ord"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[8,"ToInt"],[8,"GetBit"],[8,"SetBit"],[3,"UInt"],[3,"UTerm"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};