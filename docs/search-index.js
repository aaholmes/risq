var searchIndex = JSON.parse('{\
"risq":{"doc":"Rust Implementation of Semistochastic Quantum chemistry (â€¦","tn":["excite","ham","main","pt","rng","semistoch","stoch","utils","var","wf","Double","Excite","Orbs","Single","StoredExcite","abs_h","abs_h","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","init","init","init","init","init","inlined_clone","into","into","into","is_alpha","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iterator","ne","sum_remaining_abs_h","sum_remaining_h_squared","target","target","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","ExciteGenerator","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","init","init_excite_generator","into","is_in_subset","is_in_subset","max_opp_doub","max_same_doub","max_sing","opp_doub_sorted_list","same_doub_sorted_list","sample_excite","sample_excites_from_all_pairs","sing_sorted_list","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","valence","vzip","Ham","borrow","borrow_mut","core_orbs","default","deref","deref_mut","direct","direct_plus_exchange","drop","from","from_subset","from_subset","get_int","ham_diag","ham_doub","ham_off_diag","ham_off_diag_no_excite","ham_sing","init","into","ints","is_in_subset","is_in_subset","one_body","read_ints","screen_single_nonzero","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","valence_orbs","vzip","Ints","borrow","borrow_mut","default","deref","deref_mut","drop","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","nuc","one_body","read_ints","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","two_body","type_id","vzip","PtSamples","add_sample_compute_diag","add_sample_diag_already_stored","borrow","borrow_mut","clear","default","deref","deref_mut","drop","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","n","perturbative","print","pt_estimator","samples","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","Rand","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","init","init_rand","into","is_in_subset","is_in_subset","rng","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","fast_stoch_enpt2","faster_semistoch_enpt2","importance_sampled_semistoch_enpt2","old_semistoch_enpt2","AbsHc","DetOrbSample","HcSquared","ImpSampleDist","ScreenedSampler","alias","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","det","det_orb_sampler_abs_hc","det_orb_sampler_hc_squared","drop","drop","drop","elements","eps","eq","fmt","fmt","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","generate_screened_sampler","hash","init","init","init","init","inlined_clone","into","into","into","is_alpha","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","matmul_sample_remaining","sum_abs_h","sum_abs_hc","sum_abs_hc_all_dets_orbs","sum_h_squared","sum_hc_squared","sum_hc_squared_all_dets_orbs","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","vzip","vzip","vzip","Alias","alias","alias_prob","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","new","roll_die_and_flip_coin","sample","sample_prob","sample_with_prob","select_element","select_element_and_prob","test","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","uniform","vzip","sample_cdf","test_cdf","bits","display","ints","iter","read_input","BitPairs","BitPairsIntoIterator","Bits","BitsIntoIterator","bit_pairs","bits","bits_left","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btest","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","det","det","det_bits","drop","drop","drop","drop","first_bit","first_bits_left","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","ibclr","ibset","init","init","init","init","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","next","next","parity","second_bits_left","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","DetByCoeff","borrow","borrow_mut","cmp","deref","deref_mut","det","drop","eq","fmt_det","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","partial_cmp","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","combine_2","combine_2_usize","combine_4","permute","permute_2","read_lines","Global","borrow","borrow_mut","deref","deref_mut","deserialize","drop","eps_pt_dtm","eps_var","fmt","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","n_batches","n_cross_term_samples","n_samples_per_batch","n_states","ndn","norb","norb_core","nup","opp_algo","read_input","same_algo","target_uncertainty","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","davidson","eigenvalues","ham_gen","off_diag","sparse","utils","variational","sparse_optimize","algorithms","main","matrix_operations","modified_gram_schmidt","utils","DPR","DavidsonCorrection","GJD","HPR","Highest","Lowest","SpectrumTarget","Target","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","davidson","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","from_subset","from_subset","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","lanczos","ne","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","Config","CorrectionMethod","Davidson","DavidsonError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compute_correction","compute_dpr_correction","compute_gjd_correction","compute_hpr_correction","compute_residues","create_results","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eigenvalues","eigenvectors","energy_tolerance","eq","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","generate_subspace","init","init","init","init","init_dim","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","max_iters","max_search_space","method","method","new","new","new","reset_dim","sort_diagonal","spectrum_target","target","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","tolerance","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_dim","update_subspace","vzip","vzip","vzip","vzip","HermitianLanczos","LanczosError","borrow","borrow","borrow_mut","borrow_mut","construct_tridiagonal","deref","deref","deref_mut","deref_mut","drop","drop","eigenvalues","eigenvectors","eq","fmt","fmt","from","from","from_subset","from_subset","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MatrixOperations","diagonal","matrix_matrix_prod","matrix_vector_prod","ncols","nrows","set_diagonal","MGS","basis","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","orthonormalize","project","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","generate_diagonal_dominant","generate_random_sparse_symmetric","generate_random_symmetric","sort_eigenpairs","sort_vector","Unique","all_opposite_spin_excites","all_same_spin_excites","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","from_subset","gen_doubles","gen_sparse_ham_fast","init","into","is_in_subset","is_in_subset","n_dets","n_dets_remaining","opposite_spin_excites","same_spin_excites","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","up","vzip","OffDiagElemsNoHash","add_el","add_el_and_spin_flipped","borrow","borrow_mut","default","deref","deref_mut","drop","expand_rows","from","from_subset","from_subset","init","into","is_in_subset","is_in_subset","n","new","nnz","nonzero","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip","SparseMat","SparseMatDoubles","SparseMatUpperTri","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","diag","diag","diag","diagonal","diagonal","diagonal","doubles","drop","drop","drop","from","from","from","from_dense","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","ham","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","matrix_matrix_prod","matrix_matrix_prod","matrix_matrix_prod","matrix_vector_prod","matrix_vector_prod","matrix_vector_prod","n","n","n","ncols","ncols","ncols","nnz","nrows","nrows","nrows","off_diag","off_diag","set_diagonal","set_diagonal","set_diagonal","singles","sort_remove_duplicates","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wf","Intersection","IntersectionIntoIterator","Remove1","Remove1IntoIterator","Remove2","Remove2IntoIterator","bits_left","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","config","config","config","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","first_bit","first_bits_left","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","ind1","ind2","init","init","init","init","init","init","intersection","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","linear","n1","n2","new","new","new","next","next","next","remove_1e","remove_2e","second_bits_left","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","v1","v1","v2","v2","vzip","vzip","vzip","vzip","vzip","vzip","Wf","add_det_with_coeff","approx_matmul_external","approx_matmul_external_dtm_only","approx_matmul_external_dtm_singles","approx_matmul_external_no_singles","approx_matmul_external_semistoch_singles","approx_matmul_off_diag_variational_no_singles","approx_matmul_variational","borrow","borrow_mut","converged","default","deref","deref_mut","det","dets","drop","energy","eps","eps","eps_iter","expand_sparse_ham_rows","find_new_dets","from","from_subset","from_subset","inds","init","init_var_wf","into","is_in_subset","is_in_subset","iterate_excites","n","n_states","n_stored_h","n_stored_h","new_sparse_ham","print","print_largest","push","sparse_ham","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","update_n_stored_h","vzip","Config","Det","approx_matmul_external_dtm_only_compute_diags","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coeff","config","deref","deref","deref_mut","deref_mut","diag","dn","drop","drop","eq","eq","excite_det","fmt","fmt","fmt","fmt","from","from","from_subset","from_subset","from_subset","from_subset","hash","hash","init","init","inlined_clone","inlined_clone","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_valid","is_valid_stored","ne","new_diag","new_diag_opp","new_diag_same","new_diag_sing","safe_excite_det","to_owned","to_owned","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","up","vzip","vzip","Eps","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","from","from_subset","from_subset","init","init_eps","into","into_iter","is_in_subset","is_in_subset","next","next","target","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":["risq","","","","","","","","","","risq::excite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::excite::Orbs","","risq::excite::init","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::ham","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::ham::read_ints","","","","","","","","","","","","","","","","","","","","","","","","","","risq::pt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::rng","","","","","","","","","","","","","","","","","","","","","","","risq::semistoch","","","","risq::stoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::stoch::alias","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::stoch::utils","","risq::utils","","","","","risq::utils::bits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::utils::display","","","","","","","","","","","","","","","","","","","","","","","","","","risq::utils::ints","","","","","","risq::utils::read_input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var","","","","","","","risq::var::davidson","risq::var::eigenvalues","","","","","risq::var::eigenvalues::algorithms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::algorithms::DavidsonCorrection","risq::var::eigenvalues::algorithms::SpectrumTarget","risq::var::eigenvalues::algorithms::davidson","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::algorithms::lanczos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::matrix_operations","","","","","","","risq::var::eigenvalues::modified_gram_schmidt","","","","","","","","","","","","","","","","","","","","","","","","risq::var::eigenvalues::utils","","","","","risq::var::ham_gen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::off_diag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::sparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::var::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::wf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::wf::det","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","risq::wf::eps","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Data structure that enables generating the most important â€¦","Functions to compute Hamiltonian matrix elements","","Epstein-Nesbet perturbation theory","Contains the random number generator and its seed","Semistochastic methods - for now, just includes â€¦","General stochastic functions","Misc useful utiliities","Variational stage of Heat-bath Configuration Interaction","Variational wavefunction data structure Includes both the â€¦","","Candidate excitation from one determinant to another.  â€¦","Generalized type that can either be a single spatial â€¦","","Excitation information to be stored in <code>ExciteGenerator</code>.  â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize sorted excitation arrays","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Heat-bath excitation generator Contains sorted lists of â€¦","","","","","","","","","","Initialize by sorting double excitation element for all â€¦","","","","","","","","","","","","","","","","","","","","","Hamiltonian, containing integrals and matrix element â€¦","","","","","","","Get the direct energy corresponding to pq -&gt; rs","Get the direct plus exchange energy corresponding to pq -&gt; â€¦","","","","","Get the integral corresponding to pqrs","Get the diagonal element corresponding to this determinant â€¦","Get the double excitation matrix element corresponding to â€¦","","","Get the single excitation matrix element corresponding to â€¦","","","","","","Get the one-body energy h_{pq}","Read integrals from an FCIDUMP file into the Ham data â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","Read integrals, put them into self.ints Ints are stored â€¦","","","","","","","","","","Sampled contributions to the ENPT2 correction Samples â€¦","","","","","","","","","","","","","","","","","","Perform the perturbative stage (Epstein-Nesbet â€¦","","","","","","","","","","","","Contains the seeded random number generator.  Must be used â€¦","","","","","","","","","","Initialize the random number generator + seed","","","","","","","","","","","","","","","Importance sampled semistochastic ENPT2","Old algorithm (2017) for semistochastic ENPT2","","","","Importance sampling distribution: proportional to either â€¦","For importance sampling the component of the matmul that â€¦","Alias sampling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a screened sampler object for sampling (det, â€¦","","","","","","","","","","","","","","","","","Importance-sample the remaining component of a screened â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Misc sampling utilities","","","","Alias sampling data structure","","","","","","","","","","","","","","","","","","Generate new Alias struct given a vector of relative â€¦","","Sample an element from the Alias struct in O(1) time","","Sample an element and also return its sample probability","","","","","","","","","","","","","","Sample a CDF (in decreasing order) by sampling a uniform â€¦","","Useful bitwise functions Bits(n) iterates over set bits in â€¦","Display definitions for custom types","Useful functions for working with integrals Reading, â€¦","","Read input file into Global variable data structure","Backend for bit_pairs()","","Backend for bits()","","Iterate over pairs of set bits in a u128 Syntax: for (i, â€¦","Iterate over set bits in a u128 Syntax: for i in bits(det: â€¦","","","","","","","","","","","","","","","","","","","","","","","Iterate over set bits in a Config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combine 2 indices in a unique way","Combine 2 indices in a unique way","Combine 4 indices in a unique way","Permutation factor for two configs that differ by a single â€¦","Permutation factor for two configs that differ by a double â€¦","","Holds the global variables. Read from the input file â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","Read input from in.json, put it into Global struct","","","","","","","","","","","Davidson module For now, just use simple diagonal â€¦","","Variational Hamiltonian generation algorithms","Data structure for holding off-diagonal Hamiltonian matrix â€¦","Sparse matrix datatype that works with eigenvalues module","Utility functions useful for fast variational Hamiltonian â€¦","Perform variational selected CI","Generate Ham as a sparse matrix, and optimize using â€¦","Algorithms to compute (some) eigenvalues/eigenvectors for â€¦","","Common matrix operations for all the matrix â€¦","Modified Gram-Schmidt (MGS)","Auxiliar functions to manipulate arrays","","Correction method for the Davidson algorithm","","","","","Option to compute the lowest, highest or somewhere in the â€¦","","","","","","","","","","Davidson Diagonalization","","","","","","","","","","","","","","","","","","","","","","","Hermitian Lanczos algorithm","","","","","","","","","","","","","","","","","","","","","","Structure containing the initial configuration data","Structure containing the correction methods","Structure with the configuration data","","","","","","","","","","compute the correction vectors using either DPR or GJD","Use the Diagonal-Preconditioned-Residue (DPR) method to â€¦","Use the Generalized Jacobi Davidson (GJD) to compute the â€¦","Use the Heatbath-Preconditioned-Residue (HPR) method to â€¦","Residue vectors","Extract the requested eigenvalues/eigenvectors pairs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate initial orthonormal subspace","","","","","","","","","","","","","","","","","","","","","Method used to compute the correction","Choose sensible default values for the davidson algorithm, â€¦","The new static method takes the following arguments:","","","","","The initial target matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the subpace with new vectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The new static method takes the following arguments:","","","","","","","","","","","","","","","","","","Trait containing the matrix free operations","Get the matrix diagonal","Matrix matrix multiplication","Matrix vector multiplication","Get the number of columns","Get the number of rows","Set the matrix diagonal","","","","","","","","","","","","","","","The orthonormalize static method takes three argument:","","","","","","","","","","Generate a random highly diagonal symmetric matrix","Random Sparse matrix","Random symmetric matrix","Sort the eigenvalues and their corresponding eigenvectors â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Off-diag elems data structure","Add an off-diagonal element H_{ij} to off_diag_elems i and â€¦","Add an off-diagonal element H_{ij}, as well as its â€¦","","","","","","","Just create empty rows to fill up the dimension to new â€¦","","","","","","","","","","","","","","","","","","","","","","Upper triangular sparse matrix nonzero off-diagonal â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a dense matrix to a sparse matrix (for testing â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Backend for intersection","","Backend for remove_1e","","Backend for remove_2e","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over intersection of 2 sorted lists:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over configs with 1 electron removed:","Iterate over configs with 2 electrons removed:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Variational wavefunction data structure","Add det with its coefficient If det already exists in wf, â€¦","","","","","","","","","","","","","","Determinant data structure Includes functions to generate â€¦","","","","Variational epsilon iterator (to attach to variational wf) â€¦","","","Just create empty rows to fill up the dimension to new â€¦","Get new dets Iterate over all dets; for each, propose all â€¦","","","","","","Initialize variational wf to the HF det (only needs to be â€¦","","","","Iterate over excitations using heat-bath cutoff eps Used â€¦","","","","","Create new sparse Hamiltonian, set the diagonal elements â€¦","","","Just adds a new det to the wf","","","","","","","","","","","Binary representation of the up- and down-spin orbital â€¦","Full determinant struct. Contains the determinantâ€™s â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Variational epsilon iterator","","","","","","","","","","","","","Initialize epsilon iterator max_doub is the min of the â€¦","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,2,3,2,1,3,2,1,3,1,3,1,3,2,1,3,2,1,3,2,1,3,1,3,1,1,2,1,3,2,2,1,1,3,3,1,3,0,2,1,3,2,1,2,1,3,2,2,2,1,1,3,3,0,1,3,3,2,3,1,3,1,2,2,1,1,3,3,2,2,1,1,3,3,2,1,3,2,1,3,2,1,3,2,1,3,4,5,0,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,11,0,11,0,0,0,12,11,13,12,11,13,11,13,11,13,12,11,13,12,11,13,13,12,12,12,11,13,12,12,13,13,13,12,11,13,12,12,11,11,13,13,0,13,12,11,13,13,13,12,11,13,13,12,12,11,11,13,13,0,13,13,12,13,13,12,11,13,13,12,12,11,11,13,13,12,12,11,11,13,13,12,11,13,12,11,13,12,11,13,0,12,11,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,15,16,17,18,15,0,15,15,16,17,18,15,16,17,18,15,16,17,0,16,17,18,15,18,18,16,17,18,15,16,16,17,17,18,18,15,15,0,0,16,17,18,15,16,17,18,15,16,17,18,15,16,16,17,17,18,18,15,15,16,17,18,15,0,18,15,16,16,17,17,18,18,15,15,16,16,17,17,18,18,15,15,16,17,18,15,16,17,18,15,16,17,18,15,16,17,18,15,0,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,21,21,22,22,0,22,22,21,22,21,22,21,22,21,0,22,21,22,21,22,21,22,21,22,21,22,22,21,21,22,21,22,21,22,22,21,21,0,22,22,21,22,22,21,21,22,22,21,21,22,21,22,21,22,21,22,21,23,24,0,0,0,0,25,26,27,28,25,26,27,28,27,27,27,27,26,26,25,26,27,28,25,26,27,28,25,26,27,28,26,26,25,28,28,28,25,26,27,28,25,25,26,26,27,27,28,28,26,25,26,27,28,25,25,26,27,28,25,25,26,26,27,27,28,28,25,25,25,27,25,26,27,25,0,25,27,28,25,25,26,26,27,27,28,28,25,25,26,26,27,27,28,28,25,25,26,27,28,25,26,27,28,25,26,27,28,25,0,25,26,27,28,0,0,29,30,29,30,29,29,30,29,30,29,30,29,29,30,30,30,29,30,29,29,30,30,29,30,29,30,29,29,30,30,29,30,29,29,30,30,29,29,30,30,29,30,29,30,29,30,29,30,0,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,33,33,33,33,33,33,33,33,0,0,33,33,33,33,33,33,0,0,33,33,33,33,33,33,33,33,33,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,35,36,37,35,36,37,37,35,36,37,35,36,37,35,36,37,35,36,37,36,35,36,37,35,36,37,35,35,35,36,36,37,37,36,35,36,37,35,36,37,35,35,36,36,37,37,35,36,37,35,36,37,35,36,37,35,36,37,37,35,36,37,35,37,35,36,37,36,37,35,35,36,36,37,37,35,35,36,36,37,37,35,36,37,35,36,37,35,36,37,35,36,37,36,0,0,0,0,0,0,38,39,40,41,42,43,38,39,40,41,42,43,38,38,38,39,40,41,38,39,40,41,42,43,38,39,40,41,42,43,38,39,40,41,42,43,38,41,41,39,40,41,42,43,38,39,39,40,40,41,41,42,42,43,43,38,38,43,43,39,40,41,42,43,38,0,39,40,41,42,43,38,39,40,41,42,43,38,39,39,40,40,41,41,42,42,43,43,38,38,43,43,43,39,40,42,41,43,38,0,0,41,38,39,39,40,40,41,41,42,42,43,43,38,38,39,39,40,40,41,41,42,42,43,43,38,38,39,40,41,42,43,38,39,40,41,42,43,38,39,40,41,42,43,38,42,43,42,43,39,40,41,42,43,38,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,44,44,44,0,44,44,44,44,44,44,44,44,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,45,46,45,46,45,46,45,46,45,45,45,46,45,46,45,45,46,46,45,46,45,46,46,46,45,45,46,45,46,46,45,45,46,45,46,45,46,45,46,45,46,46,45,45,46,46,46,45,45,45,45,46,46,45,46,45,46,46,45,45,46,46,45,45,46,45,46,45,46,45,46,46,45,0,47,47,47,47,47,47,47,47,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47],"f":[null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["orbs",4]],[[],["storedexcite",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["orbs",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["orbs",4]],["bool",15]],null,null,null,null,[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[["global",3],["ham",3]],["excitegenerator",3]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[["orbs",4],["impsampledist",4],["rand",3],["bool",15],["option",4,["bool"]]],["option",4]],[[["rand",3],["config",3],["impsampledist",4]],["vec",3]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[]],[[]],null,[[],["ham",3]],[[["usize",15]]],[[["usize",15]]],[[["i32",15]],["f64",15]],[[["i32",15]],["f64",15]],[[["usize",15]]],[[]],[[]],[[]],[[["i32",15]],["f64",15]],[[["config",3]],["f64",15]],[[["config",3]],["f64",15]],[[["excite",3],["config",3]],["f64",15]],[[["config",3]],["f64",15]],[[["config",3]],["f64",15]],[[],["usize",15]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["f64",15]],null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[]],[[]],[[],["ints",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["global",3],["str",15]],["ham",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[]],null,[[["excite",3],["ham",3],["det",3],["f64",15]]],[[["det",3],["f64",15]]],[[]],[[]],[[]],[[],["ptsamples",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["global",3],["ham",3],["excitegenerator",3],["wf",3]]],[[]],[[["i32",15],["f64",15]],["f64",15]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["rand",3]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["global",3],["ham",3],["rand",3],["wf",3],["excitegenerator",3]]],[[["global",3],["ham",3],["rand",3],["wf",3],["excitegenerator",3]]],[[["global",3],["ham",3],["rand",3],["wf",3],["excitegenerator",3]]],[[["global",3],["ham",3],["rand",3],["bool",15],["wf",3],["excitegenerator",3]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["impsampledist",4]],[[],["detorbsample",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,["detorbsample"]],["detorbsample",3],["f64",15]],["screenedsampler",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["rand",3],["ham",3],["screenedsampler",3],["impsampledist",4],["excitegenerator",3]]],null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["alias",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["vec",3,["f64"]],["f64",15]],["alias",3]],[[["rand",3]]],[[["rand",3]],["usize",15]],null,[[["rand",3]]],[[["usize",15],["f64",15]],["usize",15]],[[["usize",15],["f64",15]]],[[["rand",3],["i32",15]]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[["f64",15],["impsampledist",4],["option",4,["f64"]],["rand",3],["vec",3]],["option",4]],[[["rand",3],["impsampledist",4],["option",4,["f64"]],["i32",15],["vec",3],["f64",15]]],null,null,null,null,null,null,null,null,null,[[["u128",15]]],[[["u128",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["u128",15]],["bool",15]],[[],["bitsintoiterator",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["config",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["u128",15]],["u128",15]],[[["i32",15],["u128",15]],["u128",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["u128",15]],["bits",3]],[[["u128",15]],["bitpairs",3]],[[],["option",4]],[[],[["option",4,["i32"]],["i32",15]]],[[["u128",15]],["i32",15]],null,[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["ordering",4]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[],["bool",15]],[[["u128",15]],["string",3]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["ordering",4],["option",4,["ordering"]]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["i32",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["i32",15]],["usize",15]],[[["u128",15]],["i32",15]],[[["u128",15]],["i32",15]],[[],[["result",6,["lines"]],["lines",3,["bufreader"]]]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[["asref",8,["path"]],["path",3]],[["result",6,["global"]],["global",3]]],null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[["global",3],["ham",3],["excitegenerator",3],["wf",3]]],[[["global",3],["ham",3],["f64",15],["bool",15],["excitegenerator",3],["wf",3]]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["spectrumtarget",4]],[[],["davidsoncorrection",4]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["spectrumtarget",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["spectrumtarget",4]],["bool",15]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["dvector",6],["ham",3],["dmatrix",6],["excitegenerator",3],["wf",3]],[["f64",15],["dmatrix",6,["f64"]]]],[[["usize",15],["dvector",6],["dmatrix",6]],[["f64",15],["dmatrix",6,["f64"]]]],[[["dvector",6],["dmatrix",6]],[["f64",15],["dmatrix",6,["f64"]]]],[[["usize",15],["dvector",6],["ham",3],["dmatrix",6],["excitegenerator",3],["wf",3],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["symmetriceigen",3],["dmatrix",6]],[["f64",15],["dmatrix",6,["f64"]]]],[[["usize",15],["dvector",6],["dmatrix",6]],["davidson",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[["davidsonerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dvector",6],["config",3],["option",4,["dmatrix"]],["dmatrix",6,["f64"]]],[["f64",15],["dmatrix",6,["f64"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,[[["usize",15],["spectrumtarget",4],["davidsoncorrection",4],["f64",15]]],[[["ham",3],["davidsoncorrection",4],["f64",15],["usize",15],["spectrumtarget",4],["dmatrix",6,["f64"]],["option",4,["dmatrix"]],["excitegenerator",3],["wf",3]],[["davidsonerror",3],["result",4,["davidsonerror"]]]],[[["davidsoncorrection",4]],["correctionmethod",3]],null,[[["vec",3],["config",3]]],null,null,[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["dmatrix",6],["f64",15],["dmatrix",6,["f64"]]]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[["dvector",6]],[["f64",15],["dmatrix",6,["f64"]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["lanczoserror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["spectrumtarget",4],["matrixoperations",8]],[["result",4,["lanczoserror"]],["lanczoserror",3]]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],[["dvector",6,["f64"]],["f64",15]]],[[["dmatrixslice",6,["f64"]],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["dvectorslice",6,["f64"]],["f64",15]],[["dvector",6,["f64"]],["f64",15]]],[[],["usize",15]],[[],["usize",15]],[[["dvector",6]]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["dmatrix",6],["usize",15]],["bool",15]],[[["dvectorslice",6]],[["dvector",6,["f64"]],["f64",15]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["usize",15],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["usize",15],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["dynamic",3],["bool",15],["symmetriceigen",3,["f64","dynamic"]],["f64",15]],[["symmetriceigen",3,["f64","dynamic"]],["dynamic",3],["f64",15]]],[[["vec",3],["bool",15]]],null,[[["global",3],["ham",3],["vec",3],["vec",3],["wf",3],["hashmap",3],["hashmap",3],["excitegenerator",3],["hashmap",3]]],[[["global",3],["ham",3],["hashmap",3],["vec",3],["usize",15],["wf",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["wf",3],["ham",3],["excitegenerator",3]],[["vec",3],["hashmap",3,["vec"]]]],[[["global",3],["ham",3],["excitegenerator",3],["wf",3]]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[["global",3],["ham",3],["vec",3],["wf",3],["unique",3],["hashmap",3],["hashmap",3],["excitegenerator",3],["hashmap",3]]],[[["global",3],["ham",3],["hashmap",3],["usize",15],["unique",3],["wf",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[["usize",15],["ham",3],["option",4,["f64"]],["f64",15],["wf",3]]],[[["usize",15],["ham",3],["wf",3]]],[[]],[[]],[[],["offdiagelemsnohash",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["usize",15]]],null,null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["sparsematuppertri",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[],[["dvector",6,["f64"]],["f64",15]]],[[],[["dvector",6,["f64"]],["f64",15]]],[[],[["dvector",6,["f64"]],["f64",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["dmatrix",6,["f64"]],["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["dmatrixslice",6,["f64"]],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["dmatrixslice",6,["f64"]],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["dmatrixslice",6,["f64"]],["f64",15]],[["f64",15],["dmatrix",6,["f64"]]]],[[["dvectorslice",6,["f64"]],["f64",15]],[["dvector",6,["f64"]],["f64",15]]],[[["dvectorslice",6,["f64"]],["f64",15]],[["dvector",6,["f64"]],["f64",15]]],[[["dvectorslice",6,["f64"]],["f64",15]],[["dvector",6,["f64"]],["f64",15]]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,[[["dvector",6]]],[[["dvector",6]]],[[["dvector",6]]],null,[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["remove1intoiterator",3]],[[]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["u128",15]],["remove1",3]],[[["u128",15]],["remove2",3]],[[["vec",3]],["intersection",3]],[[],[["option",4,["u128"]],["u128",15]]],[[],["option",4]],[[],[["option",4,["u128"]],["u128",15]]],[[["u128",15]]],[[["u128",15]]],null,[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["f64",15],["ham",3],["excite",3],["config",3],["det",3]]],[[["excitegenerator",3],["ham",3],["f64",15]]],[[["excitegenerator",3],["ham",3],["f64",15]]],[[["global",3],["ham",3],["excitegenerator",3],["f64",15]]],[[["excitegenerator",3],["ham",3],["f64",15]]],[[["excitegenerator",3],["ham",3],["f64",15]]],[[["ham",3],["excitegenerator",3],["matrix",3],["f64",15]],[["vec",3,["f64"]],["f64",15]]],[[["vec",3],["ham",3],["excitegenerator",3],["f64",15]],[["vec",3,["f64"]],["f64",15]]],[[]],[[]],null,[[],["wf",3]],[[["usize",15]]],[[["usize",15]]],null,null,[[["usize",15]]],null,null,null,null,[[]],[[["global",3],["ham",3],["excitegenerator",3]],["bool",15]],[[]],[[]],[[]],null,[[],["usize",15]],[[["global",3],["ham",3],["excitegenerator",3]],["wf",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[["global",3],["ham",3],["bool",15],["excitegenerator",3],["f64",15]],["wf",3]],null,null,[[],["usize",15]],null,[[]],[[]],[[["usize",15]]],[[["det",3]]],null,[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15]]],[[]],null,null,[[["ham",3],["wf",3],["excitegenerator",3],["f64",15]],["wf",3]],[[]],[[]],[[]],[[]],[[],["config",3]],[[],["det",3]],[[]],[[]],null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["usize",15]]],[[["usize",15]]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["excite",3]],["config",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["excite",3]],["bool",15]],[[["option",4,["bool"]],["storedexcite",3],["bool",15]],["bool",15]],[[["config",3]],["bool",15]],[[["ham",3],["excite",3]],["f64",15]],[[["ham",3]],["f64",15]],[[["bool",15],["ham",3]],["f64",15]],[[["ham",3],["i32",15],["bool",15]],["f64",15]],[[["excite",3]],[["option",4,["config"]],["config",3]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[],["eps",3]],[[]],[[],["eps",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[["wf",3],["global",3],["excitegenerator",3]],["eps",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4,["f64"]],["f64",15]]],null,null,[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"Orbs"],[3,"Excite"],[3,"StoredExcite"],[13,"Double"],[13,"Single"],[3,"ExciteGenerator"],[3,"Ham"],[3,"Ints"],[3,"PtSamples"],[3,"Rand"],[4,"ImpSampleDist"],[3,"ScreenedSampler"],[3,"DetOrbSample"],[3,"Alias"],[3,"BitsIntoIterator"],[3,"Bits"],[3,"BitPairs"],[3,"BitPairsIntoIterator"],[3,"DetByCoeff"],[3,"Global"],[4,"DavidsonCorrection"],[4,"SpectrumTarget"],[13,"HPR"],[13,"Target"],[3,"Config"],[3,"Davidson"],[3,"CorrectionMethod"],[3,"DavidsonError"],[3,"HermitianLanczos"],[3,"LanczosError"],[8,"MatrixOperations"],[3,"MGS"],[3,"Unique"],[3,"OffDiagElemsNoHash"],[3,"SparseMat"],[3,"SparseMatDoubles"],[3,"SparseMatUpperTri"],[3,"Remove1IntoIterator"],[3,"Remove1"],[3,"Remove2"],[3,"Remove2IntoIterator"],[3,"Intersection"],[3,"IntersectionIntoIterator"],[3,"Wf"],[3,"Det"],[3,"Config"],[3,"Eps"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};