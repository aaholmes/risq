initSidebarItems({"enum":[["ImpSampleDist","Importance sampling distribution: proportional to either |Hc| or (Hc)^2"]],"fn":[["generate_screened_sampler","Generate a screened sampler object for sampling (det, orbs) pairs using Alias sampling The input det_orbs will contain the information needed for CDF-searching as a separate step (sum_abs_hc, sum_hc_squared are the sums of remaining terms to be sampled)"],["matmul_sample_remaining","Importance-sample the remaining component of a screened matmul using the given epsilon Returns tuple containing (option(exciting det, excitation, and sampled determinant (with coeff attached)), and probability of that sample O(log M) time"]],"mod":[["alias","Alias sampling"],["utils","Misc sampling utilities"]],"struct":[["DetOrbSample",""],["ScreenedSampler","For importance sampling the component of the matmul that is screened out by the eps threshold Matmul_sample_remaining performs the whole excitation sampling (exciting pair and target), but this contains only data structures sampling the exciting det and its exciting electron pair; sampling the target electron pair uses CDF searching which only requires ExciteGenerator Lifetime â€™a must last as long as the vector being semistochastically multiplied, since this struct has pointers to its components For doubles: Contains two samplers, for sampling with p ~ |Hc| and with p ~ (Hc)^2 For singles: If uniform_singles is true, enables uniform sampling of the singles from small-magnitude determinants that were not already treated deterministically Else, singles are sampled alongside doubles using max |H| instead of |H| as their relative prob Also, contains elements, the list of elements being sampled (e.g. det/orb pairs)"]]});