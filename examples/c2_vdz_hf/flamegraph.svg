<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="117778"><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (25 samples, 0.02%)</title><rect x="1.8696%" y="165" width="0.0212%" height="15" fill="rgb(227,0,7)" fg:x="2202" fg:w="25"/><text x="2.1196%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="1.8696%" y="149" width="0.0212%" height="15" fill="rgb(217,0,24)" fg:x="2202" fg:w="25"/><text x="2.1196%" y="159.50"></text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (20 samples, 0.02%)</title><rect x="1.8908%" y="165" width="0.0170%" height="15" fill="rgb(221,193,54)" fg:x="2227" fg:w="20"/><text x="2.1408%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 0.02%)</title><rect x="1.8908%" y="149" width="0.0170%" height="15" fill="rgb(248,212,6)" fg:x="2227" fg:w="20"/><text x="2.1408%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (1,998 samples, 1.70%)</title><rect x="0.2123%" y="181" width="1.6964%" height="15" fill="rgb(208,68,35)" fg:x="250" fg:w="1998"/><text x="0.4623%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (39 samples, 0.03%)</title><rect x="2.0386%" y="133" width="0.0331%" height="15" fill="rgb(232,128,0)" fg:x="2401" fg:w="39"/><text x="2.2886%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (105 samples, 0.09%)</title><rect x="2.0819%" y="117" width="0.0892%" height="15" fill="rgb(207,160,47)" fg:x="2452" fg:w="105"/><text x="2.3319%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (49 samples, 0.04%)</title><rect x="2.1710%" y="117" width="0.0416%" height="15" fill="rgb(228,23,34)" fg:x="2557" fg:w="49"/><text x="2.4210%" y="127.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (15 samples, 0.01%)</title><rect x="2.1999%" y="101" width="0.0127%" height="15" fill="rgb(218,30,26)" fg:x="2591" fg:w="15"/><text x="2.4499%" y="111.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (324 samples, 0.28%)</title><rect x="1.9384%" y="165" width="0.2751%" height="15" fill="rgb(220,122,19)" fg:x="2283" fg:w="324"/><text x="2.1884%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (207 samples, 0.18%)</title><rect x="2.0377%" y="149" width="0.1758%" height="15" fill="rgb(250,228,42)" fg:x="2400" fg:w="207"/><text x="2.2877%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (167 samples, 0.14%)</title><rect x="2.0717%" y="133" width="0.1418%" height="15" fill="rgb(240,193,28)" fg:x="2440" fg:w="167"/><text x="2.3217%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="2.2135%" y="165" width="0.0102%" height="15" fill="rgb(216,20,37)" fg:x="2607" fg:w="12"/><text x="2.4635%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (363 samples, 0.31%)</title><rect x="1.9163%" y="181" width="0.3082%" height="15" fill="rgb(206,188,39)" fg:x="2257" fg:w="363"/><text x="2.1663%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (17 samples, 0.01%)</title><rect x="2.2254%" y="181" width="0.0144%" height="15" fill="rgb(217,207,13)" fg:x="2621" fg:w="17"/><text x="2.4754%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (17 samples, 0.01%)</title><rect x="2.2254%" y="165" width="0.0144%" height="15" fill="rgb(231,73,38)" fg:x="2621" fg:w="17"/><text x="2.4754%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (164 samples, 0.14%)</title><rect x="2.2755%" y="165" width="0.1392%" height="15" fill="rgb(225,20,46)" fg:x="2680" fg:w="164"/><text x="2.5255%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (32 samples, 0.03%)</title><rect x="2.4147%" y="165" width="0.0272%" height="15" fill="rgb(210,31,41)" fg:x="2844" fg:w="32"/><text x="2.6647%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (234 samples, 0.20%)</title><rect x="2.2441%" y="181" width="0.1987%" height="15" fill="rgb(221,200,47)" fg:x="2643" fg:w="234"/><text x="2.4941%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (13 samples, 0.01%)</title><rect x="2.4529%" y="149" width="0.0110%" height="15" fill="rgb(226,26,5)" fg:x="2889" fg:w="13"/><text x="2.7029%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (38 samples, 0.03%)</title><rect x="2.4427%" y="181" width="0.0323%" height="15" fill="rgb(249,33,26)" fg:x="2877" fg:w="38"/><text x="2.6927%" y="191.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (29 samples, 0.02%)</title><rect x="2.4504%" y="165" width="0.0246%" height="15" fill="rgb(235,183,28)" fg:x="2886" fg:w="29"/><text x="2.7004%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (13 samples, 0.01%)</title><rect x="2.4640%" y="149" width="0.0110%" height="15" fill="rgb(221,5,38)" fg:x="2902" fg:w="13"/><text x="2.7140%" y="159.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (26 samples, 0.02%)</title><rect x="2.4750%" y="181" width="0.0221%" height="15" fill="rgb(247,18,42)" fg:x="2915" fg:w="26"/><text x="2.7250%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 0.05%)</title><rect x="2.5022%" y="181" width="0.0543%" height="15" fill="rgb(241,131,45)" fg:x="2947" fg:w="64"/><text x="2.7522%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (86 samples, 0.07%)</title><rect x="2.5565%" y="181" width="0.0730%" height="15" fill="rgb(249,31,29)" fg:x="3011" fg:w="86"/><text x="2.8065%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (86 samples, 0.07%)</title><rect x="2.5565%" y="165" width="0.0730%" height="15" fill="rgb(225,111,53)" fg:x="3011" fg:w="86"/><text x="2.8065%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (86 samples, 0.07%)</title><rect x="2.5565%" y="149" width="0.0730%" height="15" fill="rgb(238,160,17)" fg:x="3011" fg:w="86"/><text x="2.8065%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (17 samples, 0.01%)</title><rect x="2.6304%" y="181" width="0.0144%" height="15" fill="rgb(214,148,48)" fg:x="3098" fg:w="17"/><text x="2.8804%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (3,115 samples, 2.64%)</title><rect x="0.0042%" y="197" width="2.6448%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="3115"/><text x="0.2542%" y="207.50">es..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (390 samples, 0.33%)</title><rect x="2.6491%" y="197" width="0.3311%" height="15" fill="rgb(209,103,24)" fg:x="3120" fg:w="390"/><text x="2.8991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (53 samples, 0.04%)</title><rect x="5.3609%" y="133" width="0.0450%" height="15" fill="rgb(229,88,8)" fg:x="6314" fg:w="53"/><text x="5.6109%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (18 samples, 0.02%)</title><rect x="5.3907%" y="117" width="0.0153%" height="15" fill="rgb(213,181,19)" fg:x="6349" fg:w="18"/><text x="5.6407%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 0.07%)</title><rect x="5.3584%" y="165" width="0.0739%" height="15" fill="rgb(254,191,54)" fg:x="6311" fg:w="87"/><text x="5.6084%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (85 samples, 0.07%)</title><rect x="5.3601%" y="149" width="0.0722%" height="15" fill="rgb(241,83,37)" fg:x="6313" fg:w="85"/><text x="5.6101%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.03%)</title><rect x="5.4059%" y="133" width="0.0263%" height="15" fill="rgb(233,36,39)" fg:x="6367" fg:w="31"/><text x="5.6559%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.01%)</title><rect x="5.4195%" y="117" width="0.0127%" height="15" fill="rgb(226,3,54)" fg:x="6383" fg:w="15"/><text x="5.6695%" y="127.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (736 samples, 0.62%)</title><rect x="5.3524%" y="181" width="0.6249%" height="15" fill="rgb(245,192,40)" fg:x="6304" fg:w="736"/><text x="5.6024%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (642 samples, 0.55%)</title><rect x="5.4323%" y="165" width="0.5451%" height="15" fill="rgb(238,167,29)" fg:x="6398" fg:w="642"/><text x="5.6823%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (14 samples, 0.01%)</title><rect x="6.8502%" y="101" width="0.0119%" height="15" fill="rgb(232,182,51)" fg:x="8068" fg:w="14"/><text x="7.1002%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (14 samples, 0.01%)</title><rect x="6.8502%" y="85" width="0.0119%" height="15" fill="rgb(231,60,39)" fg:x="8068" fg:w="14"/><text x="7.1002%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.01%)</title><rect x="6.8502%" y="69" width="0.0119%" height="15" fill="rgb(208,69,12)" fg:x="8068" fg:w="14"/><text x="7.1002%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (31 samples, 0.03%)</title><rect x="6.8408%" y="165" width="0.0263%" height="15" fill="rgb(235,93,37)" fg:x="8057" fg:w="31"/><text x="7.0908%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.03%)</title><rect x="6.8408%" y="149" width="0.0263%" height="15" fill="rgb(213,116,39)" fg:x="8057" fg:w="31"/><text x="7.0908%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (31 samples, 0.03%)</title><rect x="6.8408%" y="133" width="0.0263%" height="15" fill="rgb(222,207,29)" fg:x="8057" fg:w="31"/><text x="7.0908%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (31 samples, 0.03%)</title><rect x="6.8408%" y="117" width="0.0263%" height="15" fill="rgb(206,96,30)" fg:x="8057" fg:w="31"/><text x="7.0908%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.03%)</title><rect x="6.8672%" y="165" width="0.0280%" height="15" fill="rgb(218,138,4)" fg:x="8088" fg:w="33"/><text x="7.1172%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.01%)</title><rect x="6.8824%" y="149" width="0.0127%" height="15" fill="rgb(250,191,14)" fg:x="8106" fg:w="15"/><text x="7.1324%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (72 samples, 0.06%)</title><rect x="6.8952%" y="165" width="0.0611%" height="15" fill="rgb(239,60,40)" fg:x="8121" fg:w="72"/><text x="7.1452%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (38 samples, 0.03%)</title><rect x="6.9240%" y="149" width="0.0323%" height="15" fill="rgb(206,27,48)" fg:x="8155" fg:w="38"/><text x="7.1740%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (38 samples, 0.03%)</title><rect x="6.9240%" y="133" width="0.0323%" height="15" fill="rgb(225,35,8)" fg:x="8155" fg:w="38"/><text x="7.1740%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.01%)</title><rect x="6.9818%" y="117" width="0.0102%" height="15" fill="rgb(250,213,24)" fg:x="8223" fg:w="12"/><text x="7.2318%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.04%)</title><rect x="6.9563%" y="165" width="0.0365%" height="15" fill="rgb(247,123,22)" fg:x="8193" fg:w="43"/><text x="7.2063%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (37 samples, 0.03%)</title><rect x="6.9614%" y="149" width="0.0314%" height="15" fill="rgb(231,138,38)" fg:x="8199" fg:w="37"/><text x="7.2114%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (16 samples, 0.01%)</title><rect x="6.9792%" y="133" width="0.0136%" height="15" fill="rgb(231,145,46)" fg:x="8220" fg:w="16"/><text x="7.2292%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (42 samples, 0.04%)</title><rect x="6.9928%" y="165" width="0.0357%" height="15" fill="rgb(251,118,11)" fg:x="8236" fg:w="42"/><text x="7.2428%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (42 samples, 0.04%)</title><rect x="6.9928%" y="149" width="0.0357%" height="15" fill="rgb(217,147,25)" fg:x="8236" fg:w="42"/><text x="7.2428%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,241 samples, 1.05%)</title><rect x="5.9773%" y="181" width="1.0537%" height="15" fill="rgb(247,81,37)" fg:x="7040" fg:w="1241"/><text x="6.2273%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.01%)</title><rect x="7.0395%" y="165" width="0.0102%" height="15" fill="rgb(209,12,38)" fg:x="8291" fg:w="12"/><text x="7.2895%" y="175.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="7.0310%" y="181" width="0.0331%" height="15" fill="rgb(227,1,9)" fg:x="8281" fg:w="39"/><text x="7.2810%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.01%)</title><rect x="7.0497%" y="165" width="0.0144%" height="15" fill="rgb(248,47,43)" fg:x="8303" fg:w="17"/><text x="7.2997%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.01%)</title><rect x="7.0514%" y="149" width="0.0127%" height="15" fill="rgb(221,10,30)" fg:x="8305" fg:w="15"/><text x="7.3014%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="7.0641%" y="181" width="0.0153%" height="15" fill="rgb(210,229,1)" fg:x="8320" fg:w="18"/><text x="7.3141%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (35 samples, 0.03%)</title><rect x="7.1015%" y="117" width="0.0297%" height="15" fill="rgb(222,148,37)" fg:x="8364" fg:w="35"/><text x="7.3515%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (38 samples, 0.03%)</title><rect x="7.0998%" y="133" width="0.0323%" height="15" fill="rgb(234,67,33)" fg:x="8362" fg:w="38"/><text x="7.3498%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (57 samples, 0.05%)</title><rect x="7.0862%" y="181" width="0.0484%" height="15" fill="rgb(247,98,35)" fg:x="8346" fg:w="57"/><text x="7.3362%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (45 samples, 0.04%)</title><rect x="7.0964%" y="165" width="0.0382%" height="15" fill="rgb(247,138,52)" fg:x="8358" fg:w="45"/><text x="7.3464%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (43 samples, 0.04%)</title><rect x="7.0981%" y="149" width="0.0365%" height="15" fill="rgb(213,79,30)" fg:x="8360" fg:w="43"/><text x="7.3481%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (63 samples, 0.05%)</title><rect x="7.1363%" y="181" width="0.0535%" height="15" fill="rgb(246,177,23)" fg:x="8405" fg:w="63"/><text x="7.3863%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (38 samples, 0.03%)</title><rect x="7.2136%" y="149" width="0.0323%" height="15" fill="rgb(230,62,27)" fg:x="8496" fg:w="38"/><text x="7.4636%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (51 samples, 0.04%)</title><rect x="7.2093%" y="165" width="0.0433%" height="15" fill="rgb(216,154,8)" fg:x="8491" fg:w="51"/><text x="7.4593%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (57 samples, 0.05%)</title><rect x="7.2526%" y="165" width="0.0484%" height="15" fill="rgb(244,35,45)" fg:x="8542" fg:w="57"/><text x="7.5026%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (57 samples, 0.05%)</title><rect x="7.2526%" y="149" width="0.0484%" height="15" fill="rgb(251,115,12)" fg:x="8542" fg:w="57"/><text x="7.5026%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (57 samples, 0.05%)</title><rect x="7.2526%" y="133" width="0.0484%" height="15" fill="rgb(240,54,50)" fg:x="8542" fg:w="57"/><text x="7.5026%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (37 samples, 0.03%)</title><rect x="7.3409%" y="149" width="0.0314%" height="15" fill="rgb(233,84,52)" fg:x="8646" fg:w="37"/><text x="7.5909%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (33 samples, 0.03%)</title><rect x="7.3443%" y="133" width="0.0280%" height="15" fill="rgb(207,117,47)" fg:x="8650" fg:w="33"/><text x="7.5943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (29 samples, 0.02%)</title><rect x="7.3723%" y="149" width="0.0246%" height="15" fill="rgb(249,43,39)" fg:x="8683" fg:w="29"/><text x="7.6223%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (152 samples, 0.13%)</title><rect x="7.3995%" y="149" width="0.1291%" height="15" fill="rgb(209,38,44)" fg:x="8715" fg:w="152"/><text x="7.6495%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (77 samples, 0.07%)</title><rect x="7.5362%" y="133" width="0.0654%" height="15" fill="rgb(236,212,23)" fg:x="8876" fg:w="77"/><text x="7.7862%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (85 samples, 0.07%)</title><rect x="7.5303%" y="149" width="0.0722%" height="15" fill="rgb(242,79,21)" fg:x="8869" fg:w="85"/><text x="7.7803%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (549 samples, 0.47%)</title><rect x="7.6228%" y="133" width="0.4661%" height="15" fill="rgb(211,96,35)" fg:x="8978" fg:w="549"/><text x="7.8728%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (941 samples, 0.80%)</title><rect x="7.3010%" y="165" width="0.7990%" height="15" fill="rgb(253,215,40)" fg:x="8599" fg:w="941"/><text x="7.5510%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (586 samples, 0.50%)</title><rect x="7.6024%" y="149" width="0.4975%" height="15" fill="rgb(211,81,21)" fg:x="8954" fg:w="586"/><text x="7.8524%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (33 samples, 0.03%)</title><rect x="8.1000%" y="165" width="0.0280%" height="15" fill="rgb(208,190,38)" fg:x="9540" fg:w="33"/><text x="8.3500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.03%)</title><rect x="8.1017%" y="149" width="0.0263%" height="15" fill="rgb(235,213,38)" fg:x="9542" fg:w="31"/><text x="8.3517%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (14 samples, 0.01%)</title><rect x="8.1161%" y="133" width="0.0119%" height="15" fill="rgb(237,122,38)" fg:x="9559" fg:w="14"/><text x="8.3661%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.01%)</title><rect x="8.1170%" y="117" width="0.0110%" height="15" fill="rgb(244,218,35)" fg:x="9560" fg:w="13"/><text x="8.3670%" y="127.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (1,119 samples, 0.95%)</title><rect x="7.1898%" y="181" width="0.9501%" height="15" fill="rgb(240,68,47)" fg:x="8468" fg:w="1119"/><text x="7.4398%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (370 samples, 0.31%)</title><rect x="8.1399%" y="181" width="0.3142%" height="15" fill="rgb(210,16,53)" fg:x="9587" fg:w="370"/><text x="8.3899%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,201 samples, 1.02%)</title><rect x="60.0460%" y="165" width="1.0197%" height="15" fill="rgb(235,124,12)" fg:x="70721" fg:w="1201"/><text x="60.2960%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (57 samples, 0.05%)</title><rect x="61.1209%" y="133" width="0.0484%" height="15" fill="rgb(224,169,11)" fg:x="71987" fg:w="57"/><text x="61.3709%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (53 samples, 0.04%)</title><rect x="61.1243%" y="117" width="0.0450%" height="15" fill="rgb(250,166,2)" fg:x="71991" fg:w="53"/><text x="61.3743%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.04%)</title><rect x="61.1252%" y="101" width="0.0442%" height="15" fill="rgb(242,216,29)" fg:x="71992" fg:w="52"/><text x="61.3752%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (13 samples, 0.01%)</title><rect x="61.1583%" y="85" width="0.0110%" height="15" fill="rgb(230,116,27)" fg:x="72031" fg:w="13"/><text x="61.4083%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (19 samples, 0.02%)</title><rect x="61.2644%" y="101" width="0.0161%" height="15" fill="rgb(228,99,48)" fg:x="72156" fg:w="19"/><text x="61.5144%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (18 samples, 0.02%)</title><rect x="61.3595%" y="69" width="0.0153%" height="15" fill="rgb(253,11,6)" fg:x="72268" fg:w="18"/><text x="61.6095%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (94 samples, 0.08%)</title><rect x="61.3103%" y="85" width="0.0798%" height="15" fill="rgb(247,143,39)" fg:x="72210" fg:w="94"/><text x="61.5603%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (14 samples, 0.01%)</title><rect x="61.3782%" y="69" width="0.0119%" height="15" fill="rgb(236,97,10)" fg:x="72290" fg:w="14"/><text x="61.6282%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (179 samples, 0.15%)</title><rect x="61.5921%" y="53" width="0.1520%" height="15" fill="rgb(233,208,19)" fg:x="72542" fg:w="179"/><text x="61.8421%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (84 samples, 0.07%)</title><rect x="61.7441%" y="53" width="0.0713%" height="15" fill="rgb(216,164,2)" fg:x="72721" fg:w="84"/><text x="61.9941%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (114 samples, 0.10%)</title><rect x="61.8375%" y="37" width="0.0968%" height="15" fill="rgb(220,129,5)" fg:x="72831" fg:w="114"/><text x="62.0875%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (568 samples, 0.48%)</title><rect x="61.4546%" y="69" width="0.4823%" height="15" fill="rgb(242,17,10)" fg:x="72380" fg:w="568"/><text x="61.7046%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (125 samples, 0.11%)</title><rect x="61.8307%" y="53" width="0.1061%" height="15" fill="rgb(242,107,0)" fg:x="72823" fg:w="125"/><text x="62.0807%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (645 samples, 0.55%)</title><rect x="61.3901%" y="85" width="0.5476%" height="15" fill="rgb(251,28,31)" fg:x="72304" fg:w="645"/><text x="61.6401%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (29 samples, 0.02%)</title><rect x="61.9437%" y="85" width="0.0246%" height="15" fill="rgb(233,223,10)" fg:x="72956" fg:w="29"/><text x="62.1937%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (83 samples, 0.07%)</title><rect x="62.0753%" y="37" width="0.0705%" height="15" fill="rgb(215,21,27)" fg:x="73111" fg:w="83"/><text x="62.3253%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (28 samples, 0.02%)</title><rect x="62.1457%" y="37" width="0.0238%" height="15" fill="rgb(232,23,21)" fg:x="73194" fg:w="28"/><text x="62.3957%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (261 samples, 0.22%)</title><rect x="61.9819%" y="69" width="0.2216%" height="15" fill="rgb(244,5,23)" fg:x="73001" fg:w="261"/><text x="62.2319%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (185 samples, 0.16%)</title><rect x="62.0464%" y="53" width="0.1571%" height="15" fill="rgb(226,81,46)" fg:x="73077" fg:w="185"/><text x="62.2964%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (40 samples, 0.03%)</title><rect x="62.1695%" y="37" width="0.0340%" height="15" fill="rgb(247,70,30)" fg:x="73222" fg:w="40"/><text x="62.4195%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (38 samples, 0.03%)</title><rect x="62.3054%" y="53" width="0.0323%" height="15" fill="rgb(212,68,19)" fg:x="73382" fg:w="38"/><text x="62.5554%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (557 samples, 0.47%)</title><rect x="61.9683%" y="85" width="0.4729%" height="15" fill="rgb(240,187,13)" fg:x="72985" fg:w="557"/><text x="62.2183%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (280 samples, 0.24%)</title><rect x="62.2035%" y="69" width="0.2377%" height="15" fill="rgb(223,113,26)" fg:x="73262" fg:w="280"/><text x="62.4535%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (116 samples, 0.10%)</title><rect x="62.3427%" y="53" width="0.0985%" height="15" fill="rgb(206,192,2)" fg:x="73426" fg:w="116"/><text x="62.5927%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (13 samples, 0.01%)</title><rect x="62.4302%" y="37" width="0.0110%" height="15" fill="rgb(241,108,4)" fg:x="73529" fg:w="13"/><text x="62.6802%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (47 samples, 0.04%)</title><rect x="62.4412%" y="85" width="0.0399%" height="15" fill="rgb(247,173,49)" fg:x="73542" fg:w="47"/><text x="62.6912%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (40 samples, 0.03%)</title><rect x="62.4471%" y="69" width="0.0340%" height="15" fill="rgb(224,114,35)" fg:x="73549" fg:w="40"/><text x="62.6971%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (123 samples, 0.10%)</title><rect x="62.4820%" y="85" width="0.1044%" height="15" fill="rgb(245,159,27)" fg:x="73590" fg:w="123"/><text x="62.7320%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (29 samples, 0.02%)</title><rect x="62.5618%" y="69" width="0.0246%" height="15" fill="rgb(245,172,44)" fg:x="73684" fg:w="29"/><text x="62.8118%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,224 samples, 1.89%)</title><rect x="61.2848%" y="101" width="1.8883%" height="15" fill="rgb(236,23,11)" fg:x="72180" fg:w="2224"/><text x="61.5348%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (691 samples, 0.59%)</title><rect x="62.5864%" y="85" width="0.5867%" height="15" fill="rgb(205,117,38)" fg:x="73713" fg:w="691"/><text x="62.8364%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,281 samples, 1.94%)</title><rect x="61.2457%" y="117" width="1.9367%" height="15" fill="rgb(237,72,25)" fg:x="72134" fg:w="2281"/><text x="61.4957%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`small_size (50 samples, 0.04%)</title><rect x="63.1824%" y="117" width="0.0425%" height="15" fill="rgb(244,70,9)" fg:x="74415" fg:w="50"/><text x="63.4324%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (197 samples, 0.17%)</title><rect x="63.2257%" y="117" width="0.1673%" height="15" fill="rgb(217,125,39)" fg:x="74466" fg:w="197"/><text x="63.4757%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (189 samples, 0.16%)</title><rect x="63.2325%" y="101" width="0.1605%" height="15" fill="rgb(235,36,10)" fg:x="74474" fg:w="189"/><text x="63.4825%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,618 samples, 2.22%)</title><rect x="61.1719%" y="133" width="2.2228%" height="15" fill="rgb(251,123,47)" fg:x="72047" fg:w="2618"/><text x="61.4219%" y="143.50">l..</text></g><g><title>esp`alloc::raw_vec::finish_grow (2,715 samples, 2.31%)</title><rect x="61.1022%" y="149" width="2.3052%" height="15" fill="rgb(221,13,13)" fg:x="71965" fg:w="2715"/><text x="61.3522%" y="159.50">e..</text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.01%)</title><rect x="63.3955%" y="133" width="0.0119%" height="15" fill="rgb(238,131,9)" fg:x="74666" fg:w="14"/><text x="63.6455%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,777 samples, 2.36%)</title><rect x="61.0657%" y="165" width="2.3578%" height="15" fill="rgb(211,50,8)" fg:x="71922" fg:w="2777"/><text x="61.3157%" y="175.50">e..</text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.01%)</title><rect x="63.4100%" y="149" width="0.0136%" height="15" fill="rgb(245,182,24)" fg:x="74683" fg:w="16"/><text x="63.6600%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (23 samples, 0.02%)</title><rect x="63.4287%" y="165" width="0.0195%" height="15" fill="rgb(242,14,37)" fg:x="74705" fg:w="23"/><text x="63.6787%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (12,906 samples, 10.96%)</title><rect x="63.4482%" y="165" width="10.9579%" height="15" fill="rgb(246,228,12)" fg:x="74728" fg:w="12906"/><text x="63.6982%" y="175.50">esp`esp::ham::Ha..</text></g><g><title>esp`esp::ham::Ham::ham_doub (2,383 samples, 2.02%)</title><rect x="72.3828%" y="149" width="2.0233%" height="15" fill="rgb(213,55,15)" fg:x="85251" fg:w="2383"/><text x="72.6328%" y="159.50">e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (323 samples, 0.27%)</title><rect x="74.1318%" y="133" width="0.2742%" height="15" fill="rgb(209,9,3)" fg:x="87311" fg:w="323"/><text x="74.3818%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (305 samples, 0.26%)</title><rect x="74.4061%" y="165" width="0.2590%" height="15" fill="rgb(230,59,30)" fg:x="87634" fg:w="305"/><text x="74.6561%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (164 samples, 0.14%)</title><rect x="74.5258%" y="149" width="0.1392%" height="15" fill="rgb(209,121,21)" fg:x="87775" fg:w="164"/><text x="74.7758%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (398 samples, 0.34%)</title><rect x="75.1456%" y="149" width="0.3379%" height="15" fill="rgb(220,109,13)" fg:x="88505" fg:w="398"/><text x="75.3956%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (18 samples, 0.02%)</title><rect x="76.8802%" y="133" width="0.0153%" height="15" fill="rgb(232,18,1)" fg:x="90548" fg:w="18"/><text x="77.1302%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (64 samples, 0.05%)</title><rect x="77.7216%" y="117" width="0.0543%" height="15" fill="rgb(215,41,42)" fg:x="91539" fg:w="64"/><text x="77.9716%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (846 samples, 0.72%)</title><rect x="77.7760%" y="117" width="0.7183%" height="15" fill="rgb(224,123,36)" fg:x="91603" fg:w="846"/><text x="78.0260%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (417 samples, 0.35%)</title><rect x="78.1402%" y="101" width="0.3541%" height="15" fill="rgb(240,125,3)" fg:x="92032" fg:w="417"/><text x="78.3902%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (57 samples, 0.05%)</title><rect x="78.4943%" y="117" width="0.0484%" height="15" fill="rgb(205,98,50)" fg:x="92449" fg:w="57"/><text x="78.7443%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (57 samples, 0.05%)</title><rect x="78.4943%" y="101" width="0.0484%" height="15" fill="rgb(205,185,37)" fg:x="92449" fg:w="57"/><text x="78.7443%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.02%)</title><rect x="78.5427%" y="117" width="0.0246%" height="15" fill="rgb(238,207,15)" fg:x="92506" fg:w="29"/><text x="78.7927%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,614 samples, 3.92%)</title><rect x="74.6650%" y="165" width="3.9175%" height="15" fill="rgb(213,199,42)" fg:x="87939" fg:w="4614"/><text x="74.9150%" y="175.50">esp`..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3,650 samples, 3.10%)</title><rect x="75.4835%" y="149" width="3.0991%" height="15" fill="rgb(235,201,11)" fg:x="88903" fg:w="3650"/><text x="75.7335%" y="159.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,987 samples, 1.69%)</title><rect x="76.8955%" y="133" width="1.6871%" height="15" fill="rgb(207,46,11)" fg:x="90566" fg:w="1987"/><text x="77.1455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (18 samples, 0.02%)</title><rect x="78.5673%" y="117" width="0.0153%" height="15" fill="rgb(241,35,35)" fg:x="92535" fg:w="18"/><text x="78.8173%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (18 samples, 0.02%)</title><rect x="78.5673%" y="101" width="0.0153%" height="15" fill="rgb(243,32,47)" fg:x="92535" fg:w="18"/><text x="78.8173%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (18 samples, 0.02%)</title><rect x="78.5673%" y="85" width="0.0153%" height="15" fill="rgb(247,202,23)" fg:x="92535" fg:w="18"/><text x="78.8173%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (19,509 samples, 16.56%)</title><rect x="78.5826%" y="165" width="16.5642%" height="15" fill="rgb(219,102,11)" fg:x="92553" fg:w="19509"/><text x="78.8326%" y="175.50">esp`hashbrown::map::make_h..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9,857 samples, 8.37%)</title><rect x="86.7777%" y="149" width="8.3691%" height="15" fill="rgb(243,110,44)" fg:x="102205" fg:w="9857"/><text x="87.0277%" y="159.50">esp`&lt;std::co..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (102,123 samples, 86.71%)</title><rect x="8.4549%" y="181" width="86.7080%" height="15" fill="rgb(222,74,54)" fg:x="9958" fg:w="102123"/><text x="8.7049%" y="191.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (19 samples, 0.02%)</title><rect x="95.1468%" y="165" width="0.0161%" height="15" fill="rgb(216,99,12)" fg:x="112062" fg:w="19"/><text x="95.3968%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59 samples, 0.05%)</title><rect x="95.1629%" y="181" width="0.0501%" height="15" fill="rgb(226,22,26)" fg:x="112081" fg:w="59"/><text x="95.4129%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.01%)</title><rect x="95.2020%" y="165" width="0.0110%" height="15" fill="rgb(217,163,10)" fg:x="112127" fg:w="13"/><text x="95.4520%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (204 samples, 0.17%)</title><rect x="96.2497%" y="165" width="0.1732%" height="15" fill="rgb(213,25,53)" fg:x="113361" fg:w="204"/><text x="96.4997%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,201 samples, 1.87%)</title><rect x="95.2130%" y="181" width="1.8688%" height="15" fill="rgb(252,105,26)" fg:x="112140" fg:w="2201"/><text x="95.4630%" y="191.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (776 samples, 0.66%)</title><rect x="96.4229%" y="165" width="0.6589%" height="15" fill="rgb(220,39,43)" fg:x="113565" fg:w="776"/><text x="96.6729%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (83 samples, 0.07%)</title><rect x="97.0877%" y="165" width="0.0705%" height="15" fill="rgb(229,68,48)" fg:x="114348" fg:w="83"/><text x="97.3377%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (2,571 samples, 2.18%)</title><rect x="97.0818%" y="181" width="2.1829%" height="15" fill="rgb(252,8,32)" fg:x="114341" fg:w="2571"/><text x="97.3318%" y="191.50">e..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (2,481 samples, 2.11%)</title><rect x="97.1582%" y="165" width="2.1065%" height="15" fill="rgb(223,20,43)" fg:x="114431" fg:w="2481"/><text x="97.4082%" y="175.50">e..</text></g><g><title>esp`core::slice::sort::recurse (1,710 samples, 1.45%)</title><rect x="97.8128%" y="149" width="1.4519%" height="15" fill="rgb(229,81,49)" fg:x="115202" fg:w="1710"/><text x="98.0628%" y="159.50"></text></g><g><title>esp`core::slice::sort::recurse (1,239 samples, 1.05%)</title><rect x="98.2127%" y="133" width="1.0520%" height="15" fill="rgb(236,28,36)" fg:x="115673" fg:w="1239"/><text x="98.4627%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (563 samples, 0.48%)</title><rect x="98.7867%" y="117" width="0.4780%" height="15" fill="rgb(249,185,26)" fg:x="116349" fg:w="563"/><text x="99.0367%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (96 samples, 0.08%)</title><rect x="99.1832%" y="101" width="0.0815%" height="15" fill="rgb(249,174,33)" fg:x="116816" fg:w="96"/><text x="99.4332%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.01%)</title><rect x="99.2673%" y="181" width="0.0144%" height="15" fill="rgb(233,201,37)" fg:x="116915" fg:w="17"/><text x="99.5173%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.01%)</title><rect x="99.2698%" y="165" width="0.0119%" height="15" fill="rgb(221,78,26)" fg:x="116918" fg:w="14"/><text x="99.5198%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.01%)</title><rect x="99.2698%" y="149" width="0.0119%" height="15" fill="rgb(250,127,30)" fg:x="116918" fg:w="14"/><text x="99.5198%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (17 samples, 0.01%)</title><rect x="99.2859%" y="181" width="0.0144%" height="15" fill="rgb(230,49,44)" fg:x="116937" fg:w="17"/><text x="99.5359%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (17 samples, 0.01%)</title><rect x="99.2859%" y="165" width="0.0144%" height="15" fill="rgb(229,67,23)" fg:x="116937" fg:w="17"/><text x="99.5359%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.01%)</title><rect x="99.2859%" y="149" width="0.0144%" height="15" fill="rgb(249,83,47)" fg:x="116937" fg:w="17"/><text x="99.5359%" y="159.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (113,453 samples, 96.33%)</title><rect x="2.9802%" y="197" width="96.3278%" height="15" fill="rgb(215,43,3)" fg:x="3510" fg:w="113453"/><text x="3.2302%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (24 samples, 0.02%)</title><rect x="99.3089%" y="197" width="0.0204%" height="15" fill="rgb(238,154,13)" fg:x="116964" fg:w="24"/><text x="99.5589%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (116,991 samples, 99.33%)</title><rect x="0.0000%" y="213" width="99.3318%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="116991"/><text x="0.2500%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`esp::ham::Ham::ham_sing (110 samples, 0.09%)</title><rect x="99.4710%" y="197" width="0.0934%" height="15" fill="rgb(233,0,4)" fg:x="117155" fg:w="110"/><text x="99.7210%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (53 samples, 0.04%)</title><rect x="99.5194%" y="181" width="0.0450%" height="15" fill="rgb(235,30,7)" fg:x="117212" fg:w="53"/><text x="99.7694%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (41 samples, 0.03%)</title><rect x="99.5644%" y="197" width="0.0348%" height="15" fill="rgb(250,79,13)" fg:x="117265" fg:w="41"/><text x="99.8144%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (25 samples, 0.02%)</title><rect x="99.5992%" y="197" width="0.0212%" height="15" fill="rgb(211,146,34)" fg:x="117306" fg:w="25"/><text x="99.8492%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (17 samples, 0.01%)</title><rect x="99.6060%" y="181" width="0.0144%" height="15" fill="rgb(228,22,38)" fg:x="117314" fg:w="17"/><text x="99.8560%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (196 samples, 0.17%)</title><rect x="99.6273%" y="197" width="0.1664%" height="15" fill="rgb(235,168,5)" fg:x="117339" fg:w="196"/><text x="99.8773%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (45 samples, 0.04%)</title><rect x="99.7555%" y="181" width="0.0382%" height="15" fill="rgb(221,155,16)" fg:x="117490" fg:w="45"/><text x="100.0055%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (31 samples, 0.03%)</title><rect x="99.7937%" y="197" width="0.0263%" height="15" fill="rgb(215,215,53)" fg:x="117535" fg:w="31"/><text x="100.0437%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (25 samples, 0.02%)</title><rect x="99.7988%" y="181" width="0.0212%" height="15" fill="rgb(223,4,10)" fg:x="117541" fg:w="25"/><text x="100.0488%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.02%)</title><rect x="99.7988%" y="165" width="0.0212%" height="15" fill="rgb(234,103,6)" fg:x="117541" fg:w="25"/><text x="100.0488%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (114 samples, 0.10%)</title><rect x="99.8200%" y="197" width="0.0968%" height="15" fill="rgb(227,97,0)" fg:x="117566" fg:w="114"/><text x="100.0700%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (62 samples, 0.05%)</title><rect x="99.8642%" y="181" width="0.0526%" height="15" fill="rgb(234,150,53)" fg:x="117618" fg:w="62"/><text x="100.1142%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (691 samples, 0.59%)</title><rect x="99.3318%" y="213" width="0.5867%" height="15" fill="rgb(228,201,54)" fg:x="116991" fg:w="691"/><text x="99.5818%" y="223.50"></text></g><g><title>esp`esp::var::variational (117,686 samples, 99.92%)</title><rect x="0.0000%" y="229" width="99.9219%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="117686"/><text x="0.2500%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`alloc::slice::merge_sort (18 samples, 0.02%)</title><rect x="99.9389%" y="181" width="0.0153%" height="15" fill="rgb(237,53,32)" fg:x="117706" fg:w="18"/><text x="100.1889%" y="191.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (41 samples, 0.03%)</title><rect x="99.9219%" y="197" width="0.0348%" height="15" fill="rgb(233,25,53)" fg:x="117686" fg:w="41"/><text x="100.1719%" y="207.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (49 samples, 0.04%)</title><rect x="99.9219%" y="229" width="0.0416%" height="15" fill="rgb(210,40,34)" fg:x="117686" fg:w="49"/><text x="100.1719%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (49 samples, 0.04%)</title><rect x="99.9219%" y="213" width="0.0416%" height="15" fill="rgb(241,220,44)" fg:x="117686" fg:w="49"/><text x="100.1719%" y="223.50"></text></g><g><title>esp`main (117,736 samples, 99.96%)</title><rect x="0.0000%" y="309" width="99.9643%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="117736"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (117,736 samples, 99.96%)</title><rect x="0.0000%" y="293" width="99.9643%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="117736"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (117,736 samples, 99.96%)</title><rect x="0.0000%" y="277" width="99.9643%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="117736"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (117,736 samples, 99.96%)</title><rect x="0.0000%" y="261" width="99.9643%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="117736"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (117,736 samples, 99.96%)</title><rect x="0.0000%" y="245" width="99.9643%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="117736"/><text x="0.2500%" y="255.50">esp`esp::main</text></g><g><title>0x1 (117,777 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9992%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="117777"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (117,777 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9992%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="117777"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (41 samples, 0.03%)</title><rect x="99.9643%" y="309" width="0.0348%" height="15" fill="rgb(216,193,19)" fg:x="117736" fg:w="41"/><text x="100.2143%" y="319.50"></text></g><g><title>all (117,778 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="117778"/><text x="0.2500%" y="367.50"></text></g></svg></svg>