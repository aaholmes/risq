<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="781335"><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (237 samples, 0.03%)</title><rect x="7.6653%" y="181" width="0.0303%" height="15" fill="rgb(227,0,7)" fg:x="59892" fg:w="237"/><text x="7.9153%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (237 samples, 0.03%)</title><rect x="7.6653%" y="165" width="0.0303%" height="15" fill="rgb(217,0,24)" fg:x="59892" fg:w="237"/><text x="7.9153%" y="175.50"></text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (192 samples, 0.02%)</title><rect x="7.6957%" y="181" width="0.0246%" height="15" fill="rgb(221,193,54)" fg:x="60129" fg:w="192"/><text x="7.9457%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (192 samples, 0.02%)</title><rect x="7.6957%" y="165" width="0.0246%" height="15" fill="rgb(248,212,6)" fg:x="60129" fg:w="192"/><text x="7.9457%" y="175.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (57,255 samples, 7.33%)</title><rect x="0.3945%" y="197" width="7.3278%" height="15" fill="rgb(208,68,35)" fg:x="3082" fg:w="57255"/><text x="0.6445%" y="207.50">esp`&lt;esp::..</text></g><g><title>esp`matrixmultiply::gemm::pack (566 samples, 0.07%)</title><rect x="7.9409%" y="149" width="0.0724%" height="15" fill="rgb(232,128,0)" fg:x="62045" fg:w="566"/><text x="8.1909%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (1,049 samples, 0.13%)</title><rect x="8.0183%" y="133" width="0.1343%" height="15" fill="rgb(207,160,47)" fg:x="62650" fg:w="1049"/><text x="8.2683%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (401 samples, 0.05%)</title><rect x="8.1532%" y="133" width="0.0513%" height="15" fill="rgb(228,23,34)" fg:x="63704" fg:w="401"/><text x="8.4032%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (143 samples, 0.02%)</title><rect x="8.1862%" y="117" width="0.0183%" height="15" fill="rgb(218,30,26)" fg:x="63962" fg:w="143"/><text x="8.4362%" y="127.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,497 samples, 0.19%)</title><rect x="8.0133%" y="149" width="0.1916%" height="15" fill="rgb(220,122,19)" fg:x="62611" fg:w="1497"/><text x="8.2633%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (2,075 samples, 0.27%)</title><rect x="7.9395%" y="165" width="0.2656%" height="15" fill="rgb(250,228,42)" fg:x="62034" fg:w="2075"/><text x="8.1895%" y="175.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,424 samples, 0.44%)</title><rect x="7.7671%" y="181" width="0.4382%" height="15" fill="rgb(240,193,28)" fg:x="60687" fg:w="3424"/><text x="8.0171%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (152 samples, 0.02%)</title><rect x="8.2053%" y="181" width="0.0195%" height="15" fill="rgb(216,20,37)" fg:x="64111" fg:w="152"/><text x="8.4553%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (3,853 samples, 0.49%)</title><rect x="7.7319%" y="197" width="0.4931%" height="15" fill="rgb(206,188,39)" fg:x="60412" fg:w="3853"/><text x="7.9819%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (120 samples, 0.02%)</title><rect x="8.2267%" y="197" width="0.0154%" height="15" fill="rgb(217,207,13)" fg:x="64278" fg:w="120"/><text x="8.4767%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (119 samples, 0.02%)</title><rect x="8.2268%" y="181" width="0.0152%" height="15" fill="rgb(231,73,38)" fg:x="64279" fg:w="119"/><text x="8.4768%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,452 samples, 0.19%)</title><rect x="8.3240%" y="181" width="0.1858%" height="15" fill="rgb(225,20,46)" fg:x="65038" fg:w="1452"/><text x="8.5740%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (282 samples, 0.04%)</title><rect x="8.5098%" y="181" width="0.0361%" height="15" fill="rgb(210,31,41)" fg:x="66490" fg:w="282"/><text x="8.7598%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (157 samples, 0.02%)</title><rect x="8.5459%" y="181" width="0.0201%" height="15" fill="rgb(221,200,47)" fg:x="66772" fg:w="157"/><text x="8.7959%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (2,478 samples, 0.32%)</title><rect x="8.2490%" y="197" width="0.3171%" height="15" fill="rgb(226,26,5)" fg:x="64452" fg:w="2478"/><text x="8.4990%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (104 samples, 0.01%)</title><rect x="8.5670%" y="181" width="0.0133%" height="15" fill="rgb(249,33,26)" fg:x="66937" fg:w="104"/><text x="8.8170%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (155 samples, 0.02%)</title><rect x="8.5810%" y="165" width="0.0198%" height="15" fill="rgb(235,183,28)" fg:x="67046" fg:w="155"/><text x="8.8310%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (96 samples, 0.01%)</title><rect x="8.6009%" y="165" width="0.0123%" height="15" fill="rgb(221,5,38)" fg:x="67202" fg:w="96"/><text x="8.8509%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (258 samples, 0.03%)</title><rect x="8.5803%" y="181" width="0.0330%" height="15" fill="rgb(247,18,42)" fg:x="67041" fg:w="258"/><text x="8.8303%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (370 samples, 0.05%)</title><rect x="8.5661%" y="197" width="0.0474%" height="15" fill="rgb(241,131,45)" fg:x="66930" fg:w="370"/><text x="8.8161%" y="207.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (255 samples, 0.03%)</title><rect x="8.6135%" y="197" width="0.0326%" height="15" fill="rgb(249,31,29)" fg:x="67300" fg:w="255"/><text x="8.8635%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (657 samples, 0.08%)</title><rect x="8.6512%" y="197" width="0.0841%" height="15" fill="rgb(225,111,53)" fg:x="67595" fg:w="657"/><text x="8.9012%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1,531 samples, 0.20%)</title><rect x="8.7354%" y="165" width="0.1959%" height="15" fill="rgb(238,160,17)" fg:x="68253" fg:w="1531"/><text x="8.9854%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1,532 samples, 0.20%)</title><rect x="8.7354%" y="197" width="0.1961%" height="15" fill="rgb(214,148,48)" fg:x="68253" fg:w="1532"/><text x="8.9854%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1,532 samples, 0.20%)</title><rect x="8.7354%" y="181" width="0.1961%" height="15" fill="rgb(232,36,49)" fg:x="68253" fg:w="1532"/><text x="8.9854%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (167 samples, 0.02%)</title><rect x="8.9316%" y="197" width="0.0214%" height="15" fill="rgb(209,103,24)" fg:x="69786" fg:w="167"/><text x="9.1816%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (69,642 samples, 8.91%)</title><rect x="0.0517%" y="213" width="8.9132%" height="15" fill="rgb(229,88,8)" fg:x="404" fg:w="69642"/><text x="0.3017%" y="223.50">esp`eigenvalu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (93 samples, 0.01%)</title><rect x="8.9530%" y="197" width="0.0119%" height="15" fill="rgb(213,181,19)" fg:x="69953" fg:w="93"/><text x="9.2030%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el_and_spin_flipped (87 samples, 0.01%)</title><rect x="8.9699%" y="213" width="0.0111%" height="15" fill="rgb(254,191,54)" fg:x="70085" fg:w="87"/><text x="9.2199%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2,730 samples, 0.35%)</title><rect x="12.0632%" y="117" width="0.3494%" height="15" fill="rgb(241,83,37)" fg:x="94254" fg:w="2730"/><text x="12.3132%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (213 samples, 0.03%)</title><rect x="12.4126%" y="117" width="0.0273%" height="15" fill="rgb(233,36,39)" fg:x="96984" fg:w="213"/><text x="12.6626%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6,006 samples, 0.77%)</title><rect x="11.9812%" y="149" width="0.7687%" height="15" fill="rgb(226,3,54)" fg:x="93613" fg:w="6006"/><text x="12.2312%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5,654 samples, 0.72%)</title><rect x="12.0262%" y="133" width="0.7236%" height="15" fill="rgb(245,192,40)" fg:x="93965" fg:w="5654"/><text x="12.2762%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2,422 samples, 0.31%)</title><rect x="12.4399%" y="117" width="0.3100%" height="15" fill="rgb(238,167,29)" fg:x="97197" fg:w="2422"/><text x="12.6899%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6,247 samples, 0.80%)</title><rect x="11.9777%" y="165" width="0.7995%" height="15" fill="rgb(232,182,51)" fg:x="93586" fg:w="6247"/><text x="12.2277%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (214 samples, 0.03%)</title><rect x="12.7498%" y="149" width="0.0274%" height="15" fill="rgb(231,60,39)" fg:x="99619" fg:w="214"/><text x="12.9998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (149 samples, 0.02%)</title><rect x="12.7582%" y="133" width="0.0191%" height="15" fill="rgb(208,69,12)" fg:x="99684" fg:w="149"/><text x="13.0082%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6,360 samples, 0.81%)</title><rect x="11.9634%" y="181" width="0.8140%" height="15" fill="rgb(235,93,37)" fg:x="93474" fg:w="6360"/><text x="12.2134%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (98 samples, 0.01%)</title><rect x="12.7774%" y="181" width="0.0125%" height="15" fill="rgb(213,116,39)" fg:x="99834" fg:w="98"/><text x="13.0274%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (76,503 samples, 9.79%)</title><rect x="11.9045%" y="197" width="9.7913%" height="15" fill="rgb(222,207,29)" fg:x="93014" fg:w="76503"/><text x="12.1545%" y="207.50">esp`&lt;alloc::ve..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (69,575 samples, 8.90%)</title><rect x="12.7912%" y="181" width="8.9046%" height="15" fill="rgb(206,96,30)" fg:x="99942" fg:w="69575"/><text x="13.0412%" y="191.50">libsystem_pla..</text></g><g><title>libsystem_malloc.dylib`free_large (163 samples, 0.02%)</title><rect x="25.7796%" y="117" width="0.0209%" height="15" fill="rgb(218,138,4)" fg:x="201425" fg:w="163"/><text x="26.0296%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (163 samples, 0.02%)</title><rect x="25.7796%" y="101" width="0.0209%" height="15" fill="rgb(250,191,14)" fg:x="201425" fg:w="163"/><text x="26.0296%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (163 samples, 0.02%)</title><rect x="25.7796%" y="85" width="0.0209%" height="15" fill="rgb(239,60,40)" fg:x="201425" fg:w="163"/><text x="26.0296%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (244 samples, 0.03%)</title><rect x="25.7736%" y="181" width="0.0312%" height="15" fill="rgb(206,27,48)" fg:x="201378" fg:w="244"/><text x="26.0236%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (244 samples, 0.03%)</title><rect x="25.7736%" y="165" width="0.0312%" height="15" fill="rgb(225,35,8)" fg:x="201378" fg:w="244"/><text x="26.0236%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (244 samples, 0.03%)</title><rect x="25.7736%" y="149" width="0.0312%" height="15" fill="rgb(250,213,24)" fg:x="201378" fg:w="244"/><text x="26.0236%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (244 samples, 0.03%)</title><rect x="25.7736%" y="133" width="0.0312%" height="15" fill="rgb(247,123,22)" fg:x="201378" fg:w="244"/><text x="26.0236%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (246 samples, 0.03%)</title><rect x="25.8199%" y="165" width="0.0315%" height="15" fill="rgb(231,138,38)" fg:x="201740" fg:w="246"/><text x="26.0699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (133 samples, 0.02%)</title><rect x="25.8514%" y="165" width="0.0170%" height="15" fill="rgb(231,145,46)" fg:x="201986" fg:w="133"/><text x="26.1014%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (127 samples, 0.02%)</title><rect x="25.8522%" y="149" width="0.0163%" height="15" fill="rgb(251,118,11)" fg:x="201992" fg:w="127"/><text x="26.1022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (487 samples, 0.06%)</title><rect x="25.8063%" y="181" width="0.0623%" height="15" fill="rgb(217,147,25)" fg:x="201634" fg:w="487"/><text x="26.0563%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (492 samples, 0.06%)</title><rect x="25.9005%" y="165" width="0.0630%" height="15" fill="rgb(247,81,37)" fg:x="202370" fg:w="492"/><text x="26.1505%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (521 samples, 0.07%)</title><rect x="25.9661%" y="165" width="0.0667%" height="15" fill="rgb(209,12,38)" fg:x="202882" fg:w="521"/><text x="26.2161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (392 samples, 0.05%)</title><rect x="26.0328%" y="165" width="0.0502%" height="15" fill="rgb(227,1,9)" fg:x="203403" fg:w="392"/><text x="26.2828%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (392 samples, 0.05%)</title><rect x="26.0328%" y="149" width="0.0502%" height="15" fill="rgb(248,47,43)" fg:x="203403" fg:w="392"/><text x="26.2828%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1,706 samples, 0.22%)</title><rect x="25.8687%" y="181" width="0.2183%" height="15" fill="rgb(221,10,30)" fg:x="202121" fg:w="1706"/><text x="26.1187%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (161 samples, 0.02%)</title><rect x="26.0870%" y="181" width="0.0206%" height="15" fill="rgb(210,229,1)" fg:x="203827" fg:w="161"/><text x="26.3370%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (146 samples, 0.02%)</title><rect x="26.0889%" y="165" width="0.0187%" height="15" fill="rgb(222,148,37)" fg:x="203842" fg:w="146"/><text x="26.3389%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (291 samples, 0.04%)</title><rect x="26.1076%" y="181" width="0.0372%" height="15" fill="rgb(234,67,33)" fg:x="203988" fg:w="291"/><text x="26.3576%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (291 samples, 0.04%)</title><rect x="26.1076%" y="165" width="0.0372%" height="15" fill="rgb(247,98,35)" fg:x="203988" fg:w="291"/><text x="26.3576%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34,810 samples, 4.46%)</title><rect x="21.6958%" y="197" width="4.4552%" height="15" fill="rgb(247,138,52)" fg:x="169517" fg:w="34810"/><text x="21.9458%" y="207.50">esp`&lt;..</text></g><g><title>libsystem_malloc.dylib`szone_size (614 samples, 0.08%)</title><rect x="26.2025%" y="165" width="0.0786%" height="15" fill="rgb(213,79,30)" fg:x="204729" fg:w="614"/><text x="26.4525%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (584 samples, 0.07%)</title><rect x="26.2063%" y="149" width="0.0747%" height="15" fill="rgb(246,177,23)" fg:x="204759" fg:w="584"/><text x="26.4563%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (858 samples, 0.11%)</title><rect x="26.1744%" y="181" width="0.1098%" height="15" fill="rgb(230,62,27)" fg:x="204510" fg:w="858"/><text x="26.4244%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (349 samples, 0.04%)</title><rect x="26.2882%" y="165" width="0.0447%" height="15" fill="rgb(216,154,8)" fg:x="205399" fg:w="349"/><text x="26.5382%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (466 samples, 0.06%)</title><rect x="26.2868%" y="181" width="0.0596%" height="15" fill="rgb(244,35,45)" fg:x="205388" fg:w="466"/><text x="26.5368%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (660 samples, 0.08%)</title><rect x="26.6033%" y="149" width="0.0845%" height="15" fill="rgb(251,115,12)" fg:x="207861" fg:w="660"/><text x="26.8533%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (384 samples, 0.05%)</title><rect x="26.6878%" y="149" width="0.0491%" height="15" fill="rgb(240,54,50)" fg:x="208521" fg:w="384"/><text x="26.9378%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,067 samples, 0.39%)</title><rect x="26.3464%" y="181" width="0.3925%" height="15" fill="rgb(233,84,52)" fg:x="205854" fg:w="3067"/><text x="26.5964%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,320 samples, 0.30%)</title><rect x="26.4421%" y="165" width="0.2969%" height="15" fill="rgb(207,117,47)" fg:x="206601" fg:w="2320"/><text x="26.6921%" y="175.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,653 samples, 0.60%)</title><rect x="26.1510%" y="197" width="0.5955%" height="15" fill="rgb(249,43,39)" fg:x="204327" fg:w="4653"/><text x="26.4010%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (353 samples, 0.05%)</title><rect x="26.7465%" y="197" width="0.0452%" height="15" fill="rgb(209,38,44)" fg:x="208980" fg:w="353"/><text x="26.9965%" y="207.50"></text></g><g><title>esp`__rdl_dealloc (91 samples, 0.01%)</title><rect x="26.8051%" y="197" width="0.0116%" height="15" fill="rgb(236,212,23)" fg:x="209438" fg:w="91"/><text x="27.0551%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (169 samples, 0.02%)</title><rect x="26.9380%" y="85" width="0.0216%" height="15" fill="rgb(242,79,21)" fg:x="210476" fg:w="169"/><text x="27.1880%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (628 samples, 0.08%)</title><rect x="26.8805%" y="117" width="0.0804%" height="15" fill="rgb(211,96,35)" fg:x="210027" fg:w="628"/><text x="27.1305%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (321 samples, 0.04%)</title><rect x="26.9198%" y="101" width="0.0411%" height="15" fill="rgb(253,215,40)" fg:x="210334" fg:w="321"/><text x="27.1698%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (108 samples, 0.01%)</title><rect x="27.0391%" y="85" width="0.0138%" height="15" fill="rgb(211,81,21)" fg:x="211266" fg:w="108"/><text x="27.2891%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,055 samples, 0.14%)</title><rect x="26.9626%" y="117" width="0.1350%" height="15" fill="rgb(208,190,38)" fg:x="210668" fg:w="1055"/><text x="27.2126%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (925 samples, 0.12%)</title><rect x="26.9792%" y="101" width="0.1184%" height="15" fill="rgb(235,213,38)" fg:x="210798" fg:w="925"/><text x="27.2292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (349 samples, 0.04%)</title><rect x="27.0529%" y="85" width="0.0447%" height="15" fill="rgb(237,122,38)" fg:x="211374" fg:w="349"/><text x="27.3029%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (162 samples, 0.02%)</title><rect x="27.0976%" y="117" width="0.0207%" height="15" fill="rgb(244,218,35)" fg:x="211723" fg:w="162"/><text x="27.3476%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (137 samples, 0.02%)</title><rect x="27.1008%" y="101" width="0.0175%" height="15" fill="rgb(240,68,47)" fg:x="211748" fg:w="137"/><text x="27.3508%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (313 samples, 0.04%)</title><rect x="27.1191%" y="117" width="0.0401%" height="15" fill="rgb(210,16,53)" fg:x="211891" fg:w="313"/><text x="27.3691%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,428 samples, 0.31%)</title><rect x="26.8702%" y="133" width="0.3108%" height="15" fill="rgb(235,124,12)" fg:x="209946" fg:w="2428"/><text x="27.1202%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (170 samples, 0.02%)</title><rect x="27.1592%" y="117" width="0.0218%" height="15" fill="rgb(224,169,11)" fg:x="212204" fg:w="170"/><text x="27.4092%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,574 samples, 0.33%)</title><rect x="26.8543%" y="149" width="0.3294%" height="15" fill="rgb(250,166,2)" fg:x="209822" fg:w="2574"/><text x="27.1043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (201 samples, 0.03%)</title><rect x="27.1849%" y="149" width="0.0257%" height="15" fill="rgb(242,216,29)" fg:x="212405" fg:w="201"/><text x="27.4349%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (181 samples, 0.02%)</title><rect x="27.1874%" y="133" width="0.0232%" height="15" fill="rgb(230,116,27)" fg:x="212425" fg:w="181"/><text x="27.4374%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,872 samples, 0.37%)</title><rect x="26.8433%" y="165" width="0.3676%" height="15" fill="rgb(228,99,48)" fg:x="209736" fg:w="2872"/><text x="27.0933%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,956 samples, 0.38%)</title><rect x="26.8338%" y="181" width="0.3783%" height="15" fill="rgb(253,11,6)" fg:x="209662" fg:w="2956"/><text x="27.0838%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,070 samples, 0.39%)</title><rect x="26.8202%" y="197" width="0.3929%" height="15" fill="rgb(247,143,39)" fg:x="209556" fg:w="3070"/><text x="27.0702%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1,471 samples, 0.19%)</title><rect x="27.3490%" y="165" width="0.1883%" height="15" fill="rgb(236,97,10)" fg:x="213687" fg:w="1471"/><text x="27.5990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (359 samples, 0.05%)</title><rect x="27.5372%" y="165" width="0.0459%" height="15" fill="rgb(233,208,19)" fg:x="215158" fg:w="359"/><text x="27.7872%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (348 samples, 0.04%)</title><rect x="27.5386%" y="149" width="0.0445%" height="15" fill="rgb(216,164,2)" fg:x="215169" fg:w="348"/><text x="27.7886%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1,970 samples, 0.25%)</title><rect x="27.3317%" y="181" width="0.2521%" height="15" fill="rgb(220,129,5)" fg:x="213552" fg:w="1970"/><text x="27.5817%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (570 samples, 0.07%)</title><rect x="27.5838%" y="181" width="0.0730%" height="15" fill="rgb(242,17,10)" fg:x="215522" fg:w="570"/><text x="27.8338%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (570 samples, 0.07%)</title><rect x="27.5838%" y="165" width="0.0730%" height="15" fill="rgb(242,107,0)" fg:x="215522" fg:w="570"/><text x="27.8338%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (570 samples, 0.07%)</title><rect x="27.5838%" y="149" width="0.0730%" height="15" fill="rgb(251,28,31)" fg:x="215522" fg:w="570"/><text x="27.8338%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (6,240 samples, 0.80%)</title><rect x="27.7711%" y="165" width="0.7986%" height="15" fill="rgb(233,223,10)" fg:x="216985" fg:w="6240"/><text x="28.0211%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6,196 samples, 0.79%)</title><rect x="27.7767%" y="149" width="0.7930%" height="15" fill="rgb(215,21,27)" fg:x="217029" fg:w="6196"/><text x="28.0267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (87,559 samples, 11.21%)</title><rect x="28.5697%" y="165" width="11.2063%" height="15" fill="rgb(232,23,21)" fg:x="223225" fg:w="87559"/><text x="28.8197%" y="175.50">libsystem_malloc..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (14,990 samples, 1.92%)</title><rect x="39.7858%" y="165" width="1.9185%" height="15" fill="rgb(244,5,23)" fg:x="310860" fg:w="14990"/><text x="40.0358%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (876 samples, 0.11%)</title><rect x="41.7043%" y="165" width="0.1121%" height="15" fill="rgb(226,81,46)" fg:x="325850" fg:w="876"/><text x="41.9543%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (849 samples, 0.11%)</title><rect x="41.7077%" y="149" width="0.1087%" height="15" fill="rgb(247,70,30)" fg:x="325877" fg:w="849"/><text x="41.9577%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,526 samples, 0.20%)</title><rect x="41.8223%" y="149" width="0.1953%" height="15" fill="rgb(212,68,19)" fg:x="326772" fg:w="1526"/><text x="42.0723%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (1,584 samples, 0.20%)</title><rect x="41.8164%" y="165" width="0.2027%" height="15" fill="rgb(240,187,13)" fg:x="326726" fg:w="1584"/><text x="42.0664%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8,446 samples, 1.08%)</title><rect x="42.0544%" y="149" width="1.0810%" height="15" fill="rgb(223,113,26)" fg:x="328586" fg:w="8446"/><text x="42.3044%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (199 samples, 0.03%)</title><rect x="43.1354%" y="149" width="0.0255%" height="15" fill="rgb(206,192,2)" fg:x="337032" fg:w="199"/><text x="43.3854%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (121,179 samples, 15.51%)</title><rect x="27.6568%" y="181" width="15.5092%" height="15" fill="rgb(241,108,4)" fg:x="216092" fg:w="121179"/><text x="27.9068%" y="191.50">libsystem_malloc.dylib`f..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (8,960 samples, 1.15%)</title><rect x="42.0192%" y="165" width="1.1468%" height="15" fill="rgb(247,173,49)" fg:x="328311" fg:w="8960"/><text x="42.2692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (250 samples, 0.03%)</title><rect x="43.1661%" y="165" width="0.0320%" height="15" fill="rgb(224,114,35)" fg:x="337272" fg:w="250"/><text x="43.4161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (252 samples, 0.03%)</title><rect x="43.1660%" y="181" width="0.0323%" height="15" fill="rgb(245,159,27)" fg:x="337271" fg:w="252"/><text x="43.4160%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (343 samples, 0.04%)</title><rect x="43.1982%" y="181" width="0.0439%" height="15" fill="rgb(245,172,44)" fg:x="337523" fg:w="343"/><text x="43.4482%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (343 samples, 0.04%)</title><rect x="43.1982%" y="165" width="0.0439%" height="15" fill="rgb(236,23,11)" fg:x="337523" fg:w="343"/><text x="43.4482%" y="175.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (125,272 samples, 16.03%)</title><rect x="27.2205%" y="197" width="16.0331%" height="15" fill="rgb(205,117,38)" fg:x="212683" fg:w="125272"/><text x="27.4705%" y="207.50">esp`core::ptr::drop_in_pl..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (118 samples, 0.02%)</title><rect x="43.2535%" y="197" width="0.0151%" height="15" fill="rgb(237,72,25)" fg:x="337955" fg:w="118"/><text x="43.5035%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,021 samples, 0.13%)</title><rect x="51.7160%" y="181" width="0.1307%" height="15" fill="rgb(244,70,9)" fg:x="404075" fg:w="1021"/><text x="51.9660%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (346 samples, 0.04%)</title><rect x="51.9112%" y="133" width="0.0443%" height="15" fill="rgb(217,125,39)" fg:x="405600" fg:w="346"/><text x="52.1612%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (327 samples, 0.04%)</title><rect x="51.9136%" y="117" width="0.0419%" height="15" fill="rgb(235,36,10)" fg:x="405619" fg:w="327"/><text x="52.1636%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (84 samples, 0.01%)</title><rect x="51.9447%" y="101" width="0.0108%" height="15" fill="rgb(251,123,47)" fg:x="405862" fg:w="84"/><text x="52.1947%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (371 samples, 0.05%)</title><rect x="51.9081%" y="149" width="0.0475%" height="15" fill="rgb(221,13,13)" fg:x="405576" fg:w="371"/><text x="52.1581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (202 samples, 0.03%)</title><rect x="52.0226%" y="117" width="0.0259%" height="15" fill="rgb(238,131,9)" fg:x="406471" fg:w="202"/><text x="52.2726%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (131 samples, 0.02%)</title><rect x="52.1523%" y="85" width="0.0168%" height="15" fill="rgb(211,50,8)" fg:x="407484" fg:w="131"/><text x="52.4023%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (751 samples, 0.10%)</title><rect x="52.0901%" y="101" width="0.0961%" height="15" fill="rgb(245,182,24)" fg:x="406998" fg:w="751"/><text x="52.3401%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (126 samples, 0.02%)</title><rect x="52.1701%" y="85" width="0.0161%" height="15" fill="rgb(242,14,37)" fg:x="407623" fg:w="126"/><text x="52.4201%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,179 samples, 0.15%)</title><rect x="52.4155%" y="69" width="0.1509%" height="15" fill="rgb(246,228,12)" fg:x="409541" fg:w="1179"/><text x="52.6655%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (491 samples, 0.06%)</title><rect x="52.5664%" y="69" width="0.0628%" height="15" fill="rgb(213,55,15)" fg:x="410720" fg:w="491"/><text x="52.8164%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (847 samples, 0.11%)</title><rect x="52.6435%" y="53" width="0.1084%" height="15" fill="rgb(209,9,3)" fg:x="411322" fg:w="847"/><text x="52.8935%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3,717 samples, 0.48%)</title><rect x="52.2777%" y="85" width="0.4757%" height="15" fill="rgb(230,59,30)" fg:x="408464" fg:w="3717"/><text x="52.5277%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (896 samples, 0.11%)</title><rect x="52.6388%" y="69" width="0.1147%" height="15" fill="rgb(209,121,21)" fg:x="411285" fg:w="896"/><text x="52.8888%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4,436 samples, 0.57%)</title><rect x="52.1862%" y="101" width="0.5677%" height="15" fill="rgb(220,109,13)" fg:x="407749" fg:w="4436"/><text x="52.4362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (206 samples, 0.03%)</title><rect x="52.7600%" y="101" width="0.0264%" height="15" fill="rgb(232,18,1)" fg:x="412232" fg:w="206"/><text x="53.0100%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1,999 samples, 0.26%)</title><rect x="52.9123%" y="53" width="0.2558%" height="15" fill="rgb(215,41,42)" fg:x="413422" fg:w="1999"/><text x="53.1623%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (271 samples, 0.03%)</title><rect x="53.1681%" y="53" width="0.0347%" height="15" fill="rgb(224,123,36)" fg:x="415421" fg:w="271"/><text x="53.4181%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3,468 samples, 0.44%)</title><rect x="52.7994%" y="85" width="0.4439%" height="15" fill="rgb(240,125,3)" fg:x="412540" fg:w="3468"/><text x="53.0494%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2,883 samples, 0.37%)</title><rect x="52.8742%" y="69" width="0.3690%" height="15" fill="rgb(205,98,50)" fg:x="413125" fg:w="2883"/><text x="53.1242%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (316 samples, 0.04%)</title><rect x="53.2028%" y="53" width="0.0404%" height="15" fill="rgb(205,185,37)" fg:x="415692" fg:w="316"/><text x="53.4528%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (348 samples, 0.04%)</title><rect x="53.3532%" y="69" width="0.0445%" height="15" fill="rgb(238,207,15)" fg:x="416867" fg:w="348"/><text x="53.6032%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5,557 samples, 0.71%)</title><rect x="52.7863%" y="101" width="0.7112%" height="15" fill="rgb(213,199,42)" fg:x="412438" fg:w="5557"/><text x="53.0363%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,981 samples, 0.25%)</title><rect x="53.2440%" y="85" width="0.2535%" height="15" fill="rgb(235,201,11)" fg:x="416014" fg:w="1981"/><text x="53.4940%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (776 samples, 0.10%)</title><rect x="53.3982%" y="69" width="0.0993%" height="15" fill="rgb(207,46,11)" fg:x="417219" fg:w="776"/><text x="53.6482%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (101 samples, 0.01%)</title><rect x="53.4846%" y="53" width="0.0129%" height="15" fill="rgb(241,35,35)" fg:x="417894" fg:w="101"/><text x="53.7346%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (314 samples, 0.04%)</title><rect x="53.4975%" y="101" width="0.0402%" height="15" fill="rgb(243,32,47)" fg:x="417995" fg:w="314"/><text x="53.7475%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (239 samples, 0.03%)</title><rect x="53.5071%" y="85" width="0.0306%" height="15" fill="rgb(247,202,23)" fg:x="418070" fg:w="239"/><text x="53.7571%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (707 samples, 0.09%)</title><rect x="53.5404%" y="101" width="0.0905%" height="15" fill="rgb(219,102,11)" fg:x="418330" fg:w="707"/><text x="53.7904%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (17,970 samples, 2.30%)</title><rect x="52.0563%" y="117" width="2.2999%" height="15" fill="rgb(243,110,44)" fg:x="406734" fg:w="17970"/><text x="52.3063%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5,667 samples, 0.73%)</title><rect x="53.6309%" y="101" width="0.7253%" height="15" fill="rgb(222,74,54)" fg:x="419037" fg:w="5667"/><text x="53.8809%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18,486 samples, 2.37%)</title><rect x="51.9997%" y="133" width="2.3660%" height="15" fill="rgb(216,99,12)" fg:x="406292" fg:w="18486"/><text x="52.2497%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`small_size (407 samples, 0.05%)</title><rect x="54.3657%" y="133" width="0.0521%" height="15" fill="rgb(226,22,26)" fg:x="424778" fg:w="407"/><text x="54.6157%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1,224 samples, 0.16%)</title><rect x="54.4203%" y="133" width="0.1567%" height="15" fill="rgb(217,163,10)" fg:x="425205" fg:w="1224"/><text x="54.6703%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1,170 samples, 0.15%)</title><rect x="54.4272%" y="117" width="0.1497%" height="15" fill="rgb(213,25,53)" fg:x="425259" fg:w="1170"/><text x="54.6772%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20,480 samples, 2.62%)</title><rect x="51.9581%" y="149" width="2.6212%" height="15" fill="rgb(252,105,26)" fg:x="405967" fg:w="20480"/><text x="52.2081%" y="159.50">li..</text></g><g><title>esp`alloc::raw_vec::finish_grow (21,134 samples, 2.70%)</title><rect x="51.8827%" y="165" width="2.7049%" height="15" fill="rgb(220,39,43)" fg:x="405378" fg:w="21134"/><text x="52.1327%" y="175.50">es..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21,465 samples, 2.75%)</title><rect x="51.8466%" y="181" width="2.7472%" height="15" fill="rgb(229,68,48)" fg:x="405096" fg:w="21465"/><text x="52.0966%" y="191.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_doub (219 samples, 0.03%)</title><rect x="54.5959%" y="181" width="0.0280%" height="15" fill="rgb(252,8,32)" fg:x="426577" fg:w="219"/><text x="54.8459%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (20,457 samples, 2.62%)</title><rect x="54.6239%" y="181" width="2.6182%" height="15" fill="rgb(223,20,43)" fg:x="426796" fg:w="20457"/><text x="54.8739%" y="191.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_doub (15,399 samples, 1.97%)</title><rect x="55.2713%" y="165" width="1.9709%" height="15" fill="rgb(229,81,49)" fg:x="431854" fg:w="15399"/><text x="55.5213%" y="175.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_sing (1,333 samples, 0.17%)</title><rect x="57.2422%" y="181" width="0.1706%" height="15" fill="rgb(236,28,36)" fg:x="447253" fg:w="1333"/><text x="57.4922%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (570 samples, 0.07%)</title><rect x="57.3398%" y="165" width="0.0730%" height="15" fill="rgb(249,185,26)" fg:x="448016" fg:w="570"/><text x="57.5898%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,225 samples, 0.41%)</title><rect x="58.0422%" y="165" width="0.4128%" height="15" fill="rgb(249,174,33)" fg:x="453504" fg:w="3225"/><text x="58.2922%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (147 samples, 0.02%)</title><rect x="62.2916%" y="149" width="0.0188%" height="15" fill="rgb(233,201,37)" fg:x="486706" fg:w="147"/><text x="62.5416%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (593 samples, 0.08%)</title><rect x="63.6465%" y="133" width="0.0759%" height="15" fill="rgb(221,78,26)" fg:x="497292" fg:w="593"/><text x="63.8965%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (8,167 samples, 1.05%)</title><rect x="63.7223%" y="133" width="1.0453%" height="15" fill="rgb(250,127,30)" fg:x="497885" fg:w="8167"/><text x="63.9723%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,923 samples, 0.50%)</title><rect x="64.2655%" y="117" width="0.5021%" height="15" fill="rgb(230,49,44)" fg:x="502129" fg:w="3923"/><text x="64.5155%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (528 samples, 0.07%)</title><rect x="64.7676%" y="133" width="0.0676%" height="15" fill="rgb(229,67,23)" fg:x="506052" fg:w="528"/><text x="65.0176%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (528 samples, 0.07%)</title><rect x="64.7676%" y="117" width="0.0676%" height="15" fill="rgb(249,83,47)" fg:x="506052" fg:w="528"/><text x="65.0176%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (58,698 samples, 7.51%)</title><rect x="57.4128%" y="181" width="7.5125%" height="15" fill="rgb(215,43,3)" fg:x="448586" fg:w="58698"/><text x="57.6628%" y="191.50">esp`hashbr..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (50,555 samples, 6.47%)</title><rect x="58.4550%" y="165" width="6.4703%" height="15" fill="rgb(238,154,13)" fg:x="456729" fg:w="50555"/><text x="58.7050%" y="175.50">esp`hash..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20,431 samples, 2.61%)</title><rect x="62.3104%" y="149" width="2.6149%" height="15" fill="rgb(219,56,2)" fg:x="486853" fg:w="20431"/><text x="62.5604%" y="159.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (650 samples, 0.08%)</title><rect x="64.8421%" y="133" width="0.0832%" height="15" fill="rgb(233,0,4)" fg:x="506634" fg:w="650"/><text x="65.0921%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (650 samples, 0.08%)</title><rect x="64.8421%" y="117" width="0.0832%" height="15" fill="rgb(235,30,7)" fg:x="506634" fg:w="650"/><text x="65.0921%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (650 samples, 0.08%)</title><rect x="64.8421%" y="101" width="0.0832%" height="15" fill="rgb(250,79,13)" fg:x="506634" fg:w="650"/><text x="65.0921%" y="111.50"></text></g><g><title>esp`hashbrown::map::make_hash (10,421 samples, 1.33%)</title><rect x="64.9253%" y="181" width="1.3337%" height="15" fill="rgb(211,146,34)" fg:x="507284" fg:w="10421"/><text x="65.1753%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,931 samples, 0.50%)</title><rect x="65.7559%" y="165" width="0.5031%" height="15" fill="rgb(228,22,38)" fg:x="513774" fg:w="3931"/><text x="66.0059%" y="175.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (179,772 samples, 23.01%)</title><rect x="43.2689%" y="197" width="23.0083%" height="15" fill="rgb(235,168,5)" fg:x="338075" fg:w="179772"/><text x="43.5189%" y="207.50">esp`esp::var::ham_gen::OffDiagElems:..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (142 samples, 0.02%)</title><rect x="66.2590%" y="181" width="0.0182%" height="15" fill="rgb(221,155,16)" fg:x="517705" fg:w="142"/><text x="66.5090%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (419 samples, 0.05%)</title><rect x="68.4306%" y="181" width="0.0536%" height="15" fill="rgb(215,215,53)" fg:x="534672" fg:w="419"/><text x="68.6806%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (712 samples, 0.09%)</title><rect x="80.8345%" y="165" width="0.0911%" height="15" fill="rgb(223,4,10)" fg:x="631588" fg:w="712"/><text x="81.0845%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (317 samples, 0.04%)</title><rect x="80.9943%" y="69" width="0.0406%" height="15" fill="rgb(234,103,6)" fg:x="632837" fg:w="317"/><text x="81.2443%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1,148 samples, 0.15%)</title><rect x="80.9543%" y="85" width="0.1469%" height="15" fill="rgb(227,97,0)" fg:x="632524" fg:w="1148"/><text x="81.2043%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (509 samples, 0.07%)</title><rect x="81.0360%" y="69" width="0.0651%" height="15" fill="rgb(234,150,53)" fg:x="633163" fg:w="509"/><text x="81.2860%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (126 samples, 0.02%)</title><rect x="81.1236%" y="37" width="0.0161%" height="15" fill="rgb(228,201,54)" fg:x="633847" fg:w="126"/><text x="81.3736%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (304 samples, 0.04%)</title><rect x="81.1012%" y="85" width="0.0389%" height="15" fill="rgb(222,22,37)" fg:x="633672" fg:w="304"/><text x="81.3512%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (299 samples, 0.04%)</title><rect x="81.1018%" y="69" width="0.0383%" height="15" fill="rgb(237,53,32)" fg:x="633677" fg:w="299"/><text x="81.3518%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (133 samples, 0.02%)</title><rect x="81.1231%" y="53" width="0.0170%" height="15" fill="rgb(233,25,53)" fg:x="633843" fg:w="133"/><text x="81.3731%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (393 samples, 0.05%)</title><rect x="81.1418%" y="85" width="0.0503%" height="15" fill="rgb(210,40,34)" fg:x="633989" fg:w="393"/><text x="81.3918%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (304 samples, 0.04%)</title><rect x="81.1532%" y="69" width="0.0389%" height="15" fill="rgb(241,220,44)" fg:x="634078" fg:w="304"/><text x="81.4032%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (113 samples, 0.01%)</title><rect x="81.2250%" y="37" width="0.0145%" height="15" fill="rgb(235,28,35)" fg:x="634639" fg:w="113"/><text x="81.4750%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (460 samples, 0.06%)</title><rect x="81.1933%" y="69" width="0.0589%" height="15" fill="rgb(210,56,17)" fg:x="634392" fg:w="460"/><text x="81.4433%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (336 samples, 0.04%)</title><rect x="81.2092%" y="53" width="0.0430%" height="15" fill="rgb(224,130,29)" fg:x="634516" fg:w="336"/><text x="81.4592%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (100 samples, 0.01%)</title><rect x="81.2394%" y="37" width="0.0128%" height="15" fill="rgb(235,212,8)" fg:x="634752" fg:w="100"/><text x="81.4894%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (473 samples, 0.06%)</title><rect x="81.1921%" y="85" width="0.0605%" height="15" fill="rgb(223,33,50)" fg:x="634382" fg:w="473"/><text x="81.4421%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7,615 samples, 0.97%)</title><rect x="80.9517%" y="101" width="0.9746%" height="15" fill="rgb(219,149,13)" fg:x="632504" fg:w="7615"/><text x="81.2017%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5,248 samples, 0.67%)</title><rect x="81.2546%" y="85" width="0.6717%" height="15" fill="rgb(250,156,29)" fg:x="634871" fg:w="5248"/><text x="81.5046%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7,683 samples, 0.98%)</title><rect x="80.9450%" y="117" width="0.9833%" height="15" fill="rgb(216,193,19)" fg:x="632452" fg:w="7683"/><text x="81.1950%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (264 samples, 0.03%)</title><rect x="81.9284%" y="117" width="0.0338%" height="15" fill="rgb(216,135,14)" fg:x="640135" fg:w="264"/><text x="82.1784%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (168 samples, 0.02%)</title><rect x="81.9625%" y="117" width="0.0215%" height="15" fill="rgb(241,47,5)" fg:x="640402" fg:w="168"/><text x="82.2125%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (159 samples, 0.02%)</title><rect x="81.9637%" y="101" width="0.0203%" height="15" fill="rgb(233,42,35)" fg:x="640411" fg:w="159"/><text x="82.2137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8,208 samples, 1.05%)</title><rect x="80.9339%" y="133" width="1.0505%" height="15" fill="rgb(231,13,6)" fg:x="632365" fg:w="8208"/><text x="81.1839%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (8,253 samples, 1.06%)</title><rect x="80.9312%" y="149" width="1.0563%" height="15" fill="rgb(207,181,40)" fg:x="632344" fg:w="8253"/><text x="81.1812%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8,315 samples, 1.06%)</title><rect x="80.9256%" y="165" width="1.0642%" height="15" fill="rgb(254,173,49)" fg:x="632300" fg:w="8315"/><text x="81.1756%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (92 samples, 0.01%)</title><rect x="81.9913%" y="165" width="0.0118%" height="15" fill="rgb(221,1,38)" fg:x="640627" fg:w="92"/><text x="82.2413%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (12,122 samples, 1.55%)</title><rect x="82.0031%" y="165" width="1.5514%" height="15" fill="rgb(206,124,46)" fg:x="640719" fg:w="12122"/><text x="82.2531%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (9,389 samples, 1.20%)</title><rect x="82.3529%" y="149" width="1.2017%" height="15" fill="rgb(249,21,11)" fg:x="643452" fg:w="9389"/><text x="82.6029%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4,629 samples, 0.59%)</title><rect x="82.9621%" y="133" width="0.5924%" height="15" fill="rgb(222,201,40)" fg:x="648212" fg:w="4629"/><text x="83.2121%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (2,044 samples, 0.26%)</title><rect x="83.5546%" y="165" width="0.2616%" height="15" fill="rgb(235,61,29)" fg:x="652841" fg:w="2044"/><text x="83.8046%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,332 samples, 0.17%)</title><rect x="83.6457%" y="149" width="0.1705%" height="15" fill="rgb(219,207,3)" fg:x="653553" fg:w="1332"/><text x="83.8957%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,253 samples, 0.16%)</title><rect x="84.0428%" y="149" width="0.1604%" height="15" fill="rgb(222,56,46)" fg:x="656656" fg:w="1253"/><text x="84.2928%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (232 samples, 0.03%)</title><rect x="87.0156%" y="117" width="0.0297%" height="15" fill="rgb(239,76,54)" fg:x="679883" fg:w="232"/><text x="87.2656%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (4,372 samples, 0.56%)</title><rect x="87.0452%" y="117" width="0.5596%" height="15" fill="rgb(231,124,27)" fg:x="680115" fg:w="4372"/><text x="87.2952%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,768 samples, 0.23%)</title><rect x="87.3785%" y="101" width="0.2263%" height="15" fill="rgb(249,195,6)" fg:x="682719" fg:w="1768"/><text x="87.6285%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (277 samples, 0.04%)</title><rect x="87.6048%" y="117" width="0.0355%" height="15" fill="rgb(237,174,47)" fg:x="684487" fg:w="277"/><text x="87.8548%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (276 samples, 0.04%)</title><rect x="87.6049%" y="101" width="0.0353%" height="15" fill="rgb(206,201,31)" fg:x="684488" fg:w="276"/><text x="87.8549%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (30,149 samples, 3.86%)</title><rect x="83.8162%" y="165" width="3.8587%" height="15" fill="rgb(231,57,52)" fg:x="654885" fg:w="30149"/><text x="84.0662%" y="175.50">esp`..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (27,125 samples, 3.47%)</title><rect x="84.2032%" y="149" width="3.4716%" height="15" fill="rgb(248,177,22)" fg:x="657909" fg:w="27125"/><text x="84.4532%" y="159.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10,563 samples, 1.35%)</title><rect x="86.3229%" y="133" width="1.3519%" height="15" fill="rgb(215,211,37)" fg:x="674471" fg:w="10563"/><text x="86.5729%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (267 samples, 0.03%)</title><rect x="87.6406%" y="117" width="0.0342%" height="15" fill="rgb(241,128,51)" fg:x="684767" fg:w="267"/><text x="87.8906%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (267 samples, 0.03%)</title><rect x="87.6406%" y="101" width="0.0342%" height="15" fill="rgb(227,165,31)" fg:x="684767" fg:w="267"/><text x="87.8906%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (267 samples, 0.03%)</title><rect x="87.6406%" y="85" width="0.0342%" height="15" fill="rgb(228,167,24)" fg:x="684767" fg:w="267"/><text x="87.8906%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (9,746 samples, 1.25%)</title><rect x="87.6748%" y="165" width="1.2474%" height="15" fill="rgb(228,143,12)" fg:x="685034" fg:w="9746"/><text x="87.9248%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,777 samples, 0.48%)</title><rect x="88.4388%" y="149" width="0.4834%" height="15" fill="rgb(249,149,8)" fg:x="691003" fg:w="3777"/><text x="88.6888%" y="159.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (159,665 samples, 20.43%)</title><rect x="68.4938%" y="181" width="20.4349%" height="15" fill="rgb(243,35,44)" fg:x="535166" fg:w="159665"/><text x="68.7438%" y="191.50">esp`esp::var::ham_gen::OffDiagEl..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (85 samples, 0.01%)</title><rect x="88.9287%" y="181" width="0.0109%" height="15" fill="rgb(246,89,9)" fg:x="694831" fg:w="85"/><text x="89.1787%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el_and_spin_flipped (186,501 samples, 23.87%)</title><rect x="66.2772%" y="197" width="23.8695%" height="15" fill="rgb(233,213,13)" fg:x="517847" fg:w="186501"/><text x="66.5272%" y="207.50">esp`esp::var::ham_gen::OffDiagElems::a..</text></g><g><title>esp`hashbrown::map::make_hash (9,432 samples, 1.21%)</title><rect x="88.9396%" y="181" width="1.2072%" height="15" fill="rgb(233,141,41)" fg:x="694916" fg:w="9432"/><text x="89.1896%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (5,536 samples, 0.71%)</title><rect x="89.4382%" y="165" width="0.7085%" height="15" fill="rgb(239,167,4)" fg:x="698812" fg:w="5536"/><text x="89.6882%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (239 samples, 0.03%)</title><rect x="90.2591%" y="181" width="0.0306%" height="15" fill="rgb(209,217,16)" fg:x="705226" fg:w="239"/><text x="90.5091%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (754 samples, 0.10%)</title><rect x="90.4256%" y="149" width="0.0965%" height="15" fill="rgb(219,88,35)" fg:x="706527" fg:w="754"/><text x="90.6756%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (322 samples, 0.04%)</title><rect x="90.4809%" y="133" width="0.0412%" height="15" fill="rgb(220,193,23)" fg:x="706959" fg:w="322"/><text x="90.7309%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (152 samples, 0.02%)</title><rect x="90.5235%" y="133" width="0.0195%" height="15" fill="rgb(230,90,52)" fg:x="707292" fg:w="152"/><text x="90.7735%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (146 samples, 0.02%)</title><rect x="90.5243%" y="117" width="0.0187%" height="15" fill="rgb(252,106,19)" fg:x="707298" fg:w="146"/><text x="90.7743%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (230 samples, 0.03%)</title><rect x="90.5431%" y="133" width="0.0294%" height="15" fill="rgb(206,74,20)" fg:x="707445" fg:w="230"/><text x="90.7931%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (397 samples, 0.05%)</title><rect x="90.5221%" y="149" width="0.0508%" height="15" fill="rgb(230,138,44)" fg:x="707281" fg:w="397"/><text x="90.7721%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,126 samples, 0.27%)</title><rect x="90.3182%" y="165" width="0.2721%" height="15" fill="rgb(235,182,43)" fg:x="705688" fg:w="2126"/><text x="90.5682%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,363 samples, 0.30%)</title><rect x="90.2897%" y="181" width="0.3024%" height="15" fill="rgb(242,16,51)" fg:x="705465" fg:w="2363"/><text x="90.5397%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,484 samples, 0.45%)</title><rect x="90.1467%" y="197" width="0.4459%" height="15" fill="rgb(248,9,4)" fg:x="704348" fg:w="3484"/><text x="90.3967%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (7,917 samples, 1.01%)</title><rect x="90.5926%" y="197" width="1.0133%" height="15" fill="rgb(210,31,22)" fg:x="707832" fg:w="7917"/><text x="90.8426%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,144 samples, 0.40%)</title><rect x="91.2035%" y="181" width="0.4024%" height="15" fill="rgb(239,54,39)" fg:x="712605" fg:w="3144"/><text x="91.4535%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (5,994 samples, 0.77%)</title><rect x="91.6389%" y="181" width="0.7671%" height="15" fill="rgb(230,99,41)" fg:x="716007" fg:w="5994"/><text x="91.8889%" y="191.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (54,757 samples, 7.01%)</title><rect x="91.6087%" y="197" width="7.0081%" height="15" fill="rgb(253,106,12)" fg:x="715771" fg:w="54757"/><text x="91.8587%" y="207.50">esp`sprs:..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (48,527 samples, 6.21%)</title><rect x="92.4061%" y="181" width="6.2108%" height="15" fill="rgb(213,46,41)" fg:x="722001" fg:w="48527"/><text x="92.6561%" y="191.50">esp`sprs..</text></g><g><title>esp`core::slice::sort::recurse (24,468 samples, 3.13%)</title><rect x="95.4853%" y="165" width="3.1316%" height="15" fill="rgb(215,133,35)" fg:x="746060" fg:w="24468"/><text x="95.7353%" y="175.50">esp..</text></g><g><title>esp`core::slice::sort::recurse (18,998 samples, 2.43%)</title><rect x="96.1854%" y="149" width="2.4315%" height="15" fill="rgb(213,28,5)" fg:x="751530" fg:w="18998"/><text x="96.4354%" y="159.50">es..</text></g><g><title>esp`core::slice::sort::recurse (10,071 samples, 1.29%)</title><rect x="97.3279%" y="133" width="1.2889%" height="15" fill="rgb(215,77,49)" fg:x="760457" fg:w="10071"/><text x="97.5779%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (2,863 samples, 0.37%)</title><rect x="98.2504%" y="117" width="0.3664%" height="15" fill="rgb(248,100,22)" fg:x="767665" fg:w="2863"/><text x="98.5004%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (325 samples, 0.04%)</title><rect x="98.5753%" y="101" width="0.0416%" height="15" fill="rgb(208,67,9)" fg:x="770203" fg:w="325"/><text x="98.8253%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,073 samples, 0.27%)</title><rect x="98.6541%" y="181" width="0.2653%" height="15" fill="rgb(219,133,21)" fg:x="770819" fg:w="2073"/><text x="98.9041%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,966 samples, 0.25%)</title><rect x="98.6678%" y="165" width="0.2516%" height="15" fill="rgb(246,46,29)" fg:x="770926" fg:w="1966"/><text x="98.9178%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (735 samples, 0.09%)</title><rect x="98.8253%" y="149" width="0.0941%" height="15" fill="rgb(246,185,52)" fg:x="772157" fg:w="735"/><text x="99.0753%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (113 samples, 0.01%)</title><rect x="98.9050%" y="133" width="0.0145%" height="15" fill="rgb(252,136,11)" fg:x="772779" fg:w="113"/><text x="99.1550%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,279 samples, 0.29%)</title><rect x="98.6290%" y="197" width="0.2917%" height="15" fill="rgb(219,138,53)" fg:x="770623" fg:w="2279"/><text x="98.8790%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (164 samples, 0.02%)</title><rect x="98.9308%" y="197" width="0.0210%" height="15" fill="rgb(211,51,23)" fg:x="772981" fg:w="164"/><text x="99.1808%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (98 samples, 0.01%)</title><rect x="98.9650%" y="197" width="0.0125%" height="15" fill="rgb(247,221,28)" fg:x="773248" fg:w="98"/><text x="99.2150%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (703,259 samples, 90.01%)</title><rect x="8.9810%" y="213" width="90.0074%" height="15" fill="rgb(251,222,45)" fg:x="70172" fg:w="703259"/><text x="9.2310%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (148 samples, 0.02%)</title><rect x="98.9887%" y="213" width="0.0189%" height="15" fill="rgb(217,162,53)" fg:x="773433" fg:w="148"/><text x="99.2387%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (773,638 samples, 99.01%)</title><rect x="0.0004%" y="229" width="99.0149%" height="15" fill="rgb(229,93,14)" fg:x="3" fg:w="773638"/><text x="0.2504%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`esp::ham::Ham::ham_sing (684 samples, 0.09%)</title><rect x="99.1826%" y="213" width="0.0875%" height="15" fill="rgb(209,67,49)" fg:x="774948" fg:w="684"/><text x="99.4326%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (337 samples, 0.04%)</title><rect x="99.2270%" y="197" width="0.0431%" height="15" fill="rgb(213,87,29)" fg:x="775295" fg:w="337"/><text x="99.4770%" y="207.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (305 samples, 0.04%)</title><rect x="99.2701%" y="213" width="0.0390%" height="15" fill="rgb(205,151,52)" fg:x="775632" fg:w="305"/><text x="99.5201%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (279 samples, 0.04%)</title><rect x="99.3091%" y="213" width="0.0357%" height="15" fill="rgb(253,215,39)" fg:x="775937" fg:w="279"/><text x="99.5591%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (183 samples, 0.02%)</title><rect x="99.3214%" y="197" width="0.0234%" height="15" fill="rgb(221,220,41)" fg:x="776033" fg:w="183"/><text x="99.5714%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (92 samples, 0.01%)</title><rect x="99.3448%" y="213" width="0.0118%" height="15" fill="rgb(218,133,21)" fg:x="776216" fg:w="92"/><text x="99.5948%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,110 samples, 0.40%)</title><rect x="99.3578%" y="213" width="0.3980%" height="15" fill="rgb(221,193,43)" fg:x="776317" fg:w="3110"/><text x="99.6078%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (385 samples, 0.05%)</title><rect x="99.7065%" y="197" width="0.0493%" height="15" fill="rgb(240,128,52)" fg:x="779042" fg:w="385"/><text x="99.9565%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (90 samples, 0.01%)</title><rect x="99.7919%" y="165" width="0.0115%" height="15" fill="rgb(253,114,12)" fg:x="779709" fg:w="90"/><text x="100.0419%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (409 samples, 0.05%)</title><rect x="99.7558%" y="213" width="0.0523%" height="15" fill="rgb(215,223,47)" fg:x="779427" fg:w="409"/><text x="100.0058%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (343 samples, 0.04%)</title><rect x="99.7642%" y="197" width="0.0439%" height="15" fill="rgb(248,225,23)" fg:x="779493" fg:w="343"/><text x="100.0142%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (270 samples, 0.03%)</title><rect x="99.7736%" y="181" width="0.0346%" height="15" fill="rgb(250,108,0)" fg:x="779566" fg:w="270"/><text x="100.0236%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (900 samples, 0.12%)</title><rect x="99.8081%" y="213" width="0.1152%" height="15" fill="rgb(228,208,7)" fg:x="779836" fg:w="900"/><text x="100.0581%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (411 samples, 0.05%)</title><rect x="99.8707%" y="197" width="0.0526%" height="15" fill="rgb(244,45,10)" fg:x="780325" fg:w="411"/><text x="100.1207%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (7,103 samples, 0.91%)</title><rect x="99.0153%" y="229" width="0.9091%" height="15" fill="rgb(207,125,25)" fg:x="773641" fg:w="7103"/><text x="99.2653%" y="239.50"></text></g><g><title>esp`esp::var::variational (780,763 samples, 99.93%)</title><rect x="0.0000%" y="245" width="99.9268%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="780763"/><text x="0.2500%" y="255.50">esp`esp::var::variational</text></g><g><title>esp`main (780,847 samples, 99.94%)</title><rect x="0.0000%" y="325" width="99.9375%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="780847"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (780,847 samples, 99.94%)</title><rect x="0.0000%" y="309" width="99.9375%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="780847"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (780,847 samples, 99.94%)</title><rect x="0.0000%" y="293" width="99.9375%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="780847"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (780,847 samples, 99.94%)</title><rect x="0.0000%" y="277" width="99.9375%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="780847"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (780,847 samples, 99.94%)</title><rect x="0.0000%" y="261" width="99.9375%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="780847"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>all (781,335 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="781335"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (781,335 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="781335"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (781,335 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="781335"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (488 samples, 0.06%)</title><rect x="99.9375%" y="325" width="0.0625%" height="15" fill="rgb(207,178,40)" fg:x="780847" fg:w="488"/><text x="100.1875%" y="335.50"></text></g></svg></svg>