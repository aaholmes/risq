<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="4327"><g><title>esp`esp::ham::Ham::ham_sing (1 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0231%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (143 samples, 3.30%)</title><rect x="0.7164%" y="181" width="3.3048%" height="15" fill="rgb(217,0,24)" fg:x="31" fg:w="143"/><text x="0.9664%" y="191.50">esp..</text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (1 samples, 0.02%)</title><rect x="3.9982%" y="165" width="0.0231%" height="15" fill="rgb(221,193,54)" fg:x="173" fg:w="1"/><text x="4.2482%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="3.9982%" y="149" width="0.0231%" height="15" fill="rgb(248,212,6)" fg:x="173" fg:w="1"/><text x="4.2482%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.05%)</title><rect x="4.0213%" y="101" width="0.0462%" height="15" fill="rgb(208,68,35)" fg:x="174" fg:w="2"/><text x="4.2713%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.05%)</title><rect x="4.0213%" y="85" width="0.0462%" height="15" fill="rgb(232,128,0)" fg:x="174" fg:w="2"/><text x="4.2713%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.05%)</title><rect x="4.0213%" y="69" width="0.0462%" height="15" fill="rgb(207,160,47)" fg:x="174" fg:w="2"/><text x="4.2713%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (5 samples, 0.12%)</title><rect x="4.0213%" y="181" width="0.1156%" height="15" fill="rgb(228,23,34)" fg:x="174" fg:w="5"/><text x="4.2713%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (5 samples, 0.12%)</title><rect x="4.0213%" y="165" width="0.1156%" height="15" fill="rgb(218,30,26)" fg:x="174" fg:w="5"/><text x="4.2713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="4.0213%" y="149" width="0.1156%" height="15" fill="rgb(220,122,19)" fg:x="174" fg:w="5"/><text x="4.2713%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="4.0213%" y="133" width="0.1156%" height="15" fill="rgb(250,228,42)" fg:x="174" fg:w="5"/><text x="4.2713%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.12%)</title><rect x="4.0213%" y="117" width="0.1156%" height="15" fill="rgb(240,193,28)" fg:x="174" fg:w="5"/><text x="4.2713%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.07%)</title><rect x="4.0675%" y="101" width="0.0693%" height="15" fill="rgb(216,20,37)" fg:x="176" fg:w="3"/><text x="4.3175%" y="111.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (5 samples, 0.12%)</title><rect x="4.3910%" y="133" width="0.1156%" height="15" fill="rgb(206,188,39)" fg:x="190" fg:w="5"/><text x="4.6410%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (12 samples, 0.28%)</title><rect x="4.5528%" y="117" width="0.2773%" height="15" fill="rgb(217,207,13)" fg:x="197" fg:w="12"/><text x="4.8028%" y="127.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (38 samples, 0.88%)</title><rect x="4.1368%" y="181" width="0.8782%" height="15" fill="rgb(231,73,38)" fg:x="179" fg:w="38"/><text x="4.3868%" y="191.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (34 samples, 0.79%)</title><rect x="4.2293%" y="165" width="0.7858%" height="15" fill="rgb(225,20,46)" fg:x="183" fg:w="34"/><text x="4.4793%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (27 samples, 0.62%)</title><rect x="4.3910%" y="149" width="0.6240%" height="15" fill="rgb(210,31,41)" fg:x="190" fg:w="27"/><text x="4.6410%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (22 samples, 0.51%)</title><rect x="4.5066%" y="133" width="0.5084%" height="15" fill="rgb(221,200,47)" fg:x="195" fg:w="22"/><text x="4.7566%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (8 samples, 0.18%)</title><rect x="4.8301%" y="117" width="0.1849%" height="15" fill="rgb(226,26,5)" fg:x="209" fg:w="8"/><text x="5.0801%" y="127.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (4 samples, 0.09%)</title><rect x="4.9226%" y="101" width="0.0924%" height="15" fill="rgb(249,33,26)" fg:x="213" fg:w="4"/><text x="5.1726%" y="111.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (2 samples, 0.05%)</title><rect x="5.0150%" y="181" width="0.0462%" height="15" fill="rgb(235,183,28)" fg:x="217" fg:w="2"/><text x="5.2650%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="5.0150%" y="165" width="0.0462%" height="15" fill="rgb(221,5,38)" fg:x="217" fg:w="2"/><text x="5.2650%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (1 samples, 0.02%)</title><rect x="5.0612%" y="181" width="0.0231%" height="15" fill="rgb(247,18,42)" fg:x="219" fg:w="1"/><text x="5.3112%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.49%)</title><rect x="5.1537%" y="165" width="0.4853%" height="15" fill="rgb(241,131,45)" fg:x="223" fg:w="21"/><text x="5.4037%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (25 samples, 0.58%)</title><rect x="5.0844%" y="181" width="0.5778%" height="15" fill="rgb(249,31,29)" fg:x="220" fg:w="25"/><text x="5.3344%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (1 samples, 0.02%)</title><rect x="5.6390%" y="165" width="0.0231%" height="15" fill="rgb(225,111,53)" fg:x="244" fg:w="1"/><text x="5.8890%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (1 samples, 0.02%)</title><rect x="5.6621%" y="165" width="0.0231%" height="15" fill="rgb(238,160,17)" fg:x="245" fg:w="1"/><text x="5.9121%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (3 samples, 0.07%)</title><rect x="5.6852%" y="149" width="0.0693%" height="15" fill="rgb(214,148,48)" fg:x="246" fg:w="3"/><text x="5.9352%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (6 samples, 0.14%)</title><rect x="5.6621%" y="181" width="0.1387%" height="15" fill="rgb(232,36,49)" fg:x="245" fg:w="6"/><text x="5.9121%" y="191.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (5 samples, 0.12%)</title><rect x="5.6852%" y="165" width="0.1156%" height="15" fill="rgb(209,103,24)" fg:x="246" fg:w="5"/><text x="5.9352%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (2 samples, 0.05%)</title><rect x="5.7546%" y="149" width="0.0462%" height="15" fill="rgb(229,88,8)" fg:x="249" fg:w="2"/><text x="6.0046%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (1 samples, 0.02%)</title><rect x="5.7777%" y="133" width="0.0231%" height="15" fill="rgb(213,181,19)" fg:x="250" fg:w="1"/><text x="6.0277%" y="143.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (6 samples, 0.14%)</title><rect x="5.8008%" y="181" width="0.1387%" height="15" fill="rgb(254,191,54)" fg:x="251" fg:w="6"/><text x="6.0508%" y="191.50"></text></g><g><title>esp`nalgebra::linalg::symmetric_eigen::SymmetricEigen&lt;T,D&gt;::new (1 samples, 0.02%)</title><rect x="5.9394%" y="181" width="0.0231%" height="15" fill="rgb(241,83,37)" fg:x="257" fg:w="1"/><text x="6.1894%" y="191.50"></text></g><g><title>esp`nalgebra::linalg::symmetric_tridiagonal::SymmetricTridiagonal&lt;T,D&gt;::new (1 samples, 0.02%)</title><rect x="5.9394%" y="165" width="0.0231%" height="15" fill="rgb(233,36,39)" fg:x="257" fg:w="1"/><text x="6.1894%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.21%)</title><rect x="5.9626%" y="181" width="0.2080%" height="15" fill="rgb(226,3,54)" fg:x="258" fg:w="9"/><text x="6.2126%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.23%)</title><rect x="6.1706%" y="149" width="0.2311%" height="15" fill="rgb(245,192,40)" fg:x="267" fg:w="10"/><text x="6.4206%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (11 samples, 0.25%)</title><rect x="6.1706%" y="181" width="0.2542%" height="15" fill="rgb(238,167,29)" fg:x="267" fg:w="11"/><text x="6.4206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (11 samples, 0.25%)</title><rect x="6.1706%" y="165" width="0.2542%" height="15" fill="rgb(232,182,51)" fg:x="267" fg:w="11"/><text x="6.4206%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_deallocate (1 samples, 0.02%)</title><rect x="6.4017%" y="149" width="0.0231%" height="15" fill="rgb(231,60,39)" fg:x="277" fg:w="1"/><text x="6.6517%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (279 samples, 6.45%)</title><rect x="0.0231%" y="197" width="6.4479%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="279"/><text x="0.2731%" y="207.50">esp`eige..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="6.4248%" y="181" width="0.0462%" height="15" fill="rgb(235,93,37)" fg:x="278" fg:w="2"/><text x="6.6748%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (14 samples, 0.32%)</title><rect x="6.4710%" y="197" width="0.3235%" height="15" fill="rgb(213,116,39)" fg:x="280" fg:w="14"/><text x="6.7210%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.09%)</title><rect x="10.2612%" y="101" width="0.0924%" height="15" fill="rgb(222,207,29)" fg:x="444" fg:w="4"/><text x="10.5112%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.14%)</title><rect x="10.2380%" y="133" width="0.1387%" height="15" fill="rgb(206,96,30)" fg:x="443" fg:w="6"/><text x="10.4880%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.12%)</title><rect x="10.2612%" y="117" width="0.1156%" height="15" fill="rgb(218,138,4)" fg:x="444" fg:w="5"/><text x="10.5112%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="10.3536%" y="101" width="0.0231%" height="15" fill="rgb(250,191,14)" fg:x="448" fg:w="1"/><text x="10.6036%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="10.4229%" y="117" width="0.0231%" height="15" fill="rgb(239,60,40)" fg:x="451" fg:w="1"/><text x="10.6729%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (2 samples, 0.05%)</title><rect x="10.4460%" y="117" width="0.0462%" height="15" fill="rgb(206,27,48)" fg:x="452" fg:w="2"/><text x="10.6960%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="10.4691%" y="101" width="0.0231%" height="15" fill="rgb(225,35,8)" fg:x="453" fg:w="1"/><text x="10.7191%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.35%)</title><rect x="10.2380%" y="165" width="0.3467%" height="15" fill="rgb(250,213,24)" fg:x="443" fg:w="15"/><text x="10.4880%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.35%)</title><rect x="10.2380%" y="149" width="0.3467%" height="15" fill="rgb(247,123,22)" fg:x="443" fg:w="15"/><text x="10.4880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.21%)</title><rect x="10.3767%" y="133" width="0.2080%" height="15" fill="rgb(231,138,38)" fg:x="449" fg:w="9"/><text x="10.6267%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.09%)</title><rect x="10.4923%" y="117" width="0.0924%" height="15" fill="rgb(231,145,46)" fg:x="454" fg:w="4"/><text x="10.7423%" y="127.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (60 samples, 1.39%)</title><rect x="10.1918%" y="181" width="1.3866%" height="15" fill="rgb(251,118,11)" fg:x="441" fg:w="60"/><text x="10.4418%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (43 samples, 0.99%)</title><rect x="10.5847%" y="165" width="0.9938%" height="15" fill="rgb(217,147,25)" fg:x="458" fg:w="43"/><text x="10.8347%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="13.7740%" y="101" width="0.0231%" height="15" fill="rgb(247,81,37)" fg:x="596" fg:w="1"/><text x="14.0240%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (2 samples, 0.05%)</title><rect x="13.7971%" y="101" width="0.0462%" height="15" fill="rgb(209,12,38)" fg:x="597" fg:w="2"/><text x="14.0471%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (2 samples, 0.05%)</title><rect x="13.7971%" y="85" width="0.0462%" height="15" fill="rgb(227,1,9)" fg:x="597" fg:w="2"/><text x="14.0471%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.02%)</title><rect x="13.8433%" y="101" width="0.0231%" height="15" fill="rgb(248,47,43)" fg:x="599" fg:w="1"/><text x="14.0933%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="13.8433%" y="85" width="0.0231%" height="15" fill="rgb(221,10,30)" fg:x="599" fg:w="1"/><text x="14.0933%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="13.8433%" y="69" width="0.0231%" height="15" fill="rgb(210,229,1)" fg:x="599" fg:w="1"/><text x="14.0933%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (9 samples, 0.21%)</title><rect x="13.7740%" y="165" width="0.2080%" height="15" fill="rgb(222,148,37)" fg:x="596" fg:w="9"/><text x="14.0240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.21%)</title><rect x="13.7740%" y="149" width="0.2080%" height="15" fill="rgb(234,67,33)" fg:x="596" fg:w="9"/><text x="14.0240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.21%)</title><rect x="13.7740%" y="133" width="0.2080%" height="15" fill="rgb(247,98,35)" fg:x="596" fg:w="9"/><text x="14.0240%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.21%)</title><rect x="13.7740%" y="117" width="0.2080%" height="15" fill="rgb(247,138,52)" fg:x="596" fg:w="9"/><text x="14.0240%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.12%)</title><rect x="13.8664%" y="101" width="0.1156%" height="15" fill="rgb(213,79,30)" fg:x="600" fg:w="5"/><text x="14.1164%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="14.0051%" y="149" width="0.0231%" height="15" fill="rgb(246,177,23)" fg:x="606" fg:w="1"/><text x="14.2551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.16%)</title><rect x="13.9820%" y="165" width="0.1618%" height="15" fill="rgb(230,62,27)" fg:x="605" fg:w="7"/><text x="14.2320%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.12%)</title><rect x="14.0282%" y="149" width="0.1156%" height="15" fill="rgb(216,154,8)" fg:x="607" fg:w="5"/><text x="14.2782%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.09%)</title><rect x="14.0513%" y="133" width="0.0924%" height="15" fill="rgb(244,35,45)" fg:x="608" fg:w="4"/><text x="14.3013%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="14.2131%" y="149" width="0.0231%" height="15" fill="rgb(251,115,12)" fg:x="615" fg:w="1"/><text x="14.4631%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (3 samples, 0.07%)</title><rect x="14.2362%" y="149" width="0.0693%" height="15" fill="rgb(240,54,50)" fg:x="616" fg:w="3"/><text x="14.4862%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="14.2362%" y="133" width="0.0693%" height="15" fill="rgb(233,84,52)" fg:x="616" fg:w="3"/><text x="14.4862%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.23%)</title><rect x="14.1437%" y="165" width="0.2311%" height="15" fill="rgb(207,117,47)" fg:x="612" fg:w="10"/><text x="14.3937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (3 samples, 0.07%)</title><rect x="14.3055%" y="149" width="0.0693%" height="15" fill="rgb(249,43,39)" fg:x="619" fg:w="3"/><text x="14.5555%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="14.3055%" y="133" width="0.0693%" height="15" fill="rgb(209,38,44)" fg:x="619" fg:w="3"/><text x="14.5555%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.02%)</title><rect x="14.4904%" y="133" width="0.0231%" height="15" fill="rgb(236,212,23)" fg:x="627" fg:w="1"/><text x="14.7404%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (3 samples, 0.07%)</title><rect x="14.5135%" y="133" width="0.0693%" height="15" fill="rgb(242,79,21)" fg:x="628" fg:w="3"/><text x="14.7635%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="14.5135%" y="117" width="0.0693%" height="15" fill="rgb(211,96,35)" fg:x="628" fg:w="3"/><text x="14.7635%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.07%)</title><rect x="14.5829%" y="117" width="0.0693%" height="15" fill="rgb(253,215,40)" fg:x="631" fg:w="3"/><text x="14.8329%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.30%)</title><rect x="14.3749%" y="165" width="0.3004%" height="15" fill="rgb(211,81,21)" fg:x="622" fg:w="13"/><text x="14.6249%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.23%)</title><rect x="14.4442%" y="149" width="0.2311%" height="15" fill="rgb(208,190,38)" fg:x="625" fg:w="10"/><text x="14.6942%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (4 samples, 0.09%)</title><rect x="14.5829%" y="133" width="0.0924%" height="15" fill="rgb(235,213,38)" fg:x="631" fg:w="4"/><text x="14.8329%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="14.6522%" y="117" width="0.0231%" height="15" fill="rgb(237,122,38)" fg:x="634" fg:w="1"/><text x="14.9022%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="14.6753%" y="165" width="0.0231%" height="15" fill="rgb(244,218,35)" fg:x="635" fg:w="1"/><text x="14.9253%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="14.6753%" y="149" width="0.0231%" height="15" fill="rgb(240,68,47)" fg:x="635" fg:w="1"/><text x="14.9253%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (136 samples, 3.14%)</title><rect x="11.5785%" y="181" width="3.1431%" height="15" fill="rgb(210,16,53)" fg:x="501" fg:w="136"/><text x="11.8285%" y="191.50">esp..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="14.6984%" y="165" width="0.0231%" height="15" fill="rgb(235,124,12)" fg:x="636" fg:w="1"/><text x="14.9484%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="14.7215%" y="165" width="0.0462%" height="15" fill="rgb(224,169,11)" fg:x="637" fg:w="2"/><text x="14.9715%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="14.7446%" y="149" width="0.0231%" height="15" fill="rgb(250,166,2)" fg:x="638" fg:w="1"/><text x="14.9946%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="14.7446%" y="133" width="0.0231%" height="15" fill="rgb(242,216,29)" fg:x="638" fg:w="1"/><text x="14.9946%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="14.7677%" y="149" width="0.0231%" height="15" fill="rgb(230,116,27)" fg:x="639" fg:w="1"/><text x="15.0177%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.05%)</title><rect x="14.7677%" y="165" width="0.0462%" height="15" fill="rgb(228,99,48)" fg:x="639" fg:w="2"/><text x="15.0177%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1 samples, 0.02%)</title><rect x="14.7908%" y="149" width="0.0231%" height="15" fill="rgb(253,11,6)" fg:x="640" fg:w="1"/><text x="15.0408%" y="159.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.23%)</title><rect x="14.7215%" y="181" width="0.2311%" height="15" fill="rgb(247,143,39)" fg:x="637" fg:w="10"/><text x="14.9715%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="14.8140%" y="165" width="0.1387%" height="15" fill="rgb(236,97,10)" fg:x="641" fg:w="6"/><text x="15.0640%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.09%)</title><rect x="14.8602%" y="149" width="0.0924%" height="15" fill="rgb(233,208,19)" fg:x="643" fg:w="4"/><text x="15.1102%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="14.9295%" y="133" width="0.0231%" height="15" fill="rgb(216,164,2)" fg:x="646" fg:w="1"/><text x="15.1795%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.12%)</title><rect x="14.9526%" y="181" width="0.1156%" height="15" fill="rgb(220,129,5)" fg:x="647" fg:w="5"/><text x="15.2026%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.02%)</title><rect x="15.0913%" y="117" width="0.0231%" height="15" fill="rgb(242,17,10)" fg:x="653" fg:w="1"/><text x="15.3413%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="15.1375%" y="101" width="0.0231%" height="15" fill="rgb(242,107,0)" fg:x="655" fg:w="1"/><text x="15.3875%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="15.1606%" y="101" width="0.0231%" height="15" fill="rgb(251,28,31)" fg:x="656" fg:w="1"/><text x="15.4106%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.12%)</title><rect x="15.1837%" y="101" width="0.1156%" height="15" fill="rgb(233,223,10)" fg:x="657" fg:w="5"/><text x="15.4337%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="15.2068%" y="85" width="0.0924%" height="15" fill="rgb(215,21,27)" fg:x="658" fg:w="4"/><text x="15.4568%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.05%)</title><rect x="15.2993%" y="101" width="0.0462%" height="15" fill="rgb(232,23,21)" fg:x="662" fg:w="2"/><text x="15.5493%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.30%)</title><rect x="15.0913%" y="133" width="0.3004%" height="15" fill="rgb(244,5,23)" fg:x="653" fg:w="13"/><text x="15.3413%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.28%)</title><rect x="15.1144%" y="117" width="0.2773%" height="15" fill="rgb(226,81,46)" fg:x="654" fg:w="12"/><text x="15.3644%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="15.3455%" y="101" width="0.0462%" height="15" fill="rgb(247,70,30)" fg:x="664" fg:w="2"/><text x="15.5955%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.37%)</title><rect x="15.0682%" y="181" width="0.3698%" height="15" fill="rgb(212,68,19)" fg:x="652" fg:w="16"/><text x="15.3182%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (15 samples, 0.35%)</title><rect x="15.0913%" y="165" width="0.3467%" height="15" fill="rgb(240,187,13)" fg:x="653" fg:w="15"/><text x="15.3413%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.35%)</title><rect x="15.0913%" y="149" width="0.3467%" height="15" fill="rgb(223,113,26)" fg:x="653" fg:w="15"/><text x="15.3413%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="15.3917%" y="133" width="0.0462%" height="15" fill="rgb(206,192,2)" fg:x="666" fg:w="2"/><text x="15.6417%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="15.3917%" y="117" width="0.0462%" height="15" fill="rgb(241,108,4)" fg:x="666" fg:w="2"/><text x="15.6417%" y="127.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (4 samples, 0.09%)</title><rect x="15.4379%" y="181" width="0.0924%" height="15" fill="rgb(247,173,49)" fg:x="668" fg:w="4"/><text x="15.6879%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.21%)</title><rect x="15.5997%" y="165" width="0.2080%" height="15" fill="rgb(224,114,35)" fg:x="675" fg:w="9"/><text x="15.8497%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="15.8077%" y="149" width="0.0231%" height="15" fill="rgb(245,159,27)" fg:x="684" fg:w="1"/><text x="16.0577%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="15.8077%" y="165" width="0.0462%" height="15" fill="rgb(245,172,44)" fg:x="684" fg:w="2"/><text x="16.0577%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="15.8308%" y="149" width="0.0231%" height="15" fill="rgb(236,23,11)" fg:x="685" fg:w="1"/><text x="16.0808%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="15.8308%" y="133" width="0.0231%" height="15" fill="rgb(205,117,38)" fg:x="685" fg:w="1"/><text x="16.0808%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (1 samples, 0.02%)</title><rect x="15.9464%" y="149" width="0.0231%" height="15" fill="rgb(237,72,25)" fg:x="690" fg:w="1"/><text x="16.1964%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="15.9464%" y="133" width="0.0231%" height="15" fill="rgb(244,70,9)" fg:x="690" fg:w="1"/><text x="16.1964%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.09%)</title><rect x="15.9695%" y="149" width="0.0924%" height="15" fill="rgb(217,125,39)" fg:x="691" fg:w="4"/><text x="16.2195%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.02%)</title><rect x="16.0619%" y="149" width="0.0231%" height="15" fill="rgb(235,36,10)" fg:x="695" fg:w="1"/><text x="16.3119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (8 samples, 0.18%)</title><rect x="16.0850%" y="149" width="0.1849%" height="15" fill="rgb(251,123,47)" fg:x="696" fg:w="8"/><text x="16.3350%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (1 samples, 0.02%)</title><rect x="16.2699%" y="149" width="0.0231%" height="15" fill="rgb(221,13,13)" fg:x="704" fg:w="1"/><text x="16.5199%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="16.2699%" y="133" width="0.0231%" height="15" fill="rgb(238,131,9)" fg:x="704" fg:w="1"/><text x="16.5199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (5 samples, 0.12%)</title><rect x="16.2930%" y="149" width="0.1156%" height="15" fill="rgb(211,50,8)" fg:x="705" fg:w="5"/><text x="16.5430%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="16.2930%" y="133" width="0.1156%" height="15" fill="rgb(245,182,24)" fg:x="705" fg:w="5"/><text x="16.5430%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.72%)</title><rect x="16.4548%" y="133" width="0.7164%" height="15" fill="rgb(242,14,37)" fg:x="712" fg:w="31"/><text x="16.7048%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (58 samples, 1.34%)</title><rect x="15.8539%" y="165" width="1.3404%" height="15" fill="rgb(246,228,12)" fg:x="686" fg:w="58"/><text x="16.1039%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (34 samples, 0.79%)</title><rect x="16.4086%" y="149" width="0.7858%" height="15" fill="rgb(213,55,15)" fg:x="710" fg:w="34"/><text x="16.6586%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (1 samples, 0.02%)</title><rect x="17.1713%" y="133" width="0.0231%" height="15" fill="rgb(209,9,3)" fg:x="743" fg:w="1"/><text x="17.4213%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.07%)</title><rect x="17.2175%" y="133" width="0.0693%" height="15" fill="rgb(230,59,30)" fg:x="745" fg:w="3"/><text x="17.4675%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.07%)</title><rect x="17.2175%" y="117" width="0.0693%" height="15" fill="rgb(209,121,21)" fg:x="745" fg:w="3"/><text x="17.4675%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="17.2868%" y="133" width="0.0231%" height="15" fill="rgb(220,109,13)" fg:x="748" fg:w="1"/><text x="17.5368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1 samples, 0.02%)</title><rect x="17.3099%" y="133" width="0.0231%" height="15" fill="rgb(232,18,1)" fg:x="749" fg:w="1"/><text x="17.5599%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.25%)</title><rect x="17.1944%" y="165" width="0.2542%" height="15" fill="rgb(215,41,42)" fg:x="744" fg:w="11"/><text x="17.4444%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.23%)</title><rect x="17.2175%" y="149" width="0.2311%" height="15" fill="rgb(224,123,36)" fg:x="745" fg:w="10"/><text x="17.4675%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (5 samples, 0.12%)</title><rect x="17.3330%" y="133" width="0.1156%" height="15" fill="rgb(240,125,3)" fg:x="750" fg:w="5"/><text x="17.5830%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="17.3330%" y="117" width="0.1156%" height="15" fill="rgb(205,98,50)" fg:x="750" fg:w="5"/><text x="17.5830%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="17.4486%" y="165" width="0.0231%" height="15" fill="rgb(205,185,37)" fg:x="755" fg:w="1"/><text x="17.6986%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="17.4486%" y="149" width="0.0231%" height="15" fill="rgb(238,207,15)" fg:x="755" fg:w="1"/><text x="17.6986%" y="159.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (85 samples, 1.96%)</title><rect x="15.5304%" y="181" width="1.9644%" height="15" fill="rgb(213,199,42)" fg:x="672" fg:w="85"/><text x="15.7804%" y="191.50">e..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="17.4717%" y="165" width="0.0231%" height="15" fill="rgb(235,201,11)" fg:x="756" fg:w="1"/><text x="17.7217%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (13 samples, 0.30%)</title><rect x="17.4948%" y="181" width="0.3004%" height="15" fill="rgb(207,46,11)" fg:x="757" fg:w="13"/><text x="17.7448%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (53 samples, 1.22%)</title><rect x="42.0153%" y="165" width="1.2249%" height="15" fill="rgb(241,35,35)" fg:x="1818" fg:w="53"/><text x="42.2653%" y="175.50"></text></g><g><title>esp`__rdl_realloc (1 samples, 0.02%)</title><rect x="43.4712%" y="149" width="0.0231%" height="15" fill="rgb(243,32,47)" fg:x="1881" fg:w="1"/><text x="43.7212%" y="159.50"></text></g><g><title>esp`__rdl_realloc (1 samples, 0.02%)</title><rect x="43.5174%" y="133" width="0.0231%" height="15" fill="rgb(247,202,23)" fg:x="1883" fg:w="1"/><text x="43.7674%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.16%)</title><rect x="43.5406%" y="133" width="0.1618%" height="15" fill="rgb(219,102,11)" fg:x="1884" fg:w="7"/><text x="43.7906%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="43.5637%" y="117" width="0.1387%" height="15" fill="rgb(243,110,44)" fg:x="1885" fg:w="6"/><text x="43.8137%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.12%)</title><rect x="43.5868%" y="101" width="0.1156%" height="15" fill="rgb(222,74,54)" fg:x="1886" fg:w="5"/><text x="43.8368%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="43.6792%" y="85" width="0.0231%" height="15" fill="rgb(216,99,12)" fg:x="1890" fg:w="1"/><text x="43.9292%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="44.0028%" y="101" width="0.0231%" height="15" fill="rgb(226,22,26)" fg:x="1904" fg:w="1"/><text x="44.2528%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="44.0259%" y="101" width="0.0231%" height="15" fill="rgb(217,163,10)" fg:x="1905" fg:w="1"/><text x="44.2759%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.14%)</title><rect x="44.1183%" y="85" width="0.1387%" height="15" fill="rgb(213,25,53)" fg:x="1909" fg:w="6"/><text x="44.3683%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.07%)</title><rect x="44.1877%" y="69" width="0.0693%" height="15" fill="rgb(252,105,26)" fg:x="1912" fg:w="3"/><text x="44.4377%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (10 samples, 0.23%)</title><rect x="44.7423%" y="53" width="0.2311%" height="15" fill="rgb(220,39,43)" fg:x="1936" fg:w="10"/><text x="44.9923%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.25%)</title><rect x="44.9734%" y="53" width="0.2542%" height="15" fill="rgb(229,68,48)" fg:x="1946" fg:w="11"/><text x="45.2234%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (3 samples, 0.07%)</title><rect x="45.2276%" y="53" width="0.0693%" height="15" fill="rgb(252,8,32)" fg:x="1957" fg:w="3"/><text x="45.4776%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="45.2508%" y="37" width="0.0462%" height="15" fill="rgb(223,20,43)" fg:x="1958" fg:w="2"/><text x="45.5008%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="45.2970%" y="53" width="0.0231%" height="15" fill="rgb(229,81,49)" fg:x="1960" fg:w="1"/><text x="45.5470%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="45.2970%" y="37" width="0.0231%" height="15" fill="rgb(236,28,36)" fg:x="1960" fg:w="1"/><text x="45.5470%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 1.11%)</title><rect x="44.2570%" y="85" width="1.1093%" height="15" fill="rgb(249,185,26)" fg:x="1915" fg:w="48"/><text x="44.5070%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (38 samples, 0.88%)</title><rect x="44.4881%" y="69" width="0.8782%" height="15" fill="rgb(249,174,33)" fg:x="1925" fg:w="38"/><text x="44.7381%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2 samples, 0.05%)</title><rect x="45.3201%" y="53" width="0.0462%" height="15" fill="rgb(233,201,37)" fg:x="1961" fg:w="2"/><text x="45.5701%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="45.3201%" y="37" width="0.0462%" height="15" fill="rgb(221,78,26)" fg:x="1961" fg:w="2"/><text x="45.5701%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="45.3663%" y="85" width="0.0231%" height="15" fill="rgb(250,127,30)" fg:x="1963" fg:w="1"/><text x="45.6163%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.05%)</title><rect x="45.3894%" y="85" width="0.0462%" height="15" fill="rgb(230,49,44)" fg:x="1964" fg:w="2"/><text x="45.6394%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (13 samples, 0.30%)</title><rect x="45.4587%" y="69" width="0.3004%" height="15" fill="rgb(229,67,23)" fg:x="1967" fg:w="13"/><text x="45.7087%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.18%)</title><rect x="45.5743%" y="53" width="0.1849%" height="15" fill="rgb(249,83,47)" fg:x="1972" fg:w="8"/><text x="45.8243%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.14%)</title><rect x="45.6205%" y="37" width="0.1387%" height="15" fill="rgb(215,43,3)" fg:x="1974" fg:w="6"/><text x="45.8705%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="45.9903%" y="53" width="0.0231%" height="15" fill="rgb(238,154,13)" fg:x="1990" fg:w="1"/><text x="46.2403%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="45.9903%" y="37" width="0.0231%" height="15" fill="rgb(219,56,2)" fg:x="1990" fg:w="1"/><text x="46.2403%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.09%)</title><rect x="46.0134%" y="53" width="0.0924%" height="15" fill="rgb(233,0,4)" fg:x="1991" fg:w="4"/><text x="46.2634%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.86%)</title><rect x="45.4356%" y="85" width="0.8551%" height="15" fill="rgb(235,30,7)" fg:x="1966" fg:w="37"/><text x="45.6856%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.53%)</title><rect x="45.7592%" y="69" width="0.5315%" height="15" fill="rgb(250,79,13)" fg:x="1980" fg:w="23"/><text x="46.0092%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.18%)</title><rect x="46.1058%" y="53" width="0.1849%" height="15" fill="rgb(211,146,34)" fg:x="1995" fg:w="8"/><text x="46.3558%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="46.2676%" y="37" width="0.0231%" height="15" fill="rgb(228,22,38)" fg:x="2002" fg:w="1"/><text x="46.5176%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.02%)</title><rect x="46.2907%" y="85" width="0.0231%" height="15" fill="rgb(235,168,5)" fg:x="2003" fg:w="1"/><text x="46.5407%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.02%)</title><rect x="46.2907%" y="69" width="0.0231%" height="15" fill="rgb(221,155,16)" fg:x="2003" fg:w="1"/><text x="46.5407%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (11 samples, 0.25%)</title><rect x="46.3138%" y="85" width="0.2542%" height="15" fill="rgb(215,215,53)" fg:x="2004" fg:w="11"/><text x="46.5638%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.07%)</title><rect x="46.4987%" y="69" width="0.0693%" height="15" fill="rgb(223,4,10)" fg:x="2012" fg:w="3"/><text x="46.7487%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (188 samples, 4.34%)</title><rect x="43.9334%" y="117" width="4.3448%" height="15" fill="rgb(234,103,6)" fg:x="1901" fg:w="188"/><text x="44.1834%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (183 samples, 4.23%)</title><rect x="44.0490%" y="101" width="4.2293%" height="15" fill="rgb(227,97,0)" fg:x="1906" fg:w="183"/><text x="44.2990%" y="111.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (74 samples, 1.71%)</title><rect x="46.5681%" y="85" width="1.7102%" height="15" fill="rgb(234,150,53)" fg:x="2015" fg:w="74"/><text x="46.8181%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.02%)</title><rect x="48.2783%" y="117" width="0.0231%" height="15" fill="rgb(228,201,54)" fg:x="2089" fg:w="1"/><text x="48.5283%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="48.3014%" y="117" width="0.0231%" height="15" fill="rgb(222,22,37)" fg:x="2090" fg:w="1"/><text x="48.5514%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (233 samples, 5.38%)</title><rect x="43.2401%" y="165" width="5.3848%" height="15" fill="rgb(237,53,32)" fg:x="1871" fg:w="233"/><text x="43.4901%" y="175.50">esp`all..</text></g><g><title>esp`alloc::raw_vec::finish_grow (222 samples, 5.13%)</title><rect x="43.4943%" y="149" width="5.1306%" height="15" fill="rgb(233,25,53)" fg:x="1882" fg:w="222"/><text x="43.7443%" y="159.50">esp`al..</text></g><g><title>libsystem_malloc.dylib`realloc (213 samples, 4.92%)</title><rect x="43.7023%" y="133" width="4.9226%" height="15" fill="rgb(210,40,34)" fg:x="1891" fg:w="213"/><text x="43.9523%" y="143.50">libsys..</text></g><g><title>libsystem_malloc.dylib`szone_size (13 samples, 0.30%)</title><rect x="48.3245%" y="117" width="0.3004%" height="15" fill="rgb(241,220,44)" fg:x="2091" fg:w="13"/><text x="48.5745%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.30%)</title><rect x="48.3245%" y="101" width="0.3004%" height="15" fill="rgb(235,28,35)" fg:x="2091" fg:w="13"/><text x="48.5745%" y="111.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (3 samples, 0.07%)</title><rect x="48.6249%" y="165" width="0.0693%" height="15" fill="rgb(210,56,17)" fg:x="2104" fg:w="3"/><text x="48.8749%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (581 samples, 13.43%)</title><rect x="48.6942%" y="165" width="13.4273%" height="15" fill="rgb(224,130,29)" fg:x="2107" fg:w="581"/><text x="48.9442%" y="175.50">esp`esp::ham::Ham::h..</text></g><g><title>esp`esp::ham::Ham::ham_doub (193 samples, 4.46%)</title><rect x="57.6612%" y="149" width="4.4604%" height="15" fill="rgb(235,212,8)" fg:x="2495" fg:w="193"/><text x="57.9112%" y="159.50">esp`e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (27 samples, 0.62%)</title><rect x="61.4976%" y="133" width="0.6240%" height="15" fill="rgb(223,33,50)" fg:x="2661" fg:w="27"/><text x="61.7476%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (23 samples, 0.53%)</title><rect x="62.1216%" y="165" width="0.5315%" height="15" fill="rgb(219,149,13)" fg:x="2688" fg:w="23"/><text x="62.3716%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (10 samples, 0.23%)</title><rect x="62.4220%" y="149" width="0.2311%" height="15" fill="rgb(250,156,29)" fg:x="2701" fg:w="10"/><text x="62.6720%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.72%)</title><rect x="63.3233%" y="149" width="0.7164%" height="15" fill="rgb(216,193,19)" fg:x="2740" fg:w="31"/><text x="63.5733%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (3 samples, 0.07%)</title><rect x="65.4033%" y="133" width="0.0693%" height="15" fill="rgb(216,135,14)" fg:x="2830" fg:w="3"/><text x="65.6533%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="67.8299%" y="117" width="0.0462%" height="15" fill="rgb(241,47,5)" fg:x="2935" fg:w="2"/><text x="68.0799%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (84 samples, 1.94%)</title><rect x="67.8761%" y="117" width="1.9413%" height="15" fill="rgb(233,42,35)" fg:x="2937" fg:w="84"/><text x="68.1261%" y="127.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.69%)</title><rect x="69.1241%" y="101" width="0.6933%" height="15" fill="rgb(231,13,6)" fg:x="2991" fg:w="30"/><text x="69.3741%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (7 samples, 0.16%)</title><rect x="69.8174%" y="117" width="0.1618%" height="15" fill="rgb(207,181,40)" fg:x="3021" fg:w="7"/><text x="70.0674%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (7 samples, 0.16%)</title><rect x="69.8174%" y="101" width="0.1618%" height="15" fill="rgb(254,173,49)" fg:x="3021" fg:w="7"/><text x="70.0674%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (322 samples, 7.44%)</title><rect x="62.6531%" y="165" width="7.4416%" height="15" fill="rgb(221,1,38)" fg:x="2711" fg:w="322"/><text x="62.9031%" y="175.50">esp`hashbr..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (262 samples, 6.06%)</title><rect x="64.0398%" y="149" width="6.0550%" height="15" fill="rgb(206,124,46)" fg:x="2771" fg:w="262"/><text x="64.2898%" y="159.50">esp`hash..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (200 samples, 4.62%)</title><rect x="65.4726%" y="133" width="4.6221%" height="15" fill="rgb(249,21,11)" fg:x="2833" fg:w="200"/><text x="65.7226%" y="143.50">esp`h..</text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.12%)</title><rect x="69.9792%" y="117" width="0.1156%" height="15" fill="rgb(222,201,40)" fg:x="3028" fg:w="5"/><text x="70.2292%" y="127.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (2,980 samples, 68.87%)</title><rect x="17.7952%" y="181" width="68.8699%" height="15" fill="rgb(235,61,29)" fg:x="770" fg:w="2980"/><text x="18.0452%" y="191.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::map::make_hash (717 samples, 16.57%)</title><rect x="70.0948%" y="165" width="16.5704%" height="15" fill="rgb(219,207,3)" fg:x="3033" fg:w="717"/><text x="70.3448%" y="175.50">esp`hashbrown::map::make_h..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (340 samples, 7.86%)</title><rect x="78.8075%" y="149" width="7.8576%" height="15" fill="rgb(222,56,46)" fg:x="3410" fg:w="340"/><text x="79.0575%" y="159.50">esp`&lt;std::c..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.16%)</title><rect x="86.6651%" y="181" width="0.1618%" height="15" fill="rgb(239,76,54)" fg:x="3750" fg:w="7"/><text x="86.9151%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.07%)</title><rect x="86.7576%" y="165" width="0.0693%" height="15" fill="rgb(231,124,27)" fg:x="3754" fg:w="3"/><text x="87.0076%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.07%)</title><rect x="86.7576%" y="149" width="0.0693%" height="15" fill="rgb(249,195,6)" fg:x="3754" fg:w="3"/><text x="87.0076%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (3 samples, 0.07%)</title><rect x="86.7576%" y="133" width="0.0693%" height="15" fill="rgb(237,174,47)" fg:x="3754" fg:w="3"/><text x="87.0076%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 0.65%)</title><rect x="88.9069%" y="165" width="0.6471%" height="15" fill="rgb(206,201,31)" fg:x="3847" fg:w="28"/><text x="89.1569%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (155 samples, 3.58%)</title><rect x="86.8269%" y="181" width="3.5822%" height="15" fill="rgb(231,57,52)" fg:x="3757" fg:w="155"/><text x="87.0769%" y="191.50">esp`..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (37 samples, 0.86%)</title><rect x="89.5540%" y="165" width="0.8551%" height="15" fill="rgb(248,177,22)" fg:x="3875" fg:w="37"/><text x="89.8040%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (5 samples, 0.12%)</title><rect x="90.4091%" y="165" width="0.1156%" height="15" fill="rgb(215,211,37)" fg:x="3912" fg:w="5"/><text x="90.6591%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (215 samples, 4.97%)</title><rect x="90.4091%" y="181" width="4.9688%" height="15" fill="rgb(241,128,51)" fg:x="3912" fg:w="215"/><text x="90.6591%" y="191.50">esp`sp..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (210 samples, 4.85%)</title><rect x="90.5246%" y="165" width="4.8532%" height="15" fill="rgb(227,165,31)" fg:x="3917" fg:w="210"/><text x="90.7746%" y="175.50">esp`sp..</text></g><g><title>esp`core::slice::sort::recurse (150 samples, 3.47%)</title><rect x="91.9113%" y="149" width="3.4666%" height="15" fill="rgb(228,167,24)" fg:x="3977" fg:w="150"/><text x="92.1613%" y="159.50">esp..</text></g><g><title>esp`core::slice::sort::recurse (100 samples, 2.31%)</title><rect x="93.0668%" y="133" width="2.3111%" height="15" fill="rgb(228,143,12)" fg:x="4027" fg:w="100"/><text x="93.3168%" y="143.50">e..</text></g><g><title>esp`core::slice::sort::recurse (29 samples, 0.67%)</title><rect x="94.7076%" y="117" width="0.6702%" height="15" fill="rgb(249,149,8)" fg:x="4098" fg:w="29"/><text x="94.9576%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (5 samples, 0.12%)</title><rect x="95.2623%" y="101" width="0.1156%" height="15" fill="rgb(243,35,44)" fg:x="4122" fg:w="5"/><text x="95.5123%" y="111.50"></text></g><g><title>esp`core::slice::sort::recurse (1 samples, 0.02%)</title><rect x="95.3547%" y="85" width="0.0231%" height="15" fill="rgb(246,89,9)" fg:x="4126" fg:w="1"/><text x="95.6047%" y="95.50"></text></g><g><title>esp`core::slice::sort::recurse (1 samples, 0.02%)</title><rect x="95.3547%" y="69" width="0.0231%" height="15" fill="rgb(233,213,13)" fg:x="4126" fg:w="1"/><text x="95.6047%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="95.3779%" y="181" width="0.0693%" height="15" fill="rgb(233,141,41)" fg:x="4127" fg:w="3"/><text x="95.6279%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="95.4010%" y="165" width="0.0462%" height="15" fill="rgb(239,167,4)" fg:x="4128" fg:w="2"/><text x="95.6510%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="95.4010%" y="149" width="0.0462%" height="15" fill="rgb(209,217,16)" fg:x="4128" fg:w="2"/><text x="95.6510%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="95.4241%" y="133" width="0.0231%" height="15" fill="rgb(219,88,35)" fg:x="4129" fg:w="1"/><text x="95.6741%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="95.4241%" y="117" width="0.0231%" height="15" fill="rgb(220,193,23)" fg:x="4129" fg:w="1"/><text x="95.6741%" y="127.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (3,841 samples, 88.77%)</title><rect x="6.7945%" y="197" width="88.7682%" height="15" fill="rgb(230,90,52)" fg:x="294" fg:w="3841"/><text x="7.0445%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.12%)</title><rect x="95.4472%" y="181" width="0.1156%" height="15" fill="rgb(252,106,19)" fg:x="4130" fg:w="5"/><text x="95.6972%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.12%)</title><rect x="95.4472%" y="165" width="0.1156%" height="15" fill="rgb(206,74,20)" fg:x="4130" fg:w="5"/><text x="95.6972%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.12%)</title><rect x="95.4472%" y="149" width="0.1156%" height="15" fill="rgb(230,138,44)" fg:x="4130" fg:w="5"/><text x="95.6972%" y="159.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (4,135 samples, 95.56%)</title><rect x="0.0231%" y="213" width="95.5627%" height="15" fill="rgb(235,182,43)" fg:x="1" fg:w="4135"/><text x="0.2731%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="95.5627%" y="197" width="0.0231%" height="15" fill="rgb(242,16,51)" fg:x="4135" fg:w="1"/><text x="95.8127%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="96.2792%" y="197" width="0.0231%" height="15" fill="rgb(248,9,4)" fg:x="4166" fg:w="1"/><text x="96.5292%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="96.3023%" y="197" width="0.0231%" height="15" fill="rgb(210,31,22)" fg:x="4167" fg:w="1"/><text x="96.5523%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="96.3023%" y="181" width="0.0231%" height="15" fill="rgb(239,54,39)" fg:x="4167" fg:w="1"/><text x="96.5523%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="96.3023%" y="165" width="0.0231%" height="15" fill="rgb(230,99,41)" fg:x="4167" fg:w="1"/><text x="96.5523%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.02%)</title><rect x="96.3023%" y="149" width="0.0231%" height="15" fill="rgb(253,106,12)" fg:x="4167" fg:w="1"/><text x="96.5523%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.02%)</title><rect x="96.3023%" y="133" width="0.0231%" height="15" fill="rgb(213,46,41)" fg:x="4167" fg:w="1"/><text x="96.5523%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="96.3023%" y="117" width="0.0231%" height="15" fill="rgb(215,133,35)" fg:x="4167" fg:w="1"/><text x="96.5523%" y="127.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (3 samples, 0.07%)</title><rect x="96.3254%" y="197" width="0.0693%" height="15" fill="rgb(213,28,5)" fg:x="4168" fg:w="3"/><text x="96.5754%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (18 samples, 0.42%)</title><rect x="96.3947%" y="197" width="0.4160%" height="15" fill="rgb(215,77,49)" fg:x="4171" fg:w="18"/><text x="96.6447%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (10 samples, 0.23%)</title><rect x="96.5796%" y="181" width="0.2311%" height="15" fill="rgb(248,100,22)" fg:x="4179" fg:w="10"/><text x="96.8296%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (4 samples, 0.09%)</title><rect x="96.8107%" y="197" width="0.0924%" height="15" fill="rgb(208,67,9)" fg:x="4189" fg:w="4"/><text x="97.0607%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (5 samples, 0.12%)</title><rect x="96.9032%" y="197" width="0.1156%" height="15" fill="rgb(219,133,21)" fg:x="4193" fg:w="5"/><text x="97.1532%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4 samples, 0.09%)</title><rect x="96.9263%" y="181" width="0.0924%" height="15" fill="rgb(246,46,29)" fg:x="4194" fg:w="4"/><text x="97.1763%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1 samples, 0.02%)</title><rect x="97.0187%" y="197" width="0.0231%" height="15" fill="rgb(246,185,52)" fg:x="4198" fg:w="1"/><text x="97.2687%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1 samples, 0.02%)</title><rect x="97.0187%" y="181" width="0.0231%" height="15" fill="rgb(252,136,11)" fg:x="4198" fg:w="1"/><text x="97.2687%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (25 samples, 0.58%)</title><rect x="97.0418%" y="197" width="0.5778%" height="15" fill="rgb(219,138,53)" fg:x="4199" fg:w="25"/><text x="97.2918%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (8 samples, 0.18%)</title><rect x="97.4347%" y="181" width="0.1849%" height="15" fill="rgb(211,51,23)" fg:x="4216" fg:w="8"/><text x="97.6847%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.07%)</title><rect x="97.6196%" y="197" width="0.0693%" height="15" fill="rgb(247,221,28)" fg:x="4224" fg:w="3"/><text x="97.8696%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.07%)</title><rect x="97.6196%" y="181" width="0.0693%" height="15" fill="rgb(251,222,45)" fg:x="4224" fg:w="3"/><text x="97.8696%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.07%)</title><rect x="97.6196%" y="165" width="0.0693%" height="15" fill="rgb(217,162,53)" fg:x="4224" fg:w="3"/><text x="97.8696%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (25 samples, 0.58%)</title><rect x="97.6889%" y="197" width="0.5778%" height="15" fill="rgb(229,93,14)" fg:x="4227" fg:w="25"/><text x="97.9389%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.30%)</title><rect x="97.9663%" y="181" width="0.3004%" height="15" fill="rgb(209,67,49)" fg:x="4239" fg:w="13"/><text x="98.2163%" y="191.50"></text></g><g><title>esp`esp::var::variational (4,253 samples, 98.29%)</title><rect x="0.0000%" y="229" width="98.2898%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="4253"/><text x="0.2500%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`esp::wf::Wf::get_new_dets (117 samples, 2.70%)</title><rect x="95.5859%" y="213" width="2.7040%" height="15" fill="rgb(205,151,52)" fg:x="4136" fg:w="117"/><text x="95.8359%" y="223.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (1 samples, 0.02%)</title><rect x="98.2667%" y="197" width="0.0231%" height="15" fill="rgb(253,215,39)" fg:x="4252" fg:w="1"/><text x="98.5167%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (1 samples, 0.02%)</title><rect x="98.2667%" y="181" width="0.0231%" height="15" fill="rgb(221,220,41)" fg:x="4252" fg:w="1"/><text x="98.5167%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="98.2667%" y="165" width="0.0231%" height="15" fill="rgb(218,133,21)" fg:x="4252" fg:w="1"/><text x="98.5167%" y="175.50"></text></g><g><title>esp`esp::wf::init_var_wf (1 samples, 0.02%)</title><rect x="98.2898%" y="229" width="0.0231%" height="15" fill="rgb(221,193,43)" fg:x="4253" fg:w="1"/><text x="98.5398%" y="239.50"></text></g><g><title>esp`esp::wf::eps::init_eps (1 samples, 0.02%)</title><rect x="98.2898%" y="213" width="0.0231%" height="15" fill="rgb(240,128,52)" fg:x="4253" fg:w="1"/><text x="98.5398%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.5671%" y="101" width="0.0231%" height="15" fill="rgb(253,114,12)" fg:x="4265" fg:w="1"/><text x="98.8171%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="98.5902%" y="101" width="0.0693%" height="15" fill="rgb(215,223,47)" fg:x="4266" fg:w="3"/><text x="98.8402%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2 samples, 0.05%)</title><rect x="98.6134%" y="85" width="0.0462%" height="15" fill="rgb(248,225,23)" fg:x="4267" fg:w="2"/><text x="98.8634%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="98.6365%" y="69" width="0.0231%" height="15" fill="rgb(250,108,0)" fg:x="4268" fg:w="1"/><text x="98.8865%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="98.6365%" y="53" width="0.0231%" height="15" fill="rgb(228,208,7)" fg:x="4268" fg:w="1"/><text x="98.8865%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.05%)</title><rect x="98.6596%" y="101" width="0.0462%" height="15" fill="rgb(244,45,10)" fg:x="4269" fg:w="2"/><text x="98.9096%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.05%)</title><rect x="98.6596%" y="85" width="0.0462%" height="15" fill="rgb(207,125,25)" fg:x="4269" fg:w="2"/><text x="98.9096%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.02%)</title><rect x="98.7058%" y="101" width="0.0231%" height="15" fill="rgb(210,195,18)" fg:x="4271" fg:w="1"/><text x="98.9558%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.44%)</title><rect x="98.5440%" y="181" width="0.4391%" height="15" fill="rgb(249,80,12)" fg:x="4264" fg:w="19"/><text x="98.7940%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (19 samples, 0.44%)</title><rect x="98.5440%" y="165" width="0.4391%" height="15" fill="rgb(221,65,9)" fg:x="4264" fg:w="19"/><text x="98.7940%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.42%)</title><rect x="98.5671%" y="149" width="0.4160%" height="15" fill="rgb(235,49,36)" fg:x="4265" fg:w="18"/><text x="98.8171%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.42%)</title><rect x="98.5671%" y="133" width="0.4160%" height="15" fill="rgb(225,32,20)" fg:x="4265" fg:w="18"/><text x="98.8171%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (18 samples, 0.42%)</title><rect x="98.5671%" y="117" width="0.4160%" height="15" fill="rgb(215,141,46)" fg:x="4265" fg:w="18"/><text x="98.8171%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.25%)</title><rect x="98.7289%" y="101" width="0.2542%" height="15" fill="rgb(250,160,47)" fg:x="4272" fg:w="11"/><text x="98.9789%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="99.3760%" y="165" width="0.0231%" height="15" fill="rgb(216,222,40)" fg:x="4300" fg:w="1"/><text x="99.6260%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.3760%" y="149" width="0.0231%" height="15" fill="rgb(234,217,39)" fg:x="4300" fg:w="1"/><text x="99.6260%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.02%)</title><rect x="99.3760%" y="133" width="0.0231%" height="15" fill="rgb(207,178,40)" fg:x="4300" fg:w="1"/><text x="99.6260%" y="143.50"></text></g><g><title>esp`alloc::slice::merge_sort (22 samples, 0.51%)</title><rect x="98.9831%" y="181" width="0.5084%" height="15" fill="rgb(221,136,13)" fg:x="4283" fg:w="22"/><text x="99.2331%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="99.3991%" y="165" width="0.0924%" height="15" fill="rgb(249,199,10)" fg:x="4301" fg:w="4"/><text x="99.6491%" y="175.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (52 samples, 1.20%)</title><rect x="98.3129%" y="197" width="1.2018%" height="15" fill="rgb(249,222,13)" fg:x="4254" fg:w="52"/><text x="98.5629%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1 samples, 0.02%)</title><rect x="99.4916%" y="181" width="0.0231%" height="15" fill="rgb(244,185,38)" fg:x="4305" fg:w="1"/><text x="99.7416%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="99.5609%" y="149" width="0.0462%" height="15" fill="rgb(236,202,9)" fg:x="4308" fg:w="2"/><text x="99.8109%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="99.5609%" y="133" width="0.0462%" height="15" fill="rgb(250,229,37)" fg:x="4308" fg:w="2"/><text x="99.8109%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.05%)</title><rect x="99.5609%" y="117" width="0.0462%" height="15" fill="rgb(206,174,23)" fg:x="4308" fg:w="2"/><text x="99.8109%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="99.5609%" y="101" width="0.0462%" height="15" fill="rgb(211,33,43)" fg:x="4308" fg:w="2"/><text x="99.8109%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="99.5609%" y="85" width="0.0462%" height="15" fill="rgb(245,58,50)" fg:x="4308" fg:w="2"/><text x="99.8109%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="99.6071%" y="149" width="0.0231%" height="15" fill="rgb(244,68,36)" fg:x="4310" fg:w="1"/><text x="99.8571%" y="159.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="99.5378%" y="181" width="0.1156%" height="15" fill="rgb(232,229,15)" fg:x="4307" fg:w="5"/><text x="99.7878%" y="191.50"></text></g><g><title>esp`std::io::append_to_string (4 samples, 0.09%)</title><rect x="99.5609%" y="165" width="0.0924%" height="15" fill="rgb(254,30,23)" fg:x="4308" fg:w="4"/><text x="99.8109%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="99.6302%" y="149" width="0.0231%" height="15" fill="rgb(235,160,14)" fg:x="4311" fg:w="1"/><text x="99.8802%" y="159.50"></text></g><g><title>esp`std::rt::lang_start::_{{closure}} (4,314 samples, 99.70%)</title><rect x="0.0000%" y="277" width="99.6996%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (4,314 samples, 99.70%)</title><rect x="0.0000%" y="261" width="99.6996%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (4,314 samples, 99.70%)</title><rect x="0.0000%" y="245" width="99.6996%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="4314"/><text x="0.2500%" y="255.50">esp`esp::main</text></g><g><title>esp`std::sync::once::Once::call_inner (60 samples, 1.39%)</title><rect x="98.3129%" y="229" width="1.3866%" height="15" fill="rgb(217,24,9)" fg:x="4254" fg:w="60"/><text x="98.5629%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (60 samples, 1.39%)</title><rect x="98.3129%" y="213" width="1.3866%" height="15" fill="rgb(220,13,46)" fg:x="4254" fg:w="60"/><text x="98.5629%" y="223.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (8 samples, 0.18%)</title><rect x="99.5147%" y="197" width="0.1849%" height="15" fill="rgb(239,221,27)" fg:x="4306" fg:w="8"/><text x="99.7647%" y="207.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (2 samples, 0.05%)</title><rect x="99.6533%" y="181" width="0.0462%" height="15" fill="rgb(222,198,25)" fg:x="4312" fg:w="2"/><text x="99.9033%" y="191.50"></text></g><g><title>esp`main (4,315 samples, 99.72%)</title><rect x="0.0000%" y="309" width="99.7227%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="4315"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (4,315 samples, 99.72%)</title><rect x="0.0000%" y="293" width="99.7227%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="4315"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::sys_common::thread_info::set (1 samples, 0.02%)</title><rect x="99.6996%" y="277" width="0.0231%" height="15" fill="rgb(245,82,37)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="287.50"></text></g><g><title>esp`std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.02%)</title><rect x="99.6996%" y="261" width="0.0231%" height="15" fill="rgb(227,149,46)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="271.50"></text></g><g><title>esp`std::sys::unix::thread_local_dtor::register_dtor (1 samples, 0.02%)</title><rect x="99.6996%" y="245" width="0.0231%" height="15" fill="rgb(218,36,50)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="255.50"></text></g><g><title>libdyld.dylib`_tlv_atexit (1 samples, 0.02%)</title><rect x="99.6996%" y="229" width="0.0231%" height="15" fill="rgb(226,80,48)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.6996%" y="213" width="0.0231%" height="15" fill="rgb(238,224,15)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6996%" y="197" width="0.0231%" height="15" fill="rgb(241,136,10)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6996%" y="181" width="0.0231%" height="15" fill="rgb(208,32,45)" fg:x="4314" fg:w="1"/><text x="99.9496%" y="191.50"></text></g><g><title>all (4,327 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="4327"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (4,327 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="4327"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (4,327 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="4327"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (12 samples, 0.28%)</title><rect x="99.7227%" y="309" width="0.2773%" height="15" fill="rgb(206,64,50)" fg:x="4315" fg:w="12"/><text x="99.9727%" y="319.50"></text></g></svg></svg>