<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="34327"><g><title>esp`vose_alias::VoseAlias&lt;T&gt;::new (5 samples, 0.01%)</title><rect x="0.0350%" y="245" width="0.0146%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="5"/><text x="0.2850%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.01%)</title><rect x="0.0350%" y="229" width="0.0146%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="5"/><text x="0.2850%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.01%)</title><rect x="0.0350%" y="213" width="0.0146%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="5"/><text x="0.2850%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.01%)</title><rect x="0.0350%" y="197" width="0.0146%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="5"/><text x="0.2850%" y="207.50"></text></g><g><title>esp`esp::stoch::generate_screened_sampler (11 samples, 0.03%)</title><rect x="0.0291%" y="261" width="0.0320%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="11"/><text x="0.2791%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="0.0495%" y="245" width="0.0117%" height="15" fill="rgb(232,128,0)" fg:x="17" fg:w="4"/><text x="0.2995%" y="255.50"></text></g><g><title>esp`esp::semistoch::semistoch_enpt2 (29 samples, 0.08%)</title><rect x="0.0029%" y="293" width="0.0845%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="29"/><text x="0.2529%" y="303.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_no_singles (29 samples, 0.08%)</title><rect x="0.0029%" y="277" width="0.0845%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="29"/><text x="0.2529%" y="287.50"></text></g><g><title>esp`std::io::stdio::_print (8 samples, 0.02%)</title><rect x="0.0641%" y="261" width="0.0233%" height="15" fill="rgb(218,30,26)" fg:x="22" fg:w="8"/><text x="0.3141%" y="271.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (8 samples, 0.02%)</title><rect x="0.0641%" y="245" width="0.0233%" height="15" fill="rgb(220,122,19)" fg:x="22" fg:w="8"/><text x="0.3141%" y="255.50"></text></g><g><title>esp`core::fmt::write (8 samples, 0.02%)</title><rect x="0.0641%" y="229" width="0.0233%" height="15" fill="rgb(250,228,42)" fg:x="22" fg:w="8"/><text x="0.3141%" y="239.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.02%)</title><rect x="0.0641%" y="213" width="0.0233%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="8"/><text x="0.3141%" y="223.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 0.02%)</title><rect x="0.0641%" y="197" width="0.0233%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="8"/><text x="0.3141%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.02%)</title><rect x="0.0641%" y="181" width="0.0233%" height="15" fill="rgb(206,188,39)" fg:x="22" fg:w="8"/><text x="0.3141%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (179 samples, 0.52%)</title><rect x="9.9892%" y="277" width="0.5215%" height="15" fill="rgb(217,207,13)" fg:x="3429" fg:w="179"/><text x="10.2392%" y="287.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt; as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (124 samples, 0.36%)</title><rect x="10.5194%" y="261" width="0.3612%" height="15" fill="rgb(231,73,38)" fg:x="3611" fg:w="124"/><text x="10.7694%" y="271.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (124 samples, 0.36%)</title><rect x="10.5194%" y="245" width="0.3612%" height="15" fill="rgb(225,20,46)" fg:x="3611" fg:w="124"/><text x="10.7694%" y="255.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (5 samples, 0.01%)</title><rect x="10.8894%" y="261" width="0.0146%" height="15" fill="rgb(210,31,41)" fg:x="3738" fg:w="5"/><text x="11.1394%" y="271.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (5 samples, 0.01%)</title><rect x="10.8894%" y="245" width="0.0146%" height="15" fill="rgb(221,200,47)" fg:x="3738" fg:w="5"/><text x="11.1394%" y="255.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (4 samples, 0.01%)</title><rect x="10.8923%" y="229" width="0.0117%" height="15" fill="rgb(226,26,5)" fg:x="3739" fg:w="4"/><text x="11.1423%" y="239.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (4 samples, 0.01%)</title><rect x="10.9069%" y="261" width="0.0117%" height="15" fill="rgb(249,33,26)" fg:x="3744" fg:w="4"/><text x="11.1569%" y="271.50"></text></g><g><title>esp`std::io::stdio::_print (5 samples, 0.01%)</title><rect x="10.9185%" y="261" width="0.0146%" height="15" fill="rgb(235,183,28)" fg:x="3748" fg:w="5"/><text x="11.1685%" y="271.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5 samples, 0.01%)</title><rect x="10.9185%" y="245" width="0.0146%" height="15" fill="rgb(221,5,38)" fg:x="3748" fg:w="5"/><text x="11.1685%" y="255.50"></text></g><g><title>esp`core::fmt::write (5 samples, 0.01%)</title><rect x="10.9185%" y="229" width="0.0146%" height="15" fill="rgb(247,18,42)" fg:x="3748" fg:w="5"/><text x="11.1685%" y="239.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt (5 samples, 0.01%)</title><rect x="10.9185%" y="213" width="0.0146%" height="15" fill="rgb(241,131,45)" fg:x="3748" fg:w="5"/><text x="11.1685%" y="223.50"></text></g><g><title>esp`core::fmt::Formatter::write_fmt (4 samples, 0.01%)</title><rect x="10.9214%" y="197" width="0.0117%" height="15" fill="rgb(249,31,29)" fg:x="3749" fg:w="4"/><text x="11.1714%" y="207.50"></text></g><g><title>esp`core::fmt::write (4 samples, 0.01%)</title><rect x="10.9214%" y="181" width="0.0117%" height="15" fill="rgb(225,111,53)" fg:x="3749" fg:w="4"/><text x="11.1714%" y="191.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="10.9214%" y="165" width="0.0117%" height="15" fill="rgb(238,160,17)" fg:x="3749" fg:w="4"/><text x="11.1714%" y="175.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.01%)</title><rect x="10.9214%" y="149" width="0.0117%" height="15" fill="rgb(214,148,48)" fg:x="3749" fg:w="4"/><text x="11.1714%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.03%)</title><rect x="10.9331%" y="261" width="0.0262%" height="15" fill="rgb(232,36,49)" fg:x="3753" fg:w="9"/><text x="11.1831%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_large (12 samples, 0.03%)</title><rect x="10.9593%" y="261" width="0.0350%" height="15" fill="rgb(209,103,24)" fg:x="3762" fg:w="12"/><text x="11.2093%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (12 samples, 0.03%)</title><rect x="10.9593%" y="245" width="0.0350%" height="15" fill="rgb(229,88,8)" fg:x="3762" fg:w="12"/><text x="11.2093%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (12 samples, 0.03%)</title><rect x="10.9593%" y="229" width="0.0350%" height="15" fill="rgb(213,181,19)" fg:x="3762" fg:w="12"/><text x="11.2093%" y="239.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (167 samples, 0.49%)</title><rect x="10.5107%" y="277" width="0.4865%" height="15" fill="rgb(254,191,54)" fg:x="3608" fg:w="167"/><text x="10.7607%" y="287.50"></text></g><g><title>esp`rand::distributions::float::_&lt;impl rand::distributions::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (118 samples, 0.34%)</title><rect x="11.9964%" y="229" width="0.3438%" height="15" fill="rgb(241,83,37)" fg:x="4118" fg:w="118"/><text x="12.2464%" y="239.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide (62 samples, 0.18%)</title><rect x="12.1595%" y="213" width="0.1806%" height="15" fill="rgb(233,36,39)" fg:x="4174" fg:w="62"/><text x="12.4095%" y="223.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide::impl_avx2 (58 samples, 0.17%)</title><rect x="12.1712%" y="197" width="0.1690%" height="15" fill="rgb(226,3,54)" fg:x="4178" fg:w="58"/><text x="12.4212%" y="207.50"></text></g><g><title>esp`nalgebra::base::construction::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;::Buffer&gt;&gt;::new_random (194 samples, 0.57%)</title><rect x="11.7837%" y="245" width="0.5652%" height="15" fill="rgb(245,192,40)" fg:x="4045" fg:w="194"/><text x="12.0337%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.04%)</title><rect x="12.3518%" y="245" width="0.0379%" height="15" fill="rgb(238,167,29)" fg:x="4240" fg:w="13"/><text x="12.6018%" y="255.50"></text></g><g><title>esp`eigenvalues::utils::generate_diagonal_dominant (446 samples, 1.30%)</title><rect x="11.0991%" y="261" width="1.2993%" height="15" fill="rgb(232,182,51)" fg:x="3810" fg:w="446"/><text x="11.3491%" y="271.50"></text></g><g><title>esp`eigenvalues::utils::generate_random_sparse_symmetric (492 samples, 1.43%)</title><rect x="10.9972%" y="277" width="1.4333%" height="15" fill="rgb(231,60,39)" fg:x="3775" fg:w="492"/><text x="11.2472%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.03%)</title><rect x="12.3984%" y="261" width="0.0320%" height="15" fill="rgb(208,69,12)" fg:x="4256" fg:w="11"/><text x="12.6484%" y="271.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (44 samples, 0.13%)</title><rect x="12.4304%" y="277" width="0.1282%" height="15" fill="rgb(235,93,37)" fg:x="4267" fg:w="44"/><text x="12.6804%" y="287.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (6 samples, 0.02%)</title><rect x="12.5411%" y="261" width="0.0175%" height="15" fill="rgb(213,116,39)" fg:x="4305" fg:w="6"/><text x="12.7911%" y="271.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (10 samples, 0.03%)</title><rect x="12.5586%" y="277" width="0.0291%" height="15" fill="rgb(222,207,29)" fg:x="4311" fg:w="10"/><text x="12.8086%" y="287.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4 samples, 0.01%)</title><rect x="12.5761%" y="261" width="0.0117%" height="15" fill="rgb(206,96,30)" fg:x="4317" fg:w="4"/><text x="12.8261%" y="271.50"></text></g><g><title>esp`alloc::fmt::format (5 samples, 0.01%)</title><rect x="12.5907%" y="245" width="0.0146%" height="15" fill="rgb(218,138,4)" fg:x="4322" fg:w="5"/><text x="12.8407%" y="255.50"></text></g><g><title>esp`core::fmt::write (5 samples, 0.01%)</title><rect x="12.5907%" y="229" width="0.0146%" height="15" fill="rgb(250,191,14)" fg:x="4322" fg:w="5"/><text x="12.8407%" y="239.50"></text></g><g><title>esp`core::fmt::num::_&lt;impl core::fmt::Binary for i128&gt;::fmt (5 samples, 0.01%)</title><rect x="12.5907%" y="213" width="0.0146%" height="15" fill="rgb(239,60,40)" fg:x="4322" fg:w="5"/><text x="12.8407%" y="223.50"></text></g><g><title>esp`core::fmt::Formatter::pad_integral (4 samples, 0.01%)</title><rect x="12.5936%" y="197" width="0.0117%" height="15" fill="rgb(206,27,48)" fg:x="4323" fg:w="4"/><text x="12.8436%" y="207.50"></text></g><g><title>esp`alloc::str::_&lt;impl str&gt;::replace (6 samples, 0.02%)</title><rect x="12.6052%" y="245" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="4327" fg:w="6"/><text x="12.8552%" y="255.50"></text></g><g><title>esp`esp::utils::display::fmt_det (14 samples, 0.04%)</title><rect x="12.5907%" y="261" width="0.0408%" height="15" fill="rgb(250,213,24)" fg:x="4322" fg:w="14"/><text x="12.8407%" y="271.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 0.14%)</title><rect x="12.6315%" y="213" width="0.1427%" height="15" fill="rgb(247,123,22)" fg:x="4336" fg:w="49"/><text x="12.8815%" y="223.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (49 samples, 0.14%)</title><rect x="12.6315%" y="197" width="0.1427%" height="15" fill="rgb(231,138,38)" fg:x="4336" fg:w="49"/><text x="12.8815%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (47 samples, 0.14%)</title><rect x="12.6373%" y="181" width="0.1369%" height="15" fill="rgb(231,145,46)" fg:x="4338" fg:w="47"/><text x="12.8873%" y="191.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (51 samples, 0.15%)</title><rect x="12.6315%" y="245" width="0.1486%" height="15" fill="rgb(251,118,11)" fg:x="4336" fg:w="51"/><text x="12.8815%" y="255.50"></text></g><g><title>esp`core::fmt::write (51 samples, 0.15%)</title><rect x="12.6315%" y="229" width="0.1486%" height="15" fill="rgb(217,147,25)" fg:x="4336" fg:w="51"/><text x="12.8815%" y="239.50"></text></g><g><title>esp`std::io::stdio::_print (52 samples, 0.15%)</title><rect x="12.6315%" y="261" width="0.1515%" height="15" fill="rgb(247,81,37)" fg:x="4336" fg:w="52"/><text x="12.8815%" y="271.50"></text></g><g><title>esp`esp::utils::display::_&lt;impl esp::wf::Wf&gt;::print (69 samples, 0.20%)</title><rect x="12.5878%" y="277" width="0.2010%" height="15" fill="rgb(209,12,38)" fg:x="4321" fg:w="69"/><text x="12.8378%" y="287.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (5 samples, 0.01%)</title><rect x="12.8092%" y="261" width="0.0146%" height="15" fill="rgb(227,1,9)" fg:x="4397" fg:w="5"/><text x="13.0592%" y="271.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 0.02%)</title><rect x="12.8266%" y="261" width="0.0175%" height="15" fill="rgb(248,47,43)" fg:x="4403" fg:w="6"/><text x="13.0766%" y="271.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (26 samples, 0.08%)</title><rect x="12.7888%" y="277" width="0.0757%" height="15" fill="rgb(221,10,30)" fg:x="4390" fg:w="26"/><text x="13.0388%" y="287.50"></text></g><g><title>esp`hashbrown::map::make_hash (6 samples, 0.02%)</title><rect x="12.8470%" y="261" width="0.0175%" height="15" fill="rgb(210,229,1)" fg:x="4410" fg:w="6"/><text x="13.0970%" y="271.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.01%)</title><rect x="12.8529%" y="245" width="0.0117%" height="15" fill="rgb(222,148,37)" fg:x="4412" fg:w="4"/><text x="13.1029%" y="255.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (3,693 samples, 10.76%)</title><rect x="12.8645%" y="277" width="10.7583%" height="15" fill="rgb(234,67,33)" fg:x="4416" fg:w="3693"/><text x="13.1145%" y="287.50">esp`esp::wf::det..</text></g><g><title>esp`hashbrown::map::make_hash (5,025 samples, 14.64%)</title><rect x="23.6228%" y="277" width="14.6386%" height="15" fill="rgb(247,98,35)" fg:x="8109" fg:w="5025"/><text x="23.8728%" y="287.50">esp`hashbrown::map::ma..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,679 samples, 7.80%)</title><rect x="30.4571%" y="261" width="7.8044%" height="15" fill="rgb(247,138,52)" fg:x="10455" fg:w="2679"/><text x="30.7071%" y="271.50">esp`&lt;std::c..</text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt (797 samples, 2.32%)</title><rect x="38.2614%" y="229" width="2.3218%" height="15" fill="rgb(213,79,30)" fg:x="13134" fg:w="797"/><text x="38.5114%" y="239.50">e..</text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt::val_width (9 samples, 0.03%)</title><rect x="40.5832%" y="229" width="0.0262%" height="15" fill="rgb(246,177,23)" fg:x="13931" fg:w="9"/><text x="40.8332%" y="239.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.01%)</title><rect x="41.1629%" y="181" width="0.0117%" height="15" fill="rgb(230,62,27)" fg:x="14130" fg:w="4"/><text x="41.4129%" y="191.50"></text></g><g><title>esp`core::fmt::float::_&lt;impl core::fmt::Display for f64&gt;::fmt (4 samples, 0.01%)</title><rect x="41.1746%" y="181" width="0.0117%" height="15" fill="rgb(216,154,8)" fg:x="14134" fg:w="4"/><text x="41.4246%" y="191.50"></text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (5 samples, 0.01%)</title><rect x="41.1862%" y="181" width="0.0146%" height="15" fill="rgb(244,35,45)" fg:x="14138" fg:w="5"/><text x="41.4362%" y="191.50"></text></g><g><title>esp`&lt;&amp;T as core::fmt::Display&gt;::fmt (5 samples, 0.01%)</title><rect x="41.4193%" y="165" width="0.0146%" height="15" fill="rgb(251,115,12)" fg:x="14218" fg:w="5"/><text x="41.6693%" y="175.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (80 samples, 0.23%)</title><rect x="41.4339%" y="165" width="0.2331%" height="15" fill="rgb(240,54,50)" fg:x="14223" fg:w="80"/><text x="41.6839%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (39 samples, 0.11%)</title><rect x="41.5533%" y="149" width="0.1136%" height="15" fill="rgb(233,84,52)" fg:x="14264" fg:w="39"/><text x="41.8033%" y="159.50"></text></g><g><title>esp`DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="41.6669%" y="165" width="0.0175%" height="15" fill="rgb(207,117,47)" fg:x="14303" fg:w="6"/><text x="41.9169%" y="175.50"></text></g><g><title>esp`core::fmt::float::_&lt;impl core::fmt::Display for f64&gt;::fmt (351 samples, 1.02%)</title><rect x="41.6844%" y="165" width="1.0225%" height="15" fill="rgb(249,43,39)" fg:x="14309" fg:w="351"/><text x="41.9344%" y="175.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.02%)</title><rect x="43.0274%" y="149" width="0.0204%" height="15" fill="rgb(209,38,44)" fg:x="14770" fg:w="7"/><text x="43.2774%" y="159.50"></text></g><g><title>esp`core::fmt::Formatter::pad_formatted_parts (29 samples, 0.08%)</title><rect x="43.0477%" y="149" width="0.0845%" height="15" fill="rgb(236,212,23)" fg:x="14777" fg:w="29"/><text x="43.2977%" y="159.50"></text></g><g><title>esp`__rdl_alloc (10 samples, 0.03%)</title><rect x="43.5634%" y="117" width="0.0291%" height="15" fill="rgb(242,79,21)" fg:x="14954" fg:w="10"/><text x="43.8134%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (636 samples, 1.85%)</title><rect x="43.9596%" y="85" width="1.8528%" height="15" fill="rgb(211,96,35)" fg:x="15090" fg:w="636"/><text x="44.2096%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (593 samples, 1.73%)</title><rect x="44.0848%" y="69" width="1.7275%" height="15" fill="rgb(253,215,40)" fg:x="15133" fg:w="593"/><text x="44.3348%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 0.08%)</title><rect x="45.7366%" y="53" width="0.0757%" height="15" fill="rgb(211,81,21)" fg:x="15700" fg:w="26"/><text x="45.9866%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.01%)</title><rect x="45.8007%" y="37" width="0.0117%" height="15" fill="rgb(208,190,38)" fg:x="15722" fg:w="4"/><text x="46.0507%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (715 samples, 2.08%)</title><rect x="43.7469%" y="101" width="2.0829%" height="15" fill="rgb(235,213,38)" fg:x="15017" fg:w="715"/><text x="43.9969%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.02%)</title><rect x="45.8123%" y="85" width="0.0175%" height="15" fill="rgb(237,122,38)" fg:x="15726" fg:w="6"/><text x="46.0623%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.04%)</title><rect x="45.8298%" y="101" width="0.0408%" height="15" fill="rgb(244,218,35)" fg:x="15732" fg:w="14"/><text x="46.0798%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.01%)</title><rect x="45.9230%" y="53" width="0.0146%" height="15" fill="rgb(240,68,47)" fg:x="15764" fg:w="5"/><text x="46.1730%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.01%)</title><rect x="45.9259%" y="37" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="15765" fg:w="4"/><text x="46.1759%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.04%)</title><rect x="46.0046%" y="37" width="0.0408%" height="15" fill="rgb(235,124,12)" fg:x="15792" fg:w="14"/><text x="46.2546%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (63 samples, 0.18%)</title><rect x="45.8939%" y="69" width="0.1835%" height="15" fill="rgb(224,169,11)" fg:x="15754" fg:w="63"/><text x="46.1439%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (48 samples, 0.14%)</title><rect x="45.9376%" y="53" width="0.1398%" height="15" fill="rgb(250,166,2)" fg:x="15769" fg:w="48"/><text x="46.1876%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (11 samples, 0.03%)</title><rect x="46.0454%" y="37" width="0.0320%" height="15" fill="rgb(242,216,29)" fg:x="15806" fg:w="11"/><text x="46.2954%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (68 samples, 0.20%)</title><rect x="45.8823%" y="85" width="0.1981%" height="15" fill="rgb(230,116,27)" fg:x="15750" fg:w="68"/><text x="46.1323%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (86 samples, 0.25%)</title><rect x="45.8735%" y="101" width="0.2505%" height="15" fill="rgb(228,99,48)" fg:x="15747" fg:w="86"/><text x="46.1235%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.04%)</title><rect x="46.0833%" y="85" width="0.0408%" height="15" fill="rgb(253,11,6)" fg:x="15819" fg:w="14"/><text x="46.3333%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (13 samples, 0.04%)</title><rect x="46.0862%" y="69" width="0.0379%" height="15" fill="rgb(247,143,39)" fg:x="15820" fg:w="13"/><text x="46.3362%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.02%)</title><rect x="46.1240%" y="101" width="0.0233%" height="15" fill="rgb(236,97,10)" fg:x="15833" fg:w="8"/><text x="46.3740%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (876 samples, 2.55%)</title><rect x="43.5983%" y="117" width="2.5519%" height="15" fill="rgb(233,208,19)" fg:x="14966" fg:w="876"/><text x="43.8483%" y="127.50">es..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.04%)</title><rect x="46.1503%" y="117" width="0.0437%" height="15" fill="rgb(216,164,2)" fg:x="15842" fg:w="15"/><text x="46.4003%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.01%)</title><rect x="46.1940%" y="117" width="0.0146%" height="15" fill="rgb(220,129,5)" fg:x="15857" fg:w="5"/><text x="46.4440%" y="127.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1,021 samples, 2.97%)</title><rect x="43.3361%" y="133" width="2.9743%" height="15" fill="rgb(242,17,10)" fg:x="14876" fg:w="1021"/><text x="43.5861%" y="143.50">esp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (35 samples, 0.10%)</title><rect x="46.2085%" y="117" width="0.1020%" height="15" fill="rgb(242,107,0)" fg:x="15862" fg:w="35"/><text x="46.4585%" y="127.50"></text></g><g><title>esp`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="46.3105%" y="133" width="0.0233%" height="15" fill="rgb(251,28,31)" fg:x="15897" fg:w="8"/><text x="46.5605%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (5 samples, 0.01%)</title><rect x="46.3338%" y="133" width="0.0146%" height="15" fill="rgb(233,223,10)" fg:x="15905" fg:w="5"/><text x="46.5838%" y="143.50"></text></g><g><title>esp`core::fmt::Formatter::write_formatted_parts (1,113 samples, 3.24%)</title><rect x="43.1322%" y="149" width="3.2423%" height="15" fill="rgb(215,21,27)" fg:x="14806" fg:w="1113"/><text x="43.3822%" y="159.50">esp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.03%)</title><rect x="46.3484%" y="133" width="0.0262%" height="15" fill="rgb(232,23,21)" fg:x="15910" fg:w="9"/><text x="46.5984%" y="143.50"></text></g><g><title>esp`core::num::flt2dec::strategy::dragon::format_shortest (5 samples, 0.01%)</title><rect x="46.3746%" y="149" width="0.0146%" height="15" fill="rgb(244,5,23)" fg:x="15919" fg:w="5"/><text x="46.6246%" y="159.50"></text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (1,335 samples, 3.89%)</title><rect x="42.7069%" y="165" width="3.8891%" height="15" fill="rgb(226,81,46)" fg:x="14660" fg:w="1335"/><text x="42.9569%" y="175.50">esp`..</text></g><g><title>esp`core::num::flt2dec::strategy::grisu::format_shortest_opt (71 samples, 0.21%)</title><rect x="46.3891%" y="149" width="0.2068%" height="15" fill="rgb(247,70,30)" fg:x="15924" fg:w="71"/><text x="46.6391%" y="159.50"></text></g><g><title>esp`alloc::fmt::format (1,969 samples, 5.74%)</title><rect x="40.8716%" y="197" width="5.7360%" height="15" fill="rgb(212,68,19)" fg:x="14030" fg:w="1969"/><text x="41.1216%" y="207.50">esp`all..</text></g><g><title>esp`core::fmt::write (1,856 samples, 5.41%)</title><rect x="41.2008%" y="181" width="5.4068%" height="15" fill="rgb(240,187,13)" fg:x="14143" fg:w="1856"/><text x="41.4508%" y="191.50">esp`cor..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="46.5960%" y="165" width="0.0117%" height="15" fill="rgb(223,113,26)" fg:x="15995" fg:w="4"/><text x="46.8460%" y="175.50"></text></g><g><title>esp`core::fmt::Formatter::precision (4 samples, 0.01%)</title><rect x="46.6076%" y="197" width="0.0117%" height="15" fill="rgb(206,192,2)" fg:x="15999" fg:w="4"/><text x="46.8576%" y="207.50"></text></g><g><title>esp`core::fmt::write (6 samples, 0.02%)</title><rect x="46.6193%" y="197" width="0.0175%" height="15" fill="rgb(241,108,4)" fg:x="16003" fg:w="6"/><text x="46.8693%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (133 samples, 0.39%)</title><rect x="46.9222%" y="181" width="0.3875%" height="15" fill="rgb(247,173,49)" fg:x="16107" fg:w="133"/><text x="47.1722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (113 samples, 0.33%)</title><rect x="46.9805%" y="165" width="0.3292%" height="15" fill="rgb(224,114,35)" fg:x="16127" fg:w="113"/><text x="47.2305%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (243 samples, 0.71%)</title><rect x="46.6368%" y="197" width="0.7079%" height="15" fill="rgb(245,159,27)" fg:x="16009" fg:w="243"/><text x="46.8868%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (12 samples, 0.03%)</title><rect x="47.3097%" y="181" width="0.0350%" height="15" fill="rgb(245,172,44)" fg:x="16240" fg:w="12"/><text x="47.5597%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.01%)</title><rect x="48.2477%" y="165" width="0.0146%" height="15" fill="rgb(236,23,11)" fg:x="16562" fg:w="5"/><text x="48.4977%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (317 samples, 0.92%)</title><rect x="47.3447%" y="197" width="0.9235%" height="15" fill="rgb(205,117,38)" fg:x="16252" fg:w="317"/><text x="47.5947%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.05%)</title><rect x="48.2157%" y="181" width="0.0524%" height="15" fill="rgb(237,72,25)" fg:x="16551" fg:w="18"/><text x="48.4657%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.02%)</title><rect x="48.2681%" y="197" width="0.0233%" height="15" fill="rgb(244,70,9)" fg:x="16569" fg:w="8"/><text x="48.5181%" y="207.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt::val_width (2,638 samples, 7.68%)</title><rect x="40.6094%" y="213" width="7.6849%" height="15" fill="rgb(217,125,39)" fg:x="13940" fg:w="2638"/><text x="40.8594%" y="223.50">esp`&lt;nalgeb..</text></g><g><title>esp`__rdl_dealloc (15 samples, 0.04%)</title><rect x="48.2943%" y="213" width="0.0437%" height="15" fill="rgb(235,36,10)" fg:x="16578" fg:w="15"/><text x="48.5443%" y="223.50"></text></g><g><title>esp`alloc::fmt::format (7 samples, 0.02%)</title><rect x="48.3380%" y="213" width="0.0204%" height="15" fill="rgb(251,123,47)" fg:x="16593" fg:w="7"/><text x="48.5880%" y="223.50"></text></g><g><title>esp`core::fmt::ArgumentV1::from_usize (4 samples, 0.01%)</title><rect x="48.3584%" y="213" width="0.0117%" height="15" fill="rgb(221,13,13)" fg:x="16600" fg:w="4"/><text x="48.6084%" y="223.50"></text></g><g><title>esp`core::fmt::Formatter::precision (29 samples, 0.08%)</title><rect x="48.3701%" y="213" width="0.0845%" height="15" fill="rgb(238,131,9)" fg:x="16604" fg:w="29"/><text x="48.6201%" y="223.50"></text></g><g><title>esp`&lt;&amp;T as core::fmt::Display&gt;::fmt (8 samples, 0.02%)</title><rect x="48.7838%" y="197" width="0.0233%" height="15" fill="rgb(211,50,8)" fg:x="16746" fg:w="8"/><text x="49.0338%" y="207.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (16 samples, 0.05%)</title><rect x="48.8071%" y="197" width="0.0466%" height="15" fill="rgb(245,182,24)" fg:x="16754" fg:w="16"/><text x="49.0571%" y="207.50"></text></g><g><title>esp`core::fmt::float::_&lt;impl core::fmt::Display for f64&gt;::fmt (10 samples, 0.03%)</title><rect x="48.8682%" y="197" width="0.0291%" height="15" fill="rgb(242,14,37)" fg:x="16775" fg:w="10"/><text x="49.1182%" y="207.50"></text></g><g><title>esp`&lt;&amp;T as core::fmt::Display&gt;::fmt (10 samples, 0.03%)</title><rect x="49.5994%" y="181" width="0.0291%" height="15" fill="rgb(246,228,12)" fg:x="17026" fg:w="10"/><text x="49.8494%" y="191.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.04%)</title><rect x="49.9432%" y="165" width="0.0379%" height="15" fill="rgb(213,55,15)" fg:x="17144" fg:w="13"/><text x="50.1932%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (75 samples, 0.22%)</title><rect x="50.7297%" y="133" width="0.2185%" height="15" fill="rgb(209,9,3)" fg:x="17414" fg:w="75"/><text x="50.9797%" y="143.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (242 samples, 0.70%)</title><rect x="50.4443%" y="149" width="0.7050%" height="15" fill="rgb(230,59,30)" fg:x="17316" fg:w="242"/><text x="50.6943%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (69 samples, 0.20%)</title><rect x="50.9482%" y="133" width="0.2010%" height="15" fill="rgb(209,121,21)" fg:x="17489" fg:w="69"/><text x="51.1982%" y="143.50"></text></g><g><title>esp`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="51.1492%" y="149" width="0.0204%" height="15" fill="rgb(220,109,13)" fg:x="17558" fg:w="7"/><text x="51.3992%" y="159.50"></text></g><g><title>esp`core::slice::memchr::memrchr (133 samples, 0.39%)</title><rect x="51.1696%" y="149" width="0.3875%" height="15" fill="rgb(232,18,1)" fg:x="17565" fg:w="133"/><text x="51.4196%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (39 samples, 0.11%)</title><rect x="51.5571%" y="149" width="0.1136%" height="15" fill="rgb(215,41,42)" fg:x="17698" fg:w="39"/><text x="51.8071%" y="159.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (588 samples, 1.71%)</title><rect x="49.9811%" y="165" width="1.7129%" height="15" fill="rgb(224,123,36)" fg:x="17157" fg:w="588"/><text x="50.2311%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.02%)</title><rect x="51.6707%" y="149" width="0.0233%" height="15" fill="rgb(240,125,3)" fg:x="17737" fg:w="8"/><text x="51.9207%" y="159.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (733 samples, 2.14%)</title><rect x="49.6286%" y="181" width="2.1353%" height="15" fill="rgb(205,98,50)" fg:x="17036" fg:w="733"/><text x="49.8786%" y="191.50">e..</text></g><g><title>esp`core::slice::memchr::memrchr (24 samples, 0.07%)</title><rect x="51.6940%" y="165" width="0.0699%" height="15" fill="rgb(205,185,37)" fg:x="17745" fg:w="24"/><text x="51.9440%" y="175.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (27 samples, 0.08%)</title><rect x="51.7639%" y="181" width="0.0787%" height="15" fill="rgb(238,207,15)" fg:x="17769" fg:w="27"/><text x="52.0139%" y="191.50"></text></g><g><title>esp`&lt;str as core::fmt::Display&gt;::fmt (10 samples, 0.03%)</title><rect x="51.8426%" y="181" width="0.0291%" height="15" fill="rgb(213,199,42)" fg:x="17796" fg:w="10"/><text x="52.0926%" y="191.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 0.02%)</title><rect x="54.3158%" y="149" width="0.0204%" height="15" fill="rgb(235,201,11)" fg:x="18645" fg:w="7"/><text x="54.5658%" y="159.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (84 samples, 0.24%)</title><rect x="54.5751%" y="133" width="0.2447%" height="15" fill="rgb(207,46,11)" fg:x="18734" fg:w="84"/><text x="54.8251%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (27 samples, 0.08%)</title><rect x="54.7412%" y="117" width="0.0787%" height="15" fill="rgb(241,35,35)" fg:x="18791" fg:w="27"/><text x="54.9912%" y="127.50"></text></g><g><title>esp`core::slice::memchr::memrchr (73 samples, 0.21%)</title><rect x="54.8286%" y="133" width="0.2127%" height="15" fill="rgb(243,32,47)" fg:x="18821" fg:w="73"/><text x="55.0786%" y="143.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (244 samples, 0.71%)</title><rect x="54.3362%" y="149" width="0.7108%" height="15" fill="rgb(247,202,23)" fg:x="18652" fg:w="244"/><text x="54.5862%" y="159.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (537 samples, 1.56%)</title><rect x="53.4914%" y="165" width="1.5644%" height="15" fill="rgb(219,102,11)" fg:x="18362" fg:w="537"/><text x="53.7414%" y="175.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (16 samples, 0.05%)</title><rect x="55.0558%" y="165" width="0.0466%" height="15" fill="rgb(243,110,44)" fg:x="18899" fg:w="16"/><text x="55.3058%" y="175.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (212 samples, 0.62%)</title><rect x="59.7518%" y="133" width="0.6176%" height="15" fill="rgb(222,74,54)" fg:x="20511" fg:w="212"/><text x="60.0018%" y="143.50"></text></g><g><title>esp`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (36 samples, 0.10%)</title><rect x="73.5777%" y="101" width="0.1049%" height="15" fill="rgb(216,99,12)" fg:x="25257" fg:w="36"/><text x="73.8277%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (2,637 samples, 7.68%)</title><rect x="73.6825%" y="101" width="7.6820%" height="15" fill="rgb(226,22,26)" fg:x="25293" fg:w="2637"/><text x="73.9325%" y="111.50">libsystem_k..</text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5,443 samples, 15.86%)</title><rect x="68.4010%" y="117" width="15.8563%" height="15" fill="rgb(217,163,10)" fg:x="23480" fg:w="5443"/><text x="68.6510%" y="127.50">esp`&lt;std::io::buffered::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (993 samples, 2.89%)</title><rect x="81.3645%" y="101" width="2.8928%" height="15" fill="rgb(213,25,53)" fg:x="27930" fg:w="993"/><text x="81.6145%" y="111.50">li..</text></g><g><title>esp`DYLD-STUB$$memcpy (185 samples, 0.54%)</title><rect x="84.2573%" y="117" width="0.5389%" height="15" fill="rgb(252,105,26)" fg:x="28923" fg:w="185"/><text x="84.5073%" y="127.50"></text></g><g><title>esp`core::slice::memchr::memrchr (2,265 samples, 6.60%)</title><rect x="84.7962%" y="117" width="6.5983%" height="15" fill="rgb(220,39,43)" fg:x="29108" fg:w="2265"/><text x="85.0462%" y="127.50">esp`core:..</text></g><g><title>esp`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.01%)</title><rect x="91.3945%" y="117" width="0.0117%" height="15" fill="rgb(229,68,48)" fg:x="31373" fg:w="4"/><text x="91.6445%" y="127.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (11,021 samples, 32.11%)</title><rect x="60.3694%" y="133" width="32.1059%" height="15" fill="rgb(252,8,32)" fg:x="20723" fg:w="11021"/><text x="60.6194%" y="143.50">esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (367 samples, 1.07%)</title><rect x="91.4062%" y="117" width="1.0691%" height="15" fill="rgb(223,20,43)" fg:x="31377" fg:w="367"/><text x="91.6562%" y="127.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (12,356 samples, 35.99%)</title><rect x="56.7658%" y="149" width="35.9950%" height="15" fill="rgb(229,81,49)" fg:x="19486" fg:w="12356"/><text x="57.0158%" y="159.50">esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Wr..</text></g><g><title>esp`core::slice::memchr::memrchr (98 samples, 0.29%)</title><rect x="92.4753%" y="133" width="0.2855%" height="15" fill="rgb(236,28,36)" fg:x="31744" fg:w="98"/><text x="92.7253%" y="143.50"></text></g><g><title>esp`core::fmt::Formatter::pad (14,423 samples, 42.02%)</title><rect x="51.8717%" y="181" width="42.0165%" height="15" fill="rgb(249,185,26)" fg:x="17806" fg:w="14423"/><text x="52.1217%" y="191.50">esp`core::fmt::Formatter::pad</text></g><g><title>esp`core::fmt::Write::write_char (13,314 samples, 38.79%)</title><rect x="55.1024%" y="165" width="38.7858%" height="15" fill="rgb(249,174,33)" fg:x="18915" fg:w="13314"/><text x="55.3524%" y="175.50">esp`core::fmt::Write::write_char</text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (387 samples, 1.13%)</title><rect x="92.7608%" y="149" width="1.1274%" height="15" fill="rgb(233,201,37)" fg:x="31842" fg:w="387"/><text x="93.0108%" y="159.50"></text></g><g><title>esp`core::fmt::Formatter::write_formatted_parts (4 samples, 0.01%)</title><rect x="93.8882%" y="181" width="0.0117%" height="15" fill="rgb(221,78,26)" fg:x="32229" fg:w="4"/><text x="94.1382%" y="191.50"></text></g><g><title>esp`core::fmt::Write::write_char (226 samples, 0.66%)</title><rect x="93.8998%" y="181" width="0.6584%" height="15" fill="rgb(250,127,30)" fg:x="32233" fg:w="226"/><text x="94.1498%" y="191.50"></text></g><g><title>esp`core::fmt::float::_&lt;impl core::fmt::Display for f64&gt;::fmt (733 samples, 2.14%)</title><rect x="94.5582%" y="181" width="2.1353%" height="15" fill="rgb(230,49,44)" fg:x="32459" fg:w="733"/><text x="94.8082%" y="191.50">e..</text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (10 samples, 0.03%)</title><rect x="97.0490%" y="165" width="0.0291%" height="15" fill="rgb(229,67,23)" fg:x="33314" fg:w="10"/><text x="97.2990%" y="175.50"></text></g><g><title>esp`core::fmt::Formatter::pad_formatted_parts (38 samples, 0.11%)</title><rect x="97.0781%" y="165" width="0.1107%" height="15" fill="rgb(249,83,47)" fg:x="33324" fg:w="38"/><text x="97.3281%" y="175.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (8 samples, 0.02%)</title><rect x="97.4772%" y="133" width="0.0233%" height="15" fill="rgb(215,43,3)" fg:x="33461" fg:w="8"/><text x="97.7272%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (154 samples, 0.45%)</title><rect x="97.9637%" y="101" width="0.4486%" height="15" fill="rgb(238,154,13)" fg:x="33628" fg:w="154"/><text x="98.2137%" y="111.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (239 samples, 0.70%)</title><rect x="97.8268%" y="117" width="0.6962%" height="15" fill="rgb(219,56,2)" fg:x="33581" fg:w="239"/><text x="98.0768%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.11%)</title><rect x="98.4123%" y="101" width="0.1107%" height="15" fill="rgb(233,0,4)" fg:x="33782" fg:w="38"/><text x="98.6623%" y="111.50"></text></g><g><title>esp`core::slice::memchr::memrchr (87 samples, 0.25%)</title><rect x="98.5318%" y="117" width="0.2534%" height="15" fill="rgb(235,30,7)" fg:x="33823" fg:w="87"/><text x="98.7818%" y="127.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (445 samples, 1.30%)</title><rect x="97.5005%" y="133" width="1.2964%" height="15" fill="rgb(250,79,13)" fg:x="33469" fg:w="445"/><text x="97.7505%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="98.7852%" y="117" width="0.0117%" height="15" fill="rgb(211,146,34)" fg:x="33910" fg:w="4"/><text x="99.0352%" y="127.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (505 samples, 1.47%)</title><rect x="97.3549%" y="149" width="1.4711%" height="15" fill="rgb(228,22,38)" fg:x="33419" fg:w="505"/><text x="97.6049%" y="159.50"></text></g><g><title>esp`core::slice::memchr::memrchr (10 samples, 0.03%)</title><rect x="98.7969%" y="133" width="0.0291%" height="15" fill="rgb(235,168,5)" fg:x="33914" fg:w="10"/><text x="99.0469%" y="143.50"></text></g><g><title>esp`core::fmt::Formatter::write_formatted_parts (565 samples, 1.65%)</title><rect x="97.1888%" y="165" width="1.6459%" height="15" fill="rgb(221,155,16)" fg:x="33362" fg:w="565"/><text x="97.4388%" y="175.50"></text></g><g><title>esp`core::num::flt2dec::strategy::dragon::format_shortest (8 samples, 0.02%)</title><rect x="98.8347%" y="165" width="0.0233%" height="15" fill="rgb(215,215,53)" fg:x="33927" fg:w="8"/><text x="99.0847%" y="175.50"></text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (829 samples, 2.42%)</title><rect x="96.6936%" y="181" width="2.4150%" height="15" fill="rgb(223,4,10)" fg:x="33192" fg:w="829"/><text x="96.9436%" y="191.50">es..</text></g><g><title>esp`core::num::flt2dec::strategy::grisu::format_shortest_opt (86 samples, 0.25%)</title><rect x="98.8580%" y="165" width="0.2505%" height="15" fill="rgb(234,103,6)" fg:x="33935" fg:w="86"/><text x="99.1080%" y="175.50"></text></g><g><title>esp`core::fmt::Formatter::write_fmt (17,392 samples, 50.67%)</title><rect x="48.4546%" y="213" width="50.6657%" height="15" fill="rgb(227,97,0)" fg:x="16633" fg:w="17392"/><text x="48.7046%" y="223.50">esp`core::fmt::Formatter::write_fmt</text></g><g><title>esp`core::fmt::write (17,240 samples, 50.22%)</title><rect x="48.8974%" y="197" width="50.2229%" height="15" fill="rgb(234,150,53)" fg:x="16785" fg:w="17240"/><text x="49.1474%" y="207.50">esp`core::fmt::write</text></g><g><title>esp`core::num::flt2dec::strategy::grisu::format_shortest_opt (4 samples, 0.01%)</title><rect x="99.1086%" y="181" width="0.0117%" height="15" fill="rgb(228,201,54)" fg:x="34021" fg:w="4"/><text x="99.3586%" y="191.50"></text></g><g><title>esp`core::fmt::write (16 samples, 0.05%)</title><rect x="99.1202%" y="213" width="0.0466%" height="15" fill="rgb(222,22,37)" fg:x="34025" fg:w="16"/><text x="99.3702%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.03%)</title><rect x="99.1668%" y="213" width="0.0291%" height="15" fill="rgb(237,53,32)" fg:x="34041" fg:w="10"/><text x="99.4168%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (10 samples, 0.03%)</title><rect x="99.1960%" y="213" width="0.0291%" height="15" fill="rgb(233,25,53)" fg:x="34051" fg:w="10"/><text x="99.4460%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.01%)</title><rect x="99.2251%" y="213" width="0.0146%" height="15" fill="rgb(210,40,34)" fg:x="34061" fg:w="5"/><text x="99.4751%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.02%)</title><rect x="99.2397%" y="213" width="0.0175%" height="15" fill="rgb(241,220,44)" fg:x="34066" fg:w="6"/><text x="99.4897%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (20 samples, 0.06%)</title><rect x="99.2571%" y="213" width="0.0583%" height="15" fill="rgb(235,28,35)" fg:x="34072" fg:w="20"/><text x="99.5071%" y="223.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt (20,165 samples, 58.74%)</title><rect x="40.6094%" y="229" width="58.7438%" height="15" fill="rgb(210,56,17)" fg:x="13940" fg:w="20165"/><text x="40.8594%" y="239.50">esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.04%)</title><rect x="99.3154%" y="213" width="0.0379%" height="15" fill="rgb(224,130,29)" fg:x="34092" fg:w="13"/><text x="99.5654%" y="223.50"></text></g><g><title>esp`core::fmt::ArgumentV1::from_usize (6 samples, 0.02%)</title><rect x="99.3533%" y="229" width="0.0175%" height="15" fill="rgb(235,212,8)" fg:x="34105" fg:w="6"/><text x="99.6033%" y="239.50"></text></g><g><title>esp`std::io::stdio::_print (20,995 samples, 61.16%)</title><rect x="38.2614%" y="277" width="61.1618%" height="15" fill="rgb(223,33,50)" fg:x="13134" fg:w="20995"/><text x="38.5114%" y="287.50">esp`std::io::stdio::_print</text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (20,995 samples, 61.16%)</title><rect x="38.2614%" y="261" width="61.1618%" height="15" fill="rgb(219,149,13)" fg:x="13134" fg:w="20995"/><text x="38.5114%" y="271.50">esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>esp`core::fmt::write (20,995 samples, 61.16%)</title><rect x="38.2614%" y="245" width="61.1618%" height="15" fill="rgb(250,156,29)" fg:x="13134" fg:w="20995"/><text x="38.5114%" y="255.50">esp`core::fmt::write</text></g><g><title>esp`core::fmt::Formatter::write_fmt (17 samples, 0.05%)</title><rect x="99.3737%" y="229" width="0.0495%" height="15" fill="rgb(216,193,19)" fg:x="34112" fg:w="17"/><text x="99.6237%" y="239.50"></text></g><g><title>esp`esp::var::variational (34,100 samples, 99.34%)</title><rect x="0.0874%" y="293" width="99.3387%" height="15" fill="rgb(216,135,14)" fg:x="30" fg:w="34100"/><text x="0.3374%" y="303.50">esp`esp::var::variational</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (52 samples, 0.15%)</title><rect x="99.4261%" y="293" width="0.1515%" height="15" fill="rgb(241,47,5)" fg:x="34130" fg:w="52"/><text x="99.6761%" y="303.50"></text></g><g><title>esp`hashbrown::map::make_hash (82 samples, 0.24%)</title><rect x="99.5805%" y="293" width="0.2389%" height="15" fill="rgb(233,42,35)" fg:x="34183" fg:w="82"/><text x="99.8305%" y="303.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.05%)</title><rect x="99.8398%" y="245" width="0.0466%" height="15" fill="rgb(231,13,6)" fg:x="34272" fg:w="16"/><text x="100.0898%" y="255.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (16 samples, 0.05%)</title><rect x="99.8398%" y="229" width="0.0466%" height="15" fill="rgb(207,181,40)" fg:x="34272" fg:w="16"/><text x="100.0898%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.05%)</title><rect x="99.8398%" y="213" width="0.0466%" height="15" fill="rgb(254,173,49)" fg:x="34272" fg:w="16"/><text x="100.0898%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.05%)</title><rect x="99.8398%" y="197" width="0.0466%" height="15" fill="rgb(221,1,38)" fg:x="34272" fg:w="16"/><text x="100.0898%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (16 samples, 0.05%)</title><rect x="99.8398%" y="181" width="0.0466%" height="15" fill="rgb(206,124,46)" fg:x="34272" fg:w="16"/><text x="100.0898%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.04%)</title><rect x="99.8485%" y="165" width="0.0379%" height="15" fill="rgb(249,21,11)" fg:x="34275" fg:w="13"/><text x="100.0985%" y="175.50"></text></g><g><title>esp`alloc::slice::merge_sort (19 samples, 0.06%)</title><rect x="99.8864%" y="245" width="0.0554%" height="15" fill="rgb(222,201,40)" fg:x="34288" fg:w="19"/><text x="100.1364%" y="255.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (45 samples, 0.13%)</title><rect x="99.8194%" y="261" width="0.1311%" height="15" fill="rgb(235,61,29)" fg:x="34265" fg:w="45"/><text x="100.0694%" y="271.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="99.9592%" y="245" width="0.0117%" height="15" fill="rgb(219,207,3)" fg:x="34313" fg:w="4"/><text x="100.2092%" y="255.50"></text></g><g><title>esp`main (34,321 samples, 99.98%)</title><rect x="0.0000%" y="373" width="99.9825%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="34321"/><text x="0.2500%" y="383.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (34,320 samples, 99.98%)</title><rect x="0.0029%" y="357" width="99.9796%" height="15" fill="rgb(239,76,54)" fg:x="1" fg:w="34320"/><text x="0.2529%" y="367.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (34,320 samples, 99.98%)</title><rect x="0.0029%" y="341" width="99.9796%" height="15" fill="rgb(231,124,27)" fg:x="1" fg:w="34320"/><text x="0.2529%" y="351.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (34,320 samples, 99.98%)</title><rect x="0.0029%" y="325" width="99.9796%" height="15" fill="rgb(249,195,6)" fg:x="1" fg:w="34320"/><text x="0.2529%" y="335.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (34,320 samples, 99.98%)</title><rect x="0.0029%" y="309" width="99.9796%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="34320"/><text x="0.2529%" y="319.50">esp`esp::main</text></g><g><title>esp`std::sync::once::Once::call_inner (56 samples, 0.16%)</title><rect x="99.8194%" y="293" width="0.1631%" height="15" fill="rgb(206,201,31)" fg:x="34265" fg:w="56"/><text x="100.0694%" y="303.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (56 samples, 0.16%)</title><rect x="99.8194%" y="277" width="0.1631%" height="15" fill="rgb(231,57,52)" fg:x="34265" fg:w="56"/><text x="100.0694%" y="287.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (11 samples, 0.03%)</title><rect x="99.9505%" y="261" width="0.0320%" height="15" fill="rgb(248,177,22)" fg:x="34310" fg:w="11"/><text x="100.2005%" y="271.50"></text></g><g><title>all (34,327 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="34327"/><text x="0.2500%" y="431.50"></text></g><g><title>0x1 (34,327 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="34327"/><text x="0.2500%" y="415.50">0x1</text></g><g><title>libdyld.dylib`start (34,327 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="34327"/><text x="0.2500%" y="399.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (6 samples, 0.02%)</title><rect x="99.9825%" y="373" width="0.0175%" height="15" fill="rgb(228,167,24)" fg:x="34321" fg:w="6"/><text x="100.2325%" y="383.50"></text></g></svg></svg>