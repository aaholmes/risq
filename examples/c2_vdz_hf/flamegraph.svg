<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="109067"><g><title>esp`__rdl_alloc (11 samples, 0.01%)</title><rect x="0.0110%" y="213" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="11"/><text x="0.2610%" y="223.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (68 samples, 0.06%)</title><rect x="7.0810%" y="181" width="0.0623%" height="15" fill="rgb(217,0,24)" fg:x="7723" fg:w="68"/><text x="7.3310%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (68 samples, 0.06%)</title><rect x="7.0810%" y="165" width="0.0623%" height="15" fill="rgb(221,193,54)" fg:x="7723" fg:w="68"/><text x="7.3310%" y="175.50"></text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (51 samples, 0.05%)</title><rect x="7.1433%" y="181" width="0.0468%" height="15" fill="rgb(248,212,6)" fg:x="7791" fg:w="51"/><text x="7.3933%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 0.05%)</title><rect x="7.1433%" y="165" width="0.0468%" height="15" fill="rgb(208,68,35)" fg:x="7791" fg:w="51"/><text x="7.3933%" y="175.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (7,085 samples, 6.50%)</title><rect x="0.6950%" y="197" width="6.4960%" height="15" fill="rgb(232,128,0)" fg:x="758" fg:w="7085"/><text x="0.9450%" y="207.50">esp`&lt;esp:..</text></g><g><title>libsystem_malloc.dylib`free_large (19 samples, 0.02%)</title><rect x="7.1928%" y="117" width="0.0174%" height="15" fill="rgb(207,160,47)" fg:x="7845" fg:w="19"/><text x="7.4428%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (19 samples, 0.02%)</title><rect x="7.1928%" y="101" width="0.0174%" height="15" fill="rgb(228,23,34)" fg:x="7845" fg:w="19"/><text x="7.4428%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (19 samples, 0.02%)</title><rect x="7.1928%" y="85" width="0.0174%" height="15" fill="rgb(218,30,26)" fg:x="7845" fg:w="19"/><text x="7.4428%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (28 samples, 0.03%)</title><rect x="7.1910%" y="197" width="0.0257%" height="15" fill="rgb(220,122,19)" fg:x="7843" fg:w="28"/><text x="7.4410%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (28 samples, 0.03%)</title><rect x="7.1910%" y="181" width="0.0257%" height="15" fill="rgb(250,228,42)" fg:x="7843" fg:w="28"/><text x="7.4410%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (28 samples, 0.03%)</title><rect x="7.1910%" y="165" width="0.0257%" height="15" fill="rgb(240,193,28)" fg:x="7843" fg:w="28"/><text x="7.4410%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (28 samples, 0.03%)</title><rect x="7.1910%" y="149" width="0.0257%" height="15" fill="rgb(216,20,37)" fg:x="7843" fg:w="28"/><text x="7.4410%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (28 samples, 0.03%)</title><rect x="7.1910%" y="133" width="0.0257%" height="15" fill="rgb(206,188,39)" fg:x="7843" fg:w="28"/><text x="7.4410%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (145 samples, 0.13%)</title><rect x="7.6265%" y="149" width="0.1329%" height="15" fill="rgb(217,207,13)" fg:x="8318" fg:w="145"/><text x="7.8765%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (303 samples, 0.28%)</title><rect x="7.7659%" y="133" width="0.2778%" height="15" fill="rgb(231,73,38)" fg:x="8470" fg:w="303"/><text x="8.0159%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (128 samples, 0.12%)</title><rect x="8.0437%" y="133" width="0.1174%" height="15" fill="rgb(225,20,46)" fg:x="8773" fg:w="128"/><text x="8.2937%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (39 samples, 0.04%)</title><rect x="8.1253%" y="117" width="0.0358%" height="15" fill="rgb(210,31,41)" fg:x="8862" fg:w="39"/><text x="8.3753%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (953 samples, 0.87%)</title><rect x="7.2882%" y="181" width="0.8738%" height="15" fill="rgb(221,200,47)" fg:x="7949" fg:w="953"/><text x="7.5382%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (589 samples, 0.54%)</title><rect x="7.6219%" y="165" width="0.5400%" height="15" fill="rgb(226,26,5)" fg:x="8313" fg:w="589"/><text x="7.8719%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (439 samples, 0.40%)</title><rect x="7.7595%" y="149" width="0.4025%" height="15" fill="rgb(249,33,26)" fg:x="8463" fg:w="439"/><text x="8.0095%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (1,067 samples, 0.98%)</title><rect x="7.2167%" y="197" width="0.9783%" height="15" fill="rgb(235,183,28)" fg:x="7871" fg:w="1067"/><text x="7.4667%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.03%)</title><rect x="8.1620%" y="181" width="0.0330%" height="15" fill="rgb(221,5,38)" fg:x="8902" fg:w="36"/><text x="8.4120%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (39 samples, 0.04%)</title><rect x="8.1977%" y="197" width="0.0358%" height="15" fill="rgb(247,18,42)" fg:x="8941" fg:w="39"/><text x="8.4477%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (39 samples, 0.04%)</title><rect x="8.1977%" y="181" width="0.0358%" height="15" fill="rgb(241,131,45)" fg:x="8941" fg:w="39"/><text x="8.4477%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (407 samples, 0.37%)</title><rect x="8.3646%" y="181" width="0.3732%" height="15" fill="rgb(249,31,29)" fg:x="9123" fg:w="407"/><text x="8.6146%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (93 samples, 0.09%)</title><rect x="8.7377%" y="181" width="0.0853%" height="15" fill="rgb(225,111,53)" fg:x="9530" fg:w="93"/><text x="8.9877%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (640 samples, 0.59%)</title><rect x="8.2417%" y="197" width="0.5868%" height="15" fill="rgb(238,160,17)" fg:x="8989" fg:w="640"/><text x="8.4917%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (30 samples, 0.03%)</title><rect x="8.8313%" y="181" width="0.0275%" height="15" fill="rgb(214,148,48)" fg:x="9632" fg:w="30"/><text x="9.0813%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (37 samples, 0.03%)</title><rect x="8.8624%" y="165" width="0.0339%" height="15" fill="rgb(232,36,49)" fg:x="9666" fg:w="37"/><text x="9.1124%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (24 samples, 0.02%)</title><rect x="8.8964%" y="165" width="0.0220%" height="15" fill="rgb(209,103,24)" fg:x="9703" fg:w="24"/><text x="9.1464%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (17 samples, 0.02%)</title><rect x="8.9028%" y="149" width="0.0156%" height="15" fill="rgb(229,88,8)" fg:x="9710" fg:w="17"/><text x="9.1528%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (99 samples, 0.09%)</title><rect x="8.8285%" y="197" width="0.0908%" height="15" fill="rgb(213,181,19)" fg:x="9629" fg:w="99"/><text x="9.0785%" y="207.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (66 samples, 0.06%)</title><rect x="8.8588%" y="181" width="0.0605%" height="15" fill="rgb(254,191,54)" fg:x="9662" fg:w="66"/><text x="9.1088%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (72 samples, 0.07%)</title><rect x="8.9193%" y="197" width="0.0660%" height="15" fill="rgb(241,83,37)" fg:x="9728" fg:w="72"/><text x="9.1693%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (138 samples, 0.13%)</title><rect x="8.9991%" y="197" width="0.1265%" height="15" fill="rgb(233,36,39)" fg:x="9815" fg:w="138"/><text x="9.2491%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (280 samples, 0.26%)</title><rect x="9.1256%" y="197" width="0.2567%" height="15" fill="rgb(226,3,54)" fg:x="9953" fg:w="280"/><text x="9.3756%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (279 samples, 0.26%)</title><rect x="9.1265%" y="181" width="0.2558%" height="15" fill="rgb(245,192,40)" fg:x="9954" fg:w="279"/><text x="9.3765%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (279 samples, 0.26%)</title><rect x="9.1265%" y="165" width="0.2558%" height="15" fill="rgb(238,167,29)" fg:x="9954" fg:w="279"/><text x="9.3765%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (45 samples, 0.04%)</title><rect x="9.3823%" y="197" width="0.0413%" height="15" fill="rgb(232,182,51)" fg:x="10233" fg:w="45"/><text x="9.6323%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (10,258 samples, 9.41%)</title><rect x="0.0321%" y="213" width="9.4052%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="10258"/><text x="0.2821%" y="223.50">esp`eigenvalu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.01%)</title><rect x="9.4236%" y="197" width="0.0138%" height="15" fill="rgb(208,69,12)" fg:x="10278" fg:w="15"/><text x="9.6736%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el_and_spin_flipped (22 samples, 0.02%)</title><rect x="9.4437%" y="213" width="0.0202%" height="15" fill="rgb(235,93,37)" fg:x="10300" fg:w="22"/><text x="9.6937%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (17 samples, 0.02%)</title><rect x="14.4012%" y="117" width="0.0156%" height="15" fill="rgb(213,116,39)" fg:x="15707" fg:w="17"/><text x="14.6512%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (145 samples, 0.13%)</title><rect x="14.2967%" y="149" width="0.1329%" height="15" fill="rgb(222,207,29)" fg:x="15593" fg:w="145"/><text x="14.5467%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (58 samples, 0.05%)</title><rect x="14.3765%" y="133" width="0.0532%" height="15" fill="rgb(206,96,30)" fg:x="15680" fg:w="58"/><text x="14.6265%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (191 samples, 0.18%)</title><rect x="14.2839%" y="181" width="0.1751%" height="15" fill="rgb(218,138,4)" fg:x="15579" fg:w="191"/><text x="14.5339%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (186 samples, 0.17%)</title><rect x="14.2885%" y="165" width="0.1705%" height="15" fill="rgb(250,191,14)" fg:x="15584" fg:w="186"/><text x="14.5385%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (32 samples, 0.03%)</title><rect x="14.4297%" y="149" width="0.0293%" height="15" fill="rgb(239,60,40)" fg:x="15738" fg:w="32"/><text x="14.6797%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.01%)</title><rect x="14.4452%" y="133" width="0.0138%" height="15" fill="rgb(206,27,48)" fg:x="15755" fg:w="15"/><text x="14.6952%" y="143.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,797 samples, 1.65%)</title><rect x="14.2674%" y="197" width="1.6476%" height="15" fill="rgb(225,35,8)" fg:x="15561" fg:w="1797"/><text x="14.5174%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,584 samples, 1.45%)</title><rect x="14.4627%" y="181" width="1.4523%" height="15" fill="rgb(250,213,24)" fg:x="15774" fg:w="1584"/><text x="14.7127%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (19 samples, 0.02%)</title><rect x="18.7591%" y="117" width="0.0174%" height="15" fill="rgb(247,123,22)" fg:x="20460" fg:w="19"/><text x="19.0091%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (19 samples, 0.02%)</title><rect x="18.7591%" y="101" width="0.0174%" height="15" fill="rgb(231,138,38)" fg:x="20460" fg:w="19"/><text x="19.0091%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_large (41 samples, 0.04%)</title><rect x="18.7765%" y="117" width="0.0376%" height="15" fill="rgb(231,145,46)" fg:x="20479" fg:w="41"/><text x="19.0265%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (41 samples, 0.04%)</title><rect x="18.7765%" y="101" width="0.0376%" height="15" fill="rgb(251,118,11)" fg:x="20479" fg:w="41"/><text x="19.0265%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (41 samples, 0.04%)</title><rect x="18.7765%" y="85" width="0.0376%" height="15" fill="rgb(217,147,25)" fg:x="20479" fg:w="41"/><text x="19.0265%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (74 samples, 0.07%)</title><rect x="18.7591%" y="181" width="0.0678%" height="15" fill="rgb(247,81,37)" fg:x="20460" fg:w="74"/><text x="19.0091%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (74 samples, 0.07%)</title><rect x="18.7591%" y="165" width="0.0678%" height="15" fill="rgb(209,12,38)" fg:x="20460" fg:w="74"/><text x="19.0091%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (74 samples, 0.07%)</title><rect x="18.7591%" y="149" width="0.0678%" height="15" fill="rgb(227,1,9)" fg:x="20460" fg:w="74"/><text x="19.0091%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (74 samples, 0.07%)</title><rect x="18.7591%" y="133" width="0.0678%" height="15" fill="rgb(248,47,43)" fg:x="20460" fg:w="74"/><text x="19.0091%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (14 samples, 0.01%)</title><rect x="18.8535%" y="165" width="0.0128%" height="15" fill="rgb(221,10,30)" fg:x="20563" fg:w="14"/><text x="19.1035%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (53 samples, 0.05%)</title><rect x="18.8315%" y="181" width="0.0486%" height="15" fill="rgb(210,229,1)" fg:x="20539" fg:w="53"/><text x="19.0815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (15 samples, 0.01%)</title><rect x="18.8664%" y="165" width="0.0138%" height="15" fill="rgb(222,148,37)" fg:x="20577" fg:w="15"/><text x="19.1164%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.01%)</title><rect x="18.8664%" y="149" width="0.0138%" height="15" fill="rgb(234,67,33)" fg:x="20577" fg:w="15"/><text x="19.1164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.02%)</title><rect x="18.9122%" y="165" width="0.0183%" height="15" fill="rgb(247,98,35)" fg:x="20627" fg:w="20"/><text x="19.1622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (26 samples, 0.02%)</title><rect x="18.9333%" y="165" width="0.0238%" height="15" fill="rgb(247,138,52)" fg:x="20650" fg:w="26"/><text x="19.1833%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (36 samples, 0.03%)</title><rect x="18.9572%" y="165" width="0.0330%" height="15" fill="rgb(213,79,30)" fg:x="20676" fg:w="36"/><text x="19.2072%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.03%)</title><rect x="18.9572%" y="149" width="0.0330%" height="15" fill="rgb(246,177,23)" fg:x="20676" fg:w="36"/><text x="19.2072%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (123 samples, 0.11%)</title><rect x="18.8801%" y="181" width="0.1128%" height="15" fill="rgb(230,62,27)" fg:x="20592" fg:w="123"/><text x="19.1301%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.02%)</title><rect x="19.0278%" y="133" width="0.0174%" height="15" fill="rgb(216,154,8)" fg:x="20753" fg:w="19"/><text x="19.2778%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (23 samples, 0.02%)</title><rect x="19.0250%" y="149" width="0.0211%" height="15" fill="rgb(244,35,45)" fg:x="20750" fg:w="23"/><text x="19.2750%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.02%)</title><rect x="19.0470%" y="133" width="0.0229%" height="15" fill="rgb(251,115,12)" fg:x="20774" fg:w="25"/><text x="19.2970%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (87 samples, 0.08%)</title><rect x="18.9929%" y="181" width="0.0798%" height="15" fill="rgb(240,54,50)" fg:x="20715" fg:w="87"/><text x="19.2429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (77 samples, 0.07%)</title><rect x="19.0021%" y="165" width="0.0706%" height="15" fill="rgb(233,84,52)" fg:x="20725" fg:w="77"/><text x="19.2521%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (29 samples, 0.03%)</title><rect x="19.0461%" y="149" width="0.0266%" height="15" fill="rgb(207,117,47)" fg:x="20773" fg:w="29"/><text x="19.2961%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (34 samples, 0.03%)</title><rect x="19.0727%" y="165" width="0.0312%" height="15" fill="rgb(249,43,39)" fg:x="20802" fg:w="34"/><text x="19.3227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (35 samples, 0.03%)</title><rect x="19.0727%" y="181" width="0.0321%" height="15" fill="rgb(209,38,44)" fg:x="20802" fg:w="35"/><text x="19.3227%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,486 samples, 3.20%)</title><rect x="15.9150%" y="197" width="3.1962%" height="15" fill="rgb(236,212,23)" fg:x="17358" fg:w="3486"/><text x="16.1650%" y="207.50">esp..</text></g><g><title>libsystem_malloc.dylib`szone_size (192 samples, 0.18%)</title><rect x="19.2221%" y="165" width="0.1760%" height="15" fill="rgb(242,79,21)" fg:x="20965" fg:w="192"/><text x="19.4721%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (182 samples, 0.17%)</title><rect x="19.2313%" y="149" width="0.1669%" height="15" fill="rgb(211,96,35)" fg:x="20975" fg:w="182"/><text x="19.4813%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (276 samples, 0.25%)</title><rect x="19.1543%" y="181" width="0.2531%" height="15" fill="rgb(253,215,40)" fg:x="20891" fg:w="276"/><text x="19.4043%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (32 samples, 0.03%)</title><rect x="19.4128%" y="181" width="0.0293%" height="15" fill="rgb(211,81,21)" fg:x="21173" fg:w="32"/><text x="19.6628%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (23 samples, 0.02%)</title><rect x="19.4211%" y="165" width="0.0211%" height="15" fill="rgb(208,190,38)" fg:x="21182" fg:w="23"/><text x="19.6711%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.02%)</title><rect x="19.4220%" y="149" width="0.0202%" height="15" fill="rgb(235,213,38)" fg:x="21183" fg:w="22"/><text x="19.6720%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (231 samples, 0.21%)</title><rect x="20.0161%" y="149" width="0.2118%" height="15" fill="rgb(237,122,38)" fg:x="21831" fg:w="231"/><text x="20.2661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (124 samples, 0.11%)</title><rect x="20.2279%" y="149" width="0.1137%" height="15" fill="rgb(244,218,35)" fg:x="22062" fg:w="124"/><text x="20.4779%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (740 samples, 0.68%)</title><rect x="19.6686%" y="165" width="0.6785%" height="15" fill="rgb(240,68,47)" fg:x="21452" fg:w="740"/><text x="19.9186%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (988 samples, 0.91%)</title><rect x="19.4422%" y="181" width="0.9059%" height="15" fill="rgb(210,16,53)" fg:x="21205" fg:w="988"/><text x="19.6922%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.01%)</title><rect x="20.3480%" y="181" width="0.0101%" height="15" fill="rgb(235,124,12)" fg:x="22193" fg:w="11"/><text x="20.5980%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,367 samples, 1.25%)</title><rect x="19.1112%" y="197" width="1.2534%" height="15" fill="rgb(224,169,11)" fg:x="20844" fg:w="1367"/><text x="19.3612%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (100 samples, 0.09%)</title><rect x="20.3645%" y="197" width="0.0917%" height="15" fill="rgb(250,166,2)" fg:x="22211" fg:w="100"/><text x="20.6145%" y="207.50"></text></g><g><title>esp`__rdl_dealloc (21 samples, 0.02%)</title><rect x="20.4645%" y="197" width="0.0193%" height="15" fill="rgb(242,216,29)" fg:x="22320" fg:w="21"/><text x="20.7145%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (18 samples, 0.02%)</title><rect x="20.5690%" y="133" width="0.0165%" height="15" fill="rgb(230,116,27)" fg:x="22434" fg:w="18"/><text x="20.8190%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (44 samples, 0.04%)</title><rect x="20.7570%" y="85" width="0.0403%" height="15" fill="rgb(228,99,48)" fg:x="22639" fg:w="44"/><text x="21.0070%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (191 samples, 0.18%)</title><rect x="20.6268%" y="117" width="0.1751%" height="15" fill="rgb(253,11,6)" fg:x="22497" fg:w="191"/><text x="20.8768%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (100 samples, 0.09%)</title><rect x="20.7102%" y="101" width="0.0917%" height="15" fill="rgb(247,143,39)" fg:x="22588" fg:w="100"/><text x="20.9602%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (35 samples, 0.03%)</title><rect x="20.9605%" y="85" width="0.0321%" height="15" fill="rgb(236,97,10)" fg:x="22861" fg:w="35"/><text x="21.2105%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (314 samples, 0.29%)</title><rect x="20.8037%" y="117" width="0.2879%" height="15" fill="rgb(233,208,19)" fg:x="22690" fg:w="314"/><text x="21.0537%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (293 samples, 0.27%)</title><rect x="20.8230%" y="101" width="0.2686%" height="15" fill="rgb(216,164,2)" fg:x="22711" fg:w="293"/><text x="21.0730%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (105 samples, 0.10%)</title><rect x="20.9954%" y="85" width="0.0963%" height="15" fill="rgb(220,129,5)" fg:x="22899" fg:w="105"/><text x="21.2454%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (20 samples, 0.02%)</title><rect x="21.0733%" y="69" width="0.0183%" height="15" fill="rgb(242,17,10)" fg:x="22984" fg:w="20"/><text x="21.3233%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.04%)</title><rect x="21.0916%" y="117" width="0.0385%" height="15" fill="rgb(242,107,0)" fg:x="23004" fg:w="42"/><text x="21.3416%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (33 samples, 0.03%)</title><rect x="21.0999%" y="101" width="0.0303%" height="15" fill="rgb(251,28,31)" fg:x="23013" fg:w="33"/><text x="21.3499%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (106 samples, 0.10%)</title><rect x="21.1347%" y="117" width="0.0972%" height="15" fill="rgb(233,223,10)" fg:x="23051" fg:w="106"/><text x="21.3847%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (733 samples, 0.67%)</title><rect x="20.5901%" y="133" width="0.6721%" height="15" fill="rgb(215,21,27)" fg:x="22457" fg:w="733"/><text x="20.8401%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (33 samples, 0.03%)</title><rect x="21.2319%" y="117" width="0.0303%" height="15" fill="rgb(232,23,21)" fg:x="23157" fg:w="33"/><text x="21.4819%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (782 samples, 0.72%)</title><rect x="20.5543%" y="149" width="0.7170%" height="15" fill="rgb(244,5,23)" fg:x="22418" fg:w="782"/><text x="20.8043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (59 samples, 0.05%)</title><rect x="21.2741%" y="149" width="0.0541%" height="15" fill="rgb(226,81,46)" fg:x="23203" fg:w="59"/><text x="21.5241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (49 samples, 0.04%)</title><rect x="21.2832%" y="133" width="0.0449%" height="15" fill="rgb(247,70,30)" fg:x="23213" fg:w="49"/><text x="21.5332%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (877 samples, 0.80%)</title><rect x="20.5277%" y="165" width="0.8041%" height="15" fill="rgb(212,68,19)" fg:x="22389" fg:w="877"/><text x="20.7777%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (904 samples, 0.83%)</title><rect x="20.5057%" y="181" width="0.8288%" height="15" fill="rgb(240,187,13)" fg:x="22365" fg:w="904"/><text x="20.7557%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (931 samples, 0.85%)</title><rect x="20.4856%" y="197" width="0.8536%" height="15" fill="rgb(223,113,26)" fg:x="22343" fg:w="931"/><text x="20.7356%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (165 samples, 0.15%)</title><rect x="21.4290%" y="165" width="0.1513%" height="15" fill="rgb(206,192,2)" fg:x="23372" fg:w="165"/><text x="21.6790%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (208 samples, 0.19%)</title><rect x="21.4070%" y="181" width="0.1907%" height="15" fill="rgb(241,108,4)" fg:x="23348" fg:w="208"/><text x="21.6570%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.02%)</title><rect x="21.5803%" y="165" width="0.0174%" height="15" fill="rgb(247,173,49)" fg:x="23537" fg:w="19"/><text x="21.8303%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.02%)</title><rect x="21.5821%" y="149" width="0.0156%" height="15" fill="rgb(224,114,35)" fg:x="23539" fg:w="17"/><text x="21.8321%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (231 samples, 0.21%)</title><rect x="21.5977%" y="181" width="0.2118%" height="15" fill="rgb(245,159,27)" fg:x="23556" fg:w="231"/><text x="21.8477%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (231 samples, 0.21%)</title><rect x="21.5977%" y="165" width="0.2118%" height="15" fill="rgb(245,172,44)" fg:x="23556" fg:w="231"/><text x="21.8477%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (231 samples, 0.21%)</title><rect x="21.5977%" y="149" width="0.2118%" height="15" fill="rgb(236,23,11)" fg:x="23556" fg:w="231"/><text x="21.8477%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (99 samples, 0.09%)</title><rect x="21.9260%" y="165" width="0.0908%" height="15" fill="rgb(205,117,38)" fg:x="23914" fg:w="99"/><text x="22.1760%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (90 samples, 0.08%)</title><rect x="21.9342%" y="149" width="0.0825%" height="15" fill="rgb(237,72,25)" fg:x="23923" fg:w="90"/><text x="22.1842%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (83 samples, 0.08%)</title><rect x="22.0167%" y="165" width="0.0761%" height="15" fill="rgb(244,70,9)" fg:x="24013" fg:w="83"/><text x="22.2667%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (493 samples, 0.45%)</title><rect x="22.1057%" y="165" width="0.4520%" height="15" fill="rgb(217,125,39)" fg:x="24110" fg:w="493"/><text x="22.3557%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (21 samples, 0.02%)</title><rect x="22.5577%" y="165" width="0.0193%" height="15" fill="rgb(235,36,10)" fg:x="24603" fg:w="21"/><text x="22.8077%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (13 samples, 0.01%)</title><rect x="22.5650%" y="149" width="0.0119%" height="15" fill="rgb(251,123,47)" fg:x="24611" fg:w="13"/><text x="22.8150%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (255 samples, 0.23%)</title><rect x="22.5925%" y="149" width="0.2338%" height="15" fill="rgb(221,13,13)" fg:x="24641" fg:w="255"/><text x="22.8425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (274 samples, 0.25%)</title><rect x="22.5769%" y="165" width="0.2512%" height="15" fill="rgb(238,131,9)" fg:x="24624" fg:w="274"/><text x="22.8269%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,824 samples, 1.67%)</title><rect x="22.8951%" y="149" width="1.6724%" height="15" fill="rgb(211,50,8)" fg:x="24971" fg:w="1824"/><text x="23.1451%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (58 samples, 0.05%)</title><rect x="24.5675%" y="149" width="0.0532%" height="15" fill="rgb(245,182,24)" fg:x="26795" fg:w="58"/><text x="24.8175%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,080 samples, 2.82%)</title><rect x="21.8095%" y="181" width="2.8240%" height="15" fill="rgb(242,14,37)" fg:x="23787" fg:w="3080"/><text x="22.0595%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,969 samples, 1.81%)</title><rect x="22.8282%" y="165" width="1.8053%" height="15" fill="rgb(246,228,12)" fg:x="24898" fg:w="1969"/><text x="23.0782%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (14 samples, 0.01%)</title><rect x="24.6206%" y="149" width="0.0128%" height="15" fill="rgb(213,55,15)" fg:x="26853" fg:w="14"/><text x="24.8706%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.01%)</title><rect x="24.6427%" y="149" width="0.0138%" height="15" fill="rgb(209,9,3)" fg:x="26877" fg:w="15"/><text x="24.8927%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.01%)</title><rect x="24.6427%" y="133" width="0.0138%" height="15" fill="rgb(230,59,30)" fg:x="26877" fg:w="15"/><text x="24.8927%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (33 samples, 0.03%)</title><rect x="24.6628%" y="133" width="0.0303%" height="15" fill="rgb(209,121,21)" fg:x="26899" fg:w="33"/><text x="24.9128%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (66 samples, 0.06%)</title><rect x="24.6335%" y="181" width="0.0605%" height="15" fill="rgb(220,109,13)" fg:x="26867" fg:w="66"/><text x="24.8835%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (65 samples, 0.06%)</title><rect x="24.6344%" y="165" width="0.0596%" height="15" fill="rgb(232,18,1)" fg:x="26868" fg:w="65"/><text x="24.8844%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (35 samples, 0.03%)</title><rect x="24.6619%" y="149" width="0.0321%" height="15" fill="rgb(215,41,42)" fg:x="26898" fg:w="35"/><text x="24.9119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (154 samples, 0.14%)</title><rect x="24.6940%" y="181" width="0.1412%" height="15" fill="rgb(224,123,36)" fg:x="26933" fg:w="154"/><text x="24.9440%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (154 samples, 0.14%)</title><rect x="24.6940%" y="165" width="0.1412%" height="15" fill="rgb(240,125,3)" fg:x="26933" fg:w="154"/><text x="24.9440%" y="175.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (3,816 samples, 3.50%)</title><rect x="21.3474%" y="197" width="3.4988%" height="15" fill="rgb(205,98,50)" fg:x="23283" fg:w="3816"/><text x="21.5974%" y="207.50">esp..</text></g><g><title>libsystem_malloc.dylib`szone_size (11 samples, 0.01%)</title><rect x="24.8361%" y="181" width="0.0101%" height="15" fill="rgb(205,185,37)" fg:x="27088" fg:w="11"/><text x="25.0861%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (35 samples, 0.03%)</title><rect x="24.8462%" y="197" width="0.0321%" height="15" fill="rgb(238,207,15)" fg:x="27099" fg:w="35"/><text x="25.0962%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (247 samples, 0.23%)</title><rect x="37.2193%" y="181" width="0.2265%" height="15" fill="rgb(213,199,42)" fg:x="40594" fg:w="247"/><text x="37.4693%" y="191.50"></text></g><g><title>esp`__rdl_realloc (16 samples, 0.01%)</title><rect x="37.5448%" y="149" width="0.0147%" height="15" fill="rgb(235,201,11)" fg:x="40949" fg:w="16"/><text x="37.7948%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (12 samples, 0.01%)</title><rect x="37.6227%" y="101" width="0.0110%" height="15" fill="rgb(207,46,11)" fg:x="41034" fg:w="12"/><text x="37.8727%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (119 samples, 0.11%)</title><rect x="37.5595%" y="149" width="0.1091%" height="15" fill="rgb(241,35,35)" fg:x="40965" fg:w="119"/><text x="37.8095%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (112 samples, 0.10%)</title><rect x="37.5659%" y="133" width="0.1027%" height="15" fill="rgb(243,32,47)" fg:x="40972" fg:w="112"/><text x="37.8159%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (110 samples, 0.10%)</title><rect x="37.5677%" y="117" width="0.1009%" height="15" fill="rgb(247,202,23)" fg:x="40974" fg:w="110"/><text x="37.8177%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (38 samples, 0.03%)</title><rect x="37.6337%" y="101" width="0.0348%" height="15" fill="rgb(219,102,11)" fg:x="41046" fg:w="38"/><text x="37.8837%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (50 samples, 0.05%)</title><rect x="37.8281%" y="117" width="0.0458%" height="15" fill="rgb(243,110,44)" fg:x="41258" fg:w="50"/><text x="38.0781%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.01%)</title><rect x="37.8831%" y="117" width="0.0101%" height="15" fill="rgb(222,74,54)" fg:x="41318" fg:w="11"/><text x="38.1331%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (24 samples, 0.02%)</title><rect x="38.0537%" y="85" width="0.0220%" height="15" fill="rgb(216,99,12)" fg:x="41504" fg:w="24"/><text x="38.3037%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (138 samples, 0.13%)</title><rect x="37.9647%" y="101" width="0.1265%" height="15" fill="rgb(226,22,26)" fg:x="41407" fg:w="138"/><text x="38.2147%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (15 samples, 0.01%)</title><rect x="38.0775%" y="85" width="0.0138%" height="15" fill="rgb(217,163,10)" fg:x="41530" fg:w="15"/><text x="38.3275%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (24 samples, 0.02%)</title><rect x="38.5946%" y="69" width="0.0220%" height="15" fill="rgb(213,25,53)" fg:x="42094" fg:w="24"/><text x="38.8446%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.01%)</title><rect x="38.6038%" y="53" width="0.0128%" height="15" fill="rgb(252,105,26)" fg:x="42104" fg:w="14"/><text x="38.8538%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (345 samples, 0.32%)</title><rect x="38.6166%" y="69" width="0.3163%" height="15" fill="rgb(220,39,43)" fg:x="42118" fg:w="345"/><text x="38.8666%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (143 samples, 0.13%)</title><rect x="38.9329%" y="69" width="0.1311%" height="15" fill="rgb(229,68,48)" fg:x="42463" fg:w="143"/><text x="39.1829%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (11 samples, 0.01%)</title><rect x="39.0641%" y="69" width="0.0101%" height="15" fill="rgb(252,8,32)" fg:x="42606" fg:w="11"/><text x="39.3141%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (22 samples, 0.02%)</title><rect x="39.0741%" y="69" width="0.0202%" height="15" fill="rgb(223,20,43)" fg:x="42617" fg:w="22"/><text x="39.3241%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.01%)</title><rect x="39.0842%" y="53" width="0.0101%" height="15" fill="rgb(229,81,49)" fg:x="42628" fg:w="11"/><text x="39.3342%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (184 samples, 0.17%)</title><rect x="39.1035%" y="53" width="0.1687%" height="15" fill="rgb(236,28,36)" fg:x="42649" fg:w="184"/><text x="39.3535%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,069 samples, 0.98%)</title><rect x="38.3021%" y="85" width="0.9801%" height="15" fill="rgb(249,185,26)" fg:x="41775" fg:w="1069"/><text x="38.5521%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (205 samples, 0.19%)</title><rect x="39.0943%" y="69" width="0.1880%" height="15" fill="rgb(249,174,33)" fg:x="42639" fg:w="205"/><text x="39.3443%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,300 samples, 1.19%)</title><rect x="38.0913%" y="101" width="1.1919%" height="15" fill="rgb(233,201,37)" fg:x="41545" fg:w="1300"/><text x="38.3413%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (58 samples, 0.05%)</title><rect x="39.2979%" y="101" width="0.0532%" height="15" fill="rgb(221,78,26)" fg:x="42861" fg:w="58"/><text x="39.5479%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (199 samples, 0.18%)</title><rect x="39.5940%" y="53" width="0.1825%" height="15" fill="rgb(250,127,30)" fg:x="43184" fg:w="199"/><text x="39.8440%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (46 samples, 0.04%)</title><rect x="39.7765%" y="53" width="0.0422%" height="15" fill="rgb(230,49,44)" fg:x="43383" fg:w="46"/><text x="40.0265%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (548 samples, 0.50%)</title><rect x="39.3795%" y="85" width="0.5024%" height="15" fill="rgb(229,67,23)" fg:x="42950" fg:w="548"/><text x="39.6295%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (373 samples, 0.34%)</title><rect x="39.5399%" y="69" width="0.3420%" height="15" fill="rgb(249,83,47)" fg:x="43125" fg:w="373"/><text x="39.7899%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (69 samples, 0.06%)</title><rect x="39.8186%" y="53" width="0.0633%" height="15" fill="rgb(215,43,3)" fg:x="43429" fg:w="69"/><text x="40.0686%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (79 samples, 0.07%)</title><rect x="40.1285%" y="69" width="0.0724%" height="15" fill="rgb(238,154,13)" fg:x="43767" fg:w="79"/><text x="40.3785%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,169 samples, 1.07%)</title><rect x="39.3510%" y="101" width="1.0718%" height="15" fill="rgb(219,56,2)" fg:x="42919" fg:w="1169"/><text x="39.6010%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (587 samples, 0.54%)</title><rect x="39.8847%" y="85" width="0.5382%" height="15" fill="rgb(233,0,4)" fg:x="43501" fg:w="587"/><text x="40.1347%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (233 samples, 0.21%)</title><rect x="40.2092%" y="69" width="0.2136%" height="15" fill="rgb(235,30,7)" fg:x="43855" fg:w="233"/><text x="40.4592%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (39 samples, 0.04%)</title><rect x="40.3871%" y="53" width="0.0358%" height="15" fill="rgb(250,79,13)" fg:x="44049" fg:w="39"/><text x="40.6371%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (108 samples, 0.10%)</title><rect x="40.4229%" y="101" width="0.0990%" height="15" fill="rgb(211,146,34)" fg:x="44088" fg:w="108"/><text x="40.6729%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (89 samples, 0.08%)</title><rect x="40.4403%" y="85" width="0.0816%" height="15" fill="rgb(228,22,38)" fg:x="44107" fg:w="89"/><text x="40.6903%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.01%)</title><rect x="40.7117%" y="85" width="0.0147%" height="15" fill="rgb(235,168,5)" fg:x="44403" fg:w="16"/><text x="40.9617%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (248 samples, 0.23%)</title><rect x="40.5265%" y="101" width="0.2274%" height="15" fill="rgb(221,155,16)" fg:x="44201" fg:w="248"/><text x="40.7765%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (30 samples, 0.03%)</title><rect x="40.7263%" y="85" width="0.0275%" height="15" fill="rgb(215,215,53)" fg:x="44419" fg:w="30"/><text x="40.9763%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4,408 samples, 4.04%)</title><rect x="37.8932%" y="117" width="4.0416%" height="15" fill="rgb(223,4,10)" fg:x="41329" fg:w="4408"/><text x="38.1432%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,288 samples, 1.18%)</title><rect x="40.7538%" y="101" width="1.1809%" height="15" fill="rgb(234,103,6)" fg:x="44449" fg:w="1288"/><text x="41.0038%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4,558 samples, 4.18%)</title><rect x="37.7759%" y="133" width="4.1791%" height="15" fill="rgb(227,97,0)" fg:x="41201" fg:w="4558"/><text x="38.0259%" y="143.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.01%)</title><rect x="41.9449%" y="117" width="0.0101%" height="15" fill="rgb(234,150,53)" fg:x="45748" fg:w="11"/><text x="42.1949%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (79 samples, 0.07%)</title><rect x="41.9549%" y="133" width="0.0724%" height="15" fill="rgb(228,201,54)" fg:x="45759" fg:w="79"/><text x="42.2049%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (345 samples, 0.32%)</title><rect x="42.0320%" y="133" width="0.3163%" height="15" fill="rgb(222,22,37)" fg:x="45843" fg:w="345"/><text x="42.2820%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (330 samples, 0.30%)</title><rect x="42.0457%" y="117" width="0.3026%" height="15" fill="rgb(237,53,32)" fg:x="45858" fg:w="330"/><text x="42.2957%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5,094 samples, 4.67%)</title><rect x="37.6805%" y="149" width="4.6705%" height="15" fill="rgb(233,25,53)" fg:x="41097" fg:w="5094"/><text x="37.9305%" y="159.50">libsy..</text></g><g><title>esp`alloc::raw_vec::finish_grow (5,297 samples, 4.86%)</title><rect x="37.5182%" y="165" width="4.8566%" height="15" fill="rgb(210,40,34)" fg:x="40920" fg:w="5297"/><text x="37.7682%" y="175.50">esp`al..</text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.02%)</title><rect x="42.3538%" y="149" width="0.0211%" height="15" fill="rgb(241,220,44)" fg:x="46194" fg:w="23"/><text x="42.6038%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5,390 samples, 4.94%)</title><rect x="37.4458%" y="181" width="4.9419%" height="15" fill="rgb(235,28,35)" fg:x="40841" fg:w="5390"/><text x="37.6958%" y="191.50">esp`al..</text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.01%)</title><rect x="42.3767%" y="165" width="0.0110%" height="15" fill="rgb(210,56,17)" fg:x="46219" fg:w="12"/><text x="42.6267%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (54 samples, 0.05%)</title><rect x="42.3941%" y="181" width="0.0495%" height="15" fill="rgb(224,130,29)" fg:x="46238" fg:w="54"/><text x="42.6441%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (5,091 samples, 4.67%)</title><rect x="42.4436%" y="181" width="4.6678%" height="15" fill="rgb(235,212,8)" fg:x="46292" fg:w="5091"/><text x="42.6936%" y="191.50">esp`e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (3,906 samples, 3.58%)</title><rect x="43.5301%" y="165" width="3.5813%" height="15" fill="rgb(223,33,50)" fg:x="47477" fg:w="3906"/><text x="43.7801%" y="175.50">esp`..</text></g><g><title>esp`esp::ham::Ham::ham_sing (341 samples, 0.31%)</title><rect x="47.1114%" y="181" width="0.3127%" height="15" fill="rgb(219,149,13)" fg:x="51383" fg:w="341"/><text x="47.3614%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (134 samples, 0.12%)</title><rect x="47.3012%" y="165" width="0.1229%" height="15" fill="rgb(250,156,29)" fg:x="51590" fg:w="134"/><text x="47.5512%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (807 samples, 0.74%)</title><rect x="48.5133%" y="165" width="0.7399%" height="15" fill="rgb(216,193,19)" fg:x="52912" fg:w="807"/><text x="48.7633%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (25 samples, 0.02%)</title><rect x="53.2095%" y="149" width="0.0229%" height="15" fill="rgb(216,135,14)" fg:x="58034" fg:w="25"/><text x="53.4595%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (96 samples, 0.09%)</title><rect x="55.1661%" y="133" width="0.0880%" height="15" fill="rgb(241,47,5)" fg:x="60168" fg:w="96"/><text x="55.4161%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (1,708 samples, 1.57%)</title><rect x="55.2541%" y="133" width="1.5660%" height="15" fill="rgb(233,42,35)" fg:x="60264" fg:w="1708"/><text x="55.5041%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (863 samples, 0.79%)</title><rect x="56.0289%" y="117" width="0.7913%" height="15" fill="rgb(231,13,6)" fg:x="61109" fg:w="863"/><text x="56.2789%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (116 samples, 0.11%)</title><rect x="56.8201%" y="133" width="0.1064%" height="15" fill="rgb(207,181,40)" fg:x="61972" fg:w="116"/><text x="57.0701%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (116 samples, 0.11%)</title><rect x="56.8201%" y="117" width="0.1064%" height="15" fill="rgb(254,173,49)" fg:x="61972" fg:w="116"/><text x="57.0701%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 0.04%)</title><rect x="56.9265%" y="133" width="0.0367%" height="15" fill="rgb(221,1,38)" fg:x="62088" fg:w="40"/><text x="57.1765%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10,517 samples, 9.64%)</title><rect x="47.4241%" y="181" width="9.6427%" height="15" fill="rgb(206,124,46)" fg:x="51724" fg:w="10517"/><text x="47.6741%" y="191.50">esp`hashbrown:..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8,522 samples, 7.81%)</title><rect x="49.2532%" y="165" width="7.8135%" height="15" fill="rgb(249,21,11)" fg:x="53719" fg:w="8522"/><text x="49.5032%" y="175.50">esp`hashbro..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4,182 samples, 3.83%)</title><rect x="53.2324%" y="149" width="3.8343%" height="15" fill="rgb(222,201,40)" fg:x="58059" fg:w="4182"/><text x="53.4824%" y="159.50">esp`..</text></g><g><title>libsystem_malloc.dylib`free_large (113 samples, 0.10%)</title><rect x="56.9632%" y="133" width="0.1036%" height="15" fill="rgb(235,61,29)" fg:x="62128" fg:w="113"/><text x="57.2132%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (113 samples, 0.10%)</title><rect x="56.9632%" y="117" width="0.1036%" height="15" fill="rgb(219,207,3)" fg:x="62128" fg:w="113"/><text x="57.2132%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (113 samples, 0.10%)</title><rect x="56.9632%" y="101" width="0.1036%" height="15" fill="rgb(222,56,46)" fg:x="62128" fg:w="113"/><text x="57.2132%" y="111.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,570 samples, 2.36%)</title><rect x="57.0668%" y="181" width="2.3563%" height="15" fill="rgb(239,76,54)" fg:x="62241" fg:w="2570"/><text x="57.3168%" y="191.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (991 samples, 0.91%)</title><rect x="58.5145%" y="165" width="0.9086%" height="15" fill="rgb(231,124,27)" fg:x="63820" fg:w="991"/><text x="58.7645%" y="175.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (37,699 samples, 34.56%)</title><rect x="24.8810%" y="197" width="34.5650%" height="15" fill="rgb(249,195,6)" fg:x="27137" fg:w="37699"/><text x="25.1310%" y="207.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (25 samples, 0.02%)</title><rect x="59.4231%" y="181" width="0.0229%" height="15" fill="rgb(237,174,47)" fg:x="64811" fg:w="25"/><text x="59.6731%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (115 samples, 0.11%)</title><rect x="62.0958%" y="181" width="0.1054%" height="15" fill="rgb(206,201,31)" fg:x="67726" fg:w="115"/><text x="62.3458%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (20 samples, 0.02%)</title><rect x="62.2012%" y="181" width="0.0183%" height="15" fill="rgb(231,57,52)" fg:x="67841" fg:w="20"/><text x="62.4512%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (166 samples, 0.15%)</title><rect x="73.4539%" y="165" width="0.1522%" height="15" fill="rgb(248,177,22)" fg:x="80114" fg:w="166"/><text x="73.7039%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (22 samples, 0.02%)</title><rect x="73.7116%" y="69" width="0.0202%" height="15" fill="rgb(215,211,37)" fg:x="80395" fg:w="22"/><text x="73.9616%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (110 samples, 0.10%)</title><rect x="73.6538%" y="85" width="0.1009%" height="15" fill="rgb(241,128,51)" fg:x="80332" fg:w="110"/><text x="73.9038%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (23 samples, 0.02%)</title><rect x="73.7336%" y="69" width="0.0211%" height="15" fill="rgb(227,165,31)" fg:x="80419" fg:w="23"/><text x="73.9836%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.01%)</title><rect x="73.7877%" y="53" width="0.0138%" height="15" fill="rgb(228,167,24)" fg:x="80478" fg:w="15"/><text x="74.0377%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (80 samples, 0.07%)</title><rect x="73.8033%" y="37" width="0.0733%" height="15" fill="rgb(228,143,12)" fg:x="80495" fg:w="80"/><text x="74.0533%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (134 samples, 0.12%)</title><rect x="73.7547%" y="85" width="0.1229%" height="15" fill="rgb(249,149,8)" fg:x="80442" fg:w="134"/><text x="74.0047%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (129 samples, 0.12%)</title><rect x="73.7592%" y="69" width="0.1183%" height="15" fill="rgb(243,35,44)" fg:x="80447" fg:w="129"/><text x="74.0092%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (83 samples, 0.08%)</title><rect x="73.8014%" y="53" width="0.0761%" height="15" fill="rgb(246,89,9)" fg:x="80493" fg:w="83"/><text x="74.0514%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (22 samples, 0.02%)</title><rect x="73.8858%" y="85" width="0.0202%" height="15" fill="rgb(233,213,13)" fg:x="80585" fg:w="22"/><text x="74.1358%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (32 samples, 0.03%)</title><rect x="73.9784%" y="37" width="0.0293%" height="15" fill="rgb(233,141,41)" fg:x="80686" fg:w="32"/><text x="74.2284%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (137 samples, 0.13%)</title><rect x="73.9096%" y="69" width="0.1256%" height="15" fill="rgb(239,167,4)" fg:x="80611" fg:w="137"/><text x="74.1596%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (91 samples, 0.08%)</title><rect x="73.9518%" y="53" width="0.0834%" height="15" fill="rgb(209,217,16)" fg:x="80657" fg:w="91"/><text x="74.2018%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (30 samples, 0.03%)</title><rect x="74.0077%" y="37" width="0.0275%" height="15" fill="rgb(219,88,35)" fg:x="80718" fg:w="30"/><text x="74.2577%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (142 samples, 0.13%)</title><rect x="73.9059%" y="85" width="0.1302%" height="15" fill="rgb(220,193,23)" fg:x="80607" fg:w="142"/><text x="74.1559%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1,155 samples, 1.06%)</title><rect x="73.6456%" y="101" width="1.0590%" height="15" fill="rgb(230,90,52)" fg:x="80323" fg:w="1155"/><text x="73.8956%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (725 samples, 0.66%)</title><rect x="74.0398%" y="85" width="0.6647%" height="15" fill="rgb(252,106,19)" fg:x="80753" fg:w="725"/><text x="74.2898%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,177 samples, 1.08%)</title><rect x="73.6291%" y="117" width="1.0792%" height="15" fill="rgb(206,74,20)" fg:x="80305" fg:w="1177"/><text x="73.8791%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (43 samples, 0.04%)</title><rect x="74.7082%" y="117" width="0.0394%" height="15" fill="rgb(230,138,44)" fg:x="81482" fg:w="43"/><text x="74.9582%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (32 samples, 0.03%)</title><rect x="74.7476%" y="117" width="0.0293%" height="15" fill="rgb(235,182,43)" fg:x="81525" fg:w="32"/><text x="74.9976%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (30 samples, 0.03%)</title><rect x="74.7495%" y="101" width="0.0275%" height="15" fill="rgb(242,16,51)" fg:x="81527" fg:w="30"/><text x="74.9995%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,271 samples, 1.17%)</title><rect x="73.6126%" y="133" width="1.1653%" height="15" fill="rgb(248,9,4)" fg:x="80287" fg:w="1271"/><text x="73.8626%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (1,278 samples, 1.17%)</title><rect x="73.6098%" y="149" width="1.1718%" height="15" fill="rgb(210,31,22)" fg:x="80284" fg:w="1278"/><text x="73.8598%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,284 samples, 1.18%)</title><rect x="73.6061%" y="165" width="1.1773%" height="15" fill="rgb(239,54,39)" fg:x="80280" fg:w="1284"/><text x="73.8561%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (32 samples, 0.03%)</title><rect x="74.7843%" y="165" width="0.0293%" height="15" fill="rgb(230,99,41)" fg:x="81565" fg:w="32"/><text x="75.0343%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (14 samples, 0.01%)</title><rect x="75.3115%" y="149" width="0.0128%" height="15" fill="rgb(253,106,12)" fg:x="82140" fg:w="14"/><text x="75.5615%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (2,612 samples, 2.39%)</title><rect x="74.8136%" y="165" width="2.3949%" height="15" fill="rgb(213,46,41)" fg:x="81597" fg:w="2612"/><text x="75.0636%" y="175.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_doub (2,055 samples, 1.88%)</title><rect x="75.3243%" y="149" width="1.8842%" height="15" fill="rgb(215,133,35)" fg:x="82154" fg:w="2055"/><text x="75.5743%" y="159.50">e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (996 samples, 0.91%)</title><rect x="76.2953%" y="133" width="0.9132%" height="15" fill="rgb(213,28,5)" fg:x="83213" fg:w="996"/><text x="76.5453%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (466 samples, 0.43%)</title><rect x="77.2085%" y="165" width="0.4273%" height="15" fill="rgb(215,77,49)" fg:x="84209" fg:w="466"/><text x="77.4585%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (280 samples, 0.26%)</title><rect x="77.3790%" y="149" width="0.2567%" height="15" fill="rgb(248,100,22)" fg:x="84395" fg:w="280"/><text x="77.6290%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (309 samples, 0.28%)</title><rect x="77.9842%" y="149" width="0.2833%" height="15" fill="rgb(208,67,9)" fg:x="85055" fg:w="309"/><text x="78.2342%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (23 samples, 0.02%)</title><rect x="80.3799%" y="133" width="0.0211%" height="15" fill="rgb(219,133,21)" fg:x="87668" fg:w="23"/><text x="80.6299%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (80 samples, 0.07%)</title><rect x="81.7681%" y="117" width="0.0733%" height="15" fill="rgb(246,46,29)" fg:x="89182" fg:w="80"/><text x="82.0181%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (1,092 samples, 1.00%)</title><rect x="81.8414%" y="117" width="1.0012%" height="15" fill="rgb(246,185,52)" fg:x="89262" fg:w="1092"/><text x="82.0914%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (537 samples, 0.49%)</title><rect x="82.3503%" y="101" width="0.4924%" height="15" fill="rgb(252,136,11)" fg:x="89817" fg:w="537"/><text x="82.6003%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (74 samples, 0.07%)</title><rect x="82.8427%" y="117" width="0.0678%" height="15" fill="rgb(219,138,53)" fg:x="90354" fg:w="74"/><text x="83.0927%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (74 samples, 0.07%)</title><rect x="82.8427%" y="101" width="0.0678%" height="15" fill="rgb(211,51,23)" fg:x="90354" fg:w="74"/><text x="83.0927%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,870 samples, 5.38%)</title><rect x="77.6358%" y="165" width="5.3820%" height="15" fill="rgb(247,221,28)" fg:x="84675" fg:w="5870"/><text x="77.8858%" y="175.50">esp`has..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (5,181 samples, 4.75%)</title><rect x="78.2675%" y="149" width="4.7503%" height="15" fill="rgb(251,222,45)" fg:x="85364" fg:w="5181"/><text x="78.5175%" y="159.50">esp`ha..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,854 samples, 2.62%)</title><rect x="80.4010%" y="133" width="2.6167%" height="15" fill="rgb(217,162,53)" fg:x="87691" fg:w="2854"/><text x="80.6510%" y="143.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (115 samples, 0.11%)</title><rect x="82.9123%" y="117" width="0.1054%" height="15" fill="rgb(229,93,14)" fg:x="90430" fg:w="115"/><text x="83.1623%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (115 samples, 0.11%)</title><rect x="82.9123%" y="101" width="0.1054%" height="15" fill="rgb(209,67,49)" fg:x="90430" fg:w="115"/><text x="83.1623%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (115 samples, 0.11%)</title><rect x="82.9123%" y="85" width="0.1054%" height="15" fill="rgb(213,87,29)" fg:x="90430" fg:w="115"/><text x="83.1623%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,256 samples, 2.07%)</title><rect x="83.0178%" y="165" width="2.0685%" height="15" fill="rgb(205,151,52)" fg:x="90545" fg:w="2256"/><text x="83.2678%" y="175.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (883 samples, 0.81%)</title><rect x="84.2766%" y="149" width="0.8096%" height="15" fill="rgb(253,215,39)" fg:x="91918" fg:w="883"/><text x="84.5266%" y="159.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (24,948 samples, 22.87%)</title><rect x="62.2214%" y="181" width="22.8740%" height="15" fill="rgb(221,220,41)" fg:x="67863" fg:w="24948"/><text x="62.4714%" y="191.50">esp`esp::var::ham_gen::OffDiagElems:..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (28 samples, 0.03%)</title><rect x="85.0954%" y="181" width="0.0257%" height="15" fill="rgb(218,133,21)" fg:x="92811" fg:w="28"/><text x="85.3454%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el_and_spin_flipped (30,281 samples, 27.76%)</title><rect x="59.4460%" y="197" width="27.7637%" height="15" fill="rgb(221,193,43)" fg:x="64836" fg:w="30281"/><text x="59.6960%" y="207.50">esp`esp::var::ham_gen::OffDiagElems::add_el_a..</text></g><g><title>esp`hashbrown::map::make_hash (2,278 samples, 2.09%)</title><rect x="85.1211%" y="181" width="2.0886%" height="15" fill="rgb(240,128,52)" fg:x="92839" fg:w="2278"/><text x="85.3711%" y="191.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,350 samples, 1.24%)</title><rect x="85.9719%" y="165" width="1.2378%" height="15" fill="rgb(253,114,12)" fg:x="93767" fg:w="1350"/><text x="86.2219%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (80 samples, 0.07%)</title><rect x="87.4710%" y="181" width="0.0733%" height="15" fill="rgb(215,223,47)" fg:x="95402" fg:w="80"/><text x="87.7210%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.01%)</title><rect x="87.8717%" y="149" width="0.0128%" height="15" fill="rgb(248,225,23)" fg:x="95839" fg:w="14"/><text x="88.1217%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (233 samples, 0.21%)</title><rect x="87.8845%" y="149" width="0.2136%" height="15" fill="rgb(250,108,0)" fg:x="95853" fg:w="233"/><text x="88.1345%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (105 samples, 0.10%)</title><rect x="88.0019%" y="133" width="0.0963%" height="15" fill="rgb(228,208,7)" fg:x="95981" fg:w="105"/><text x="88.2519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (29 samples, 0.03%)</title><rect x="88.1046%" y="101" width="0.0266%" height="15" fill="rgb(244,45,10)" fg:x="96093" fg:w="29"/><text x="88.3546%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.02%)</title><rect x="88.1156%" y="85" width="0.0156%" height="15" fill="rgb(207,125,25)" fg:x="96105" fg:w="17"/><text x="88.3656%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (49 samples, 0.04%)</title><rect x="88.1018%" y="133" width="0.0449%" height="15" fill="rgb(210,195,18)" fg:x="96090" fg:w="49"/><text x="88.3518%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.04%)</title><rect x="88.1027%" y="117" width="0.0440%" height="15" fill="rgb(249,80,12)" fg:x="96091" fg:w="48"/><text x="88.3527%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.02%)</title><rect x="88.1311%" y="101" width="0.0156%" height="15" fill="rgb(221,65,9)" fg:x="96122" fg:w="17"/><text x="88.3811%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.01%)</title><rect x="88.1357%" y="85" width="0.0110%" height="15" fill="rgb(235,49,36)" fg:x="96127" fg:w="12"/><text x="88.3857%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (84 samples, 0.08%)</title><rect x="88.1486%" y="133" width="0.0770%" height="15" fill="rgb(225,32,20)" fg:x="96141" fg:w="84"/><text x="88.3986%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (140 samples, 0.13%)</title><rect x="88.0981%" y="149" width="0.1284%" height="15" fill="rgb(215,141,46)" fg:x="96086" fg:w="140"/><text x="88.3481%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.01%)</title><rect x="88.2320%" y="149" width="0.0101%" height="15" fill="rgb(250,160,47)" fg:x="96232" fg:w="11"/><text x="88.4820%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (684 samples, 0.63%)</title><rect x="87.6333%" y="165" width="0.6271%" height="15" fill="rgb(216,222,40)" fg:x="95579" fg:w="684"/><text x="87.8833%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (782 samples, 0.72%)</title><rect x="87.5444%" y="181" width="0.7170%" height="15" fill="rgb(234,217,39)" fg:x="95482" fg:w="782"/><text x="87.7944%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,149 samples, 1.05%)</title><rect x="87.2097%" y="197" width="1.0535%" height="15" fill="rgb(207,178,40)" fg:x="95117" fg:w="1149"/><text x="87.4597%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,398 samples, 2.20%)</title><rect x="88.2632%" y="197" width="2.1986%" height="15" fill="rgb(221,136,13)" fg:x="96266" fg:w="2398"/><text x="88.5132%" y="207.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (953 samples, 0.87%)</title><rect x="89.5881%" y="181" width="0.8738%" height="15" fill="rgb(249,199,10)" fg:x="97711" fg:w="953"/><text x="89.8381%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (235 samples, 0.22%)</title><rect x="90.4893%" y="181" width="0.2155%" height="15" fill="rgb(249,222,13)" fg:x="98694" fg:w="235"/><text x="90.7393%" y="191.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (7,502 samples, 6.88%)</title><rect x="90.4673%" y="197" width="6.8783%" height="15" fill="rgb(244,185,38)" fg:x="98670" fg:w="7502"/><text x="90.7173%" y="207.50">esp`sprs:..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (7,243 samples, 6.64%)</title><rect x="90.7048%" y="181" width="6.6409%" height="15" fill="rgb(236,202,9)" fg:x="98929" fg:w="7243"/><text x="90.9548%" y="191.50">esp`sprs:..</text></g><g><title>esp`core::slice::sort::recurse (5,375 samples, 4.93%)</title><rect x="92.4175%" y="165" width="4.9282%" height="15" fill="rgb(250,229,37)" fg:x="100797" fg:w="5375"/><text x="92.6675%" y="175.50">esp`co..</text></g><g><title>esp`core::slice::sort::recurse (4,029 samples, 3.69%)</title><rect x="93.6516%" y="149" width="3.6941%" height="15" fill="rgb(206,174,23)" fg:x="102143" fg:w="4029"/><text x="93.9016%" y="159.50">esp`..</text></g><g><title>esp`core::slice::sort::recurse (1,959 samples, 1.80%)</title><rect x="95.5495%" y="133" width="1.7961%" height="15" fill="rgb(211,33,43)" fg:x="104213" fg:w="1959"/><text x="95.7995%" y="143.50">e..</text></g><g><title>esp`core::slice::sort::recurse (429 samples, 0.39%)</title><rect x="96.9523%" y="117" width="0.3933%" height="15" fill="rgb(245,58,50)" fg:x="105743" fg:w="429"/><text x="97.2023%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (41 samples, 0.04%)</title><rect x="97.3081%" y="101" width="0.0376%" height="15" fill="rgb(244,68,36)" fg:x="106131" fg:w="41"/><text x="97.5581%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.02%)</title><rect x="97.3512%" y="197" width="0.0174%" height="15" fill="rgb(232,229,15)" fg:x="106178" fg:w="19"/><text x="97.6012%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (689 samples, 0.63%)</title><rect x="97.4181%" y="181" width="0.6317%" height="15" fill="rgb(254,30,23)" fg:x="106251" fg:w="689"/><text x="97.6681%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (653 samples, 0.60%)</title><rect x="97.4511%" y="165" width="0.5987%" height="15" fill="rgb(235,160,14)" fg:x="106287" fg:w="653"/><text x="97.7011%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (257 samples, 0.24%)</title><rect x="97.8142%" y="149" width="0.2356%" height="15" fill="rgb(212,155,44)" fg:x="106683" fg:w="257"/><text x="98.0642%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (54 samples, 0.05%)</title><rect x="98.0003%" y="133" width="0.0495%" height="15" fill="rgb(226,2,50)" fg:x="106886" fg:w="54"/><text x="98.2503%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (746 samples, 0.68%)</title><rect x="97.3686%" y="197" width="0.6840%" height="15" fill="rgb(234,177,6)" fg:x="106197" fg:w="746"/><text x="97.6186%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.01%)</title><rect x="98.0526%" y="197" width="0.0101%" height="15" fill="rgb(217,24,9)" fg:x="106943" fg:w="11"/><text x="98.3026%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (15 samples, 0.01%)</title><rect x="98.0627%" y="197" width="0.0138%" height="15" fill="rgb(220,13,46)" fg:x="106954" fg:w="15"/><text x="98.3127%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (31 samples, 0.03%)</title><rect x="98.0764%" y="197" width="0.0284%" height="15" fill="rgb(239,221,27)" fg:x="106969" fg:w="31"/><text x="98.3264%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.01%)</title><rect x="98.1048%" y="197" width="0.0138%" height="15" fill="rgb(222,198,25)" fg:x="107000" fg:w="15"/><text x="98.3548%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (13 samples, 0.01%)</title><rect x="98.1067%" y="181" width="0.0119%" height="15" fill="rgb(211,99,13)" fg:x="107002" fg:w="13"/><text x="98.3567%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (13 samples, 0.01%)</title><rect x="98.1067%" y="165" width="0.0119%" height="15" fill="rgb(232,111,31)" fg:x="107002" fg:w="13"/><text x="98.3567%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (23 samples, 0.02%)</title><rect x="98.1268%" y="197" width="0.0211%" height="15" fill="rgb(245,82,37)" fg:x="107024" fg:w="23"/><text x="98.3768%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (96,735 samples, 88.69%)</title><rect x="9.4639%" y="213" width="88.6932%" height="15" fill="rgb(227,149,46)" fg:x="10322" fg:w="96735"/><text x="9.7139%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (47 samples, 0.04%)</title><rect x="98.1571%" y="213" width="0.0431%" height="15" fill="rgb(218,36,50)" fg:x="107057" fg:w="47"/><text x="98.4071%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (107,117 samples, 98.21%)</title><rect x="0.0009%" y="229" width="98.2121%" height="15" fill="rgb(226,80,48)" fg:x="1" fg:w="107117"/><text x="0.2509%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.01%)</title><rect x="98.5220%" y="213" width="0.0138%" height="15" fill="rgb(238,224,15)" fg:x="107455" fg:w="15"/><text x="98.7720%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (242 samples, 0.22%)</title><rect x="98.5532%" y="213" width="0.2219%" height="15" fill="rgb(241,136,10)" fg:x="107489" fg:w="242"/><text x="98.8032%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (105 samples, 0.10%)</title><rect x="98.6788%" y="197" width="0.0963%" height="15" fill="rgb(208,32,45)" fg:x="107626" fg:w="105"/><text x="98.9288%" y="207.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (81 samples, 0.07%)</title><rect x="98.7751%" y="213" width="0.0743%" height="15" fill="rgb(207,135,9)" fg:x="107731" fg:w="81"/><text x="99.0251%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (69 samples, 0.06%)</title><rect x="98.8493%" y="213" width="0.0633%" height="15" fill="rgb(206,86,44)" fg:x="107812" fg:w="69"/><text x="99.0993%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (49 samples, 0.04%)</title><rect x="98.8677%" y="197" width="0.0449%" height="15" fill="rgb(245,177,15)" fg:x="107832" fg:w="49"/><text x="99.1177%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (23 samples, 0.02%)</title><rect x="98.9126%" y="213" width="0.0211%" height="15" fill="rgb(206,64,50)" fg:x="107881" fg:w="23"/><text x="99.1626%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (12 samples, 0.01%)</title><rect x="98.9227%" y="197" width="0.0110%" height="15" fill="rgb(234,36,40)" fg:x="107892" fg:w="12"/><text x="99.1727%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (615 samples, 0.56%)</title><rect x="98.9346%" y="213" width="0.5639%" height="15" fill="rgb(213,64,8)" fg:x="107905" fg:w="615"/><text x="99.1846%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (102 samples, 0.09%)</title><rect x="99.4050%" y="197" width="0.0935%" height="15" fill="rgb(210,75,36)" fg:x="108418" fg:w="102"/><text x="99.6550%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (19 samples, 0.02%)</title><rect x="99.5599%" y="165" width="0.0174%" height="15" fill="rgb(229,88,21)" fg:x="108587" fg:w="19"/><text x="99.8099%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (88 samples, 0.08%)</title><rect x="99.4985%" y="213" width="0.0807%" height="15" fill="rgb(252,204,47)" fg:x="108520" fg:w="88"/><text x="99.7485%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (69 samples, 0.06%)</title><rect x="99.5159%" y="197" width="0.0633%" height="15" fill="rgb(208,77,27)" fg:x="108539" fg:w="69"/><text x="99.7659%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (54 samples, 0.05%)</title><rect x="99.5296%" y="181" width="0.0495%" height="15" fill="rgb(221,76,26)" fg:x="108554" fg:w="54"/><text x="99.7796%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (301 samples, 0.28%)</title><rect x="99.5792%" y="213" width="0.2760%" height="15" fill="rgb(225,139,18)" fg:x="108608" fg:w="301"/><text x="99.8292%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (129 samples, 0.12%)</title><rect x="99.7369%" y="197" width="0.1183%" height="15" fill="rgb(230,137,11)" fg:x="108780" fg:w="129"/><text x="99.9869%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (1,793 samples, 1.64%)</title><rect x="98.2130%" y="229" width="1.6439%" height="15" fill="rgb(212,28,1)" fg:x="107118" fg:w="1793"/><text x="98.4630%" y="239.50"></text></g><g><title>esp`esp::var::variational (108,919 samples, 99.86%)</title><rect x="0.0000%" y="245" width="99.8643%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="108919"/><text x="0.2500%" y="255.50">esp`esp::var::variational</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.02%)</title><rect x="99.8680%" y="213" width="0.0202%" height="15" fill="rgb(222,171,42)" fg:x="108923" fg:w="22"/><text x="100.1180%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (22 samples, 0.02%)</title><rect x="99.8680%" y="197" width="0.0202%" height="15" fill="rgb(243,84,45)" fg:x="108923" fg:w="22"/><text x="100.1180%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.02%)</title><rect x="99.8689%" y="181" width="0.0193%" height="15" fill="rgb(252,49,23)" fg:x="108924" fg:w="21"/><text x="100.1189%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (20 samples, 0.02%)</title><rect x="99.8698%" y="165" width="0.0183%" height="15" fill="rgb(215,19,7)" fg:x="108925" fg:w="20"/><text x="100.1198%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (19 samples, 0.02%)</title><rect x="99.8707%" y="149" width="0.0174%" height="15" fill="rgb(238,81,41)" fg:x="108926" fg:w="19"/><text x="100.1207%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.01%)</title><rect x="99.8781%" y="133" width="0.0101%" height="15" fill="rgb(210,199,37)" fg:x="108934" fg:w="11"/><text x="100.1281%" y="143.50"></text></g><g><title>esp`alloc::slice::merge_sort (18 samples, 0.02%)</title><rect x="99.8881%" y="213" width="0.0165%" height="15" fill="rgb(244,192,49)" fg:x="108945" fg:w="18"/><text x="100.1381%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (53 samples, 0.05%)</title><rect x="99.8643%" y="245" width="0.0486%" height="15" fill="rgb(226,211,11)" fg:x="108919" fg:w="53"/><text x="100.1143%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (53 samples, 0.05%)</title><rect x="99.8643%" y="229" width="0.0486%" height="15" fill="rgb(236,162,54)" fg:x="108919" fg:w="53"/><text x="100.1143%" y="239.50"></text></g><g><title>esp`main (108,975 samples, 99.92%)</title><rect x="0.0000%" y="325" width="99.9156%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="108975"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (108,975 samples, 99.92%)</title><rect x="0.0000%" y="309" width="99.9156%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="108975"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (108,975 samples, 99.92%)</title><rect x="0.0000%" y="293" width="99.9156%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="108975"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (108,975 samples, 99.92%)</title><rect x="0.0000%" y="277" width="99.9156%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="108975"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (108,975 samples, 99.92%)</title><rect x="0.0000%" y="261" width="99.9156%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="108975"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>all (109,067 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="109067"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (109,067 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="109067"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (109,067 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="109067"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (92 samples, 0.08%)</title><rect x="99.9156%" y="325" width="0.0844%" height="15" fill="rgb(224,6,22)" fg:x="108975" fg:w="92"/><text x="100.1656%" y="335.50"></text></g></svg></svg>