<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="580161"><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (65 samples, 0.01%)</title><rect x="1.4915%" y="165" width="0.0112%" height="15" fill="rgb(227,0,7)" fg:x="8653" fg:w="65"/><text x="1.7415%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 0.01%)</title><rect x="1.4915%" y="149" width="0.0112%" height="15" fill="rgb(217,0,24)" fg:x="8653" fg:w="65"/><text x="1.7415%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (7,985 samples, 1.38%)</title><rect x="0.1358%" y="181" width="1.3763%" height="15" fill="rgb(221,193,54)" fg:x="788" fg:w="7985"/><text x="0.3858%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (145 samples, 0.02%)</title><rect x="1.5961%" y="133" width="0.0250%" height="15" fill="rgb(248,212,6)" fg:x="9260" fg:w="145"/><text x="1.8461%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (313 samples, 0.05%)</title><rect x="1.6237%" y="117" width="0.0540%" height="15" fill="rgb(208,68,35)" fg:x="9420" fg:w="313"/><text x="1.8737%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (113 samples, 0.02%)</title><rect x="1.6776%" y="117" width="0.0195%" height="15" fill="rgb(232,128,0)" fg:x="9733" fg:w="113"/><text x="1.9276%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (591 samples, 0.10%)</title><rect x="1.5954%" y="149" width="0.1019%" height="15" fill="rgb(207,160,47)" fg:x="9256" fg:w="591"/><text x="1.8454%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (442 samples, 0.08%)</title><rect x="1.6211%" y="133" width="0.0762%" height="15" fill="rgb(228,23,34)" fg:x="9405" fg:w="442"/><text x="1.8711%" y="143.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (976 samples, 0.17%)</title><rect x="1.5292%" y="165" width="0.1682%" height="15" fill="rgb(218,30,26)" fg:x="8872" fg:w="976"/><text x="1.7792%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (1,098 samples, 0.19%)</title><rect x="1.5160%" y="181" width="0.1893%" height="15" fill="rgb(220,122,19)" fg:x="8795" fg:w="1098"/><text x="1.7660%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (482 samples, 0.08%)</title><rect x="1.7435%" y="165" width="0.0831%" height="15" fill="rgb(250,228,42)" fg:x="10115" fg:w="482"/><text x="1.9935%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (80 samples, 0.01%)</title><rect x="1.8266%" y="165" width="0.0138%" height="15" fill="rgb(240,193,28)" fg:x="10597" fg:w="80"/><text x="2.0766%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (723 samples, 0.12%)</title><rect x="1.7161%" y="181" width="0.1246%" height="15" fill="rgb(216,20,37)" fg:x="9956" fg:w="723"/><text x="1.9661%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (107 samples, 0.02%)</title><rect x="1.8407%" y="181" width="0.0184%" height="15" fill="rgb(206,188,39)" fg:x="10679" fg:w="107"/><text x="2.0907%" y="191.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (73 samples, 0.01%)</title><rect x="1.8466%" y="165" width="0.0126%" height="15" fill="rgb(217,207,13)" fg:x="10713" fg:w="73"/><text x="2.0966%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (74 samples, 0.01%)</title><rect x="1.8591%" y="181" width="0.0128%" height="15" fill="rgb(231,73,38)" fg:x="10786" fg:w="74"/><text x="2.1091%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (153 samples, 0.03%)</title><rect x="1.8748%" y="181" width="0.0264%" height="15" fill="rgb(225,20,46)" fg:x="10877" fg:w="153"/><text x="2.1248%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (318 samples, 0.05%)</title><rect x="1.9012%" y="181" width="0.0548%" height="15" fill="rgb(210,31,41)" fg:x="11030" fg:w="318"/><text x="2.1512%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (317 samples, 0.05%)</title><rect x="1.9014%" y="165" width="0.0546%" height="15" fill="rgb(221,200,47)" fg:x="11031" fg:w="317"/><text x="2.1514%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (316 samples, 0.05%)</title><rect x="1.9015%" y="149" width="0.0545%" height="15" fill="rgb(226,26,5)" fg:x="11032" fg:w="316"/><text x="2.1515%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (11,408 samples, 1.97%)</title><rect x="0.0017%" y="197" width="1.9664%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="11408"/><text x="0.2517%" y="207.50">e..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (1,533 samples, 0.26%)</title><rect x="1.9681%" y="197" width="0.2642%" height="15" fill="rgb(235,183,28)" fg:x="11418" fg:w="1533"/><text x="2.2181%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (118 samples, 0.02%)</title><rect x="4.4205%" y="101" width="0.0203%" height="15" fill="rgb(221,5,38)" fg:x="25646" fg:w="118"/><text x="4.6705%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (279 samples, 0.05%)</title><rect x="4.3953%" y="133" width="0.0481%" height="15" fill="rgb(247,18,42)" fg:x="25500" fg:w="279"/><text x="4.6453%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (167 samples, 0.03%)</title><rect x="4.4146%" y="117" width="0.0288%" height="15" fill="rgb(241,131,45)" fg:x="25612" fg:w="167"/><text x="4.6646%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (335 samples, 0.06%)</title><rect x="4.3941%" y="149" width="0.0577%" height="15" fill="rgb(249,31,29)" fg:x="25493" fg:w="335"/><text x="4.6441%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (349 samples, 0.06%)</title><rect x="4.3921%" y="165" width="0.0602%" height="15" fill="rgb(225,111,53)" fg:x="25481" fg:w="349"/><text x="4.6421%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,343 samples, 0.40%)</title><rect x="4.3869%" y="181" width="0.4039%" height="15" fill="rgb(238,160,17)" fg:x="25451" fg:w="2343"/><text x="4.6369%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,961 samples, 0.34%)</title><rect x="4.4527%" y="165" width="0.3380%" height="15" fill="rgb(214,148,48)" fg:x="25833" fg:w="1961"/><text x="4.7027%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (88 samples, 0.02%)</title><rect x="5.5081%" y="165" width="0.0152%" height="15" fill="rgb(232,36,49)" fg:x="31956" fg:w="88"/><text x="5.7581%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (88 samples, 0.02%)</title><rect x="5.5081%" y="149" width="0.0152%" height="15" fill="rgb(209,103,24)" fg:x="31956" fg:w="88"/><text x="5.7581%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (88 samples, 0.02%)</title><rect x="5.5081%" y="133" width="0.0152%" height="15" fill="rgb(229,88,8)" fg:x="31956" fg:w="88"/><text x="5.7581%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (88 samples, 0.02%)</title><rect x="5.5081%" y="117" width="0.0152%" height="15" fill="rgb(213,181,19)" fg:x="31956" fg:w="88"/><text x="5.7581%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (78 samples, 0.01%)</title><rect x="5.5235%" y="165" width="0.0134%" height="15" fill="rgb(254,191,54)" fg:x="32045" fg:w="78"/><text x="5.7735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (60 samples, 0.01%)</title><rect x="5.5583%" y="149" width="0.0103%" height="15" fill="rgb(241,83,37)" fg:x="32247" fg:w="60"/><text x="5.8083%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.01%)</title><rect x="5.5583%" y="133" width="0.0103%" height="15" fill="rgb(233,36,39)" fg:x="32247" fg:w="60"/><text x="5.8083%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (189 samples, 0.03%)</title><rect x="5.5369%" y="165" width="0.0326%" height="15" fill="rgb(226,3,54)" fg:x="32123" fg:w="189"/><text x="5.7869%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (89 samples, 0.02%)</title><rect x="5.5695%" y="165" width="0.0153%" height="15" fill="rgb(245,192,40)" fg:x="32312" fg:w="89"/><text x="5.8195%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (76 samples, 0.01%)</title><rect x="5.5717%" y="149" width="0.0131%" height="15" fill="rgb(238,167,29)" fg:x="32325" fg:w="76"/><text x="5.8217%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,649 samples, 0.80%)</title><rect x="4.7907%" y="181" width="0.8013%" height="15" fill="rgb(232,182,51)" fg:x="27794" fg:w="4649"/><text x="5.0407%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.02%)</title><rect x="5.5921%" y="181" width="0.0171%" height="15" fill="rgb(231,60,39)" fg:x="32443" fg:w="99"/><text x="5.8421%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (67 samples, 0.01%)</title><rect x="5.6091%" y="181" width="0.0115%" height="15" fill="rgb(208,69,12)" fg:x="32542" fg:w="67"/><text x="5.8591%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (81 samples, 0.01%)</title><rect x="5.6353%" y="117" width="0.0140%" height="15" fill="rgb(235,93,37)" fg:x="32694" fg:w="81"/><text x="5.8853%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (91 samples, 0.02%)</title><rect x="5.6341%" y="133" width="0.0157%" height="15" fill="rgb(213,116,39)" fg:x="32687" fg:w="91"/><text x="5.8841%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (101 samples, 0.02%)</title><rect x="5.6334%" y="149" width="0.0174%" height="15" fill="rgb(222,207,29)" fg:x="32683" fg:w="101"/><text x="5.8834%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (149 samples, 0.03%)</title><rect x="5.6253%" y="181" width="0.0257%" height="15" fill="rgb(206,96,30)" fg:x="32636" fg:w="149"/><text x="5.8753%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (106 samples, 0.02%)</title><rect x="5.6327%" y="165" width="0.0183%" height="15" fill="rgb(218,138,4)" fg:x="32679" fg:w="106"/><text x="5.8827%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (188 samples, 0.03%)</title><rect x="5.6534%" y="181" width="0.0324%" height="15" fill="rgb(250,191,14)" fg:x="32799" fg:w="188"/><text x="5.9034%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (162 samples, 0.03%)</title><rect x="5.6996%" y="149" width="0.0279%" height="15" fill="rgb(239,60,40)" fg:x="33067" fg:w="162"/><text x="5.9496%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (221 samples, 0.04%)</title><rect x="5.6951%" y="165" width="0.0381%" height="15" fill="rgb(206,27,48)" fg:x="33041" fg:w="221"/><text x="5.9451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (274 samples, 0.05%)</title><rect x="5.7332%" y="165" width="0.0472%" height="15" fill="rgb(225,35,8)" fg:x="33262" fg:w="274"/><text x="5.9832%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (274 samples, 0.05%)</title><rect x="5.7332%" y="149" width="0.0472%" height="15" fill="rgb(250,213,24)" fg:x="33262" fg:w="274"/><text x="5.9832%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (274 samples, 0.05%)</title><rect x="5.7332%" y="133" width="0.0472%" height="15" fill="rgb(247,123,22)" fg:x="33262" fg:w="274"/><text x="5.9832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (85 samples, 0.01%)</title><rect x="5.7994%" y="149" width="0.0147%" height="15" fill="rgb(231,138,38)" fg:x="33646" fg:w="85"/><text x="6.0494%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (81 samples, 0.01%)</title><rect x="5.8001%" y="133" width="0.0140%" height="15" fill="rgb(231,145,46)" fg:x="33650" fg:w="81"/><text x="6.0501%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (303 samples, 0.05%)</title><rect x="5.8141%" y="149" width="0.0522%" height="15" fill="rgb(251,118,11)" fg:x="33731" fg:w="303"/><text x="6.0641%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (487 samples, 0.08%)</title><rect x="5.8682%" y="149" width="0.0839%" height="15" fill="rgb(217,147,25)" fg:x="34045" fg:w="487"/><text x="6.1182%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (284 samples, 0.05%)</title><rect x="5.9578%" y="133" width="0.0490%" height="15" fill="rgb(247,81,37)" fg:x="34565" fg:w="284"/><text x="6.2078%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (304 samples, 0.05%)</title><rect x="5.9552%" y="149" width="0.0524%" height="15" fill="rgb(209,12,38)" fg:x="34550" fg:w="304"/><text x="6.2052%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,704 samples, 0.29%)</title><rect x="6.0221%" y="133" width="0.2937%" height="15" fill="rgb(227,1,9)" fg:x="34938" fg:w="1704"/><text x="6.2721%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,164 samples, 0.55%)</title><rect x="5.7805%" y="165" width="0.5454%" height="15" fill="rgb(248,47,43)" fg:x="33536" fg:w="3164"/><text x="6.0305%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,846 samples, 0.32%)</title><rect x="6.0076%" y="149" width="0.3182%" height="15" fill="rgb(221,10,30)" fg:x="34854" fg:w="1846"/><text x="6.2576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (143 samples, 0.02%)</title><rect x="6.3338%" y="165" width="0.0246%" height="15" fill="rgb(210,229,1)" fg:x="36746" fg:w="143"/><text x="6.5838%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (143 samples, 0.02%)</title><rect x="6.3338%" y="149" width="0.0246%" height="15" fill="rgb(222,148,37)" fg:x="36746" fg:w="143"/><text x="6.5838%" y="159.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (3,911 samples, 0.67%)</title><rect x="5.6858%" y="181" width="0.6741%" height="15" fill="rgb(234,67,33)" fg:x="32987" fg:w="3911"/><text x="5.9358%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (1,534 samples, 0.26%)</title><rect x="6.3600%" y="181" width="0.2644%" height="15" fill="rgb(247,98,35)" fg:x="36898" fg:w="1534"/><text x="6.6100%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6,092 samples, 1.05%)</title><rect x="67.2108%" y="165" width="1.0501%" height="15" fill="rgb(247,138,52)" fg:x="389931" fg:w="6092"/><text x="67.4608%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (161 samples, 0.03%)</title><rect x="68.2988%" y="117" width="0.0278%" height="15" fill="rgb(213,79,30)" fg:x="396243" fg:w="161"/><text x="68.5488%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (155 samples, 0.03%)</title><rect x="68.2998%" y="101" width="0.0267%" height="15" fill="rgb(246,177,23)" fg:x="396249" fg:w="155"/><text x="68.5498%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (179 samples, 0.03%)</title><rect x="68.2962%" y="133" width="0.0309%" height="15" fill="rgb(230,62,27)" fg:x="396228" fg:w="179"/><text x="68.5462%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (337 samples, 0.06%)</title><rect x="68.4208%" y="85" width="0.0581%" height="15" fill="rgb(216,154,8)" fg:x="396951" fg:w="337"/><text x="68.6708%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (680 samples, 0.12%)</title><rect x="68.6142%" y="53" width="0.1172%" height="15" fill="rgb(244,35,45)" fg:x="398073" fg:w="680"/><text x="68.8642%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (231 samples, 0.04%)</title><rect x="68.7314%" y="53" width="0.0398%" height="15" fill="rgb(251,115,12)" fg:x="398753" fg:w="231"/><text x="68.9814%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (314 samples, 0.05%)</title><rect x="68.7783%" y="37" width="0.0541%" height="15" fill="rgb(240,54,50)" fg:x="399025" fg:w="314"/><text x="69.0283%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,772 samples, 0.31%)</title><rect x="68.5279%" y="69" width="0.3054%" height="15" fill="rgb(233,84,52)" fg:x="397572" fg:w="1772"/><text x="68.7779%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (328 samples, 0.06%)</title><rect x="68.7768%" y="53" width="0.0565%" height="15" fill="rgb(207,117,47)" fg:x="399016" fg:w="328"/><text x="69.0268%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,058 samples, 0.35%)</title><rect x="68.4789%" y="85" width="0.3547%" height="15" fill="rgb(249,43,39)" fg:x="397288" fg:w="2058"/><text x="68.7289%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (93 samples, 0.02%)</title><rect x="68.8376%" y="85" width="0.0160%" height="15" fill="rgb(209,38,44)" fg:x="399369" fg:w="93"/><text x="69.0876%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (239 samples, 0.04%)</title><rect x="68.9314%" y="37" width="0.0412%" height="15" fill="rgb(236,212,23)" fg:x="399913" fg:w="239"/><text x="69.1814%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (121 samples, 0.02%)</title><rect x="68.9726%" y="37" width="0.0209%" height="15" fill="rgb(242,79,21)" fg:x="400152" fg:w="121"/><text x="69.2226%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (897 samples, 0.15%)</title><rect x="68.8607%" y="69" width="0.1546%" height="15" fill="rgb(211,96,35)" fg:x="399503" fg:w="897"/><text x="69.1107%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (678 samples, 0.12%)</title><rect x="68.8985%" y="53" width="0.1169%" height="15" fill="rgb(253,215,40)" fg:x="399722" fg:w="678"/><text x="69.1485%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (127 samples, 0.02%)</title><rect x="68.9934%" y="37" width="0.0219%" height="15" fill="rgb(211,81,21)" fg:x="400273" fg:w="127"/><text x="69.2434%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (125 samples, 0.02%)</title><rect x="69.0727%" y="53" width="0.0215%" height="15" fill="rgb(208,190,38)" fg:x="400733" fg:w="125"/><text x="69.3227%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,855 samples, 0.32%)</title><rect x="68.8536%" y="85" width="0.3197%" height="15" fill="rgb(235,213,38)" fg:x="399462" fg:w="1855"/><text x="69.1036%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (913 samples, 0.16%)</title><rect x="69.0160%" y="69" width="0.1574%" height="15" fill="rgb(237,122,38)" fg:x="400404" fg:w="913"/><text x="69.2660%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (459 samples, 0.08%)</title><rect x="69.0943%" y="53" width="0.0791%" height="15" fill="rgb(244,218,35)" fg:x="400858" fg:w="459"/><text x="69.3443%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (120 samples, 0.02%)</title><rect x="69.1734%" y="85" width="0.0207%" height="15" fill="rgb(240,68,47)" fg:x="401317" fg:w="120"/><text x="69.4234%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (101 samples, 0.02%)</title><rect x="69.1767%" y="69" width="0.0174%" height="15" fill="rgb(210,16,53)" fg:x="401336" fg:w="101"/><text x="69.4267%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (308 samples, 0.05%)</title><rect x="69.1961%" y="85" width="0.0531%" height="15" fill="rgb(235,124,12)" fg:x="401449" fg:w="308"/><text x="69.4461%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7,565 samples, 1.30%)</title><rect x="68.4029%" y="101" width="1.3039%" height="15" fill="rgb(224,169,11)" fg:x="396847" fg:w="7565"/><text x="68.6529%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,655 samples, 0.46%)</title><rect x="69.2492%" y="85" width="0.4576%" height="15" fill="rgb(250,166,2)" fg:x="401757" fg:w="2655"/><text x="69.4992%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7,751 samples, 1.34%)</title><rect x="68.3755%" y="117" width="1.3360%" height="15" fill="rgb(242,216,29)" fg:x="396688" fg:w="7751"/><text x="68.6255%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (171 samples, 0.03%)</title><rect x="69.7115%" y="117" width="0.0295%" height="15" fill="rgb(230,116,27)" fg:x="404439" fg:w="171"/><text x="69.9615%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (708 samples, 0.12%)</title><rect x="69.7424%" y="117" width="0.1220%" height="15" fill="rgb(228,99,48)" fg:x="404618" fg:w="708"/><text x="69.9924%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (688 samples, 0.12%)</title><rect x="69.7458%" y="101" width="0.1186%" height="15" fill="rgb(253,11,6)" fg:x="404638" fg:w="688"/><text x="69.9958%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8,912 samples, 1.54%)</title><rect x="68.3290%" y="133" width="1.5361%" height="15" fill="rgb(247,143,39)" fg:x="396418" fg:w="8912"/><text x="68.5790%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (9,286 samples, 1.60%)</title><rect x="68.2840%" y="149" width="1.6006%" height="15" fill="rgb(236,97,10)" fg:x="396157" fg:w="9286"/><text x="68.5340%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (113 samples, 0.02%)</title><rect x="69.8651%" y="133" width="0.0195%" height="15" fill="rgb(233,208,19)" fg:x="405330" fg:w="113"/><text x="70.1151%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9,499 samples, 1.64%)</title><rect x="68.2609%" y="165" width="1.6373%" height="15" fill="rgb(216,164,2)" fg:x="396023" fg:w="9499"/><text x="68.5109%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (68 samples, 0.01%)</title><rect x="69.8865%" y="149" width="0.0117%" height="15" fill="rgb(220,129,5)" fg:x="405454" fg:w="68"/><text x="70.1365%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (92 samples, 0.02%)</title><rect x="69.8996%" y="165" width="0.0159%" height="15" fill="rgb(242,17,10)" fg:x="405530" fg:w="92"/><text x="70.1496%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (51,265 samples, 8.84%)</title><rect x="69.9154%" y="165" width="8.8363%" height="15" fill="rgb(242,107,0)" fg:x="405622" fg:w="51265"/><text x="70.1654%" y="175.50">esp`esp::ham..</text></g><g><title>esp`esp::ham::Ham::ham_doub (7,374 samples, 1.27%)</title><rect x="77.4807%" y="149" width="1.2710%" height="15" fill="rgb(251,28,31)" fg:x="449513" fg:w="7374"/><text x="77.7307%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,211 samples, 0.21%)</title><rect x="78.5430%" y="133" width="0.2087%" height="15" fill="rgb(233,223,10)" fg:x="455676" fg:w="1211"/><text x="78.7930%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (954 samples, 0.16%)</title><rect x="78.7518%" y="165" width="0.1644%" height="15" fill="rgb(215,21,27)" fg:x="456887" fg:w="954"/><text x="79.0018%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (551 samples, 0.09%)</title><rect x="78.8212%" y="149" width="0.0950%" height="15" fill="rgb(232,23,21)" fg:x="457290" fg:w="551"/><text x="79.0712%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,287 samples, 0.22%)</title><rect x="79.2180%" y="149" width="0.2218%" height="15" fill="rgb(244,5,23)" fg:x="459592" fg:w="1287"/><text x="79.4680%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (192 samples, 0.03%)</title><rect x="81.5793%" y="117" width="0.0331%" height="15" fill="rgb(226,81,46)" fg:x="473291" fg:w="192"/><text x="81.8293%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,953 samples, 0.51%)</title><rect x="81.6123%" y="117" width="0.5090%" height="15" fill="rgb(247,70,30)" fg:x="473483" fg:w="2953"/><text x="81.8623%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,443 samples, 0.25%)</title><rect x="81.8726%" y="101" width="0.2487%" height="15" fill="rgb(212,68,19)" fg:x="474993" fg:w="1443"/><text x="82.1226%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (201 samples, 0.03%)</title><rect x="82.1213%" y="117" width="0.0346%" height="15" fill="rgb(240,187,13)" fg:x="476436" fg:w="201"/><text x="82.3713%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (201 samples, 0.03%)</title><rect x="82.1213%" y="101" width="0.0346%" height="15" fill="rgb(223,113,26)" fg:x="476436" fg:w="201"/><text x="82.3713%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,051 samples, 3.28%)</title><rect x="78.9162%" y="165" width="3.2837%" height="15" fill="rgb(206,192,2)" fg:x="457841" fg:w="19051"/><text x="79.1662%" y="175.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16,013 samples, 2.76%)</title><rect x="79.4398%" y="149" width="2.7601%" height="15" fill="rgb(241,108,4)" fg:x="460879" fg:w="16013"/><text x="79.6898%" y="159.50">es..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7,252 samples, 1.25%)</title><rect x="80.9499%" y="133" width="1.2500%" height="15" fill="rgb(247,173,49)" fg:x="469640" fg:w="7252"/><text x="81.1999%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (211 samples, 0.04%)</title><rect x="82.1636%" y="117" width="0.0364%" height="15" fill="rgb(224,114,35)" fg:x="476681" fg:w="211"/><text x="82.4136%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (211 samples, 0.04%)</title><rect x="82.1636%" y="101" width="0.0364%" height="15" fill="rgb(245,159,27)" fg:x="476681" fg:w="211"/><text x="82.4136%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (210 samples, 0.04%)</title><rect x="82.1637%" y="85" width="0.0362%" height="15" fill="rgb(245,172,44)" fg:x="476682" fg:w="210"/><text x="82.4137%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (83,820 samples, 14.45%)</title><rect x="82.1999%" y="165" width="14.4477%" height="15" fill="rgb(236,23,11)" fg:x="476892" fg:w="83820"/><text x="82.4499%" y="175.50">esp`hashbrown::map::ma..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42,429 samples, 7.31%)</title><rect x="89.3343%" y="149" width="7.3133%" height="15" fill="rgb(205,117,38)" fg:x="518283" fg:w="42429"/><text x="89.5843%" y="159.50">esp`&lt;std::..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (522,359 samples, 90.04%)</title><rect x="6.6252%" y="181" width="90.0369%" height="15" fill="rgb(237,72,25)" fg:x="38437" fg:w="522359"/><text x="6.8752%" y="191.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (84 samples, 0.01%)</title><rect x="96.6477%" y="165" width="0.0145%" height="15" fill="rgb(244,70,9)" fg:x="560712" fg:w="84"/><text x="96.8977%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (123 samples, 0.02%)</title><rect x="96.6621%" y="181" width="0.0212%" height="15" fill="rgb(217,125,39)" fg:x="560796" fg:w="123"/><text x="96.9121%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (551 samples, 0.09%)</title><rect x="97.4417%" y="165" width="0.0950%" height="15" fill="rgb(235,36,10)" fg:x="565319" fg:w="551"/><text x="97.6917%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (8,043 samples, 1.39%)</title><rect x="96.6833%" y="181" width="1.3863%" height="15" fill="rgb(251,123,47)" fg:x="560919" fg:w="8043"/><text x="96.9333%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (3,092 samples, 0.53%)</title><rect x="97.5367%" y="165" width="0.5330%" height="15" fill="rgb(221,13,13)" fg:x="565870" fg:w="3092"/><text x="97.7867%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (307 samples, 0.05%)</title><rect x="98.0771%" y="165" width="0.0529%" height="15" fill="rgb(238,131,9)" fg:x="569005" fg:w="307"/><text x="98.3271%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (8,899 samples, 1.53%)</title><rect x="98.0697%" y="181" width="1.5339%" height="15" fill="rgb(211,50,8)" fg:x="568962" fg:w="8899"/><text x="98.3197%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (8,549 samples, 1.47%)</title><rect x="98.1300%" y="165" width="1.4736%" height="15" fill="rgb(245,182,24)" fg:x="569312" fg:w="8549"/><text x="98.3800%" y="175.50"></text></g><g><title>esp`core::slice::sort::recurse (5,501 samples, 0.95%)</title><rect x="98.6554%" y="149" width="0.9482%" height="15" fill="rgb(242,14,37)" fg:x="572360" fg:w="5501"/><text x="98.9054%" y="159.50"></text></g><g><title>esp`core::slice::sort::recurse (4,067 samples, 0.70%)</title><rect x="98.9025%" y="133" width="0.7010%" height="15" fill="rgb(246,228,12)" fg:x="573794" fg:w="4067"/><text x="99.1525%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (1,915 samples, 0.33%)</title><rect x="99.2735%" y="117" width="0.3301%" height="15" fill="rgb(213,55,15)" fg:x="575946" fg:w="1915"/><text x="99.5235%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (463 samples, 0.08%)</title><rect x="99.5238%" y="101" width="0.0798%" height="15" fill="rgb(209,9,3)" fg:x="577398" fg:w="463"/><text x="99.7738%" y="111.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (564,979 samples, 97.38%)</title><rect x="2.2323%" y="197" width="97.3831%" height="15" fill="rgb(230,59,30)" fg:x="12951" fg:w="564979"/><text x="2.4823%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (110 samples, 0.02%)</title><rect x="99.6155%" y="197" width="0.0190%" height="15" fill="rgb(209,121,21)" fg:x="577930" fg:w="110"/><text x="99.8655%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (578,040 samples, 99.63%)</title><rect x="0.0005%" y="213" width="99.6344%" height="15" fill="rgb(220,109,13)" fg:x="3" fg:w="578040"/><text x="0.2505%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`esp::ham::Ham::ham_sing (245 samples, 0.04%)</title><rect x="99.7140%" y="197" width="0.0422%" height="15" fill="rgb(232,18,1)" fg:x="578502" fg:w="245"/><text x="99.9640%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (104 samples, 0.02%)</title><rect x="99.7383%" y="181" width="0.0179%" height="15" fill="rgb(215,41,42)" fg:x="578643" fg:w="104"/><text x="99.9883%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (93 samples, 0.02%)</title><rect x="99.7563%" y="197" width="0.0160%" height="15" fill="rgb(224,123,36)" fg:x="578747" fg:w="93"/><text x="100.0063%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (76 samples, 0.01%)</title><rect x="99.7723%" y="197" width="0.0131%" height="15" fill="rgb(240,125,3)" fg:x="578840" fg:w="76"/><text x="100.0223%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (664 samples, 0.11%)</title><rect x="99.7913%" y="197" width="0.1145%" height="15" fill="rgb(205,98,50)" fg:x="578950" fg:w="664"/><text x="100.0413%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (99 samples, 0.02%)</title><rect x="99.8887%" y="181" width="0.0171%" height="15" fill="rgb(205,185,37)" fg:x="579515" fg:w="99"/><text x="100.1387%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (75 samples, 0.01%)</title><rect x="99.9057%" y="197" width="0.0129%" height="15" fill="rgb(238,207,15)" fg:x="579614" fg:w="75"/><text x="100.1557%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (59 samples, 0.01%)</title><rect x="99.9085%" y="181" width="0.0102%" height="15" fill="rgb(213,199,42)" fg:x="579630" fg:w="59"/><text x="100.1585%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (292 samples, 0.05%)</title><rect x="99.9186%" y="197" width="0.0503%" height="15" fill="rgb(235,201,11)" fg:x="579689" fg:w="292"/><text x="100.1686%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (156 samples, 0.03%)</title><rect x="99.9421%" y="181" width="0.0269%" height="15" fill="rgb(207,46,11)" fg:x="579825" fg:w="156"/><text x="100.1921%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (1,941 samples, 0.33%)</title><rect x="99.6349%" y="213" width="0.3346%" height="15" fill="rgb(241,35,35)" fg:x="578043" fg:w="1941"/><text x="99.8849%" y="223.50"></text></g><g><title>esp`esp::var::variational (579,990 samples, 99.97%)</title><rect x="0.0002%" y="229" width="99.9705%" height="15" fill="rgb(243,32,47)" fg:x="1" fg:w="579990"/><text x="0.2502%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`std::sync::once::Once::call_inner (62 samples, 0.01%)</title><rect x="99.9707%" y="229" width="0.0107%" height="15" fill="rgb(247,202,23)" fg:x="579991" fg:w="62"/><text x="100.2207%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (62 samples, 0.01%)</title><rect x="99.9707%" y="213" width="0.0107%" height="15" fill="rgb(219,102,11)" fg:x="579991" fg:w="62"/><text x="100.2207%" y="223.50"></text></g><g><title>esp`main (580,057 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9821%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="580057"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (580,057 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9821%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="580057"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (580,056 samples, 99.98%)</title><rect x="0.0002%" y="277" width="99.9819%" height="15" fill="rgb(216,99,12)" fg:x="1" fg:w="580056"/><text x="0.2502%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (580,056 samples, 99.98%)</title><rect x="0.0002%" y="261" width="99.9819%" height="15" fill="rgb(226,22,26)" fg:x="1" fg:w="580056"/><text x="0.2502%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (580,056 samples, 99.98%)</title><rect x="0.0002%" y="245" width="99.9819%" height="15" fill="rgb(217,163,10)" fg:x="1" fg:w="580056"/><text x="0.2502%" y="255.50">esp`esp::main</text></g><g><title>0x1 (580,160 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9998%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="580160"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (580,160 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9998%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="580160"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (103 samples, 0.02%)</title><rect x="99.9821%" y="309" width="0.0178%" height="15" fill="rgb(220,39,43)" fg:x="580057" fg:w="103"/><text x="100.2321%" y="319.50"></text></g><g><title>all (580,161 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="580161"/><text x="0.2500%" y="367.50"></text></g></svg></svg>