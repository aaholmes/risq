<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="157018"><g><title>esp`__rdl_alloc (42 samples, 0.03%)</title><rect x="0.0057%" y="197" width="0.0267%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="42"/><text x="0.2557%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.02%)</title><rect x="0.0408%" y="197" width="0.0178%" height="15" fill="rgb(217,0,24)" fg:x="64" fg:w="28"/><text x="0.2908%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="0.5942%" y="181" width="0.0108%" height="15" fill="rgb(221,193,54)" fg:x="933" fg:w="17"/><text x="0.8442%" y="191.50"></text></g><g><title>esp`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (17 samples, 0.01%)</title><rect x="0.5942%" y="165" width="0.0108%" height="15" fill="rgb(248,212,6)" fg:x="933" fg:w="17"/><text x="0.8442%" y="175.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (69 samples, 0.04%)</title><rect x="5.8312%" y="165" width="0.0439%" height="15" fill="rgb(208,68,35)" fg:x="9156" fg:w="69"/><text x="6.0812%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 0.04%)</title><rect x="5.8312%" y="149" width="0.0439%" height="15" fill="rgb(232,128,0)" fg:x="9156" fg:w="69"/><text x="6.0812%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (8,325 samples, 5.30%)</title><rect x="0.6050%" y="181" width="5.3019%" height="15" fill="rgb(207,160,47)" fg:x="950" fg:w="8325"/><text x="0.8550%" y="191.50">esp`&lt;e..</text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (50 samples, 0.03%)</title><rect x="5.8751%" y="165" width="0.0318%" height="15" fill="rgb(228,23,34)" fg:x="9225" fg:w="50"/><text x="6.1251%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 0.03%)</title><rect x="5.8751%" y="149" width="0.0318%" height="15" fill="rgb(218,30,26)" fg:x="9225" fg:w="50"/><text x="6.1251%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (20 samples, 0.01%)</title><rect x="5.9076%" y="101" width="0.0127%" height="15" fill="rgb(220,122,19)" fg:x="9276" fg:w="20"/><text x="6.1576%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (20 samples, 0.01%)</title><rect x="5.9076%" y="85" width="0.0127%" height="15" fill="rgb(250,228,42)" fg:x="9276" fg:w="20"/><text x="6.1576%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (20 samples, 0.01%)</title><rect x="5.9076%" y="69" width="0.0127%" height="15" fill="rgb(240,193,28)" fg:x="9276" fg:w="20"/><text x="6.1576%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (31 samples, 0.02%)</title><rect x="5.9070%" y="181" width="0.0197%" height="15" fill="rgb(216,20,37)" fg:x="9275" fg:w="31"/><text x="6.1570%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (31 samples, 0.02%)</title><rect x="5.9070%" y="165" width="0.0197%" height="15" fill="rgb(206,188,39)" fg:x="9275" fg:w="31"/><text x="6.1570%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.02%)</title><rect x="5.9070%" y="149" width="0.0197%" height="15" fill="rgb(217,207,13)" fg:x="9275" fg:w="31"/><text x="6.1570%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (31 samples, 0.02%)</title><rect x="5.9070%" y="133" width="0.0197%" height="15" fill="rgb(231,73,38)" fg:x="9275" fg:w="31"/><text x="6.1570%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (31 samples, 0.02%)</title><rect x="5.9070%" y="117" width="0.0197%" height="15" fill="rgb(225,20,46)" fg:x="9275" fg:w="31"/><text x="6.1570%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (203 samples, 0.13%)</title><rect x="6.2477%" y="133" width="0.1293%" height="15" fill="rgb(210,31,41)" fg:x="9810" fg:w="203"/><text x="6.4977%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (300 samples, 0.19%)</title><rect x="6.3853%" y="117" width="0.1911%" height="15" fill="rgb(221,200,47)" fg:x="10026" fg:w="300"/><text x="6.6353%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (651 samples, 0.41%)</title><rect x="6.2445%" y="149" width="0.4146%" height="15" fill="rgb(226,26,5)" fg:x="9805" fg:w="651"/><text x="6.4945%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (443 samples, 0.28%)</title><rect x="6.3770%" y="133" width="0.2821%" height="15" fill="rgb(249,33,26)" fg:x="10013" fg:w="443"/><text x="6.6270%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (130 samples, 0.08%)</title><rect x="6.5763%" y="117" width="0.0828%" height="15" fill="rgb(235,183,28)" fg:x="10326" fg:w="130"/><text x="6.8263%" y="127.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (47 samples, 0.03%)</title><rect x="6.6292%" y="101" width="0.0299%" height="15" fill="rgb(221,5,38)" fg:x="10409" fg:w="47"/><text x="6.8792%" y="111.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (1,044 samples, 0.66%)</title><rect x="5.9949%" y="165" width="0.6649%" height="15" fill="rgb(247,18,42)" fg:x="9413" fg:w="1044"/><text x="6.2449%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (38 samples, 0.02%)</title><rect x="6.6597%" y="165" width="0.0242%" height="15" fill="rgb(241,131,45)" fg:x="10457" fg:w="38"/><text x="6.9097%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (1,190 samples, 0.76%)</title><rect x="5.9267%" y="181" width="0.7579%" height="15" fill="rgb(249,31,29)" fg:x="9306" fg:w="1190"/><text x="6.1767%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (41 samples, 0.03%)</title><rect x="6.6859%" y="181" width="0.0261%" height="15" fill="rgb(225,111,53)" fg:x="10498" fg:w="41"/><text x="6.9359%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (41 samples, 0.03%)</title><rect x="6.6859%" y="165" width="0.0261%" height="15" fill="rgb(238,160,17)" fg:x="10498" fg:w="41"/><text x="6.9359%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (24 samples, 0.02%)</title><rect x="6.7120%" y="181" width="0.0153%" height="15" fill="rgb(214,148,48)" fg:x="10539" fg:w="24"/><text x="6.9620%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (378 samples, 0.24%)</title><rect x="6.8432%" y="165" width="0.2407%" height="15" fill="rgb(232,36,49)" fg:x="10745" fg:w="378"/><text x="7.0932%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (85 samples, 0.05%)</title><rect x="7.0839%" y="165" width="0.0541%" height="15" fill="rgb(209,103,24)" fg:x="11123" fg:w="85"/><text x="7.3339%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (651 samples, 0.41%)</title><rect x="6.7273%" y="181" width="0.4146%" height="15" fill="rgb(229,88,8)" fg:x="10563" fg:w="651"/><text x="6.9773%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (29 samples, 0.02%)</title><rect x="7.1438%" y="165" width="0.0185%" height="15" fill="rgb(213,181,19)" fg:x="11217" fg:w="29"/><text x="7.3938%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (48 samples, 0.03%)</title><rect x="7.1648%" y="149" width="0.0306%" height="15" fill="rgb(254,191,54)" fg:x="11250" fg:w="48"/><text x="7.4148%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (81 samples, 0.05%)</title><rect x="7.1622%" y="165" width="0.0516%" height="15" fill="rgb(241,83,37)" fg:x="11246" fg:w="81"/><text x="7.4122%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (29 samples, 0.02%)</title><rect x="7.1954%" y="149" width="0.0185%" height="15" fill="rgb(233,36,39)" fg:x="11298" fg:w="29"/><text x="7.4454%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (114 samples, 0.07%)</title><rect x="7.1419%" y="181" width="0.0726%" height="15" fill="rgb(226,3,54)" fg:x="11214" fg:w="114"/><text x="7.3919%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (73 samples, 0.05%)</title><rect x="7.2145%" y="181" width="0.0465%" height="15" fill="rgb(245,192,40)" fg:x="11328" fg:w="73"/><text x="7.4645%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (148 samples, 0.09%)</title><rect x="7.2711%" y="181" width="0.0943%" height="15" fill="rgb(238,167,29)" fg:x="11417" fg:w="148"/><text x="7.5211%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (364 samples, 0.23%)</title><rect x="7.3667%" y="181" width="0.2318%" height="15" fill="rgb(232,182,51)" fg:x="11567" fg:w="364"/><text x="7.6167%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (363 samples, 0.23%)</title><rect x="7.3673%" y="165" width="0.2312%" height="15" fill="rgb(231,60,39)" fg:x="11568" fg:w="363"/><text x="7.6173%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (363 samples, 0.23%)</title><rect x="7.3673%" y="149" width="0.2312%" height="15" fill="rgb(208,69,12)" fg:x="11568" fg:w="363"/><text x="7.6173%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (57 samples, 0.04%)</title><rect x="7.5985%" y="181" width="0.0363%" height="15" fill="rgb(235,93,37)" fg:x="11931" fg:w="57"/><text x="7.8485%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (11,909 samples, 7.58%)</title><rect x="0.0586%" y="197" width="7.5845%" height="15" fill="rgb(213,116,39)" fg:x="92" fg:w="11909"/><text x="0.3086%" y="207.50">esp`eigenv..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (86 samples, 0.05%)</title><rect x="7.6431%" y="197" width="0.0548%" height="15" fill="rgb(222,207,29)" fg:x="12001" fg:w="86"/><text x="7.8931%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (23 samples, 0.01%)</title><rect x="16.5280%" y="101" width="0.0146%" height="15" fill="rgb(206,96,30)" fg:x="25952" fg:w="23"/><text x="16.7780%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (161 samples, 0.10%)</title><rect x="16.4491%" y="133" width="0.1025%" height="15" fill="rgb(218,138,4)" fg:x="25828" fg:w="161"/><text x="16.6991%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (52 samples, 0.03%)</title><rect x="16.5185%" y="117" width="0.0331%" height="15" fill="rgb(250,191,14)" fg:x="25937" fg:w="52"/><text x="16.7685%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (218 samples, 0.14%)</title><rect x="16.4402%" y="165" width="0.1388%" height="15" fill="rgb(239,60,40)" fg:x="25814" fg:w="218"/><text x="16.6902%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (209 samples, 0.13%)</title><rect x="16.4459%" y="149" width="0.1331%" height="15" fill="rgb(206,27,48)" fg:x="25823" fg:w="209"/><text x="16.6959%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (43 samples, 0.03%)</title><rect x="16.5516%" y="133" width="0.0274%" height="15" fill="rgb(225,35,8)" fg:x="25989" fg:w="43"/><text x="16.8016%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (25 samples, 0.02%)</title><rect x="16.5631%" y="117" width="0.0159%" height="15" fill="rgb(250,213,24)" fg:x="26007" fg:w="25"/><text x="16.8131%" y="127.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,311 samples, 1.47%)</title><rect x="16.4261%" y="181" width="1.4718%" height="15" fill="rgb(247,123,22)" fg:x="25792" fg:w="2311"/><text x="16.6761%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,061 samples, 1.31%)</title><rect x="16.5854%" y="165" width="1.3126%" height="15" fill="rgb(231,138,38)" fg:x="26042" fg:w="2061"/><text x="16.8354%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (22 samples, 0.01%)</title><rect x="20.2531%" y="101" width="0.0140%" height="15" fill="rgb(231,145,46)" fg:x="31801" fg:w="22"/><text x="20.5031%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (22 samples, 0.01%)</title><rect x="20.2531%" y="85" width="0.0140%" height="15" fill="rgb(251,118,11)" fg:x="31801" fg:w="22"/><text x="20.5031%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (43 samples, 0.03%)</title><rect x="20.2671%" y="101" width="0.0274%" height="15" fill="rgb(217,147,25)" fg:x="31823" fg:w="43"/><text x="20.5171%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (43 samples, 0.03%)</title><rect x="20.2671%" y="85" width="0.0274%" height="15" fill="rgb(247,81,37)" fg:x="31823" fg:w="43"/><text x="20.5171%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (43 samples, 0.03%)</title><rect x="20.2671%" y="69" width="0.0274%" height="15" fill="rgb(209,12,38)" fg:x="31823" fg:w="43"/><text x="20.5171%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (84 samples, 0.05%)</title><rect x="20.2525%" y="165" width="0.0535%" height="15" fill="rgb(227,1,9)" fg:x="31800" fg:w="84"/><text x="20.5025%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (84 samples, 0.05%)</title><rect x="20.2525%" y="149" width="0.0535%" height="15" fill="rgb(248,47,43)" fg:x="31800" fg:w="84"/><text x="20.5025%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (84 samples, 0.05%)</title><rect x="20.2525%" y="133" width="0.0535%" height="15" fill="rgb(221,10,30)" fg:x="31800" fg:w="84"/><text x="20.5025%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (83 samples, 0.05%)</title><rect x="20.2531%" y="117" width="0.0529%" height="15" fill="rgb(210,229,1)" fg:x="31801" fg:w="83"/><text x="20.5031%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (18 samples, 0.01%)</title><rect x="20.3295%" y="149" width="0.0115%" height="15" fill="rgb(222,148,37)" fg:x="31921" fg:w="18"/><text x="20.5795%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (24 samples, 0.02%)</title><rect x="20.3410%" y="149" width="0.0153%" height="15" fill="rgb(234,67,33)" fg:x="31939" fg:w="24"/><text x="20.5910%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.01%)</title><rect x="20.3454%" y="133" width="0.0108%" height="15" fill="rgb(247,98,35)" fg:x="31946" fg:w="17"/><text x="20.5954%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (78 samples, 0.05%)</title><rect x="20.3079%" y="165" width="0.0497%" height="15" fill="rgb(247,138,52)" fg:x="31887" fg:w="78"/><text x="20.5579%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (21 samples, 0.01%)</title><rect x="20.3964%" y="149" width="0.0134%" height="15" fill="rgb(213,79,30)" fg:x="32026" fg:w="21"/><text x="20.6464%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (25 samples, 0.02%)</title><rect x="20.4142%" y="149" width="0.0159%" height="15" fill="rgb(246,177,23)" fg:x="32054" fg:w="25"/><text x="20.6642%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (60 samples, 0.04%)</title><rect x="20.4301%" y="149" width="0.0382%" height="15" fill="rgb(230,62,27)" fg:x="32079" fg:w="60"/><text x="20.6801%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.04%)</title><rect x="20.4301%" y="133" width="0.0382%" height="15" fill="rgb(216,154,8)" fg:x="32079" fg:w="60"/><text x="20.6801%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (189 samples, 0.12%)</title><rect x="20.3575%" y="165" width="0.1204%" height="15" fill="rgb(244,35,45)" fg:x="31965" fg:w="189"/><text x="20.6075%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (20 samples, 0.01%)</title><rect x="20.5053%" y="133" width="0.0127%" height="15" fill="rgb(251,115,12)" fg:x="32197" fg:w="20"/><text x="20.7553%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.01%)</title><rect x="20.5059%" y="117" width="0.0121%" height="15" fill="rgb(240,54,50)" fg:x="32198" fg:w="19"/><text x="20.7559%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.02%)</title><rect x="20.5193%" y="117" width="0.0197%" height="15" fill="rgb(233,84,52)" fg:x="32219" fg:w="31"/><text x="20.7693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (97 samples, 0.06%)</title><rect x="20.4779%" y="165" width="0.0618%" height="15" fill="rgb(207,117,47)" fg:x="32154" fg:w="97"/><text x="20.7279%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (90 samples, 0.06%)</title><rect x="20.4824%" y="149" width="0.0573%" height="15" fill="rgb(249,43,39)" fg:x="32161" fg:w="90"/><text x="20.7324%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (34 samples, 0.02%)</title><rect x="20.5180%" y="133" width="0.0217%" height="15" fill="rgb(209,38,44)" fg:x="32217" fg:w="34"/><text x="20.7680%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (66 samples, 0.04%)</title><rect x="20.5397%" y="165" width="0.0420%" height="15" fill="rgb(236,212,23)" fg:x="32251" fg:w="66"/><text x="20.7897%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (66 samples, 0.04%)</title><rect x="20.5397%" y="149" width="0.0420%" height="15" fill="rgb(242,79,21)" fg:x="32251" fg:w="66"/><text x="20.7897%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,224 samples, 2.69%)</title><rect x="17.8979%" y="181" width="2.6901%" height="15" fill="rgb(211,96,35)" fg:x="28103" fg:w="4224"/><text x="18.1479%" y="191.50">es..</text></g><g><title>libsystem_malloc.dylib`szone_size (696 samples, 0.44%)</title><rect x="20.8791%" y="149" width="0.4433%" height="15" fill="rgb(253,215,40)" fg:x="32784" fg:w="696"/><text x="21.1291%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (647 samples, 0.41%)</title><rect x="20.9103%" y="133" width="0.4121%" height="15" fill="rgb(211,81,21)" fg:x="32833" fg:w="647"/><text x="21.1603%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (985 samples, 0.63%)</title><rect x="20.7129%" y="165" width="0.6273%" height="15" fill="rgb(208,190,38)" fg:x="32523" fg:w="985"/><text x="20.9629%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (28 samples, 0.02%)</title><rect x="21.3224%" y="149" width="0.0178%" height="15" fill="rgb(235,213,38)" fg:x="33480" fg:w="28"/><text x="21.5724%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.02%)</title><rect x="21.3504%" y="133" width="0.0159%" height="15" fill="rgb(237,122,38)" fg:x="33524" fg:w="25"/><text x="21.6004%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (35 samples, 0.02%)</title><rect x="21.3460%" y="165" width="0.0223%" height="15" fill="rgb(244,218,35)" fg:x="33517" fg:w="35"/><text x="21.5960%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (29 samples, 0.02%)</title><rect x="21.3498%" y="149" width="0.0185%" height="15" fill="rgb(240,68,47)" fg:x="33523" fg:w="29"/><text x="21.5998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.01%)</title><rect x="21.9930%" y="149" width="0.0121%" height="15" fill="rgb(210,16,53)" fg:x="34533" fg:w="19"/><text x="22.2430%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (873 samples, 0.56%)</title><rect x="23.0700%" y="133" width="0.5560%" height="15" fill="rgb(235,124,12)" fg:x="36224" fg:w="873"/><text x="23.3200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (700 samples, 0.45%)</title><rect x="23.6260%" y="133" width="0.4458%" height="15" fill="rgb(224,169,11)" fg:x="37097" fg:w="700"/><text x="23.8760%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4,252 samples, 2.71%)</title><rect x="21.3683%" y="165" width="2.7080%" height="15" fill="rgb(250,166,2)" fg:x="33552" fg:w="4252"/><text x="21.6183%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3,240 samples, 2.06%)</title><rect x="22.0128%" y="149" width="2.0635%" height="15" fill="rgb(242,216,29)" fg:x="34564" fg:w="3240"/><text x="22.2628%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (65 samples, 0.04%)</title><rect x="24.0762%" y="165" width="0.0414%" height="15" fill="rgb(230,116,27)" fg:x="37804" fg:w="65"/><text x="24.3262%" y="175.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,576 samples, 3.55%)</title><rect x="20.5881%" y="181" width="3.5512%" height="15" fill="rgb(228,99,48)" fg:x="32327" fg:w="5576"/><text x="20.8381%" y="191.50">esp`..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.02%)</title><rect x="24.1176%" y="165" width="0.0217%" height="15" fill="rgb(253,11,6)" fg:x="37869" fg:w="34"/><text x="24.3676%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (105 samples, 0.07%)</title><rect x="24.1393%" y="181" width="0.0669%" height="15" fill="rgb(247,143,39)" fg:x="37903" fg:w="105"/><text x="24.3893%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (48 samples, 0.03%)</title><rect x="24.2131%" y="181" width="0.0306%" height="15" fill="rgb(236,97,10)" fg:x="38019" fg:w="48"/><text x="24.4631%" y="191.50"></text></g><g><title>esp`__rdl_realloc (33 samples, 0.02%)</title><rect x="24.3641%" y="149" width="0.0210%" height="15" fill="rgb(233,208,19)" fg:x="38256" fg:w="33"/><text x="24.6141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (17 samples, 0.01%)</title><rect x="24.4660%" y="133" width="0.0108%" height="15" fill="rgb(216,164,2)" fg:x="38416" fg:w="17"/><text x="24.7160%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (68 samples, 0.04%)</title><rect x="24.5252%" y="117" width="0.0433%" height="15" fill="rgb(220,129,5)" fg:x="38509" fg:w="68"/><text x="24.7752%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (18 samples, 0.01%)</title><rect x="24.5685%" y="117" width="0.0115%" height="15" fill="rgb(242,17,10)" fg:x="38577" fg:w="18"/><text x="24.8185%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (348 samples, 0.22%)</title><rect x="25.1614%" y="69" width="0.2216%" height="15" fill="rgb(242,107,0)" fg:x="39508" fg:w="348"/><text x="25.4114%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,131 samples, 0.72%)</title><rect x="24.6883%" y="101" width="0.7203%" height="15" fill="rgb(251,28,31)" fg:x="38765" fg:w="1131"/><text x="24.9383%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (690 samples, 0.44%)</title><rect x="24.9691%" y="85" width="0.4394%" height="15" fill="rgb(233,223,10)" fg:x="39206" fg:w="690"/><text x="25.2191%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (40 samples, 0.03%)</title><rect x="25.3831%" y="69" width="0.0255%" height="15" fill="rgb(215,21,27)" fg:x="39856" fg:w="40"/><text x="25.6331%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (158 samples, 0.10%)</title><rect x="25.9034%" y="69" width="0.1006%" height="15" fill="rgb(232,23,21)" fg:x="40673" fg:w="158"/><text x="26.1534%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,448 samples, 0.92%)</title><rect x="25.4092%" y="101" width="0.9222%" height="15" fill="rgb(244,5,23)" fg:x="39897" fg:w="1448"/><text x="25.6592%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,382 samples, 0.88%)</title><rect x="25.4512%" y="85" width="0.8802%" height="15" fill="rgb(226,81,46)" fg:x="39963" fg:w="1382"/><text x="25.7012%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (508 samples, 0.32%)</title><rect x="26.0078%" y="69" width="0.3235%" height="15" fill="rgb(247,70,30)" fg:x="40837" fg:w="508"/><text x="26.2578%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (104 samples, 0.07%)</title><rect x="26.2651%" y="53" width="0.0662%" height="15" fill="rgb(212,68,19)" fg:x="41241" fg:w="104"/><text x="26.5151%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (214 samples, 0.14%)</title><rect x="26.3314%" y="101" width="0.1363%" height="15" fill="rgb(240,187,13)" fg:x="41345" fg:w="214"/><text x="26.5814%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (173 samples, 0.11%)</title><rect x="26.3575%" y="85" width="0.1102%" height="15" fill="rgb(223,113,26)" fg:x="41386" fg:w="173"/><text x="26.6075%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (462 samples, 0.29%)</title><rect x="26.4721%" y="101" width="0.2942%" height="15" fill="rgb(206,192,2)" fg:x="41566" fg:w="462"/><text x="26.7221%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.01%)</title><rect x="26.7530%" y="85" width="0.0134%" height="15" fill="rgb(241,108,4)" fg:x="42007" fg:w="21"/><text x="27.0030%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3,643 samples, 2.32%)</title><rect x="24.5895%" y="117" width="2.3201%" height="15" fill="rgb(247,173,49)" fg:x="38610" fg:w="3643"/><text x="24.8395%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (225 samples, 0.14%)</title><rect x="26.7664%" y="101" width="0.1433%" height="15" fill="rgb(224,114,35)" fg:x="42028" fg:w="225"/><text x="27.0164%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (17 samples, 0.01%)</title><rect x="26.9122%" y="117" width="0.0108%" height="15" fill="rgb(245,159,27)" fg:x="42257" fg:w="17"/><text x="27.1622%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3,851 samples, 2.45%)</title><rect x="24.4768%" y="133" width="2.4526%" height="15" fill="rgb(245,172,44)" fg:x="38433" fg:w="3851"/><text x="24.7268%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_size (319 samples, 0.20%)</title><rect x="26.9332%" y="133" width="0.2032%" height="15" fill="rgb(236,23,11)" fg:x="42290" fg:w="319"/><text x="27.1832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (288 samples, 0.18%)</title><rect x="26.9530%" y="117" width="0.1834%" height="15" fill="rgb(205,117,38)" fg:x="42321" fg:w="288"/><text x="27.2030%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4,322 samples, 2.75%)</title><rect x="24.3896%" y="149" width="2.7526%" height="15" fill="rgb(237,72,25)" fg:x="38296" fg:w="4322"/><text x="24.6396%" y="159.50">li..</text></g><g><title>esp`alloc::raw_vec::finish_grow (4,436 samples, 2.83%)</title><rect x="24.3316%" y="165" width="2.8252%" height="15" fill="rgb(244,70,9)" fg:x="38205" fg:w="4436"/><text x="24.5816%" y="175.50">es..</text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.01%)</title><rect x="27.1421%" y="149" width="0.0146%" height="15" fill="rgb(217,125,39)" fg:x="42618" fg:w="23"/><text x="27.3921%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4,576 samples, 2.91%)</title><rect x="24.2475%" y="181" width="2.9143%" height="15" fill="rgb(235,36,10)" fg:x="38073" fg:w="4576"/><text x="24.4975%" y="191.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (241 samples, 0.15%)</title><rect x="27.1797%" y="181" width="0.1535%" height="15" fill="rgb(251,123,47)" fg:x="42677" fg:w="241"/><text x="27.4297%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (169 samples, 0.11%)</title><rect x="27.3873%" y="149" width="0.1076%" height="15" fill="rgb(221,13,13)" fg:x="43003" fg:w="169"/><text x="27.6373%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (219 samples, 0.14%)</title><rect x="27.3739%" y="165" width="0.1395%" height="15" fill="rgb(238,131,9)" fg:x="42982" fg:w="219"/><text x="27.6239%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.02%)</title><rect x="27.4949%" y="149" width="0.0185%" height="15" fill="rgb(211,50,8)" fg:x="43172" fg:w="29"/><text x="27.7449%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (26 samples, 0.02%)</title><rect x="27.4968%" y="133" width="0.0166%" height="15" fill="rgb(245,182,24)" fg:x="43175" fg:w="26"/><text x="27.7468%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (279 samples, 0.18%)</title><rect x="27.5134%" y="165" width="0.1777%" height="15" fill="rgb(242,14,37)" fg:x="43201" fg:w="279"/><text x="27.7634%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (279 samples, 0.18%)</title><rect x="27.5134%" y="149" width="0.1777%" height="15" fill="rgb(246,228,12)" fg:x="43201" fg:w="279"/><text x="27.7634%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (279 samples, 0.18%)</title><rect x="27.5134%" y="133" width="0.1777%" height="15" fill="rgb(213,55,15)" fg:x="43201" fg:w="279"/><text x="27.7634%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (76 samples, 0.05%)</title><rect x="27.7643%" y="149" width="0.0484%" height="15" fill="rgb(209,9,3)" fg:x="43595" fg:w="76"/><text x="28.0143%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (72 samples, 0.05%)</title><rect x="27.7669%" y="133" width="0.0459%" height="15" fill="rgb(230,59,30)" fg:x="43599" fg:w="72"/><text x="28.0169%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (159 samples, 0.10%)</title><rect x="27.8127%" y="149" width="0.1013%" height="15" fill="rgb(209,121,21)" fg:x="43671" fg:w="159"/><text x="28.0627%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (550 samples, 0.35%)</title><rect x="27.9229%" y="149" width="0.3503%" height="15" fill="rgb(220,109,13)" fg:x="43844" fg:w="550"/><text x="28.1729%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (18 samples, 0.01%)</title><rect x="28.2732%" y="149" width="0.0115%" height="15" fill="rgb(232,18,1)" fg:x="44394" fg:w="18"/><text x="28.5232%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (275 samples, 0.18%)</title><rect x="28.2974%" y="133" width="0.1751%" height="15" fill="rgb(215,41,42)" fg:x="44432" fg:w="275"/><text x="28.5474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (304 samples, 0.19%)</title><rect x="28.2847%" y="149" width="0.1936%" height="15" fill="rgb(224,123,36)" fg:x="44412" fg:w="304"/><text x="28.5347%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,920 samples, 1.22%)</title><rect x="28.5273%" y="133" width="1.2228%" height="15" fill="rgb(240,125,3)" fg:x="44793" fg:w="1920"/><text x="28.7773%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (60 samples, 0.04%)</title><rect x="29.7501%" y="133" width="0.0382%" height="15" fill="rgb(205,98,50)" fg:x="46713" fg:w="60"/><text x="30.0001%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,302 samples, 2.10%)</title><rect x="27.6911%" y="165" width="2.1029%" height="15" fill="rgb(205,185,37)" fg:x="43480" fg:w="3302"/><text x="27.9411%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2,066 samples, 1.32%)</title><rect x="28.4783%" y="149" width="1.3158%" height="15" fill="rgb(238,207,15)" fg:x="44716" fg:w="2066"/><text x="28.7283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (16 samples, 0.01%)</title><rect x="29.7966%" y="133" width="0.0102%" height="15" fill="rgb(213,199,42)" fg:x="46786" fg:w="16"/><text x="30.0466%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (16 samples, 0.01%)</title><rect x="29.7966%" y="117" width="0.0102%" height="15" fill="rgb(235,201,11)" fg:x="46786" fg:w="16"/><text x="30.0466%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.01%)</title><rect x="29.8093%" y="117" width="0.0108%" height="15" fill="rgb(207,46,11)" fg:x="46806" fg:w="17"/><text x="30.0593%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (43 samples, 0.03%)</title><rect x="29.7940%" y="165" width="0.0274%" height="15" fill="rgb(241,35,35)" fg:x="46782" fg:w="43"/><text x="30.0440%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.03%)</title><rect x="29.7947%" y="149" width="0.0267%" height="15" fill="rgb(243,32,47)" fg:x="46783" fg:w="42"/><text x="30.0447%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (20 samples, 0.01%)</title><rect x="29.8087%" y="133" width="0.0127%" height="15" fill="rgb(247,202,23)" fg:x="46805" fg:w="20"/><text x="30.0587%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (175 samples, 0.11%)</title><rect x="29.8214%" y="149" width="0.1115%" height="15" fill="rgb(219,102,11)" fg:x="46825" fg:w="175"/><text x="30.0714%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (176 samples, 0.11%)</title><rect x="29.8214%" y="165" width="0.1121%" height="15" fill="rgb(243,110,44)" fg:x="46825" fg:w="176"/><text x="30.0714%" y="175.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (4,092 samples, 2.61%)</title><rect x="27.3332%" y="181" width="2.6061%" height="15" fill="rgb(222,74,54)" fg:x="42918" fg:w="4092"/><text x="27.5832%" y="191.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (134 samples, 0.09%)</title><rect x="29.9392%" y="181" width="0.0853%" height="15" fill="rgb(216,99,12)" fg:x="47010" fg:w="134"/><text x="30.1892%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (533 samples, 0.34%)</title><rect x="56.7884%" y="165" width="0.3395%" height="15" fill="rgb(226,22,26)" fg:x="89168" fg:w="533"/><text x="57.0384%" y="175.50"></text></g><g><title>esp`__rdl_realloc (17 samples, 0.01%)</title><rect x="57.2196%" y="133" width="0.0108%" height="15" fill="rgb(217,163,10)" fg:x="89845" fg:w="17"/><text x="57.4696%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (97 samples, 0.06%)</title><rect x="57.2336%" y="117" width="0.0618%" height="15" fill="rgb(213,25,53)" fg:x="89867" fg:w="97"/><text x="57.4836%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (94 samples, 0.06%)</title><rect x="57.2355%" y="101" width="0.0599%" height="15" fill="rgb(252,105,26)" fg:x="89870" fg:w="94"/><text x="57.4855%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.01%)</title><rect x="57.2807%" y="85" width="0.0146%" height="15" fill="rgb(220,39,43)" fg:x="89941" fg:w="23"/><text x="57.5307%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (103 samples, 0.07%)</title><rect x="57.2304%" y="133" width="0.0656%" height="15" fill="rgb(229,68,48)" fg:x="89862" fg:w="103"/><text x="57.4804%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (51 samples, 0.03%)</title><rect x="57.4214%" y="101" width="0.0325%" height="15" fill="rgb(252,8,32)" fg:x="90162" fg:w="51"/><text x="57.6714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (39 samples, 0.02%)</title><rect x="57.6393%" y="69" width="0.0248%" height="15" fill="rgb(223,20,43)" fg:x="90504" fg:w="39"/><text x="57.8893%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (275 samples, 0.18%)</title><rect x="57.5240%" y="85" width="0.1751%" height="15" fill="rgb(229,81,49)" fg:x="90323" fg:w="275"/><text x="57.7740%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (52 samples, 0.03%)</title><rect x="57.6660%" y="69" width="0.0331%" height="15" fill="rgb(236,28,36)" fg:x="90546" fg:w="52"/><text x="57.9160%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (17 samples, 0.01%)</title><rect x="58.0532%" y="53" width="0.0108%" height="15" fill="rgb(249,185,26)" fg:x="91154" fg:w="17"/><text x="58.3032%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (17 samples, 0.01%)</title><rect x="58.0532%" y="37" width="0.0108%" height="15" fill="rgb(249,174,33)" fg:x="91154" fg:w="17"/><text x="58.3032%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (49 samples, 0.03%)</title><rect x="58.0647%" y="53" width="0.0312%" height="15" fill="rgb(233,201,37)" fg:x="91172" fg:w="49"/><text x="58.3147%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (28 samples, 0.02%)</title><rect x="58.0781%" y="37" width="0.0178%" height="15" fill="rgb(221,78,26)" fg:x="91193" fg:w="28"/><text x="58.3281%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (372 samples, 0.24%)</title><rect x="58.0959%" y="53" width="0.2369%" height="15" fill="rgb(250,127,30)" fg:x="91221" fg:w="372"/><text x="58.3459%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (206 samples, 0.13%)</title><rect x="58.3328%" y="53" width="0.1312%" height="15" fill="rgb(230,49,44)" fg:x="91593" fg:w="206"/><text x="58.5828%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (16 samples, 0.01%)</title><rect x="58.4640%" y="53" width="0.0102%" height="15" fill="rgb(229,67,23)" fg:x="91799" fg:w="16"/><text x="58.7140%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (40 samples, 0.03%)</title><rect x="58.4742%" y="53" width="0.0255%" height="15" fill="rgb(249,83,47)" fg:x="91815" fg:w="40"/><text x="58.7242%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.01%)</title><rect x="58.4895%" y="37" width="0.0102%" height="15" fill="rgb(215,43,3)" fg:x="91839" fg:w="16"/><text x="58.7395%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`madvise (327 samples, 0.21%)</title><rect x="58.5092%" y="37" width="0.2083%" height="15" fill="rgb(238,154,13)" fg:x="91870" fg:w="327"/><text x="58.7592%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,377 samples, 0.88%)</title><rect x="57.8456%" y="69" width="0.8770%" height="15" fill="rgb(219,56,2)" fg:x="90828" fg:w="1377"/><text x="58.0956%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (350 samples, 0.22%)</title><rect x="58.4997%" y="53" width="0.2229%" height="15" fill="rgb(233,0,4)" fg:x="91855" fg:w="350"/><text x="58.7497%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,608 samples, 1.02%)</title><rect x="57.6991%" y="85" width="1.0241%" height="15" fill="rgb(235,30,7)" fg:x="90598" fg:w="1608"/><text x="57.9491%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (82 samples, 0.05%)</title><rect x="58.7359%" y="85" width="0.0522%" height="15" fill="rgb(250,79,13)" fg:x="92226" fg:w="82"/><text x="58.9859%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (168 samples, 0.11%)</title><rect x="58.9945%" y="37" width="0.1070%" height="15" fill="rgb(211,146,34)" fg:x="92632" fg:w="168"/><text x="59.2445%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (96 samples, 0.06%)</title><rect x="59.1015%" y="37" width="0.0611%" height="15" fill="rgb(228,22,38)" fg:x="92800" fg:w="96"/><text x="59.3515%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (638 samples, 0.41%)</title><rect x="58.8130%" y="69" width="0.4063%" height="15" fill="rgb(235,168,5)" fg:x="92347" fg:w="638"/><text x="59.0630%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (440 samples, 0.28%)</title><rect x="58.9391%" y="53" width="0.2802%" height="15" fill="rgb(221,155,16)" fg:x="92545" fg:w="440"/><text x="59.1891%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (89 samples, 0.06%)</title><rect x="59.1626%" y="37" width="0.0567%" height="15" fill="rgb(215,215,53)" fg:x="92896" fg:w="89"/><text x="59.4126%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (88 samples, 0.06%)</title><rect x="59.3728%" y="53" width="0.0560%" height="15" fill="rgb(223,4,10)" fg:x="93226" fg:w="88"/><text x="59.6228%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (28 samples, 0.02%)</title><rect x="59.4289%" y="53" width="0.0178%" height="15" fill="rgb(234,103,6)" fg:x="93314" fg:w="28"/><text x="59.6789%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,257 samples, 0.80%)</title><rect x="58.7882%" y="85" width="0.8005%" height="15" fill="rgb(227,97,0)" fg:x="92308" fg:w="1257"/><text x="59.0382%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (579 samples, 0.37%)</title><rect x="59.2200%" y="69" width="0.3687%" height="15" fill="rgb(234,150,53)" fg:x="92986" fg:w="579"/><text x="59.4700%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (207 samples, 0.13%)</title><rect x="59.4569%" y="53" width="0.1318%" height="15" fill="rgb(228,201,54)" fg:x="93358" fg:w="207"/><text x="59.7069%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.02%)</title><rect x="59.5696%" y="37" width="0.0191%" height="15" fill="rgb(222,22,37)" fg:x="93535" fg:w="30"/><text x="59.8196%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (107 samples, 0.07%)</title><rect x="59.5887%" y="85" width="0.0681%" height="15" fill="rgb(237,53,32)" fg:x="93565" fg:w="107"/><text x="59.8387%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (91 samples, 0.06%)</title><rect x="59.5989%" y="69" width="0.0580%" height="15" fill="rgb(233,25,53)" fg:x="93581" fg:w="91"/><text x="59.8489%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (247 samples, 0.16%)</title><rect x="59.6600%" y="85" width="0.1573%" height="15" fill="rgb(210,40,34)" fg:x="93677" fg:w="247"/><text x="59.9100%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (34 samples, 0.02%)</title><rect x="59.7957%" y="69" width="0.0217%" height="15" fill="rgb(241,220,44)" fg:x="93890" fg:w="34"/><text x="60.0457%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5,894 samples, 3.75%)</title><rect x="57.4660%" y="101" width="3.7537%" height="15" fill="rgb(235,28,35)" fg:x="90232" fg:w="5894"/><text x="57.7160%" y="111.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,202 samples, 1.40%)</title><rect x="59.8173%" y="85" width="1.4024%" height="15" fill="rgb(210,56,17)" fg:x="93924" fg:w="2202"/><text x="60.0673%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6,047 samples, 3.85%)</title><rect x="57.3813%" y="117" width="3.8512%" height="15" fill="rgb(224,130,29)" fg:x="90099" fg:w="6047"/><text x="57.6313%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`small_size (157 samples, 0.10%)</title><rect x="61.2325%" y="117" width="0.1000%" height="15" fill="rgb(235,212,8)" fg:x="96146" fg:w="157"/><text x="61.4825%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (376 samples, 0.24%)</title><rect x="61.3331%" y="117" width="0.2395%" height="15" fill="rgb(223,33,50)" fg:x="96304" fg:w="376"/><text x="61.5831%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (358 samples, 0.23%)</title><rect x="61.3446%" y="101" width="0.2280%" height="15" fill="rgb(219,149,13)" fg:x="96322" fg:w="358"/><text x="61.5946%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6,713 samples, 4.28%)</title><rect x="57.2998%" y="133" width="4.2753%" height="15" fill="rgb(250,156,29)" fg:x="89971" fg:w="6713"/><text x="57.5498%" y="143.50">libsy..</text></g><g><title>esp`alloc::raw_vec::finish_grow (6,909 samples, 4.40%)</title><rect x="57.1941%" y="149" width="4.4001%" height="15" fill="rgb(216,193,19)" fg:x="89805" fg:w="6909"/><text x="57.4441%" y="159.50">esp`a..</text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.02%)</title><rect x="61.5757%" y="133" width="0.0185%" height="15" fill="rgb(216,135,14)" fg:x="96685" fg:w="29"/><text x="61.8257%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7,033 samples, 4.48%)</title><rect x="57.1278%" y="165" width="4.4791%" height="15" fill="rgb(241,47,5)" fg:x="89701" fg:w="7033"/><text x="57.3778%" y="175.50">esp`a..</text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.01%)</title><rect x="61.5955%" y="149" width="0.0115%" height="15" fill="rgb(233,42,35)" fg:x="96716" fg:w="18"/><text x="61.8455%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (85 samples, 0.05%)</title><rect x="61.6146%" y="165" width="0.0541%" height="15" fill="rgb(231,13,6)" fg:x="96746" fg:w="85"/><text x="61.8646%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (9,647 samples, 6.14%)</title><rect x="61.6687%" y="165" width="6.1439%" height="15" fill="rgb(207,181,40)" fg:x="96831" fg:w="9647"/><text x="61.9187%" y="175.50">esp`esp:..</text></g><g><title>esp`esp::ham::Ham::ham_doub (6,421 samples, 4.09%)</title><rect x="63.7233%" y="149" width="4.0893%" height="15" fill="rgb(254,173,49)" fg:x="100057" fg:w="6421"/><text x="63.9733%" y="159.50">esp`..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,222 samples, 0.78%)</title><rect x="67.0344%" y="133" width="0.7783%" height="15" fill="rgb(221,1,38)" fg:x="105256" fg:w="1222"/><text x="67.2844%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (839 samples, 0.53%)</title><rect x="67.8126%" y="165" width="0.5343%" height="15" fill="rgb(206,124,46)" fg:x="106478" fg:w="839"/><text x="68.0626%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (504 samples, 0.32%)</title><rect x="68.0260%" y="149" width="0.3210%" height="15" fill="rgb(249,21,11)" fg:x="106813" fg:w="504"/><text x="68.2760%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,095 samples, 0.70%)</title><rect x="69.3456%" y="149" width="0.6974%" height="15" fill="rgb(222,201,40)" fg:x="108885" fg:w="1095"/><text x="69.5956%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (57 samples, 0.04%)</title><rect x="74.7029%" y="133" width="0.0363%" height="15" fill="rgb(235,61,29)" fg:x="117297" fg:w="57"/><text x="74.9529%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (228 samples, 0.15%)</title><rect x="77.1854%" y="117" width="0.1452%" height="15" fill="rgb(219,207,3)" fg:x="121195" fg:w="228"/><text x="77.4354%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,979 samples, 1.90%)</title><rect x="77.3306%" y="117" width="1.8972%" height="15" fill="rgb(222,56,46)" fg:x="121423" fg:w="2979"/><text x="77.5806%" y="127.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,409 samples, 0.90%)</title><rect x="78.3305%" y="101" width="0.8973%" height="15" fill="rgb(239,76,54)" fg:x="122993" fg:w="1409"/><text x="78.5805%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (202 samples, 0.13%)</title><rect x="79.2279%" y="117" width="0.1286%" height="15" fill="rgb(231,124,27)" fg:x="124402" fg:w="202"/><text x="79.4779%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (200 samples, 0.13%)</title><rect x="79.2291%" y="101" width="0.1274%" height="15" fill="rgb(249,195,6)" fg:x="124404" fg:w="200"/><text x="79.4791%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (50 samples, 0.03%)</title><rect x="79.3565%" y="117" width="0.0318%" height="15" fill="rgb(237,174,47)" fg:x="124604" fg:w="50"/><text x="79.6065%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17,552 samples, 11.18%)</title><rect x="68.3469%" y="165" width="11.1783%" height="15" fill="rgb(206,201,31)" fg:x="107317" fg:w="17552"/><text x="68.5969%" y="175.50">esp`hashbrown::m..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14,889 samples, 9.48%)</title><rect x="70.0429%" y="149" width="9.4824%" height="15" fill="rgb(231,57,52)" fg:x="109980" fg:w="14889"/><text x="70.2929%" y="159.50">esp`hashbrown:..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7,515 samples, 4.79%)</title><rect x="74.7392%" y="133" width="4.7861%" height="15" fill="rgb(248,177,22)" fg:x="117354" fg:w="7515"/><text x="74.9892%" y="143.50">esp`ha..</text></g><g><title>libsystem_malloc.dylib`free_large (215 samples, 0.14%)</title><rect x="79.3884%" y="117" width="0.1369%" height="15" fill="rgb(215,211,37)" fg:x="124654" fg:w="215"/><text x="79.6384%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (215 samples, 0.14%)</title><rect x="79.3884%" y="101" width="0.1369%" height="15" fill="rgb(241,128,51)" fg:x="124654" fg:w="215"/><text x="79.6384%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (215 samples, 0.14%)</title><rect x="79.3884%" y="85" width="0.1369%" height="15" fill="rgb(227,165,31)" fg:x="124654" fg:w="215"/><text x="79.6384%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (6,622 samples, 4.22%)</title><rect x="79.5253%" y="165" width="4.2174%" height="15" fill="rgb(228,167,24)" fg:x="124869" fg:w="6622"/><text x="79.7753%" y="175.50">esp`h..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,931 samples, 1.87%)</title><rect x="81.8760%" y="149" width="1.8667%" height="15" fill="rgb(228,143,12)" fg:x="128560" fg:w="2931"/><text x="82.1260%" y="159.50">e..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (84,388 samples, 53.74%)</title><rect x="30.0259%" y="181" width="53.7442%" height="15" fill="rgb(249,149,8)" fg:x="47146" fg:w="84388"/><text x="30.2759%" y="191.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (43 samples, 0.03%)</title><rect x="83.7426%" y="165" width="0.0274%" height="15" fill="rgb(243,35,44)" fg:x="131491" fg:w="43"/><text x="83.9926%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (311 samples, 0.20%)</title><rect x="84.3387%" y="165" width="0.1981%" height="15" fill="rgb(246,89,9)" fg:x="132427" fg:w="311"/><text x="84.5887%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (27 samples, 0.02%)</title><rect x="84.7635%" y="149" width="0.0172%" height="15" fill="rgb(233,213,13)" fg:x="133094" fg:w="27"/><text x="85.0135%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.03%)</title><rect x="85.2495%" y="133" width="0.0325%" height="15" fill="rgb(233,141,41)" fg:x="133857" fg:w="51"/><text x="85.4995%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (1,059 samples, 0.67%)</title><rect x="85.2826%" y="133" width="0.6744%" height="15" fill="rgb(239,167,4)" fg:x="133909" fg:w="1059"/><text x="85.5326%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (452 samples, 0.29%)</title><rect x="85.6692%" y="117" width="0.2879%" height="15" fill="rgb(209,217,16)" fg:x="134516" fg:w="452"/><text x="85.9192%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.02%)</title><rect x="85.9691%" y="85" width="0.0172%" height="15" fill="rgb(219,88,35)" fg:x="134987" fg:w="27"/><text x="86.2191%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (19 samples, 0.01%)</title><rect x="85.9742%" y="69" width="0.0121%" height="15" fill="rgb(220,193,23)" fg:x="134995" fg:w="19"/><text x="86.2242%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (59 samples, 0.04%)</title><rect x="85.9602%" y="117" width="0.0376%" height="15" fill="rgb(230,90,52)" fg:x="134973" fg:w="59"/><text x="86.2102%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (58 samples, 0.04%)</title><rect x="85.9608%" y="101" width="0.0369%" height="15" fill="rgb(252,106,19)" fg:x="134974" fg:w="58"/><text x="86.2108%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.01%)</title><rect x="85.9863%" y="85" width="0.0115%" height="15" fill="rgb(206,74,20)" fg:x="135014" fg:w="18"/><text x="86.2363%" y="95.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (157 samples, 0.10%)</title><rect x="85.9570%" y="133" width="0.1000%" height="15" fill="rgb(230,138,44)" fg:x="134968" fg:w="157"/><text x="86.2070%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (93 samples, 0.06%)</title><rect x="85.9978%" y="117" width="0.0592%" height="15" fill="rgb(235,182,43)" fg:x="135032" fg:w="93"/><text x="86.2478%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.02%)</title><rect x="86.0570%" y="133" width="0.0236%" height="15" fill="rgb(242,16,51)" fg:x="135125" fg:w="37"/><text x="86.3070%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (30 samples, 0.02%)</title><rect x="86.0806%" y="133" width="0.0191%" height="15" fill="rgb(248,9,4)" fg:x="135162" fg:w="30"/><text x="86.3306%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.01%)</title><rect x="86.0882%" y="117" width="0.0115%" height="15" fill="rgb(210,31,22)" fg:x="135174" fg:w="18"/><text x="86.3382%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.01%)</title><rect x="86.0889%" y="101" width="0.0108%" height="15" fill="rgb(239,54,39)" fg:x="135175" fg:w="17"/><text x="86.3389%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (17 samples, 0.01%)</title><rect x="86.1041%" y="133" width="0.0108%" height="15" fill="rgb(230,99,41)" fg:x="135199" fg:w="17"/><text x="86.3541%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,108 samples, 1.34%)</title><rect x="84.7807%" y="149" width="1.3425%" height="15" fill="rgb(253,106,12)" fg:x="133121" fg:w="2108"/><text x="85.0307%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,495 samples, 1.59%)</title><rect x="84.5368%" y="165" width="1.5890%" height="15" fill="rgb(213,46,41)" fg:x="132738" fg:w="2495"/><text x="84.7868%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,701 samples, 2.36%)</title><rect x="83.7700%" y="181" width="2.3571%" height="15" fill="rgb(215,133,35)" fg:x="131534" fg:w="3701"/><text x="84.0200%" y="191.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (994 samples, 0.63%)</title><rect x="88.5841%" y="165" width="0.6330%" height="15" fill="rgb(213,28,5)" fg:x="139093" fg:w="994"/><text x="88.8341%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (8,104 samples, 5.16%)</title><rect x="86.1271%" y="181" width="5.1612%" height="15" fill="rgb(215,77,49)" fg:x="135235" fg:w="8104"/><text x="86.3771%" y="191.50">esp`ha..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (3,252 samples, 2.07%)</title><rect x="89.2172%" y="165" width="2.0711%" height="15" fill="rgb(248,100,22)" fg:x="140087" fg:w="3252"/><text x="89.4672%" y="175.50">e..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (31 samples, 0.02%)</title><rect x="91.2883%" y="181" width="0.0197%" height="15" fill="rgb(208,67,9)" fg:x="143339" fg:w="31"/><text x="91.5383%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (273 samples, 0.17%)</title><rect x="91.3233%" y="165" width="0.1739%" height="15" fill="rgb(219,133,21)" fg:x="143394" fg:w="273"/><text x="91.5733%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (8,096 samples, 5.16%)</title><rect x="91.3080%" y="181" width="5.1561%" height="15" fill="rgb(246,46,29)" fg:x="143370" fg:w="8096"/><text x="91.5580%" y="191.50">esp`sp..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (7,799 samples, 4.97%)</title><rect x="91.4972%" y="165" width="4.9669%" height="15" fill="rgb(246,185,52)" fg:x="143667" fg:w="7799"/><text x="91.7472%" y="175.50">esp`sp..</text></g><g><title>esp`core::slice::sort::recurse (5,539 samples, 3.53%)</title><rect x="92.9365%" y="149" width="3.5276%" height="15" fill="rgb(252,136,11)" fg:x="145927" fg:w="5539"/><text x="93.1865%" y="159.50">esp..</text></g><g><title>esp`core::slice::sort::recurse (4,136 samples, 2.63%)</title><rect x="93.8300%" y="133" width="2.6341%" height="15" fill="rgb(219,138,53)" fg:x="147330" fg:w="4136"/><text x="94.0800%" y="143.50">es..</text></g><g><title>esp`core::slice::sort::recurse (2,009 samples, 1.28%)</title><rect x="95.1846%" y="117" width="1.2795%" height="15" fill="rgb(211,51,23)" fg:x="149457" fg:w="2009"/><text x="95.4346%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (464 samples, 0.30%)</title><rect x="96.1686%" y="101" width="0.2955%" height="15" fill="rgb(247,221,28)" fg:x="151002" fg:w="464"/><text x="96.4186%" y="111.50"></text></g><g><title>esp`core::slice::sort::recurse (49 samples, 0.03%)</title><rect x="96.4329%" y="85" width="0.0312%" height="15" fill="rgb(251,222,45)" fg:x="151417" fg:w="49"/><text x="96.6829%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (43 samples, 0.03%)</title><rect x="96.4647%" y="181" width="0.0274%" height="15" fill="rgb(217,162,53)" fg:x="151467" fg:w="43"/><text x="96.7147%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,725 samples, 1.74%)</title><rect x="96.6303%" y="165" width="1.7355%" height="15" fill="rgb(229,93,14)" fg:x="151727" fg:w="2725"/><text x="96.8803%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,585 samples, 1.65%)</title><rect x="96.7195%" y="149" width="1.6463%" height="15" fill="rgb(209,67,49)" fg:x="151867" fg:w="2585"/><text x="96.9695%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,005 samples, 0.64%)</title><rect x="97.7257%" y="133" width="0.6401%" height="15" fill="rgb(213,87,29)" fg:x="153447" fg:w="1005"/><text x="97.9757%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (236 samples, 0.15%)</title><rect x="98.2155%" y="117" width="0.1503%" height="15" fill="rgb(205,151,52)" fg:x="154216" fg:w="236"/><text x="98.4655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,949 samples, 1.88%)</title><rect x="96.4921%" y="181" width="1.8781%" height="15" fill="rgb(253,215,39)" fg:x="151510" fg:w="2949"/><text x="96.7421%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (20 samples, 0.01%)</title><rect x="98.3703%" y="181" width="0.0127%" height="15" fill="rgb(221,220,41)" fg:x="154459" fg:w="20"/><text x="98.6203%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (74 samples, 0.05%)</title><rect x="98.3830%" y="181" width="0.0471%" height="15" fill="rgb(218,133,21)" fg:x="154479" fg:w="74"/><text x="98.6330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (45 samples, 0.03%)</title><rect x="98.4301%" y="181" width="0.0287%" height="15" fill="rgb(221,193,43)" fg:x="154553" fg:w="45"/><text x="98.6801%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (60 samples, 0.04%)</title><rect x="98.4798%" y="181" width="0.0382%" height="15" fill="rgb(240,128,52)" fg:x="154631" fg:w="60"/><text x="98.7298%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.02%)</title><rect x="98.5212%" y="181" width="0.0191%" height="15" fill="rgb(253,114,12)" fg:x="154696" fg:w="30"/><text x="98.7712%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (142,645 samples, 90.85%)</title><rect x="7.6978%" y="197" width="90.8463%" height="15" fill="rgb(215,223,47)" fg:x="12087" fg:w="142645"/><text x="7.9478%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (113 samples, 0.07%)</title><rect x="98.5441%" y="197" width="0.0720%" height="15" fill="rgb(248,225,23)" fg:x="154732" fg:w="113"/><text x="98.7941%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (25 samples, 0.02%)</title><rect x="98.6174%" y="197" width="0.0159%" height="15" fill="rgb(250,108,0)" fg:x="154847" fg:w="25"/><text x="98.8674%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (154,896 samples, 98.65%)</title><rect x="0.0006%" y="213" width="98.6486%" height="15" fill="rgb(228,208,7)" fg:x="1" fg:w="154896"/><text x="0.2506%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>libsystem_malloc.dylib`malloc (20 samples, 0.01%)</title><rect x="98.6365%" y="197" width="0.0127%" height="15" fill="rgb(244,45,10)" fg:x="154877" fg:w="20"/><text x="98.8865%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.02%)</title><rect x="98.8670%" y="197" width="0.0191%" height="15" fill="rgb(207,125,25)" fg:x="155239" fg:w="30"/><text x="99.1170%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (297 samples, 0.19%)</title><rect x="98.8995%" y="197" width="0.1892%" height="15" fill="rgb(210,195,18)" fg:x="155290" fg:w="297"/><text x="99.1495%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (135 samples, 0.09%)</title><rect x="99.0027%" y="181" width="0.0860%" height="15" fill="rgb(249,80,12)" fg:x="155452" fg:w="135"/><text x="99.2527%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (75 samples, 0.05%)</title><rect x="99.0886%" y="197" width="0.0478%" height="15" fill="rgb(221,65,9)" fg:x="155587" fg:w="75"/><text x="99.3386%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (62 samples, 0.04%)</title><rect x="99.1364%" y="197" width="0.0395%" height="15" fill="rgb(235,49,36)" fg:x="155662" fg:w="62"/><text x="99.3864%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (42 samples, 0.03%)</title><rect x="99.1491%" y="181" width="0.0267%" height="15" fill="rgb(225,32,20)" fg:x="155682" fg:w="42"/><text x="99.3991%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (25 samples, 0.02%)</title><rect x="99.1759%" y="197" width="0.0159%" height="15" fill="rgb(215,141,46)" fg:x="155724" fg:w="25"/><text x="99.4259%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (669 samples, 0.43%)</title><rect x="99.1924%" y="197" width="0.4261%" height="15" fill="rgb(250,160,47)" fg:x="155750" fg:w="669"/><text x="99.4424%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (114 samples, 0.07%)</title><rect x="99.5459%" y="181" width="0.0726%" height="15" fill="rgb(216,222,40)" fg:x="156305" fg:w="114"/><text x="99.7959%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (19 samples, 0.01%)</title><rect x="99.6523%" y="149" width="0.0121%" height="15" fill="rgb(234,217,39)" fg:x="156472" fg:w="19"/><text x="99.9023%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (79 samples, 0.05%)</title><rect x="99.6185%" y="197" width="0.0503%" height="15" fill="rgb(207,178,40)" fg:x="156419" fg:w="79"/><text x="99.8685%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (61 samples, 0.04%)</title><rect x="99.6300%" y="181" width="0.0388%" height="15" fill="rgb(221,136,13)" fg:x="156437" fg:w="61"/><text x="99.8800%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (55 samples, 0.04%)</title><rect x="99.6338%" y="165" width="0.0350%" height="15" fill="rgb(249,199,10)" fg:x="156443" fg:w="55"/><text x="99.8838%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (313 samples, 0.20%)</title><rect x="99.6688%" y="197" width="0.1993%" height="15" fill="rgb(249,222,13)" fg:x="156498" fg:w="313"/><text x="99.9188%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (153 samples, 0.10%)</title><rect x="99.7707%" y="181" width="0.0974%" height="15" fill="rgb(244,185,38)" fg:x="156658" fg:w="153"/><text x="100.0207%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (1,917 samples, 1.22%)</title><rect x="98.6492%" y="213" width="1.2209%" height="15" fill="rgb(236,202,9)" fg:x="154897" fg:w="1917"/><text x="98.8992%" y="223.50"></text></g><g><title>esp`esp::var::variational (156,822 samples, 99.88%)</title><rect x="0.0006%" y="229" width="99.8752%" height="15" fill="rgb(250,229,37)" fg:x="1" fg:w="156822"/><text x="0.2506%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`alloc::slice::merge_sort (19 samples, 0.01%)</title><rect x="99.8917%" y="181" width="0.0121%" height="15" fill="rgb(206,174,23)" fg:x="156848" fg:w="19"/><text x="100.1417%" y="191.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (47 samples, 0.03%)</title><rect x="99.8758%" y="197" width="0.0299%" height="15" fill="rgb(211,33,43)" fg:x="156823" fg:w="47"/><text x="100.1258%" y="207.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (56 samples, 0.04%)</title><rect x="99.8758%" y="229" width="0.0357%" height="15" fill="rgb(245,58,50)" fg:x="156823" fg:w="56"/><text x="100.1258%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (56 samples, 0.04%)</title><rect x="99.8758%" y="213" width="0.0357%" height="15" fill="rgb(244,68,36)" fg:x="156823" fg:w="56"/><text x="100.1258%" y="223.50"></text></g><g><title>esp`main (156,883 samples, 99.91%)</title><rect x="0.0000%" y="309" width="99.9140%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="156883"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (156,882 samples, 99.91%)</title><rect x="0.0006%" y="293" width="99.9134%" height="15" fill="rgb(254,30,23)" fg:x="1" fg:w="156882"/><text x="0.2506%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (156,882 samples, 99.91%)</title><rect x="0.0006%" y="277" width="99.9134%" height="15" fill="rgb(235,160,14)" fg:x="1" fg:w="156882"/><text x="0.2506%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (156,882 samples, 99.91%)</title><rect x="0.0006%" y="261" width="99.9134%" height="15" fill="rgb(212,155,44)" fg:x="1" fg:w="156882"/><text x="0.2506%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (156,882 samples, 99.91%)</title><rect x="0.0006%" y="245" width="99.9134%" height="15" fill="rgb(226,2,50)" fg:x="1" fg:w="156882"/><text x="0.2506%" y="255.50">esp`esp::main</text></g><g><title>all (157,018 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="157018"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (157,018 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="157018"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (157,018 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="157018"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (135 samples, 0.09%)</title><rect x="99.9140%" y="309" width="0.0860%" height="15" fill="rgb(239,221,27)" fg:x="156883" fg:w="135"/><text x="100.1640%" y="319.50"></text></g></svg></svg>