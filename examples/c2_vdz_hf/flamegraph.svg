<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="17754"><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (8 samples, 0.05%)</title><rect x="2.9627%" y="165" width="0.0451%" height="15" fill="rgb(227,0,7)" fg:x="526" fg:w="8"/><text x="3.2127%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.05%)</title><rect x="2.9627%" y="149" width="0.0451%" height="15" fill="rgb(217,0,24)" fg:x="526" fg:w="8"/><text x="3.2127%" y="159.50"></text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (6 samples, 0.03%)</title><rect x="3.0078%" y="165" width="0.0338%" height="15" fill="rgb(221,193,54)" fg:x="534" fg:w="6"/><text x="3.2578%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.03%)</title><rect x="3.0078%" y="149" width="0.0338%" height="15" fill="rgb(248,212,6)" fg:x="534" fg:w="6"/><text x="3.2578%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (475 samples, 2.68%)</title><rect x="0.3717%" y="181" width="2.6755%" height="15" fill="rgb(208,68,35)" fg:x="66" fg:w="475"/><text x="0.6217%" y="191.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.02%)</title><rect x="3.0528%" y="101" width="0.0169%" height="15" fill="rgb(232,128,0)" fg:x="542" fg:w="3"/><text x="3.3028%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.02%)</title><rect x="3.0528%" y="85" width="0.0169%" height="15" fill="rgb(207,160,47)" fg:x="542" fg:w="3"/><text x="3.3028%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.02%)</title><rect x="3.0528%" y="69" width="0.0169%" height="15" fill="rgb(228,23,34)" fg:x="542" fg:w="3"/><text x="3.3028%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (16 samples, 0.09%)</title><rect x="3.0472%" y="181" width="0.0901%" height="15" fill="rgb(218,30,26)" fg:x="541" fg:w="16"/><text x="3.2972%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (16 samples, 0.09%)</title><rect x="3.0472%" y="165" width="0.0901%" height="15" fill="rgb(220,122,19)" fg:x="541" fg:w="16"/><text x="3.2972%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.09%)</title><rect x="3.0472%" y="149" width="0.0901%" height="15" fill="rgb(250,228,42)" fg:x="541" fg:w="16"/><text x="3.2972%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.09%)</title><rect x="3.0472%" y="133" width="0.0901%" height="15" fill="rgb(240,193,28)" fg:x="541" fg:w="16"/><text x="3.2972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (16 samples, 0.09%)</title><rect x="3.0472%" y="117" width="0.0901%" height="15" fill="rgb(216,20,37)" fg:x="541" fg:w="16"/><text x="3.2972%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.07%)</title><rect x="3.0697%" y="101" width="0.0676%" height="15" fill="rgb(206,188,39)" fg:x="545" fg:w="12"/><text x="3.3197%" y="111.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (20 samples, 0.11%)</title><rect x="3.3176%" y="133" width="0.1127%" height="15" fill="rgb(217,207,13)" fg:x="589" fg:w="20"/><text x="3.5676%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (46 samples, 0.26%)</title><rect x="3.4415%" y="117" width="0.2591%" height="15" fill="rgb(231,73,38)" fg:x="611" fg:w="46"/><text x="3.6915%" y="127.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (65 samples, 0.37%)</title><rect x="3.4302%" y="133" width="0.3661%" height="15" fill="rgb(225,20,46)" fg:x="609" fg:w="65"/><text x="3.6802%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (17 samples, 0.10%)</title><rect x="3.7006%" y="117" width="0.0958%" height="15" fill="rgb(210,31,41)" fg:x="657" fg:w="17"/><text x="3.9506%" y="127.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (7 samples, 0.04%)</title><rect x="3.7569%" y="101" width="0.0394%" height="15" fill="rgb(221,200,47)" fg:x="667" fg:w="7"/><text x="4.0069%" y="111.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (110 samples, 0.62%)</title><rect x="3.1824%" y="165" width="0.6196%" height="15" fill="rgb(226,26,5)" fg:x="565" fg:w="110"/><text x="3.4324%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (86 samples, 0.48%)</title><rect x="3.3176%" y="149" width="0.4844%" height="15" fill="rgb(249,33,26)" fg:x="589" fg:w="86"/><text x="3.5676%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (122 samples, 0.69%)</title><rect x="3.1373%" y="181" width="0.6872%" height="15" fill="rgb(235,183,28)" fg:x="557" fg:w="122"/><text x="3.3873%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="3.8020%" y="165" width="0.0225%" height="15" fill="rgb(221,5,38)" fg:x="675" fg:w="4"/><text x="4.0520%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (5 samples, 0.03%)</title><rect x="3.8301%" y="181" width="0.0282%" height="15" fill="rgb(247,18,42)" fg:x="680" fg:w="5"/><text x="4.0801%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="3.8301%" y="165" width="0.0282%" height="15" fill="rgb(241,131,45)" fg:x="680" fg:w="5"/><text x="4.0801%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (2 samples, 0.01%)</title><rect x="3.8583%" y="181" width="0.0113%" height="15" fill="rgb(249,31,29)" fg:x="685" fg:w="2"/><text x="4.1083%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 0.37%)</title><rect x="3.9033%" y="165" width="0.3661%" height="15" fill="rgb(225,111,53)" fg:x="693" fg:w="65"/><text x="4.1533%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (78 samples, 0.44%)</title><rect x="3.8696%" y="181" width="0.4393%" height="15" fill="rgb(238,160,17)" fg:x="687" fg:w="78"/><text x="4.1196%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (7 samples, 0.04%)</title><rect x="4.2695%" y="165" width="0.0394%" height="15" fill="rgb(214,148,48)" fg:x="758" fg:w="7"/><text x="4.5195%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (4 samples, 0.02%)</title><rect x="4.3089%" y="165" width="0.0225%" height="15" fill="rgb(232,36,49)" fg:x="765" fg:w="4"/><text x="4.5589%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (5 samples, 0.03%)</title><rect x="4.3371%" y="149" width="0.0282%" height="15" fill="rgb(209,103,24)" fg:x="770" fg:w="5"/><text x="4.5871%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (13 samples, 0.07%)</title><rect x="4.3089%" y="181" width="0.0732%" height="15" fill="rgb(229,88,8)" fg:x="765" fg:w="13"/><text x="4.5589%" y="191.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (9 samples, 0.05%)</title><rect x="4.3314%" y="165" width="0.0507%" height="15" fill="rgb(213,181,19)" fg:x="769" fg:w="9"/><text x="4.5814%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (3 samples, 0.02%)</title><rect x="4.3652%" y="149" width="0.0169%" height="15" fill="rgb(254,191,54)" fg:x="775" fg:w="3"/><text x="4.6152%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (2 samples, 0.01%)</title><rect x="4.3708%" y="133" width="0.0113%" height="15" fill="rgb(241,83,37)" fg:x="776" fg:w="2"/><text x="4.6208%" y="143.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (10 samples, 0.06%)</title><rect x="4.3821%" y="181" width="0.0563%" height="15" fill="rgb(233,36,39)" fg:x="778" fg:w="10"/><text x="4.6321%" y="191.50"></text></g><g><title>esp`std::io::stdio::_print (2 samples, 0.01%)</title><rect x="4.4497%" y="181" width="0.0113%" height="15" fill="rgb(226,3,54)" fg:x="790" fg:w="2"/><text x="4.6997%" y="191.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.01%)</title><rect x="4.4497%" y="165" width="0.0113%" height="15" fill="rgb(245,192,40)" fg:x="790" fg:w="2"/><text x="4.6997%" y="175.50"></text></g><g><title>esp`core::fmt::write (2 samples, 0.01%)</title><rect x="4.4497%" y="149" width="0.0113%" height="15" fill="rgb(238,167,29)" fg:x="790" fg:w="2"/><text x="4.6997%" y="159.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.01%)</title><rect x="4.4497%" y="133" width="0.0113%" height="15" fill="rgb(232,182,51)" fg:x="790" fg:w="2"/><text x="4.6997%" y="143.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.01%)</title><rect x="4.4497%" y="117" width="0.0113%" height="15" fill="rgb(231,60,39)" fg:x="790" fg:w="2"/><text x="4.6997%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.01%)</title><rect x="4.4497%" y="101" width="0.0113%" height="15" fill="rgb(208,69,12)" fg:x="790" fg:w="2"/><text x="4.6997%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (37 samples, 0.21%)</title><rect x="4.4610%" y="181" width="0.2084%" height="15" fill="rgb(235,93,37)" fg:x="792" fg:w="37"/><text x="4.7110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (27 samples, 0.15%)</title><rect x="4.6694%" y="181" width="0.1521%" height="15" fill="rgb(213,116,39)" fg:x="829" fg:w="27"/><text x="4.9194%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (27 samples, 0.15%)</title><rect x="4.6694%" y="165" width="0.1521%" height="15" fill="rgb(222,207,29)" fg:x="829" fg:w="27"/><text x="4.9194%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (27 samples, 0.15%)</title><rect x="4.6694%" y="149" width="0.1521%" height="15" fill="rgb(206,96,30)" fg:x="829" fg:w="27"/><text x="4.9194%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (857 samples, 4.83%)</title><rect x="0.0000%" y="197" width="4.8271%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="857"/><text x="0.2500%" y="207.50">esp`ei..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (56 samples, 0.32%)</title><rect x="4.8271%" y="197" width="0.3154%" height="15" fill="rgb(250,191,14)" fg:x="857" fg:w="56"/><text x="5.0771%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.02%)</title><rect x="8.5220%" y="101" width="0.0225%" height="15" fill="rgb(239,60,40)" fg:x="1513" fg:w="4"/><text x="8.7720%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (19 samples, 0.11%)</title><rect x="8.4488%" y="133" width="0.1070%" height="15" fill="rgb(206,27,48)" fg:x="1500" fg:w="19"/><text x="8.6988%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (8 samples, 0.05%)</title><rect x="8.5108%" y="117" width="0.0451%" height="15" fill="rgb(225,35,8)" fg:x="1511" fg:w="8"/><text x="8.7608%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.01%)</title><rect x="8.5446%" y="101" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="1517" fg:w="2"/><text x="8.7946%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (39 samples, 0.22%)</title><rect x="8.4263%" y="165" width="0.2197%" height="15" fill="rgb(247,123,22)" fg:x="1496" fg:w="39"/><text x="8.6763%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.21%)</title><rect x="8.4319%" y="149" width="0.2140%" height="15" fill="rgb(231,138,38)" fg:x="1497" fg:w="38"/><text x="8.6819%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.09%)</title><rect x="8.5558%" y="133" width="0.0901%" height="15" fill="rgb(231,145,46)" fg:x="1519" fg:w="16"/><text x="8.8058%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.06%)</title><rect x="8.5896%" y="117" width="0.0563%" height="15" fill="rgb(251,118,11)" fg:x="1525" fg:w="10"/><text x="8.8396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="8.6290%" y="101" width="0.0169%" height="15" fill="rgb(217,147,25)" fg:x="1532" fg:w="3"/><text x="8.8790%" y="111.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (179 samples, 1.01%)</title><rect x="8.4150%" y="181" width="1.0082%" height="15" fill="rgb(247,81,37)" fg:x="1494" fg:w="179"/><text x="8.6650%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (138 samples, 0.78%)</title><rect x="8.6459%" y="165" width="0.7773%" height="15" fill="rgb(209,12,38)" fg:x="1535" fg:w="138"/><text x="8.8959%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (6 samples, 0.03%)</title><rect x="11.0285%" y="101" width="0.0338%" height="15" fill="rgb(227,1,9)" fg:x="1958" fg:w="6"/><text x="11.2785%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (6 samples, 0.03%)</title><rect x="11.0285%" y="85" width="0.0338%" height="15" fill="rgb(248,47,43)" fg:x="1958" fg:w="6"/><text x="11.2785%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.02%)</title><rect x="11.0623%" y="101" width="0.0225%" height="15" fill="rgb(221,10,30)" fg:x="1964" fg:w="4"/><text x="11.3123%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4 samples, 0.02%)</title><rect x="11.0623%" y="85" width="0.0225%" height="15" fill="rgb(210,229,1)" fg:x="1964" fg:w="4"/><text x="11.3123%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.02%)</title><rect x="11.0623%" y="69" width="0.0225%" height="15" fill="rgb(222,148,37)" fg:x="1964" fg:w="4"/><text x="11.3123%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (4 samples, 0.02%)</title><rect x="11.0848%" y="101" width="0.0225%" height="15" fill="rgb(234,67,33)" fg:x="1968" fg:w="4"/><text x="11.3348%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (4 samples, 0.02%)</title><rect x="11.0848%" y="85" width="0.0225%" height="15" fill="rgb(247,98,35)" fg:x="1968" fg:w="4"/><text x="11.3348%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (4 samples, 0.02%)</title><rect x="11.0848%" y="69" width="0.0225%" height="15" fill="rgb(247,138,52)" fg:x="1968" fg:w="4"/><text x="11.3348%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="11.1074%" y="101" width="0.0169%" height="15" fill="rgb(213,79,30)" fg:x="1972" fg:w="3"/><text x="11.3574%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (3 samples, 0.02%)</title><rect x="11.1074%" y="85" width="0.0169%" height="15" fill="rgb(246,177,23)" fg:x="1972" fg:w="3"/><text x="11.3574%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2 samples, 0.01%)</title><rect x="11.1130%" y="69" width="0.0113%" height="15" fill="rgb(230,62,27)" fg:x="1973" fg:w="2"/><text x="11.3630%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.01%)</title><rect x="11.1130%" y="53" width="0.0113%" height="15" fill="rgb(216,154,8)" fg:x="1973" fg:w="2"/><text x="11.3630%" y="63.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (22 samples, 0.12%)</title><rect x="11.0285%" y="165" width="0.1239%" height="15" fill="rgb(244,35,45)" fg:x="1958" fg:w="22"/><text x="11.2785%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.12%)</title><rect x="11.0285%" y="149" width="0.1239%" height="15" fill="rgb(251,115,12)" fg:x="1958" fg:w="22"/><text x="11.2785%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (22 samples, 0.12%)</title><rect x="11.0285%" y="133" width="0.1239%" height="15" fill="rgb(240,54,50)" fg:x="1958" fg:w="22"/><text x="11.2785%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (22 samples, 0.12%)</title><rect x="11.0285%" y="117" width="0.1239%" height="15" fill="rgb(233,84,52)" fg:x="1958" fg:w="22"/><text x="11.2785%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="11.1243%" y="101" width="0.0282%" height="15" fill="rgb(207,117,47)" fg:x="1975" fg:w="5"/><text x="11.3743%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (2 samples, 0.01%)</title><rect x="11.1637%" y="149" width="0.0113%" height="15" fill="rgb(249,43,39)" fg:x="1982" fg:w="2"/><text x="11.4137%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.03%)</title><rect x="11.1524%" y="165" width="0.0282%" height="15" fill="rgb(209,38,44)" fg:x="1980" fg:w="5"/><text x="11.4024%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="11.2256%" y="149" width="0.0225%" height="15" fill="rgb(236,212,23)" fg:x="1993" fg:w="4"/><text x="11.4756%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (9 samples, 0.05%)</title><rect x="11.2482%" y="149" width="0.0507%" height="15" fill="rgb(242,79,21)" fg:x="1997" fg:w="9"/><text x="11.4982%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.05%)</title><rect x="11.2482%" y="133" width="0.0507%" height="15" fill="rgb(211,96,35)" fg:x="1997" fg:w="9"/><text x="11.4982%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (23 samples, 0.13%)</title><rect x="11.1806%" y="165" width="0.1295%" height="15" fill="rgb(253,215,40)" fg:x="1985" fg:w="23"/><text x="11.4306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2 samples, 0.01%)</title><rect x="11.2989%" y="149" width="0.0113%" height="15" fill="rgb(211,81,21)" fg:x="2006" fg:w="2"/><text x="11.5489%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="11.2989%" y="133" width="0.0113%" height="15" fill="rgb(208,190,38)" fg:x="2006" fg:w="2"/><text x="11.5489%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="11.3496%" y="133" width="0.0225%" height="15" fill="rgb(235,213,38)" fg:x="2015" fg:w="4"/><text x="11.5996%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="11.3721%" y="133" width="0.0113%" height="15" fill="rgb(237,122,38)" fg:x="2019" fg:w="2"/><text x="11.6221%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (10 samples, 0.06%)</title><rect x="11.3834%" y="133" width="0.0563%" height="15" fill="rgb(244,218,35)" fg:x="2021" fg:w="10"/><text x="11.6334%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.06%)</title><rect x="11.3834%" y="117" width="0.0563%" height="15" fill="rgb(240,68,47)" fg:x="2021" fg:w="10"/><text x="11.6334%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.02%)</title><rect x="11.4397%" y="117" width="0.0225%" height="15" fill="rgb(210,16,53)" fg:x="2031" fg:w="4"/><text x="11.6897%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28 samples, 0.16%)</title><rect x="11.3101%" y="165" width="0.1577%" height="15" fill="rgb(235,124,12)" fg:x="2008" fg:w="28"/><text x="11.5601%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (26 samples, 0.15%)</title><rect x="11.3214%" y="149" width="0.1464%" height="15" fill="rgb(224,169,11)" fg:x="2010" fg:w="26"/><text x="11.5714%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (5 samples, 0.03%)</title><rect x="11.4397%" y="133" width="0.0282%" height="15" fill="rgb(250,166,2)" fg:x="2031" fg:w="5"/><text x="11.6897%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.03%)</title><rect x="11.4678%" y="165" width="0.0282%" height="15" fill="rgb(242,216,29)" fg:x="2036" fg:w="5"/><text x="11.7178%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.03%)</title><rect x="11.4678%" y="149" width="0.0282%" height="15" fill="rgb(230,116,27)" fg:x="2036" fg:w="5"/><text x="11.7178%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (370 samples, 2.08%)</title><rect x="9.4232%" y="181" width="2.0840%" height="15" fill="rgb(228,99,48)" fg:x="1673" fg:w="370"/><text x="9.6732%" y="191.50">e..</text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.01%)</title><rect x="11.4960%" y="165" width="0.0113%" height="15" fill="rgb(253,11,6)" fg:x="2041" fg:w="2"/><text x="11.7460%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.03%)</title><rect x="11.5185%" y="165" width="0.0282%" height="15" fill="rgb(247,143,39)" fg:x="2045" fg:w="5"/><text x="11.7685%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (3 samples, 0.02%)</title><rect x="11.5298%" y="149" width="0.0169%" height="15" fill="rgb(236,97,10)" fg:x="2047" fg:w="3"/><text x="11.7798%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="11.5298%" y="133" width="0.0169%" height="15" fill="rgb(233,208,19)" fg:x="2047" fg:w="3"/><text x="11.7798%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.01%)</title><rect x="11.5749%" y="133" width="0.0113%" height="15" fill="rgb(216,164,2)" fg:x="2055" fg:w="2"/><text x="11.8249%" y="143.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.09%)</title><rect x="11.5073%" y="181" width="0.0901%" height="15" fill="rgb(220,129,5)" fg:x="2043" fg:w="16"/><text x="11.7573%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.05%)</title><rect x="11.5467%" y="165" width="0.0507%" height="15" fill="rgb(242,17,10)" fg:x="2050" fg:w="9"/><text x="11.7967%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.05%)</title><rect x="11.5523%" y="149" width="0.0451%" height="15" fill="rgb(242,107,0)" fg:x="2051" fg:w="8"/><text x="11.8023%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (2 samples, 0.01%)</title><rect x="11.5861%" y="133" width="0.0113%" height="15" fill="rgb(251,28,31)" fg:x="2057" fg:w="2"/><text x="11.8361%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="11.5861%" y="117" width="0.0113%" height="15" fill="rgb(233,223,10)" fg:x="2057" fg:w="2"/><text x="11.8361%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.06%)</title><rect x="11.5974%" y="181" width="0.0563%" height="15" fill="rgb(215,21,27)" fg:x="2059" fg:w="10"/><text x="11.8474%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (2 samples, 0.01%)</title><rect x="11.6593%" y="181" width="0.0113%" height="15" fill="rgb(232,23,21)" fg:x="2070" fg:w="2"/><text x="11.9093%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="11.7382%" y="101" width="0.0225%" height="15" fill="rgb(244,5,23)" fg:x="2084" fg:w="4"/><text x="11.9882%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="11.7382%" y="85" width="0.0225%" height="15" fill="rgb(226,81,46)" fg:x="2084" fg:w="4"/><text x="11.9882%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (4 samples, 0.02%)</title><rect x="11.7664%" y="101" width="0.0225%" height="15" fill="rgb(247,70,30)" fg:x="2089" fg:w="4"/><text x="12.0164%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 0.12%)</title><rect x="11.6931%" y="149" width="0.1239%" height="15" fill="rgb(212,68,19)" fg:x="2076" fg:w="22"/><text x="11.9431%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.11%)</title><rect x="11.7100%" y="133" width="0.1070%" height="15" fill="rgb(240,187,13)" fg:x="2079" fg:w="19"/><text x="11.9600%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (18 samples, 0.10%)</title><rect x="11.7157%" y="117" width="0.1014%" height="15" fill="rgb(223,113,26)" fg:x="2080" fg:w="18"/><text x="11.9657%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.03%)</title><rect x="11.7889%" y="101" width="0.0282%" height="15" fill="rgb(206,192,2)" fg:x="2093" fg:w="5"/><text x="12.0389%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.15%)</title><rect x="11.6706%" y="181" width="0.1521%" height="15" fill="rgb(241,108,4)" fg:x="2072" fg:w="27"/><text x="11.9206%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (23 samples, 0.13%)</title><rect x="11.6931%" y="165" width="0.1295%" height="15" fill="rgb(247,173,49)" fg:x="2076" fg:w="23"/><text x="11.9431%" y="175.50"></text></g><g><title>esp`alloc::vec::from_elem (2 samples, 0.01%)</title><rect x="11.8227%" y="181" width="0.0113%" height="15" fill="rgb(224,114,35)" fg:x="2099" fg:w="2"/><text x="12.0727%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (17 samples, 0.10%)</title><rect x="11.8340%" y="181" width="0.0958%" height="15" fill="rgb(245,159,27)" fg:x="2101" fg:w="17"/><text x="12.0840%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.11%)</title><rect x="11.9522%" y="165" width="0.1127%" height="15" fill="rgb(245,172,44)" fg:x="2122" fg:w="20"/><text x="12.2022%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (10 samples, 0.06%)</title><rect x="12.0930%" y="149" width="0.0563%" height="15" fill="rgb(236,23,11)" fg:x="2147" fg:w="10"/><text x="12.3430%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="12.1494%" y="149" width="0.0225%" height="15" fill="rgb(205,117,38)" fg:x="2157" fg:w="4"/><text x="12.3994%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4 samples, 0.02%)</title><rect x="12.1494%" y="133" width="0.0225%" height="15" fill="rgb(237,72,25)" fg:x="2157" fg:w="4"/><text x="12.3994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (20 samples, 0.11%)</title><rect x="12.0649%" y="165" width="0.1127%" height="15" fill="rgb(244,70,9)" fg:x="2142" fg:w="20"/><text x="12.3149%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (4 samples, 0.02%)</title><rect x="12.2733%" y="149" width="0.0225%" height="15" fill="rgb(217,125,39)" fg:x="2179" fg:w="4"/><text x="12.5233%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.02%)</title><rect x="12.2733%" y="133" width="0.0225%" height="15" fill="rgb(235,36,10)" fg:x="2179" fg:w="4"/><text x="12.5233%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.03%)</title><rect x="12.2958%" y="149" width="0.0338%" height="15" fill="rgb(251,123,47)" fg:x="2183" fg:w="6"/><text x="12.5458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (34 samples, 0.19%)</title><rect x="12.3352%" y="149" width="0.1915%" height="15" fill="rgb(221,13,13)" fg:x="2190" fg:w="34"/><text x="12.5852%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (15 samples, 0.08%)</title><rect x="12.5324%" y="149" width="0.0845%" height="15" fill="rgb(238,131,9)" fg:x="2225" fg:w="15"/><text x="12.7824%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.08%)</title><rect x="12.5380%" y="133" width="0.0789%" height="15" fill="rgb(211,50,8)" fg:x="2226" fg:w="14"/><text x="12.7880%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (126 samples, 0.71%)</title><rect x="12.6394%" y="133" width="0.7097%" height="15" fill="rgb(245,182,24)" fg:x="2244" fg:w="126"/><text x="12.8894%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (4 samples, 0.02%)</title><rect x="13.3491%" y="133" width="0.0225%" height="15" fill="rgb(242,14,37)" fg:x="2370" fg:w="4"/><text x="13.5991%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (212 samples, 1.19%)</title><rect x="12.1832%" y="165" width="1.1941%" height="15" fill="rgb(246,228,12)" fg:x="2163" fg:w="212"/><text x="12.4332%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (135 samples, 0.76%)</title><rect x="12.6169%" y="149" width="0.7604%" height="15" fill="rgb(213,55,15)" fg:x="2240" fg:w="135"/><text x="12.8669%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.02%)</title><rect x="13.4054%" y="133" width="0.0169%" height="15" fill="rgb(209,9,3)" fg:x="2380" fg:w="3"/><text x="13.6554%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.02%)</title><rect x="13.4054%" y="117" width="0.0169%" height="15" fill="rgb(230,59,30)" fg:x="2380" fg:w="3"/><text x="13.6554%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.05%)</title><rect x="13.4336%" y="117" width="0.0451%" height="15" fill="rgb(209,121,21)" fg:x="2385" fg:w="8"/><text x="13.6836%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (19 samples, 0.11%)</title><rect x="13.3773%" y="165" width="0.1070%" height="15" fill="rgb(220,109,13)" fg:x="2375" fg:w="19"/><text x="13.6273%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.10%)</title><rect x="13.3885%" y="149" width="0.0958%" height="15" fill="rgb(232,18,1)" fg:x="2377" fg:w="17"/><text x="13.6385%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (11 samples, 0.06%)</title><rect x="13.4223%" y="133" width="0.0620%" height="15" fill="rgb(215,41,42)" fg:x="2383" fg:w="11"/><text x="13.6723%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.03%)</title><rect x="13.4843%" y="165" width="0.0282%" height="15" fill="rgb(224,123,36)" fg:x="2394" fg:w="5"/><text x="13.7343%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.03%)</title><rect x="13.4843%" y="149" width="0.0282%" height="15" fill="rgb(240,125,3)" fg:x="2394" fg:w="5"/><text x="13.7343%" y="159.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (282 samples, 1.59%)</title><rect x="11.9297%" y="181" width="1.5884%" height="15" fill="rgb(205,98,50)" fg:x="2118" fg:w="282"/><text x="12.1797%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (58 samples, 0.33%)</title><rect x="13.5181%" y="181" width="0.3267%" height="15" fill="rgb(205,185,37)" fg:x="2400" fg:w="58"/><text x="13.7681%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (241 samples, 1.36%)</title><rect x="49.3804%" y="165" width="1.3574%" height="15" fill="rgb(238,207,15)" fg:x="8767" fg:w="241"/><text x="49.6304%" y="175.50"></text></g><g><title>esp`__rdl_realloc (4 samples, 0.02%)</title><rect x="50.8280%" y="133" width="0.0225%" height="15" fill="rgb(213,199,42)" fg:x="9024" fg:w="4"/><text x="51.0780%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.01%)</title><rect x="50.9237%" y="85" width="0.0113%" height="15" fill="rgb(235,201,11)" fg:x="9041" fg:w="2"/><text x="51.1737%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.12%)</title><rect x="50.8505%" y="133" width="0.1183%" height="15" fill="rgb(207,46,11)" fg:x="9028" fg:w="21"/><text x="51.1005%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.10%)</title><rect x="50.8674%" y="117" width="0.1014%" height="15" fill="rgb(241,35,35)" fg:x="9031" fg:w="18"/><text x="51.1174%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.10%)</title><rect x="50.8730%" y="101" width="0.0958%" height="15" fill="rgb(243,32,47)" fg:x="9032" fg:w="17"/><text x="51.1230%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.03%)</title><rect x="50.9350%" y="85" width="0.0338%" height="15" fill="rgb(247,202,23)" fg:x="9043" fg:w="6"/><text x="51.1850%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (4 samples, 0.02%)</title><rect x="51.0702%" y="117" width="0.0225%" height="15" fill="rgb(219,102,11)" fg:x="9067" fg:w="4"/><text x="51.3202%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (5 samples, 0.03%)</title><rect x="51.1321%" y="101" width="0.0282%" height="15" fill="rgb(243,110,44)" fg:x="9078" fg:w="5"/><text x="51.3821%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (4 samples, 0.02%)</title><rect x="51.1603%" y="101" width="0.0225%" height="15" fill="rgb(222,74,54)" fg:x="9083" fg:w="4"/><text x="51.4103%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.01%)</title><rect x="51.2561%" y="69" width="0.0113%" height="15" fill="rgb(216,99,12)" fg:x="9100" fg:w="2"/><text x="51.5061%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.05%)</title><rect x="51.2392%" y="85" width="0.0451%" height="15" fill="rgb(226,22,26)" fg:x="9097" fg:w="8"/><text x="51.4892%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.02%)</title><rect x="51.2673%" y="69" width="0.0169%" height="15" fill="rgb(217,163,10)" fg:x="9102" fg:w="3"/><text x="51.5173%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (50 samples, 0.28%)</title><rect x="51.6954%" y="53" width="0.2816%" height="15" fill="rgb(213,25,53)" fg:x="9178" fg:w="50"/><text x="51.9454%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (23 samples, 0.13%)</title><rect x="51.9770%" y="53" width="0.1295%" height="15" fill="rgb(252,105,26)" fg:x="9228" fg:w="23"/><text x="52.2270%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.11%)</title><rect x="52.1178%" y="37" width="0.1127%" height="15" fill="rgb(220,39,43)" fg:x="9253" fg:w="20"/><text x="52.3678%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (169 samples, 0.95%)</title><rect x="51.2842%" y="85" width="0.9519%" height="15" fill="rgb(229,68,48)" fg:x="9105" fg:w="169"/><text x="51.5342%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (134 samples, 0.75%)</title><rect x="51.4814%" y="69" width="0.7548%" height="15" fill="rgb(252,8,32)" fg:x="9140" fg:w="134"/><text x="51.7314%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (21 samples, 0.12%)</title><rect x="52.1178%" y="53" width="0.1183%" height="15" fill="rgb(223,20,43)" fg:x="9253" fg:w="21"/><text x="52.3678%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (6 samples, 0.03%)</title><rect x="52.2417%" y="85" width="0.0338%" height="15" fill="rgb(229,81,49)" fg:x="9275" fg:w="6"/><text x="52.4917%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.11%)</title><rect x="52.4783%" y="37" width="0.1127%" height="15" fill="rgb(236,28,36)" fg:x="9317" fg:w="20"/><text x="52.7283%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.04%)</title><rect x="52.5910%" y="37" width="0.0394%" height="15" fill="rgb(249,185,26)" fg:x="9337" fg:w="7"/><text x="52.8410%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (68 samples, 0.38%)</title><rect x="52.2981%" y="69" width="0.3830%" height="15" fill="rgb(249,174,33)" fg:x="9285" fg:w="68"/><text x="52.5481%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (48 samples, 0.27%)</title><rect x="52.4107%" y="53" width="0.2704%" height="15" fill="rgb(233,201,37)" fg:x="9305" fg:w="48"/><text x="52.6607%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.05%)</title><rect x="52.6304%" y="37" width="0.0507%" height="15" fill="rgb(221,78,26)" fg:x="9344" fg:w="9"/><text x="52.8804%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.06%)</title><rect x="52.8557%" y="53" width="0.0563%" height="15" fill="rgb(250,127,30)" fg:x="9384" fg:w="10"/><text x="53.1057%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (147 samples, 0.83%)</title><rect x="52.2755%" y="85" width="0.8280%" height="15" fill="rgb(230,49,44)" fg:x="9281" fg:w="147"/><text x="52.5255%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (74 samples, 0.42%)</title><rect x="52.6867%" y="69" width="0.4168%" height="15" fill="rgb(229,67,23)" fg:x="9354" fg:w="74"/><text x="52.9367%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (34 samples, 0.19%)</title><rect x="52.9120%" y="53" width="0.1915%" height="15" fill="rgb(249,83,47)" fg:x="9394" fg:w="34"/><text x="53.1620%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.03%)</title><rect x="53.0754%" y="37" width="0.0282%" height="15" fill="rgb(215,43,3)" fg:x="9423" fg:w="5"/><text x="53.3254%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (14 samples, 0.08%)</title><rect x="53.1035%" y="85" width="0.0789%" height="15" fill="rgb(238,154,13)" fg:x="9428" fg:w="14"/><text x="53.3535%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.06%)</title><rect x="53.1261%" y="69" width="0.0563%" height="15" fill="rgb(219,56,2)" fg:x="9432" fg:w="10"/><text x="53.3761%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="53.3739%" y="69" width="0.0113%" height="15" fill="rgb(233,0,4)" fg:x="9476" fg:w="2"/><text x="53.6239%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (40 samples, 0.23%)</title><rect x="53.1880%" y="85" width="0.2253%" height="15" fill="rgb(235,30,7)" fg:x="9443" fg:w="40"/><text x="53.4380%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.03%)</title><rect x="53.3852%" y="69" width="0.0282%" height="15" fill="rgb(250,79,13)" fg:x="9478" fg:w="5"/><text x="53.6352%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (574 samples, 3.23%)</title><rect x="51.1828%" y="101" width="3.2331%" height="15" fill="rgb(211,146,34)" fg:x="9087" fg:w="574"/><text x="51.4328%" y="111.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (178 samples, 1.00%)</title><rect x="53.4133%" y="85" width="1.0026%" height="15" fill="rgb(228,22,38)" fg:x="9483" fg:w="178"/><text x="53.6633%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (594 samples, 3.35%)</title><rect x="51.0927%" y="117" width="3.3457%" height="15" fill="rgb(235,168,5)" fg:x="9071" fg:w="594"/><text x="51.3427%" y="127.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="54.4215%" y="101" width="0.0169%" height="15" fill="rgb(221,155,16)" fg:x="9662" fg:w="3"/><text x="54.6715%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (5 samples, 0.03%)</title><rect x="54.4384%" y="117" width="0.0282%" height="15" fill="rgb(215,215,53)" fg:x="9665" fg:w="5"/><text x="54.6884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (675 samples, 3.80%)</title><rect x="50.9801%" y="133" width="3.8020%" height="15" fill="rgb(223,4,10)" fg:x="9051" fg:w="675"/><text x="51.2301%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (56 samples, 0.32%)</title><rect x="54.4666%" y="117" width="0.3154%" height="15" fill="rgb(234,103,6)" fg:x="9670" fg:w="56"/><text x="54.7166%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (53 samples, 0.30%)</title><rect x="54.4835%" y="101" width="0.2985%" height="15" fill="rgb(227,97,0)" fg:x="9673" fg:w="53"/><text x="54.7335%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (711 samples, 4.00%)</title><rect x="50.7998%" y="149" width="4.0047%" height="15" fill="rgb(234,150,53)" fg:x="9019" fg:w="711"/><text x="51.0498%" y="159.50">esp`..</text></g><g><title>libsystem_malloc.dylib`szone_size (4 samples, 0.02%)</title><rect x="54.7820%" y="133" width="0.0225%" height="15" fill="rgb(228,201,54)" fg:x="9726" fg:w="4"/><text x="55.0320%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (725 samples, 4.08%)</title><rect x="50.7379%" y="165" width="4.0836%" height="15" fill="rgb(222,22,37)" fg:x="9008" fg:w="725"/><text x="50.9879%" y="175.50">esp`..</text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.02%)</title><rect x="54.8046%" y="149" width="0.0169%" height="15" fill="rgb(237,53,32)" fg:x="9730" fg:w="3"/><text x="55.0546%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (9 samples, 0.05%)</title><rect x="54.8214%" y="165" width="0.0507%" height="15" fill="rgb(233,25,53)" fg:x="9733" fg:w="9"/><text x="55.0714%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (2,263 samples, 12.75%)</title><rect x="54.8721%" y="165" width="12.7464%" height="15" fill="rgb(210,40,34)" fg:x="9742" fg:w="2263"/><text x="55.1221%" y="175.50">esp`esp::ham::Ham::..</text></g><g><title>esp`esp::ham::Ham::ham_doub (615 samples, 3.46%)</title><rect x="64.1546%" y="149" width="3.4640%" height="15" fill="rgb(241,220,44)" fg:x="11390" fg:w="615"/><text x="64.4046%" y="159.50">esp..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (75 samples, 0.42%)</title><rect x="67.1961%" y="133" width="0.4224%" height="15" fill="rgb(235,28,35)" fg:x="11930" fg:w="75"/><text x="67.4461%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (68 samples, 0.38%)</title><rect x="67.6186%" y="165" width="0.3830%" height="15" fill="rgb(210,56,17)" fg:x="12005" fg:w="68"/><text x="67.8686%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (33 samples, 0.19%)</title><rect x="67.8157%" y="149" width="0.1859%" height="15" fill="rgb(224,130,29)" fg:x="12040" fg:w="33"/><text x="68.0657%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (116 samples, 0.65%)</title><rect x="68.7282%" y="149" width="0.6534%" height="15" fill="rgb(235,212,8)" fg:x="12202" fg:w="116"/><text x="68.9782%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="70.6939%" y="133" width="0.0113%" height="15" fill="rgb(223,33,50)" fg:x="12551" fg:w="2"/><text x="70.9439%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.08%)</title><rect x="71.9781%" y="117" width="0.0845%" height="15" fill="rgb(219,149,13)" fg:x="12779" fg:w="15"/><text x="72.2281%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (245 samples, 1.38%)</title><rect x="72.0626%" y="117" width="1.3800%" height="15" fill="rgb(250,156,29)" fg:x="12794" fg:w="245"/><text x="72.3126%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (124 samples, 0.70%)</title><rect x="72.7442%" y="101" width="0.6984%" height="15" fill="rgb(216,193,19)" fg:x="12915" fg:w="124"/><text x="72.9942%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.07%)</title><rect x="73.4426%" y="117" width="0.0732%" height="15" fill="rgb(216,135,14)" fg:x="13039" fg:w="13"/><text x="73.6926%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.07%)</title><rect x="73.4426%" y="101" width="0.0732%" height="15" fill="rgb(241,47,5)" fg:x="13039" fg:w="13"/><text x="73.6926%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (997 samples, 5.62%)</title><rect x="68.0016%" y="165" width="5.6156%" height="15" fill="rgb(233,42,35)" fg:x="12073" fg:w="997"/><text x="68.2516%" y="175.50">esp`has..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (752 samples, 4.24%)</title><rect x="69.3815%" y="149" width="4.2357%" height="15" fill="rgb(231,13,6)" fg:x="12318" fg:w="752"/><text x="69.6315%" y="159.50">esp`h..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (517 samples, 2.91%)</title><rect x="70.7052%" y="133" width="2.9120%" height="15" fill="rgb(207,181,40)" fg:x="12553" fg:w="517"/><text x="70.9552%" y="143.50">es..</text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.10%)</title><rect x="73.5158%" y="117" width="0.1014%" height="15" fill="rgb(254,173,49)" fg:x="13052" fg:w="18"/><text x="73.7658%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (3,212 samples, 18.09%)</title><rect x="73.6172%" y="165" width="18.0917%" height="15" fill="rgb(221,1,38)" fg:x="13070" fg:w="3212"/><text x="73.8672%" y="175.50">esp`hashbrown::map::make_hash</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,615 samples, 9.10%)</title><rect x="82.6124%" y="149" width="9.0965%" height="15" fill="rgb(206,124,46)" fg:x="14667" fg:w="1615"/><text x="82.8624%" y="159.50">esp`&lt;std::col..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (13,829 samples, 77.89%)</title><rect x="13.8448%" y="181" width="77.8923%" height="15" fill="rgb(249,21,11)" fg:x="2458" fg:w="13829"/><text x="14.0948%" y="191.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.03%)</title><rect x="91.7089%" y="165" width="0.0282%" height="15" fill="rgb(222,201,40)" fg:x="16282" fg:w="5"/><text x="91.9589%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="91.8554%" y="133" width="0.0113%" height="15" fill="rgb(235,61,29)" fg:x="16308" fg:w="2"/><text x="92.1054%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 0.14%)</title><rect x="91.7371%" y="181" width="0.1352%" height="15" fill="rgb(219,207,3)" fg:x="16287" fg:w="24"/><text x="91.9871%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 0.06%)</title><rect x="91.8159%" y="165" width="0.0563%" height="15" fill="rgb(222,56,46)" fg:x="16301" fg:w="10"/><text x="92.0659%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.05%)</title><rect x="91.8272%" y="149" width="0.0451%" height="15" fill="rgb(239,76,54)" fg:x="16303" fg:w="8"/><text x="92.0772%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (75 samples, 0.42%)</title><rect x="93.1114%" y="165" width="0.4224%" height="15" fill="rgb(231,124,27)" fg:x="16531" fg:w="75"/><text x="93.3614%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (448 samples, 2.52%)</title><rect x="91.8723%" y="181" width="2.5234%" height="15" fill="rgb(249,195,6)" fg:x="16311" fg:w="448"/><text x="92.1223%" y="191.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (153 samples, 0.86%)</title><rect x="93.5339%" y="165" width="0.8618%" height="15" fill="rgb(237,174,47)" fg:x="16606" fg:w="153"/><text x="93.7839%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (21 samples, 0.12%)</title><rect x="94.4125%" y="165" width="0.1183%" height="15" fill="rgb(206,201,31)" fg:x="16762" fg:w="21"/><text x="94.6625%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (623 samples, 3.51%)</title><rect x="94.3956%" y="181" width="3.5091%" height="15" fill="rgb(231,57,52)" fg:x="16759" fg:w="623"/><text x="94.6456%" y="191.50">esp..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (599 samples, 3.37%)</title><rect x="94.5308%" y="165" width="3.3739%" height="15" fill="rgb(248,177,22)" fg:x="16783" fg:w="599"/><text x="94.7808%" y="175.50">esp..</text></g><g><title>esp`core::slice::sort::recurse (444 samples, 2.50%)</title><rect x="95.4039%" y="149" width="2.5008%" height="15" fill="rgb(215,211,37)" fg:x="16938" fg:w="444"/><text x="95.6539%" y="159.50">es..</text></g><g><title>esp`core::slice::sort::recurse (307 samples, 1.73%)</title><rect x="96.1755%" y="133" width="1.7292%" height="15" fill="rgb(241,128,51)" fg:x="17075" fg:w="307"/><text x="96.4255%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (129 samples, 0.73%)</title><rect x="97.1781%" y="117" width="0.7266%" height="15" fill="rgb(227,165,31)" fg:x="17253" fg:w="129"/><text x="97.4281%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (17 samples, 0.10%)</title><rect x="97.8089%" y="101" width="0.0958%" height="15" fill="rgb(228,167,24)" fg:x="17365" fg:w="17"/><text x="98.0589%" y="111.50"></text></g><g><title>esp`core::slice::sort::recurse (3 samples, 0.02%)</title><rect x="97.8878%" y="85" width="0.0169%" height="15" fill="rgb(228,143,12)" fg:x="17379" fg:w="3"/><text x="98.1378%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="97.9047%" y="181" width="0.0282%" height="15" fill="rgb(249,149,8)" fg:x="17382" fg:w="5"/><text x="98.1547%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="97.9103%" y="165" width="0.0225%" height="15" fill="rgb(243,35,44)" fg:x="17383" fg:w="4"/><text x="98.1603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="97.9103%" y="149" width="0.0225%" height="15" fill="rgb(246,89,9)" fg:x="17383" fg:w="4"/><text x="98.1603%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (8 samples, 0.05%)</title><rect x="97.9329%" y="181" width="0.0451%" height="15" fill="rgb(233,213,13)" fg:x="17387" fg:w="8"/><text x="98.1829%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.05%)</title><rect x="97.9329%" y="165" width="0.0451%" height="15" fill="rgb(233,141,41)" fg:x="17387" fg:w="8"/><text x="98.1829%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.05%)</title><rect x="97.9329%" y="149" width="0.0451%" height="15" fill="rgb(239,167,4)" fg:x="17387" fg:w="8"/><text x="98.1829%" y="159.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (16,483 samples, 92.84%)</title><rect x="5.1425%" y="197" width="92.8410%" height="15" fill="rgb(209,217,16)" fg:x="913" fg:w="16483"/><text x="5.3925%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (10 samples, 0.06%)</title><rect x="97.9836%" y="197" width="0.0563%" height="15" fill="rgb(219,88,35)" fg:x="17396" fg:w="10"/><text x="98.2336%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (17,410 samples, 98.06%)</title><rect x="0.0000%" y="213" width="98.0624%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="17410"/><text x="0.2500%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.02%)</title><rect x="98.4116%" y="197" width="0.0225%" height="15" fill="rgb(230,90,52)" fg:x="17472" fg:w="4"/><text x="98.6616%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (42 samples, 0.24%)</title><rect x="98.4342%" y="197" width="0.2366%" height="15" fill="rgb(252,106,19)" fg:x="17476" fg:w="42"/><text x="98.6842%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (16 samples, 0.09%)</title><rect x="98.5806%" y="181" width="0.0901%" height="15" fill="rgb(206,74,20)" fg:x="17502" fg:w="16"/><text x="98.8306%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (15 samples, 0.08%)</title><rect x="98.6707%" y="197" width="0.0845%" height="15" fill="rgb(230,138,44)" fg:x="17518" fg:w="15"/><text x="98.9207%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (15 samples, 0.08%)</title><rect x="98.7552%" y="197" width="0.0845%" height="15" fill="rgb(235,182,43)" fg:x="17533" fg:w="15"/><text x="99.0052%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (7 samples, 0.04%)</title><rect x="98.8003%" y="181" width="0.0394%" height="15" fill="rgb(242,16,51)" fg:x="17541" fg:w="7"/><text x="99.0503%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (3 samples, 0.02%)</title><rect x="98.8397%" y="197" width="0.0169%" height="15" fill="rgb(248,9,4)" fg:x="17548" fg:w="3"/><text x="99.0897%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (66 samples, 0.37%)</title><rect x="98.8566%" y="197" width="0.3717%" height="15" fill="rgb(210,31,22)" fg:x="17551" fg:w="66"/><text x="99.1066%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (19 samples, 0.11%)</title><rect x="99.1213%" y="181" width="0.1070%" height="15" fill="rgb(239,54,39)" fg:x="17598" fg:w="19"/><text x="99.3713%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.06%)</title><rect x="99.2283%" y="197" width="0.0563%" height="15" fill="rgb(230,99,41)" fg:x="17617" fg:w="10"/><text x="99.4783%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8 samples, 0.05%)</title><rect x="99.2396%" y="181" width="0.0451%" height="15" fill="rgb(253,106,12)" fg:x="17619" fg:w="8"/><text x="99.4896%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.05%)</title><rect x="99.2396%" y="165" width="0.0451%" height="15" fill="rgb(213,46,41)" fg:x="17619" fg:w="8"/><text x="99.4896%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (261 samples, 1.47%)</title><rect x="98.0624%" y="213" width="1.4701%" height="15" fill="rgb(215,133,35)" fg:x="17410" fg:w="261"/><text x="98.3124%" y="223.50"></text></g><g><title>esp`hashbrown::map::make_hash (44 samples, 0.25%)</title><rect x="99.2847%" y="197" width="0.2478%" height="15" fill="rgb(213,28,5)" fg:x="17627" fg:w="44"/><text x="99.5347%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.11%)</title><rect x="99.4198%" y="181" width="0.1127%" height="15" fill="rgb(215,77,49)" fg:x="17651" fg:w="20"/><text x="99.6698%" y="191.50"></text></g><g><title>esp`esp::var::variational (17,672 samples, 99.54%)</title><rect x="0.0000%" y="229" width="99.5381%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="17672"/><text x="0.2500%" y="239.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="99.6001%" y="101" width="0.0113%" height="15" fill="rgb(208,67,9)" fg:x="17683" fg:w="2"/><text x="99.8501%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (3 samples, 0.02%)</title><rect x="99.6114%" y="85" width="0.0169%" height="15" fill="rgb(219,133,21)" fg:x="17685" fg:w="3"/><text x="99.8614%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2 samples, 0.01%)</title><rect x="99.6170%" y="69" width="0.0113%" height="15" fill="rgb(246,46,29)" fg:x="17686" fg:w="2"/><text x="99.8670%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.01%)</title><rect x="99.6170%" y="53" width="0.0113%" height="15" fill="rgb(246,185,52)" fg:x="17686" fg:w="2"/><text x="99.8670%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="99.6114%" y="101" width="0.0225%" height="15" fill="rgb(252,136,11)" fg:x="17685" fg:w="4"/><text x="99.8614%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.10%)</title><rect x="99.5945%" y="181" width="0.1014%" height="15" fill="rgb(219,138,53)" fg:x="17682" fg:w="18"/><text x="99.8445%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (18 samples, 0.10%)</title><rect x="99.5945%" y="165" width="0.1014%" height="15" fill="rgb(211,51,23)" fg:x="17682" fg:w="18"/><text x="99.8445%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.10%)</title><rect x="99.5945%" y="149" width="0.1014%" height="15" fill="rgb(247,221,28)" fg:x="17682" fg:w="18"/><text x="99.8445%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 0.10%)</title><rect x="99.5945%" y="133" width="0.1014%" height="15" fill="rgb(251,222,45)" fg:x="17682" fg:w="18"/><text x="99.8445%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (17 samples, 0.10%)</title><rect x="99.6001%" y="117" width="0.0958%" height="15" fill="rgb(217,162,53)" fg:x="17683" fg:w="17"/><text x="99.8501%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.06%)</title><rect x="99.6339%" y="101" width="0.0620%" height="15" fill="rgb(229,93,14)" fg:x="17689" fg:w="11"/><text x="99.8839%" y="111.50"></text></g><g><title>esp`alloc::slice::merge_sort (21 samples, 0.12%)</title><rect x="99.6958%" y="181" width="0.1183%" height="15" fill="rgb(209,67,49)" fg:x="17700" fg:w="21"/><text x="99.9458%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.02%)</title><rect x="99.7916%" y="165" width="0.0225%" height="15" fill="rgb(213,87,29)" fg:x="17717" fg:w="4"/><text x="100.0416%" y="175.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (49 samples, 0.28%)</title><rect x="99.5494%" y="197" width="0.2760%" height="15" fill="rgb(205,151,52)" fg:x="17674" fg:w="49"/><text x="99.7994%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="99.8367%" y="133" width="0.0113%" height="15" fill="rgb(253,215,39)" fg:x="17725" fg:w="2"/><text x="100.0867%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="99.8367%" y="117" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="17725" fg:w="2"/><text x="100.0867%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="99.8367%" y="101" width="0.0113%" height="15" fill="rgb(218,133,21)" fg:x="17725" fg:w="2"/><text x="100.0867%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="99.8367%" y="85" width="0.0113%" height="15" fill="rgb(221,193,43)" fg:x="17725" fg:w="2"/><text x="100.0867%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.02%)</title><rect x="99.8367%" y="149" width="0.0169%" height="15" fill="rgb(240,128,52)" fg:x="17725" fg:w="3"/><text x="100.0867%" y="159.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="99.8367%" y="181" width="0.0225%" height="15" fill="rgb(253,114,12)" fg:x="17725" fg:w="4"/><text x="100.0867%" y="191.50"></text></g><g><title>esp`std::io::append_to_string (4 samples, 0.02%)</title><rect x="99.8367%" y="165" width="0.0225%" height="15" fill="rgb(215,223,47)" fg:x="17725" fg:w="4"/><text x="100.0867%" y="175.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (7 samples, 0.04%)</title><rect x="99.8310%" y="197" width="0.0394%" height="15" fill="rgb(248,225,23)" fg:x="17724" fg:w="7"/><text x="100.0810%" y="207.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (59 samples, 0.33%)</title><rect x="99.5438%" y="229" width="0.3323%" height="15" fill="rgb(250,108,0)" fg:x="17673" fg:w="59"/><text x="99.7938%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (59 samples, 0.33%)</title><rect x="99.5438%" y="213" width="0.3323%" height="15" fill="rgb(228,208,7)" fg:x="17673" fg:w="59"/><text x="99.7938%" y="223.50"></text></g><g><title>esp`main (17,733 samples, 99.88%)</title><rect x="0.0000%" y="309" width="99.8817%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="17733"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (17,733 samples, 99.88%)</title><rect x="0.0000%" y="293" width="99.8817%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="17733"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (17,733 samples, 99.88%)</title><rect x="0.0000%" y="277" width="99.8817%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="17733"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (17,733 samples, 99.88%)</title><rect x="0.0000%" y="261" width="99.8817%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="17733"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (17,733 samples, 99.88%)</title><rect x="0.0000%" y="245" width="99.8817%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="17733"/><text x="0.2500%" y="255.50">esp`esp::main</text></g><g><title>all (17,754 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="17754"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (17,754 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="17754"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (17,754 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="17754"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (21 samples, 0.12%)</title><rect x="99.8817%" y="309" width="0.1183%" height="15" fill="rgb(250,160,47)" fg:x="17733" fg:w="21"/><text x="100.1317%" y="319.50"></text></g></svg></svg>