<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="13779"><g><title>esp`esp::stoch::generate_screened_sampler (7 samples, 0.05%)</title><rect x="0.0508%" y="181" width="0.0508%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="7"/><text x="0.3008%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.02%)</title><rect x="0.0798%" y="165" width="0.0218%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="3"/><text x="0.3298%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="0.1016%" y="181" width="0.0145%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="2"/><text x="0.3516%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="0.1016%" y="165" width="0.0145%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="2"/><text x="0.3516%" y="175.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.09%)</title><rect x="0.1161%" y="133" width="0.0871%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="12"/><text x="0.3661%" y="143.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (12 samples, 0.09%)</title><rect x="0.1161%" y="117" width="0.0871%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="12"/><text x="0.3661%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (12 samples, 0.09%)</title><rect x="0.1161%" y="101" width="0.0871%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="12"/><text x="0.3661%" y="111.50"></text></g><g><title>esp`esp::semistoch::semistoch_enpt2 (29 samples, 0.21%)</title><rect x="0.0000%" y="213" width="0.2105%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="29"/><text x="0.2500%" y="223.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_no_singles (29 samples, 0.21%)</title><rect x="0.0000%" y="197" width="0.2105%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="29"/><text x="0.2500%" y="207.50"></text></g><g><title>esp`std::io::stdio::_print (13 samples, 0.09%)</title><rect x="0.1161%" y="181" width="0.0943%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="13"/><text x="0.3661%" y="191.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (13 samples, 0.09%)</title><rect x="0.1161%" y="165" width="0.0943%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="13"/><text x="0.3661%" y="175.50"></text></g><g><title>esp`core::fmt::write (13 samples, 0.09%)</title><rect x="0.1161%" y="149" width="0.0943%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="13"/><text x="0.3661%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (165 samples, 1.20%)</title><rect x="23.6447%" y="197" width="1.1975%" height="15" fill="rgb(216,20,37)" fg:x="3258" fg:w="165"/><text x="23.8947%" y="207.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt; as eigenvalues::matrix_operations::MatrixOperations&gt;::diagonal (3 samples, 0.02%)</title><rect x="24.8494%" y="181" width="0.0218%" height="15" fill="rgb(206,188,39)" fg:x="3424" fg:w="3"/><text x="25.0994%" y="191.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;f64,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,nalgebra::base::vec_storage::VecStorage&lt;f64,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt; as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (150 samples, 1.09%)</title><rect x="24.8712%" y="181" width="1.0886%" height="15" fill="rgb(217,207,13)" fg:x="3427" fg:w="150"/><text x="25.1212%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (150 samples, 1.09%)</title><rect x="24.8712%" y="165" width="1.0886%" height="15" fill="rgb(231,73,38)" fg:x="3427" fg:w="150"/><text x="25.1212%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (2 samples, 0.01%)</title><rect x="25.9598%" y="181" width="0.0145%" height="15" fill="rgb(225,20,46)" fg:x="3577" fg:w="2"/><text x="26.2098%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="25.9598%" y="165" width="0.0145%" height="15" fill="rgb(210,31,41)" fg:x="3577" fg:w="2"/><text x="26.2098%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.01%)</title><rect x="25.9598%" y="149" width="0.0145%" height="15" fill="rgb(221,200,47)" fg:x="3577" fg:w="2"/><text x="26.2098%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.01%)</title><rect x="25.9598%" y="133" width="0.0145%" height="15" fill="rgb(226,26,5)" fg:x="3577" fg:w="2"/><text x="26.2098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="25.9598%" y="117" width="0.0145%" height="15" fill="rgb(249,33,26)" fg:x="3577" fg:w="2"/><text x="26.2098%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3 samples, 0.02%)</title><rect x="25.9743%" y="165" width="0.0218%" height="15" fill="rgb(235,183,28)" fg:x="3579" fg:w="3"/><text x="26.2243%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (3 samples, 0.02%)</title><rect x="25.9743%" y="149" width="0.0218%" height="15" fill="rgb(221,5,38)" fg:x="3579" fg:w="3"/><text x="26.2243%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (2 samples, 0.01%)</title><rect x="25.9816%" y="133" width="0.0145%" height="15" fill="rgb(247,18,42)" fg:x="3580" fg:w="2"/><text x="26.2316%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (2 samples, 0.01%)</title><rect x="25.9816%" y="117" width="0.0145%" height="15" fill="rgb(241,131,45)" fg:x="3580" fg:w="2"/><text x="26.2316%" y="127.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (4 samples, 0.03%)</title><rect x="25.9743%" y="181" width="0.0290%" height="15" fill="rgb(249,31,29)" fg:x="3579" fg:w="4"/><text x="26.2243%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (5 samples, 0.04%)</title><rect x="26.0033%" y="181" width="0.0363%" height="15" fill="rgb(225,111,53)" fg:x="3583" fg:w="5"/><text x="26.2533%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="26.0033%" y="165" width="0.0363%" height="15" fill="rgb(238,160,17)" fg:x="3583" fg:w="5"/><text x="26.2533%" y="175.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt::val_width (2 samples, 0.01%)</title><rect x="26.0469%" y="117" width="0.0145%" height="15" fill="rgb(214,148,48)" fg:x="3589" fg:w="2"/><text x="26.2969%" y="127.50"></text></g><g><title>esp`alloc::fmt::format (2 samples, 0.01%)</title><rect x="26.0469%" y="101" width="0.0145%" height="15" fill="rgb(232,36,49)" fg:x="3589" fg:w="2"/><text x="26.2969%" y="111.50"></text></g><g><title>esp`core::fmt::write (2 samples, 0.01%)</title><rect x="26.0469%" y="85" width="0.0145%" height="15" fill="rgb(209,103,24)" fg:x="3589" fg:w="2"/><text x="26.2969%" y="95.50"></text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (2 samples, 0.01%)</title><rect x="26.0469%" y="69" width="0.0145%" height="15" fill="rgb(229,88,8)" fg:x="3589" fg:w="2"/><text x="26.2969%" y="79.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.04%)</title><rect x="26.0687%" y="85" width="0.0435%" height="15" fill="rgb(213,181,19)" fg:x="3592" fg:w="6"/><text x="26.3187%" y="95.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (6 samples, 0.04%)</title><rect x="26.0687%" y="69" width="0.0435%" height="15" fill="rgb(254,191,54)" fg:x="3592" fg:w="6"/><text x="26.3187%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.04%)</title><rect x="26.0759%" y="53" width="0.0363%" height="15" fill="rgb(241,83,37)" fg:x="3593" fg:w="5"/><text x="26.3259%" y="63.50"></text></g><g><title>esp`std::io::stdio::_print (10 samples, 0.07%)</title><rect x="26.0469%" y="181" width="0.0726%" height="15" fill="rgb(233,36,39)" fg:x="3589" fg:w="10"/><text x="26.2969%" y="191.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.07%)</title><rect x="26.0469%" y="165" width="0.0726%" height="15" fill="rgb(226,3,54)" fg:x="3589" fg:w="10"/><text x="26.2969%" y="175.50"></text></g><g><title>esp`core::fmt::write (10 samples, 0.07%)</title><rect x="26.0469%" y="149" width="0.0726%" height="15" fill="rgb(245,192,40)" fg:x="3589" fg:w="10"/><text x="26.2969%" y="159.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt (10 samples, 0.07%)</title><rect x="26.0469%" y="133" width="0.0726%" height="15" fill="rgb(238,167,29)" fg:x="3589" fg:w="10"/><text x="26.2969%" y="143.50"></text></g><g><title>esp`core::fmt::Formatter::write_fmt (8 samples, 0.06%)</title><rect x="26.0614%" y="117" width="0.0581%" height="15" fill="rgb(232,182,51)" fg:x="3591" fg:w="8"/><text x="26.3114%" y="127.50"></text></g><g><title>esp`core::fmt::write (8 samples, 0.06%)</title><rect x="26.0614%" y="101" width="0.0581%" height="15" fill="rgb(231,60,39)" fg:x="3591" fg:w="8"/><text x="26.3114%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.09%)</title><rect x="26.1195%" y="181" width="0.0943%" height="15" fill="rgb(208,69,12)" fg:x="3599" fg:w="13"/><text x="26.3695%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (205 samples, 1.49%)</title><rect x="24.8422%" y="197" width="1.4878%" height="15" fill="rgb(235,93,37)" fg:x="3423" fg:w="205"/><text x="25.0922%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.11%)</title><rect x="26.2211%" y="181" width="0.1089%" height="15" fill="rgb(213,116,39)" fg:x="3613" fg:w="15"/><text x="26.4711%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.11%)</title><rect x="26.2211%" y="165" width="0.1089%" height="15" fill="rgb(222,207,29)" fg:x="3613" fg:w="15"/><text x="26.4711%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (15 samples, 0.11%)</title><rect x="26.2211%" y="149" width="0.1089%" height="15" fill="rgb(206,96,30)" fg:x="3613" fg:w="15"/><text x="26.4711%" y="159.50"></text></g><g><title>esp`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (2 samples, 0.01%)</title><rect x="29.3127%" y="117" width="0.0145%" height="15" fill="rgb(218,138,4)" fg:x="4039" fg:w="2"/><text x="29.5627%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (2 samples, 0.01%)</title><rect x="29.3127%" y="101" width="0.0145%" height="15" fill="rgb(250,191,14)" fg:x="4039" fg:w="2"/><text x="29.5627%" y="111.50"></text></g><g><title>esp`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (4 samples, 0.03%)</title><rect x="29.3127%" y="133" width="0.0290%" height="15" fill="rgb(239,60,40)" fg:x="4039" fg:w="4"/><text x="29.5627%" y="143.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide (2 samples, 0.01%)</title><rect x="29.3272%" y="117" width="0.0145%" height="15" fill="rgb(206,27,48)" fg:x="4041" fg:w="2"/><text x="29.5772%" y="127.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.01%)</title><rect x="29.3272%" y="101" width="0.0145%" height="15" fill="rgb(225,35,8)" fg:x="4041" fg:w="2"/><text x="29.5772%" y="111.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide (3 samples, 0.02%)</title><rect x="29.3418%" y="133" width="0.0218%" height="15" fill="rgb(250,213,24)" fg:x="4043" fg:w="3"/><text x="29.5918%" y="143.50"></text></g><g><title>esp`rand::distributions::float::_&lt;impl rand::distributions::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (129 samples, 0.94%)</title><rect x="28.9426%" y="149" width="0.9362%" height="15" fill="rgb(247,123,22)" fg:x="3988" fg:w="129"/><text x="29.1926%" y="159.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide (70 samples, 0.51%)</title><rect x="29.3708%" y="133" width="0.5080%" height="15" fill="rgb(231,138,38)" fg:x="4047" fg:w="70"/><text x="29.6208%" y="143.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide::impl_avx2 (70 samples, 0.51%)</title><rect x="29.3708%" y="117" width="0.5080%" height="15" fill="rgb(231,145,46)" fg:x="4047" fg:w="70"/><text x="29.6208%" y="127.50"></text></g><g><title>esp`rand::rngs::adapter::reseeding::fork::get_fork_counter (2 samples, 0.01%)</title><rect x="29.8788%" y="149" width="0.0145%" height="15" fill="rgb(251,118,11)" fg:x="4117" fg:w="2"/><text x="30.1288%" y="159.50"></text></g><g><title>esp`nalgebra::base::construction::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;::Buffer&gt;&gt;::new_random (208 samples, 1.51%)</title><rect x="28.3910%" y="165" width="1.5095%" height="15" fill="rgb(217,147,25)" fg:x="3912" fg:w="208"/><text x="28.6410%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.09%)</title><rect x="29.9078%" y="165" width="0.0943%" height="15" fill="rgb(247,81,37)" fg:x="4121" fg:w="13"/><text x="30.1578%" y="175.50"></text></g><g><title>esp`eigenvalues::utils::generate_diagonal_dominant (473 samples, 3.43%)</title><rect x="26.5912%" y="181" width="3.4328%" height="15" fill="rgb(209,12,38)" fg:x="3664" fg:w="473"/><text x="26.8412%" y="191.50">esp..</text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.02%)</title><rect x="30.0022%" y="165" width="0.0218%" height="15" fill="rgb(227,1,9)" fg:x="4134" fg:w="3"/><text x="30.2522%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.02%)</title><rect x="30.0022%" y="149" width="0.0218%" height="15" fill="rgb(248,47,43)" fg:x="4134" fg:w="3"/><text x="30.2522%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.02%)</title><rect x="30.0022%" y="133" width="0.0218%" height="15" fill="rgb(221,10,30)" fg:x="4134" fg:w="3"/><text x="30.2522%" y="143.50"></text></g><g><title>esp`eigenvalues::utils::generate_random_sparse_symmetric (519 samples, 3.77%)</title><rect x="26.3299%" y="197" width="3.7666%" height="15" fill="rgb(210,229,1)" fg:x="3628" fg:w="519"/><text x="26.5799%" y="207.50">esp`..</text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.07%)</title><rect x="30.0239%" y="181" width="0.0726%" height="15" fill="rgb(222,148,37)" fg:x="4137" fg:w="10"/><text x="30.2739%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (69 samples, 0.50%)</title><rect x="30.0965%" y="197" width="0.5008%" height="15" fill="rgb(234,67,33)" fg:x="4147" fg:w="69"/><text x="30.3465%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (17 samples, 0.12%)</title><rect x="30.4739%" y="181" width="0.1234%" height="15" fill="rgb(247,98,35)" fg:x="4199" fg:w="17"/><text x="30.7239%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (8 samples, 0.06%)</title><rect x="30.5973%" y="197" width="0.0581%" height="15" fill="rgb(247,138,52)" fg:x="4216" fg:w="8"/><text x="30.8473%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4 samples, 0.03%)</title><rect x="30.6263%" y="181" width="0.0290%" height="15" fill="rgb(213,79,30)" fg:x="4220" fg:w="4"/><text x="30.8763%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (8 samples, 0.06%)</title><rect x="30.7134%" y="181" width="0.0581%" height="15" fill="rgb(246,177,23)" fg:x="4232" fg:w="8"/><text x="30.9634%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (5 samples, 0.04%)</title><rect x="30.7352%" y="165" width="0.0363%" height="15" fill="rgb(230,62,27)" fg:x="4235" fg:w="5"/><text x="30.9852%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.02%)</title><rect x="30.7932%" y="181" width="0.0218%" height="15" fill="rgb(216,154,8)" fg:x="4243" fg:w="3"/><text x="31.0432%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (27 samples, 0.20%)</title><rect x="30.6553%" y="197" width="0.1960%" height="15" fill="rgb(244,35,45)" fg:x="4224" fg:w="27"/><text x="30.9053%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="30.8150%" y="181" width="0.0363%" height="15" fill="rgb(251,115,12)" fg:x="4246" fg:w="5"/><text x="31.0650%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="30.8295%" y="165" width="0.0218%" height="15" fill="rgb(240,54,50)" fg:x="4248" fg:w="3"/><text x="31.0795%" y="175.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (3,940 samples, 28.59%)</title><rect x="30.8513%" y="197" width="28.5942%" height="15" fill="rgb(233,84,52)" fg:x="4251" fg:w="3940"/><text x="31.1013%" y="207.50">esp`esp::wf::det::Config::safe_excite_det</text></g><g><title>esp`hashbrown::map::make_hash (5,342 samples, 38.77%)</title><rect x="59.4455%" y="197" width="38.7691%" height="15" fill="rgb(207,117,47)" fg:x="8191" fg:w="5342"/><text x="59.6955%" y="207.50">esp`hashbrown::map::make_hash</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,887 samples, 20.95%)</title><rect x="77.2625%" y="181" width="20.9522%" height="15" fill="rgb(249,43,39)" fg:x="10646" fg:w="2887"/><text x="77.5125%" y="191.50">esp`&lt;std::collections::hash::map:..</text></g><g><title>esp`esp::var::variational (13,505 samples, 98.01%)</title><rect x="0.2105%" y="213" width="98.0115%" height="15" fill="rgb(209,38,44)" fg:x="29" fg:w="13505"/><text x="0.4605%" y="223.50">esp`esp::var::variational</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (72 samples, 0.52%)</title><rect x="98.2219%" y="213" width="0.5225%" height="15" fill="rgb(236,212,23)" fg:x="13534" fg:w="72"/><text x="98.4719%" y="223.50"></text></g><g><title>esp`hashbrown::map::make_hash (91 samples, 0.66%)</title><rect x="98.7445%" y="213" width="0.6604%" height="15" fill="rgb(242,79,21)" fg:x="13606" fg:w="91"/><text x="98.9945%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (5 samples, 0.04%)</title><rect x="99.5573%" y="69" width="0.0363%" height="15" fill="rgb(211,96,35)" fg:x="13718" fg:w="5"/><text x="99.8073%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2 samples, 0.01%)</title><rect x="99.5791%" y="53" width="0.0145%" height="15" fill="rgb(253,215,40)" fg:x="13721" fg:w="2"/><text x="99.8291%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.01%)</title><rect x="99.5791%" y="37" width="0.0145%" height="15" fill="rgb(211,81,21)" fg:x="13721" fg:w="2"/><text x="99.8291%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.04%)</title><rect x="99.5573%" y="85" width="0.0435%" height="15" fill="rgb(208,190,38)" fg:x="13718" fg:w="6"/><text x="99.8073%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.17%)</title><rect x="99.5428%" y="165" width="0.1742%" height="15" fill="rgb(235,213,38)" fg:x="13716" fg:w="24"/><text x="99.7928%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (24 samples, 0.17%)</title><rect x="99.5428%" y="149" width="0.1742%" height="15" fill="rgb(237,122,38)" fg:x="13716" fg:w="24"/><text x="99.7928%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.17%)</title><rect x="99.5428%" y="133" width="0.1742%" height="15" fill="rgb(244,218,35)" fg:x="13716" fg:w="24"/><text x="99.7928%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (23 samples, 0.17%)</title><rect x="99.5500%" y="117" width="0.1669%" height="15" fill="rgb(240,68,47)" fg:x="13717" fg:w="23"/><text x="99.8000%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.17%)</title><rect x="99.5500%" y="101" width="0.1669%" height="15" fill="rgb(210,16,53)" fg:x="13717" fg:w="23"/><text x="99.8000%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.12%)</title><rect x="99.6008%" y="85" width="0.1161%" height="15" fill="rgb(235,124,12)" fg:x="13724" fg:w="16"/><text x="99.8508%" y="95.50"></text></g><g><title>esp`alloc::slice::merge_sort (18 samples, 0.13%)</title><rect x="99.7170%" y="165" width="0.1306%" height="15" fill="rgb(224,169,11)" fg:x="13740" fg:w="18"/><text x="99.9670%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4 samples, 0.03%)</title><rect x="99.8476%" y="165" width="0.0290%" height="15" fill="rgb(250,166,2)" fg:x="13758" fg:w="4"/><text x="100.0976%" y="175.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (65 samples, 0.47%)</title><rect x="99.4121%" y="181" width="0.4717%" height="15" fill="rgb(242,216,29)" fg:x="13698" fg:w="65"/><text x="99.6621%" y="191.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="99.9057%" y="165" width="0.0218%" height="15" fill="rgb(230,116,27)" fg:x="13766" fg:w="3"/><text x="100.1557%" y="175.50"></text></g><g><title>esp`std::io::append_to_string (3 samples, 0.02%)</title><rect x="99.9057%" y="149" width="0.0218%" height="15" fill="rgb(228,99,48)" fg:x="13766" fg:w="3"/><text x="100.1557%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.01%)</title><rect x="99.9129%" y="133" width="0.0145%" height="15" fill="rgb(253,11,6)" fg:x="13767" fg:w="2"/><text x="100.1629%" y="143.50"></text></g><g><title>esp`main (13,771 samples, 99.94%)</title><rect x="0.0000%" y="293" width="99.9419%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="13771"/><text x="0.2500%" y="303.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (13,771 samples, 99.94%)</title><rect x="0.0000%" y="277" width="99.9419%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="13771"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (13,771 samples, 99.94%)</title><rect x="0.0000%" y="261" width="99.9419%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="13771"/><text x="0.2500%" y="271.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (13,771 samples, 99.94%)</title><rect x="0.0000%" y="245" width="99.9419%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="13771"/><text x="0.2500%" y="255.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (13,771 samples, 99.94%)</title><rect x="0.0000%" y="229" width="99.9419%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="13771"/><text x="0.2500%" y="239.50">esp`esp::main</text></g><g><title>esp`std::sync::once::Once::call_inner (74 samples, 0.54%)</title><rect x="99.4049%" y="213" width="0.5370%" height="15" fill="rgb(242,17,10)" fg:x="13697" fg:w="74"/><text x="99.6549%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (74 samples, 0.54%)</title><rect x="99.4049%" y="197" width="0.5370%" height="15" fill="rgb(242,107,0)" fg:x="13697" fg:w="74"/><text x="99.6549%" y="207.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (8 samples, 0.06%)</title><rect x="99.8839%" y="181" width="0.0581%" height="15" fill="rgb(251,28,31)" fg:x="13763" fg:w="8"/><text x="100.1339%" y="191.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (2 samples, 0.01%)</title><rect x="99.9274%" y="165" width="0.0145%" height="15" fill="rgb(233,223,10)" fg:x="13769" fg:w="2"/><text x="100.1774%" y="175.50"></text></g><g><title>all (13,779 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="13779"/><text x="0.2500%" y="351.50"></text></g><g><title>0x1 (13,779 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="13779"/><text x="0.2500%" y="335.50">0x1</text></g><g><title>libdyld.dylib`start (13,779 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="13779"/><text x="0.2500%" y="319.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (8 samples, 0.06%)</title><rect x="99.9419%" y="293" width="0.0581%" height="15" fill="rgb(226,81,46)" fg:x="13771" fg:w="8"/><text x="100.1919%" y="303.50"></text></g></svg></svg>