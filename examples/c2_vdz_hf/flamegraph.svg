<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="2795934"><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (6,508 samples, 0.23%)</title><rect x="0.0254%" y="181" width="0.2328%" height="15" fill="rgb(227,0,7)" fg:x="709" fg:w="6508"/><text x="0.2754%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (291 samples, 0.01%)</title><rect x="0.2797%" y="117" width="0.0104%" height="15" fill="rgb(217,0,24)" fg:x="7820" fg:w="291"/><text x="0.5297%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (894 samples, 0.03%)</title><rect x="0.2618%" y="165" width="0.0320%" height="15" fill="rgb(221,193,54)" fg:x="7321" fg:w="894"/><text x="0.5118%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (553 samples, 0.02%)</title><rect x="0.2740%" y="149" width="0.0198%" height="15" fill="rgb(248,212,6)" fg:x="7662" fg:w="553"/><text x="0.5240%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (406 samples, 0.01%)</title><rect x="0.2793%" y="133" width="0.0145%" height="15" fill="rgb(208,68,35)" fg:x="7809" fg:w="406"/><text x="0.5293%" y="143.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (1,013 samples, 0.04%)</title><rect x="0.2590%" y="181" width="0.0362%" height="15" fill="rgb(232,128,0)" fg:x="7241" fg:w="1013"/><text x="0.5090%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (421 samples, 0.02%)</title><rect x="0.3014%" y="165" width="0.0151%" height="15" fill="rgb(207,160,47)" fg:x="8428" fg:w="421"/><text x="0.5514%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (625 samples, 0.02%)</title><rect x="0.2973%" y="181" width="0.0224%" height="15" fill="rgb(228,23,34)" fg:x="8311" fg:w="625"/><text x="0.5473%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (291 samples, 0.01%)</title><rect x="0.3312%" y="181" width="0.0104%" height="15" fill="rgb(218,30,26)" fg:x="9259" fg:w="291"/><text x="0.5812%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (290 samples, 0.01%)</title><rect x="0.3312%" y="165" width="0.0104%" height="15" fill="rgb(220,122,19)" fg:x="9260" fg:w="290"/><text x="0.5812%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (290 samples, 0.01%)</title><rect x="0.3312%" y="149" width="0.0104%" height="15" fill="rgb(250,228,42)" fg:x="9260" fg:w="290"/><text x="0.5812%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (9,610 samples, 0.34%)</title><rect x="0.0003%" y="197" width="0.3437%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="9610"/><text x="0.2503%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (1,383 samples, 0.05%)</title><rect x="0.3440%" y="197" width="0.0495%" height="15" fill="rgb(216,20,37)" fg:x="9619" fg:w="1383"/><text x="0.5940%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (333 samples, 0.01%)</title><rect x="0.8394%" y="165" width="0.0119%" height="15" fill="rgb(206,188,39)" fg:x="23470" fg:w="333"/><text x="1.0894%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (310 samples, 0.01%)</title><rect x="0.8403%" y="149" width="0.0111%" height="15" fill="rgb(217,207,13)" fg:x="23493" fg:w="310"/><text x="1.0903%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,766 samples, 0.10%)</title><rect x="0.8386%" y="181" width="0.0989%" height="15" fill="rgb(231,73,38)" fg:x="23447" fg:w="2766"/><text x="1.0886%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,398 samples, 0.09%)</title><rect x="0.8518%" y="165" width="0.0858%" height="15" fill="rgb(225,20,46)" fg:x="23815" fg:w="2398"/><text x="1.1018%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,363 samples, 0.19%)</title><rect x="0.9375%" y="181" width="0.1918%" height="15" fill="rgb(210,31,41)" fg:x="26213" fg:w="5363"/><text x="1.1875%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (429 samples, 0.02%)</title><rect x="1.1810%" y="149" width="0.0153%" height="15" fill="rgb(221,200,47)" fg:x="33019" fg:w="429"/><text x="1.4310%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,683 samples, 0.06%)</title><rect x="1.2093%" y="133" width="0.0602%" height="15" fill="rgb(226,26,5)" fg:x="33811" fg:w="1683"/><text x="1.4593%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2,957 samples, 0.11%)</title><rect x="1.1655%" y="165" width="0.1058%" height="15" fill="rgb(249,33,26)" fg:x="32588" fg:w="2957"/><text x="1.4155%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,809 samples, 0.06%)</title><rect x="1.2066%" y="149" width="0.0647%" height="15" fill="rgb(235,183,28)" fg:x="33736" fg:w="1809"/><text x="1.4566%" y="159.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (3,548 samples, 0.13%)</title><rect x="1.1497%" y="181" width="0.1269%" height="15" fill="rgb(221,5,38)" fg:x="32144" fg:w="3548"/><text x="1.3997%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (1,493 samples, 0.05%)</title><rect x="1.2766%" y="181" width="0.0534%" height="15" fill="rgb(247,18,42)" fg:x="35692" fg:w="1493"/><text x="1.5266%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3,962 samples, 0.14%)</title><rect x="13.4476%" y="165" width="0.1417%" height="15" fill="rgb(241,131,45)" fg:x="375985" fg:w="3962"/><text x="13.6976%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (316 samples, 0.01%)</title><rect x="13.6200%" y="85" width="0.0113%" height="15" fill="rgb(249,31,29)" fg:x="380806" fg:w="316"/><text x="13.8700%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (612 samples, 0.02%)</title><rect x="13.6590%" y="53" width="0.0219%" height="15" fill="rgb(225,111,53)" fg:x="381896" fg:w="612"/><text x="13.9090%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (372 samples, 0.01%)</title><rect x="13.6900%" y="37" width="0.0133%" height="15" fill="rgb(238,160,17)" fg:x="382764" fg:w="372"/><text x="13.9400%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,028 samples, 0.07%)</title><rect x="13.6313%" y="85" width="0.0725%" height="15" fill="rgb(214,148,48)" fg:x="381122" fg:w="2028"/><text x="13.8813%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,760 samples, 0.06%)</title><rect x="13.6409%" y="69" width="0.0629%" height="15" fill="rgb(232,36,49)" fg:x="381390" fg:w="1760"/><text x="13.8909%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (393 samples, 0.01%)</title><rect x="13.6898%" y="53" width="0.0141%" height="15" fill="rgb(209,103,24)" fg:x="382757" fg:w="393"/><text x="13.9398%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (327 samples, 0.01%)</title><rect x="13.7232%" y="37" width="0.0117%" height="15" fill="rgb(229,88,8)" fg:x="383692" fg:w="327"/><text x="13.9732%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (945 samples, 0.03%)</title><rect x="13.7100%" y="69" width="0.0338%" height="15" fill="rgb(213,181,19)" fg:x="383323" fg:w="945"/><text x="13.9600%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (709 samples, 0.03%)</title><rect x="13.7185%" y="53" width="0.0254%" height="15" fill="rgb(254,191,54)" fg:x="383559" fg:w="709"/><text x="13.9685%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,785 samples, 0.06%)</title><rect x="13.7084%" y="85" width="0.0638%" height="15" fill="rgb(241,83,37)" fg:x="383277" fg:w="1785"/><text x="13.9584%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (789 samples, 0.03%)</title><rect x="13.7440%" y="69" width="0.0282%" height="15" fill="rgb(233,36,39)" fg:x="384273" fg:w="789"/><text x="13.9940%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (400 samples, 0.01%)</title><rect x="13.7579%" y="53" width="0.0143%" height="15" fill="rgb(226,3,54)" fg:x="384662" fg:w="400"/><text x="14.0079%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (301 samples, 0.01%)</title><rect x="13.7757%" y="85" width="0.0108%" height="15" fill="rgb(245,192,40)" fg:x="385160" fg:w="301"/><text x="14.0257%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6,892 samples, 0.25%)</title><rect x="13.6166%" y="101" width="0.2465%" height="15" fill="rgb(238,167,29)" fg:x="380712" fg:w="6892"/><text x="13.8666%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,143 samples, 0.08%)</title><rect x="13.7865%" y="85" width="0.0766%" height="15" fill="rgb(232,182,51)" fg:x="385461" fg:w="2143"/><text x="14.0365%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7,094 samples, 0.25%)</title><rect x="13.6109%" y="117" width="0.2537%" height="15" fill="rgb(231,60,39)" fg:x="380551" fg:w="7094"/><text x="13.8609%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (567 samples, 0.02%)</title><rect x="13.8708%" y="117" width="0.0203%" height="15" fill="rgb(208,69,12)" fg:x="387819" fg:w="567"/><text x="14.1208%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (547 samples, 0.02%)</title><rect x="13.8715%" y="101" width="0.0196%" height="15" fill="rgb(235,93,37)" fg:x="387839" fg:w="547"/><text x="14.1215%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8,067 samples, 0.29%)</title><rect x="13.6028%" y="133" width="0.2885%" height="15" fill="rgb(213,116,39)" fg:x="380324" fg:w="8067"/><text x="13.8528%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (8,417 samples, 0.30%)</title><rect x="13.5937%" y="149" width="0.3010%" height="15" fill="rgb(222,207,29)" fg:x="380072" fg:w="8417"/><text x="13.8437%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8,599 samples, 0.31%)</title><rect x="13.5893%" y="165" width="0.3076%" height="15" fill="rgb(206,96,30)" fg:x="379947" fg:w="8599"/><text x="13.8393%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (49,477 samples, 1.77%)</title><rect x="13.9014%" y="165" width="1.7696%" height="15" fill="rgb(218,138,4)" fg:x="388674" fg:w="49477"/><text x="14.1514%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (7,409 samples, 0.26%)</title><rect x="15.4060%" y="149" width="0.2650%" height="15" fill="rgb(250,191,14)" fg:x="430742" fg:w="7409"/><text x="15.6560%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,101 samples, 0.04%)</title><rect x="15.6316%" y="133" width="0.0394%" height="15" fill="rgb(239,60,40)" fg:x="437050" fg:w="1101"/><text x="15.8816%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (901 samples, 0.03%)</title><rect x="15.6710%" y="165" width="0.0322%" height="15" fill="rgb(206,27,48)" fg:x="438151" fg:w="901"/><text x="15.9210%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (519 samples, 0.02%)</title><rect x="15.6847%" y="149" width="0.0186%" height="15" fill="rgb(225,35,8)" fg:x="438533" fg:w="519"/><text x="15.9347%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,182 samples, 0.04%)</title><rect x="15.7731%" y="149" width="0.0423%" height="15" fill="rgb(250,213,24)" fg:x="441005" fg:w="1182"/><text x="16.0231%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (3,757 samples, 0.13%)</title><rect x="16.2449%" y="117" width="0.1344%" height="15" fill="rgb(247,123,22)" fg:x="454198" fg:w="3757"/><text x="16.4949%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,802 samples, 0.06%)</title><rect x="16.3149%" y="101" width="0.0645%" height="15" fill="rgb(231,138,38)" fg:x="456153" fg:w="1802"/><text x="16.5649%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,403 samples, 0.69%)</title><rect x="15.7032%" y="165" width="0.6940%" height="15" fill="rgb(231,145,46)" fg:x="439052" fg:w="19403"/><text x="15.9532%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16,268 samples, 0.58%)</title><rect x="15.8154%" y="149" width="0.5818%" height="15" fill="rgb(251,118,11)" fg:x="442187" fg:w="16268"/><text x="16.0654%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8,999 samples, 0.32%)</title><rect x="16.0753%" y="133" width="0.3219%" height="15" fill="rgb(217,147,25)" fg:x="449456" fg:w="8999"/><text x="16.3253%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (90,463 samples, 3.24%)</title><rect x="16.3972%" y="165" width="3.2355%" height="15" fill="rgb(247,81,37)" fg:x="458455" fg:w="90463"/><text x="16.6472%" y="175.50">esp..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42,125 samples, 1.51%)</title><rect x="18.1261%" y="149" width="1.5067%" height="15" fill="rgb(209,12,38)" fg:x="506793" fg:w="42125"/><text x="18.3761%" y="159.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (511,787 samples, 18.30%)</title><rect x="1.3301%" y="181" width="18.3047%" height="15" fill="rgb(227,1,9)" fg:x="37188" fg:w="511787"/><text x="1.5801%" y="191.50">esp`esp::var::ham_gen::OffDia..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (548 samples, 0.02%)</title><rect x="19.8164%" y="165" width="0.0196%" height="15" fill="rgb(248,47,43)" fg:x="554054" fg:w="548"/><text x="20.0664%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (8,847 samples, 0.32%)</title><rect x="19.6389%" y="181" width="0.3164%" height="15" fill="rgb(221,10,30)" fg:x="549090" fg:w="8847"/><text x="19.8889%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (3,335 samples, 0.12%)</title><rect x="19.8360%" y="165" width="0.1193%" height="15" fill="rgb(210,229,1)" fg:x="554602" fg:w="3335"/><text x="20.0860%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (305 samples, 0.01%)</title><rect x="19.9571%" y="165" width="0.0109%" height="15" fill="rgb(222,148,37)" fg:x="557988" fg:w="305"/><text x="20.2071%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (10,901 samples, 0.39%)</title><rect x="19.9553%" y="181" width="0.3899%" height="15" fill="rgb(234,67,33)" fg:x="557938" fg:w="10901"/><text x="20.2053%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (10,546 samples, 0.38%)</title><rect x="19.9680%" y="165" width="0.3772%" height="15" fill="rgb(247,98,35)" fg:x="558293" fg:w="10546"/><text x="20.2180%" y="175.50"></text></g><g><title>esp`core::slice::sort::recurse (6,658 samples, 0.24%)</title><rect x="20.1071%" y="149" width="0.2381%" height="15" fill="rgb(247,138,52)" fg:x="562181" fg:w="6658"/><text x="20.3571%" y="159.50"></text></g><g><title>esp`core::slice::sort::recurse (4,921 samples, 0.18%)</title><rect x="20.1692%" y="133" width="0.1760%" height="15" fill="rgb(213,79,30)" fg:x="563918" fg:w="4921"/><text x="20.4192%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (2,329 samples, 0.08%)</title><rect x="20.2619%" y="117" width="0.0833%" height="15" fill="rgb(246,177,23)" fg:x="566510" fg:w="2329"/><text x="20.5119%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (532 samples, 0.02%)</title><rect x="20.3262%" y="101" width="0.0190%" height="15" fill="rgb(230,62,27)" fg:x="568307" fg:w="532"/><text x="20.5762%" y="111.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (557,926 samples, 19.95%)</title><rect x="0.3935%" y="197" width="19.9549%" height="15" fill="rgb(216,154,8)" fg:x="11002" fg:w="557926"/><text x="0.6435%" y="207.50">esp`esp::var::ham_gen::gen_spar..</text></g><g><title>esp`esp::var::davidson::sparse_optimize (569,051 samples, 20.35%)</title><rect x="0.0000%" y="213" width="20.3528%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="569051"/><text x="0.2500%" y="223.50">esp`esp::var::davidson::sparse_o..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (649 samples, 0.02%)</title><rect x="20.3799%" y="197" width="0.0232%" height="15" fill="rgb(251,115,12)" fg:x="569809" fg:w="649"/><text x="20.6299%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (280 samples, 0.01%)</title><rect x="20.4062%" y="197" width="0.0100%" height="15" fill="rgb(240,54,50)" fg:x="570545" fg:w="280"/><text x="20.6562%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (1,779 samples, 0.06%)</title><rect x="20.3528%" y="213" width="0.0636%" height="15" fill="rgb(233,84,52)" fg:x="569052" fg:w="1779"/><text x="20.6028%" y="223.50"></text></g><g><title>esp`esp::var::variational (570,838 samples, 20.42%)</title><rect x="0.0000%" y="229" width="20.4167%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="570838"/><text x="0.2500%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`main (570,894 samples, 20.42%)</title><rect x="0.0000%" y="309" width="20.4187%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="570894"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (570,894 samples, 20.42%)</title><rect x="0.0000%" y="293" width="20.4187%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="570894"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (570,894 samples, 20.42%)</title><rect x="0.0000%" y="277" width="20.4187%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="570894"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{clos..</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (570,894 samples, 20.42%)</title><rect x="0.0000%" y="261" width="20.4187%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="570894"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::..</text></g><g><title>esp`esp::main (570,894 samples, 20.42%)</title><rect x="0.0000%" y="245" width="20.4187%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="570894"/><text x="0.2500%" y="255.50">esp`esp::main</text></g><g><title>0x1 (571,027 samples, 20.42%)</title><rect x="0.0000%" y="341" width="20.4235%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="571027"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (571,027 samples, 20.42%)</title><rect x="0.0000%" y="325" width="20.4235%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="571027"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>esp`crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (20,149 samples, 0.72%)</title><rect x="20.9348%" y="261" width="0.7207%" height="15" fill="rgb(208,190,38)" fg:x="585322" fg:w="20149"/><text x="21.1848%" y="271.50"></text></g><g><title>esp`crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (1,939,098 samples, 69.35%)</title><rect x="29.6541%" y="245" width="69.3542%" height="15" fill="rgb(235,213,38)" fg:x="829108" fg:w="1939098"/><text x="29.9041%" y="255.50">esp`crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv</text></g><g><title>esp`crossbeam_channel::flavors::array::Channel&lt;T&gt;::try_recv (1,748,885 samples, 62.55%)</title><rect x="36.4573%" y="229" width="62.5510%" height="15" fill="rgb(237,122,38)" fg:x="1019321" fg:w="1748885"/><text x="36.7073%" y="239.50">esp`crossbeam_channel::flavors::array::Channel&lt;T&gt;::try_recv</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (2,223,304 samples, 79.52%)</title><rect x="20.4235%" y="277" width="79.5192%" height="15" fill="rgb(244,218,35)" fg:x="571027" fg:w="2223304"/><text x="20.6735%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`threads_pool::worker::Worker::check_queues (2,188,860 samples, 78.29%)</title><rect x="21.6554%" y="261" width="78.2873%" height="15" fill="rgb(240,68,47)" fg:x="605471" fg:w="2188860"/><text x="21.9054%" y="271.50">esp`threads_pool::worker::Worker::check_queues</text></g><g><title>esp`crossbeam_channel::flavors::array::Channel&lt;T&gt;::try_recv (26,125 samples, 0.93%)</title><rect x="99.0083%" y="245" width="0.9344%" height="15" fill="rgb(210,16,53)" fg:x="2768206" fg:w="26125"/><text x="99.2583%" y="255.50"></text></g><g><title>all (2,795,934 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="2795934"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2,224,907 samples, 79.58%)</title><rect x="20.4235%" y="341" width="79.5765%" height="15" fill="rgb(224,169,11)" fg:x="571027" fg:w="2224907"/><text x="20.6735%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (2,224,907 samples, 79.58%)</title><rect x="20.4235%" y="325" width="79.5765%" height="15" fill="rgb(250,166,2)" fg:x="571027" fg:w="2224907"/><text x="20.6735%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>esp`std::sys::unix::thread::Thread::new::thread_start (2,224,907 samples, 79.58%)</title><rect x="20.4235%" y="309" width="79.5765%" height="15" fill="rgb(242,216,29)" fg:x="571027" fg:w="2224907"/><text x="20.6735%" y="319.50">esp`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>esp`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,224,907 samples, 79.58%)</title><rect x="20.4235%" y="293" width="79.5765%" height="15" fill="rgb(230,116,27)" fg:x="571027" fg:w="2224907"/><text x="20.6735%" y="303.50">esp`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>esp`threads_pool::worker::Worker::check_queues (1,600 samples, 0.06%)</title><rect x="99.9428%" y="277" width="0.0572%" height="15" fill="rgb(228,99,48)" fg:x="2794334" fg:w="1600"/><text x="100.1928%" y="287.50"></text></g></svg></svg>