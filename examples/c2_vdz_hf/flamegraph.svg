<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="666"><g><title>esp`esp::stoch::generate_screened_sampler (1 samples, 0.15%)</title><rect x="0.1502%" y="261" width="0.1502%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.4002%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.15%)</title><rect x="0.1502%" y="245" width="0.1502%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.4002%" y="255.50"></text></g><g><title>esp`esp::semistoch::semistoch_enpt2 (3 samples, 0.45%)</title><rect x="0.0000%" y="293" width="0.4505%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="303.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_no_singles (3 samples, 0.45%)</title><rect x="0.0000%" y="277" width="0.4505%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="287.50"></text></g><g><title>esp`hashbrown::map::make_hash (1 samples, 0.15%)</title><rect x="0.3003%" y="261" width="0.1502%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.5503%" y="271.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.15%)</title><rect x="0.3003%" y="245" width="0.1502%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.5503%" y="255.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.75%)</title><rect x="19.3694%" y="277" width="0.7508%" height="15" fill="rgb(207,160,47)" fg:x="129" fg:w="5"/><text x="19.6194%" y="287.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (1 samples, 0.15%)</title><rect x="20.1201%" y="261" width="0.1502%" height="15" fill="rgb(228,23,34)" fg:x="134" fg:w="1"/><text x="20.3701%" y="271.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="20.1201%" y="245" width="0.1502%" height="15" fill="rgb(218,30,26)" fg:x="134" fg:w="1"/><text x="20.3701%" y="255.50"></text></g><g><title>esp`nalgebra::linalg::symmetric_eigen::SymmetricEigen&lt;T,D&gt;::new (1 samples, 0.15%)</title><rect x="20.2703%" y="261" width="0.1502%" height="15" fill="rgb(220,122,19)" fg:x="135" fg:w="1"/><text x="20.5203%" y="271.50"></text></g><g><title>esp`nalgebra::linalg::symmetric_tridiagonal::SymmetricTridiagonal&lt;T,D&gt;::new (1 samples, 0.15%)</title><rect x="20.2703%" y="245" width="0.1502%" height="15" fill="rgb(250,228,42)" fg:x="135" fg:w="1"/><text x="20.5203%" y="255.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (3 samples, 0.45%)</title><rect x="20.1201%" y="277" width="0.4505%" height="15" fill="rgb(240,193,28)" fg:x="134" fg:w="3"/><text x="20.3701%" y="287.50"></text></g><g><title>esp`std::io::stdio::_print (1 samples, 0.15%)</title><rect x="20.4204%" y="261" width="0.1502%" height="15" fill="rgb(216,20,37)" fg:x="136" fg:w="1"/><text x="20.6704%" y="271.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.15%)</title><rect x="20.4204%" y="245" width="0.1502%" height="15" fill="rgb(206,188,39)" fg:x="136" fg:w="1"/><text x="20.6704%" y="255.50"></text></g><g><title>esp`core::fmt::write (1 samples, 0.15%)</title><rect x="20.4204%" y="229" width="0.1502%" height="15" fill="rgb(217,207,13)" fg:x="136" fg:w="1"/><text x="20.6704%" y="239.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.15%)</title><rect x="20.4204%" y="213" width="0.1502%" height="15" fill="rgb(231,73,38)" fg:x="136" fg:w="1"/><text x="20.6704%" y="223.50"></text></g><g><title>esp`core::fmt::Formatter::write_fmt (1 samples, 0.15%)</title><rect x="20.4204%" y="197" width="0.1502%" height="15" fill="rgb(225,20,46)" fg:x="136" fg:w="1"/><text x="20.6704%" y="207.50"></text></g><g><title>esp`core::fmt::write (1 samples, 0.15%)</title><rect x="20.4204%" y="181" width="0.1502%" height="15" fill="rgb(210,31,41)" fg:x="136" fg:w="1"/><text x="20.6704%" y="191.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="20.4204%" y="165" width="0.1502%" height="15" fill="rgb(221,200,47)" fg:x="136" fg:w="1"/><text x="20.6704%" y="175.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="20.4204%" y="149" width="0.1502%" height="15" fill="rgb(226,26,5)" fg:x="136" fg:w="1"/><text x="20.6704%" y="159.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="20.4204%" y="133" width="0.1502%" height="15" fill="rgb(249,33,26)" fg:x="136" fg:w="1"/><text x="20.6704%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.15%)</title><rect x="20.4204%" y="117" width="0.1502%" height="15" fill="rgb(235,183,28)" fg:x="136" fg:w="1"/><text x="20.6704%" y="127.50"></text></g><g><title>esp`eigenvalues::utils::generate_random_sparse_symmetric (2 samples, 0.30%)</title><rect x="20.5706%" y="277" width="0.3003%" height="15" fill="rgb(221,5,38)" fg:x="137" fg:w="2"/><text x="20.8206%" y="287.50"></text></g><g><title>esp`eigenvalues::utils::generate_diagonal_dominant (1 samples, 0.15%)</title><rect x="20.7207%" y="261" width="0.1502%" height="15" fill="rgb(247,18,42)" fg:x="138" fg:w="1"/><text x="20.9707%" y="271.50"></text></g><g><title>esp`nalgebra::base::construction::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;T,nalgebra::base::dimension::Dynamic,nalgebra::base::dimension::Dynamic&gt;&gt;::Buffer&gt;&gt;::new_random (1 samples, 0.15%)</title><rect x="20.7207%" y="245" width="0.1502%" height="15" fill="rgb(241,131,45)" fg:x="138" fg:w="1"/><text x="20.9707%" y="255.50"></text></g><g><title>esp`rand::distributions::float::_&lt;impl rand::distributions::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.15%)</title><rect x="20.7207%" y="229" width="0.1502%" height="15" fill="rgb(249,31,29)" fg:x="138" fg:w="1"/><text x="20.9707%" y="239.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide (1 samples, 0.15%)</title><rect x="20.7207%" y="213" width="0.1502%" height="15" fill="rgb(225,111,53)" fg:x="138" fg:w="1"/><text x="20.9707%" y="223.50"></text></g><g><title>esp`rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.15%)</title><rect x="20.7207%" y="197" width="0.1502%" height="15" fill="rgb(238,160,17)" fg:x="138" fg:w="1"/><text x="20.9707%" y="207.50"></text></g><g><title>esp`esp::utils::display::fmt_det (1 samples, 0.15%)</title><rect x="20.8709%" y="261" width="0.1502%" height="15" fill="rgb(214,148,48)" fg:x="139" fg:w="1"/><text x="21.1209%" y="271.50"></text></g><g><title>esp`alloc::fmt::format (1 samples, 0.15%)</title><rect x="20.8709%" y="245" width="0.1502%" height="15" fill="rgb(232,36,49)" fg:x="139" fg:w="1"/><text x="21.1209%" y="255.50"></text></g><g><title>esp`core::fmt::write (1 samples, 0.15%)</title><rect x="20.8709%" y="229" width="0.1502%" height="15" fill="rgb(209,103,24)" fg:x="139" fg:w="1"/><text x="21.1209%" y="239.50"></text></g><g><title>esp`core::fmt::num::_&lt;impl core::fmt::Binary for i128&gt;::fmt (1 samples, 0.15%)</title><rect x="20.8709%" y="213" width="0.1502%" height="15" fill="rgb(229,88,8)" fg:x="139" fg:w="1"/><text x="21.1209%" y="223.50"></text></g><g><title>esp`core::fmt::Formatter::pad_integral (1 samples, 0.15%)</title><rect x="20.8709%" y="197" width="0.1502%" height="15" fill="rgb(213,181,19)" fg:x="139" fg:w="1"/><text x="21.1209%" y="207.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="20.8709%" y="181" width="0.1502%" height="15" fill="rgb(254,191,54)" fg:x="139" fg:w="1"/><text x="21.1209%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="20.8709%" y="165" width="0.1502%" height="15" fill="rgb(241,83,37)" fg:x="139" fg:w="1"/><text x="21.1209%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.15%)</title><rect x="20.8709%" y="149" width="0.1502%" height="15" fill="rgb(233,36,39)" fg:x="139" fg:w="1"/><text x="21.1209%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.15%)</title><rect x="20.8709%" y="133" width="0.1502%" height="15" fill="rgb(226,3,54)" fg:x="139" fg:w="1"/><text x="21.1209%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.15%)</title><rect x="20.8709%" y="117" width="0.1502%" height="15" fill="rgb(245,192,40)" fg:x="139" fg:w="1"/><text x="21.1209%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.15%)</title><rect x="20.8709%" y="101" width="0.1502%" height="15" fill="rgb(238,167,29)" fg:x="139" fg:w="1"/><text x="21.1209%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.15%)</title><rect x="20.8709%" y="85" width="0.1502%" height="15" fill="rgb(232,182,51)" fg:x="139" fg:w="1"/><text x="21.1209%" y="95.50"></text></g><g><title>esp`esp::utils::display::_&lt;impl esp::wf::Wf&gt;::print (2 samples, 0.30%)</title><rect x="20.8709%" y="277" width="0.3003%" height="15" fill="rgb(231,60,39)" fg:x="139" fg:w="2"/><text x="21.1209%" y="287.50"></text></g><g><title>esp`std::io::stdio::_print (1 samples, 0.15%)</title><rect x="21.0210%" y="261" width="0.1502%" height="15" fill="rgb(208,69,12)" fg:x="140" fg:w="1"/><text x="21.2710%" y="271.50"></text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.15%)</title><rect x="21.0210%" y="245" width="0.1502%" height="15" fill="rgb(235,93,37)" fg:x="140" fg:w="1"/><text x="21.2710%" y="255.50"></text></g><g><title>esp`core::fmt::write (1 samples, 0.15%)</title><rect x="21.0210%" y="229" width="0.1502%" height="15" fill="rgb(213,116,39)" fg:x="140" fg:w="1"/><text x="21.2710%" y="239.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="21.0210%" y="213" width="0.1502%" height="15" fill="rgb(222,207,29)" fg:x="140" fg:w="1"/><text x="21.2710%" y="223.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="21.0210%" y="197" width="0.1502%" height="15" fill="rgb(206,96,30)" fg:x="140" fg:w="1"/><text x="21.2710%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.15%)</title><rect x="21.0210%" y="181" width="0.1502%" height="15" fill="rgb(218,138,4)" fg:x="140" fg:w="1"/><text x="21.2710%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (171 samples, 25.68%)</title><rect x="21.1712%" y="277" width="25.6757%" height="15" fill="rgb(250,191,14)" fg:x="141" fg:w="171"/><text x="21.4212%" y="287.50">esp`esp::wf::det::Config::safe_excite_det</text></g><g><title>esp`hashbrown::map::make_hash (209 samples, 31.38%)</title><rect x="46.8468%" y="277" width="31.3814%" height="15" fill="rgb(239,60,40)" fg:x="312" fg:w="209"/><text x="47.0968%" y="287.50">esp`hashbrown::map::make_hash</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (110 samples, 16.52%)</title><rect x="61.7117%" y="261" width="16.5165%" height="15" fill="rgb(206,27,48)" fg:x="411" fg:w="110"/><text x="61.9617%" y="271.50">esp`&lt;std::collections::ha..</text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (1 samples, 0.15%)</title><rect x="78.3784%" y="181" width="0.1502%" height="15" fill="rgb(225,35,8)" fg:x="522" fg:w="1"/><text x="78.6284%" y="191.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="78.6787%" y="165" width="0.1502%" height="15" fill="rgb(250,213,24)" fg:x="524" fg:w="1"/><text x="78.9287%" y="175.50"></text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (8 samples, 1.20%)</title><rect x="78.8288%" y="165" width="1.2012%" height="15" fill="rgb(247,123,22)" fg:x="525" fg:w="8"/><text x="79.0788%" y="175.50"></text></g><g><title>esp`core::fmt::Formatter::write_formatted_parts (7 samples, 1.05%)</title><rect x="78.9790%" y="149" width="1.0511%" height="15" fill="rgb(231,138,38)" fg:x="526" fg:w="7"/><text x="79.2290%" y="159.50"></text></g><g><title>esp`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.90%)</title><rect x="79.1291%" y="133" width="0.9009%" height="15" fill="rgb(231,145,46)" fg:x="527" fg:w="6"/><text x="79.3791%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (4 samples, 0.60%)</title><rect x="79.4294%" y="117" width="0.6006%" height="15" fill="rgb(251,118,11)" fg:x="529" fg:w="4"/><text x="79.6794%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.60%)</title><rect x="79.4294%" y="101" width="0.6006%" height="15" fill="rgb(217,147,25)" fg:x="529" fg:w="4"/><text x="79.6794%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.60%)</title><rect x="79.4294%" y="85" width="0.6006%" height="15" fill="rgb(247,81,37)" fg:x="529" fg:w="4"/><text x="79.6794%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.60%)</title><rect x="79.4294%" y="69" width="0.6006%" height="15" fill="rgb(209,12,38)" fg:x="529" fg:w="4"/><text x="79.6794%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.15%)</title><rect x="79.8799%" y="53" width="0.1502%" height="15" fill="rgb(227,1,9)" fg:x="532" fg:w="1"/><text x="80.1299%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.15%)</title><rect x="79.8799%" y="37" width="0.1502%" height="15" fill="rgb(248,47,43)" fg:x="532" fg:w="1"/><text x="80.1299%" y="47.50"></text></g><g><title>esp`alloc::fmt::format (12 samples, 1.80%)</title><rect x="78.3784%" y="197" width="1.8018%" height="15" fill="rgb(221,10,30)" fg:x="522" fg:w="12"/><text x="78.6284%" y="207.50">e..</text></g><g><title>esp`core::fmt::write (11 samples, 1.65%)</title><rect x="78.5285%" y="181" width="1.6517%" height="15" fill="rgb(210,229,1)" fg:x="523" fg:w="11"/><text x="78.7785%" y="191.50"></text></g><g><title>esp`core::num::flt2dec::strategy::grisu::format_shortest_opt (1 samples, 0.15%)</title><rect x="80.0300%" y="165" width="0.1502%" height="15" fill="rgb(222,148,37)" fg:x="533" fg:w="1"/><text x="80.2800%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.30%)</title><rect x="80.1802%" y="197" width="0.3003%" height="15" fill="rgb(234,67,33)" fg:x="534" fg:w="2"/><text x="80.4302%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2 samples, 0.30%)</title><rect x="80.1802%" y="181" width="0.3003%" height="15" fill="rgb(247,98,35)" fg:x="534" fg:w="2"/><text x="80.4302%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.30%)</title><rect x="80.1802%" y="165" width="0.3003%" height="15" fill="rgb(247,138,52)" fg:x="534" fg:w="2"/><text x="80.4302%" y="175.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt::val_width (17 samples, 2.55%)</title><rect x="78.3784%" y="213" width="2.5526%" height="15" fill="rgb(213,79,30)" fg:x="522" fg:w="17"/><text x="78.6284%" y="223.50">es..</text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.45%)</title><rect x="80.4805%" y="197" width="0.4505%" height="15" fill="rgb(246,177,23)" fg:x="536" fg:w="3"/><text x="80.7305%" y="207.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="81.0811%" y="165" width="0.1502%" height="15" fill="rgb(230,62,27)" fg:x="540" fg:w="1"/><text x="81.3311%" y="175.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.30%)</title><rect x="81.2312%" y="165" width="0.3003%" height="15" fill="rgb(216,154,8)" fg:x="541" fg:w="2"/><text x="81.4812%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.15%)</title><rect x="81.3814%" y="149" width="0.1502%" height="15" fill="rgb(244,35,45)" fg:x="542" fg:w="1"/><text x="81.6314%" y="159.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.75%)</title><rect x="80.9309%" y="181" width="0.7508%" height="15" fill="rgb(251,115,12)" fg:x="539" fg:w="5"/><text x="81.1809%" y="191.50"></text></g><g><title>esp`core::slice::memchr::memrchr (1 samples, 0.15%)</title><rect x="81.5315%" y="165" width="0.1502%" height="15" fill="rgb(240,54,50)" fg:x="543" fg:w="1"/><text x="81.7815%" y="175.50"></text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="81.6817%" y="181" width="0.1502%" height="15" fill="rgb(233,84,52)" fg:x="544" fg:w="1"/><text x="81.9317%" y="191.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="82.8829%" y="133" width="0.1502%" height="15" fill="rgb(207,117,47)" fg:x="552" fg:w="1"/><text x="83.1329%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (6 samples, 0.90%)</title><rect x="86.1862%" y="101" width="0.9009%" height="15" fill="rgb(249,43,39)" fg:x="574" fg:w="6"/><text x="86.4362%" y="111.50"></text></g><g><title>esp`&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 3.15%)</title><rect x="84.8348%" y="117" width="3.1532%" height="15" fill="rgb(209,38,44)" fg:x="565" fg:w="21"/><text x="85.0848%" y="127.50">esp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.90%)</title><rect x="87.0871%" y="101" width="0.9009%" height="15" fill="rgb(236,212,23)" fg:x="580" fg:w="6"/><text x="87.3371%" y="111.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 7.36%)</title><rect x="82.4324%" y="149" width="7.3574%" height="15" fill="rgb(242,79,21)" fg:x="549" fg:w="49"/><text x="82.6824%" y="159.50">esp`&lt;std::..</text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (45 samples, 6.76%)</title><rect x="83.0330%" y="133" width="6.7568%" height="15" fill="rgb(211,96,35)" fg:x="553" fg:w="45"/><text x="83.2830%" y="143.50">esp`&lt;std:..</text></g><g><title>esp`core::slice::memchr::memrchr (12 samples, 1.80%)</title><rect x="87.9880%" y="117" width="1.8018%" height="15" fill="rgb(253,215,40)" fg:x="586" fg:w="12"/><text x="88.2380%" y="127.50">e..</text></g><g><title>esp`core::fmt::Formatter::pad (54 samples, 8.11%)</title><rect x="81.8318%" y="181" width="8.1081%" height="15" fill="rgb(211,81,21)" fg:x="545" fg:w="54"/><text x="82.0818%" y="191.50">esp`core::f..</text></g><g><title>esp`core::fmt::Write::write_char (53 samples, 7.96%)</title><rect x="81.9820%" y="165" width="7.9580%" height="15" fill="rgb(208,190,38)" fg:x="546" fg:w="53"/><text x="82.2320%" y="175.50">esp`core::f..</text></g><g><title>esp`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.15%)</title><rect x="89.7898%" y="149" width="0.1502%" height="15" fill="rgb(235,213,38)" fg:x="598" fg:w="1"/><text x="90.0398%" y="159.50"></text></g><g><title>esp`core::fmt::Write::write_char (4 samples, 0.60%)</title><rect x="89.9399%" y="181" width="0.6006%" height="15" fill="rgb(237,122,38)" fg:x="599" fg:w="4"/><text x="90.1899%" y="191.50"></text></g><g><title>esp`core::fmt::Formatter::pad_formatted_parts (1 samples, 0.15%)</title><rect x="90.5405%" y="165" width="0.1502%" height="15" fill="rgb(244,218,35)" fg:x="603" fg:w="1"/><text x="90.7905%" y="175.50"></text></g><g><title>esp`&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::fmt::Display&gt;::fmt (84 samples, 12.61%)</title><rect x="78.2282%" y="229" width="12.6126%" height="15" fill="rgb(240,68,47)" fg:x="521" fg:w="84"/><text x="78.4782%" y="239.50">esp`&lt;nalgebra::base..</text></g><g><title>esp`core::fmt::Formatter::write_fmt (66 samples, 9.91%)</title><rect x="80.9309%" y="213" width="9.9099%" height="15" fill="rgb(210,16,53)" fg:x="539" fg:w="66"/><text x="81.1809%" y="223.50">esp`core::fmt:..</text></g><g><title>esp`core::fmt::write (66 samples, 9.91%)</title><rect x="80.9309%" y="197" width="9.9099%" height="15" fill="rgb(235,124,12)" fg:x="539" fg:w="66"/><text x="81.1809%" y="207.50">esp`core::fmt:..</text></g><g><title>esp`core::fmt::float::float_to_decimal_common_shortest (2 samples, 0.30%)</title><rect x="90.5405%" y="181" width="0.3003%" height="15" fill="rgb(224,169,11)" fg:x="603" fg:w="2"/><text x="90.7905%" y="191.50"></text></g><g><title>esp`core::fmt::Formatter::write_formatted_parts (1 samples, 0.15%)</title><rect x="90.6907%" y="165" width="0.1502%" height="15" fill="rgb(250,166,2)" fg:x="604" fg:w="1"/><text x="90.9407%" y="175.50"></text></g><g><title>esp`&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="90.6907%" y="149" width="0.1502%" height="15" fill="rgb(242,216,29)" fg:x="604" fg:w="1"/><text x="90.9407%" y="159.50"></text></g><g><title>esp`esp::var::variational (603 samples, 90.54%)</title><rect x="0.4505%" y="293" width="90.5405%" height="15" fill="rgb(230,116,27)" fg:x="3" fg:w="603"/><text x="0.7005%" y="303.50">esp`esp::var::variational</text></g><g><title>esp`std::io::stdio::_print (85 samples, 12.76%)</title><rect x="78.2282%" y="277" width="12.7628%" height="15" fill="rgb(228,99,48)" fg:x="521" fg:w="85"/><text x="78.4782%" y="287.50">esp`std::io::stdio:..</text></g><g><title>esp`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (85 samples, 12.76%)</title><rect x="78.2282%" y="261" width="12.7628%" height="15" fill="rgb(253,11,6)" fg:x="521" fg:w="85"/><text x="78.4782%" y="271.50">esp`&lt;&amp;std::io::stdi..</text></g><g><title>esp`core::fmt::write (85 samples, 12.76%)</title><rect x="78.2282%" y="245" width="12.7628%" height="15" fill="rgb(247,143,39)" fg:x="521" fg:w="85"/><text x="78.4782%" y="255.50">esp`core::fmt::write</text></g><g><title>esp`core::fmt::Formatter::precision (1 samples, 0.15%)</title><rect x="90.8408%" y="229" width="0.1502%" height="15" fill="rgb(236,97,10)" fg:x="605" fg:w="1"/><text x="91.0908%" y="239.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (1 samples, 0.15%)</title><rect x="90.9910%" y="293" width="0.1502%" height="15" fill="rgb(233,208,19)" fg:x="606" fg:w="1"/><text x="91.2410%" y="303.50"></text></g><g><title>esp`hashbrown::map::make_hash (3 samples, 0.45%)</title><rect x="91.1411%" y="293" width="0.4505%" height="15" fill="rgb(216,164,2)" fg:x="607" fg:w="3"/><text x="91.3911%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.15%)</title><rect x="93.9940%" y="165" width="0.1502%" height="15" fill="rgb(220,129,5)" fg:x="626" fg:w="1"/><text x="94.2440%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.15%)</title><rect x="93.9940%" y="149" width="0.1502%" height="15" fill="rgb(242,17,10)" fg:x="626" fg:w="1"/><text x="94.2440%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (1 samples, 0.15%)</title><rect x="94.1441%" y="165" width="0.1502%" height="15" fill="rgb(242,107,0)" fg:x="627" fg:w="1"/><text x="94.3941%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (1 samples, 0.15%)</title><rect x="94.2943%" y="149" width="0.1502%" height="15" fill="rgb(251,28,31)" fg:x="628" fg:w="1"/><text x="94.5443%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.30%)</title><rect x="94.2943%" y="165" width="0.3003%" height="15" fill="rgb(233,223,10)" fg:x="628" fg:w="2"/><text x="94.5443%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.15%)</title><rect x="94.4444%" y="149" width="0.1502%" height="15" fill="rgb(215,21,27)" fg:x="629" fg:w="1"/><text x="94.6944%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.15%)</title><rect x="94.4444%" y="133" width="0.1502%" height="15" fill="rgb(232,23,21)" fg:x="629" fg:w="1"/><text x="94.6944%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 1.65%)</title><rect x="93.8438%" y="197" width="1.6517%" height="15" fill="rgb(244,5,23)" fg:x="625" fg:w="11"/><text x="94.0938%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 1.65%)</title><rect x="93.8438%" y="181" width="1.6517%" height="15" fill="rgb(226,81,46)" fg:x="625" fg:w="11"/><text x="94.0938%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.90%)</title><rect x="94.5946%" y="165" width="0.9009%" height="15" fill="rgb(247,70,30)" fg:x="630" fg:w="6"/><text x="94.8446%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 1.80%)</title><rect x="93.8438%" y="245" width="1.8018%" height="15" fill="rgb(212,68,19)" fg:x="625" fg:w="12"/><text x="94.0938%" y="255.50">e..</text></g><g><title>esp`alloc::raw_vec::finish_grow (12 samples, 1.80%)</title><rect x="93.8438%" y="229" width="1.8018%" height="15" fill="rgb(240,187,13)" fg:x="625" fg:w="12"/><text x="94.0938%" y="239.50">e..</text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 1.80%)</title><rect x="93.8438%" y="213" width="1.8018%" height="15" fill="rgb(223,113,26)" fg:x="625" fg:w="12"/><text x="94.0938%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.15%)</title><rect x="95.4955%" y="197" width="0.1502%" height="15" fill="rgb(206,192,2)" fg:x="636" fg:w="1"/><text x="95.7455%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.15%)</title><rect x="97.7477%" y="197" width="0.1502%" height="15" fill="rgb(241,108,4)" fg:x="651" fg:w="1"/><text x="97.9977%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.15%)</title><rect x="97.7477%" y="181" width="0.1502%" height="15" fill="rgb(247,173,49)" fg:x="651" fg:w="1"/><text x="97.9977%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.15%)</title><rect x="97.7477%" y="165" width="0.1502%" height="15" fill="rgb(224,114,35)" fg:x="651" fg:w="1"/><text x="97.9977%" y="175.50"></text></g><g><title>esp`alloc::slice::merge_sort (16 samples, 2.40%)</title><rect x="95.6456%" y="245" width="2.4024%" height="15" fill="rgb(245,159,27)" fg:x="637" fg:w="16"/><text x="95.8956%" y="255.50">es..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.30%)</title><rect x="97.7477%" y="229" width="0.3003%" height="15" fill="rgb(245,172,44)" fg:x="651" fg:w="2"/><text x="97.9977%" y="239.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2 samples, 0.30%)</title><rect x="97.7477%" y="213" width="0.3003%" height="15" fill="rgb(236,23,11)" fg:x="651" fg:w="2"/><text x="97.9977%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.15%)</title><rect x="97.8979%" y="197" width="0.1502%" height="15" fill="rgb(205,117,38)" fg:x="652" fg:w="1"/><text x="98.1479%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.15%)</title><rect x="97.8979%" y="181" width="0.1502%" height="15" fill="rgb(237,72,25)" fg:x="652" fg:w="1"/><text x="98.1479%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.15%)</title><rect x="97.8979%" y="165" width="0.1502%" height="15" fill="rgb(244,70,9)" fg:x="652" fg:w="1"/><text x="98.1479%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.15%)</title><rect x="97.8979%" y="149" width="0.1502%" height="15" fill="rgb(217,125,39)" fg:x="652" fg:w="1"/><text x="98.1479%" y="159.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (44 samples, 6.61%)</title><rect x="91.5916%" y="261" width="6.6066%" height="15" fill="rgb(235,36,10)" fg:x="610" fg:w="44"/><text x="91.8416%" y="271.50">esp`esp::..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1 samples, 0.15%)</title><rect x="98.0480%" y="245" width="0.1502%" height="15" fill="rgb(251,123,47)" fg:x="653" fg:w="1"/><text x="98.2980%" y="255.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="98.7988%" y="245" width="0.1502%" height="15" fill="rgb(221,13,13)" fg:x="658" fg:w="1"/><text x="99.0488%" y="255.50"></text></g><g><title>esp`std::io::append_to_string (1 samples, 0.15%)</title><rect x="98.7988%" y="229" width="0.1502%" height="15" fill="rgb(238,131,9)" fg:x="658" fg:w="1"/><text x="99.0488%" y="239.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (8 samples, 1.20%)</title><rect x="98.1982%" y="261" width="1.2012%" height="15" fill="rgb(211,50,8)" fg:x="654" fg:w="8"/><text x="98.4482%" y="271.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (3 samples, 0.45%)</title><rect x="98.9489%" y="245" width="0.4505%" height="15" fill="rgb(245,182,24)" fg:x="659" fg:w="3"/><text x="99.1989%" y="255.50"></text></g><g><title>esp`main (663 samples, 99.55%)</title><rect x="0.0000%" y="373" width="99.5495%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="663"/><text x="0.2500%" y="383.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (663 samples, 99.55%)</title><rect x="0.0000%" y="357" width="99.5495%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="663"/><text x="0.2500%" y="367.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (663 samples, 99.55%)</title><rect x="0.0000%" y="341" width="99.5495%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="663"/><text x="0.2500%" y="351.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (663 samples, 99.55%)</title><rect x="0.0000%" y="325" width="99.5495%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="663"/><text x="0.2500%" y="335.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (663 samples, 99.55%)</title><rect x="0.0000%" y="309" width="99.5495%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="663"/><text x="0.2500%" y="319.50">esp`esp::main</text></g><g><title>esp`std::sync::once::Once::call_inner (53 samples, 7.96%)</title><rect x="91.5916%" y="293" width="7.9580%" height="15" fill="rgb(209,121,21)" fg:x="610" fg:w="53"/><text x="91.8416%" y="303.50">esp`std::sy..</text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (53 samples, 7.96%)</title><rect x="91.5916%" y="277" width="7.9580%" height="15" fill="rgb(220,109,13)" fg:x="610" fg:w="53"/><text x="91.8416%" y="287.50">esp`std::sy..</text></g><g><title>esp`esp::utils::read_input::read_input (1 samples, 0.15%)</title><rect x="99.3994%" y="261" width="0.1502%" height="15" fill="rgb(232,18,1)" fg:x="662" fg:w="1"/><text x="99.6494%" y="271.50"></text></g><g><title>esp`serde_json::de::from_reader (1 samples, 0.15%)</title><rect x="99.3994%" y="245" width="0.1502%" height="15" fill="rgb(215,41,42)" fg:x="662" fg:w="1"/><text x="99.6494%" y="255.50"></text></g><g><title>esp`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.15%)</title><rect x="99.3994%" y="229" width="0.1502%" height="15" fill="rgb(224,123,36)" fg:x="662" fg:w="1"/><text x="99.6494%" y="239.50"></text></g><g><title>esp`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="99.3994%" y="213" width="0.1502%" height="15" fill="rgb(240,125,3)" fg:x="662" fg:w="1"/><text x="99.6494%" y="223.50"></text></g><g><title>esp`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="99.3994%" y="197" width="0.1502%" height="15" fill="rgb(205,98,50)" fg:x="662" fg:w="1"/><text x="99.6494%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.15%)</title><rect x="99.3994%" y="181" width="0.1502%" height="15" fill="rgb(205,185,37)" fg:x="662" fg:w="1"/><text x="99.6494%" y="191.50"></text></g><g><title>all (666 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="666"/><text x="0.2500%" y="431.50"></text></g><g><title>0x1 (666 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="666"/><text x="0.2500%" y="415.50">0x1</text></g><g><title>libdyld.dylib`start (666 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="666"/><text x="0.2500%" y="399.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.45%)</title><rect x="99.5495%" y="373" width="0.4505%" height="15" fill="rgb(207,46,11)" fg:x="663" fg:w="3"/><text x="99.7995%" y="383.50"></text></g></svg></svg>