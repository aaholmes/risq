<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="123070"><g><title>esp`esp::stoch::alias::Alias::new (107 samples, 0.09%)</title><rect x="0.0488%" y="229" width="0.0869%" height="15" fill="rgb(227,0,7)" fg:x="60" fg:w="107"/><text x="0.2988%" y="239.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.04%)</title><rect x="1.5170%" y="213" width="0.0390%" height="15" fill="rgb(217,0,24)" fg:x="1867" fg:w="48"/><text x="1.7670%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (19 samples, 0.02%)</title><rect x="1.5593%" y="133" width="0.0154%" height="15" fill="rgb(221,193,54)" fg:x="1919" fg:w="19"/><text x="1.8093%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (19 samples, 0.02%)</title><rect x="1.5593%" y="117" width="0.0154%" height="15" fill="rgb(248,212,6)" fg:x="1919" fg:w="19"/><text x="1.8093%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (19 samples, 0.02%)</title><rect x="1.5593%" y="101" width="0.0154%" height="15" fill="rgb(208,68,35)" fg:x="1919" fg:w="19"/><text x="1.8093%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.02%)</title><rect x="1.5560%" y="213" width="0.0219%" height="15" fill="rgb(232,128,0)" fg:x="1915" fg:w="27"/><text x="1.8060%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (27 samples, 0.02%)</title><rect x="1.5560%" y="197" width="0.0219%" height="15" fill="rgb(207,160,47)" fg:x="1915" fg:w="27"/><text x="1.8060%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (27 samples, 0.02%)</title><rect x="1.5560%" y="181" width="0.0219%" height="15" fill="rgb(228,23,34)" fg:x="1915" fg:w="27"/><text x="1.8060%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.02%)</title><rect x="1.5560%" y="165" width="0.0219%" height="15" fill="rgb(218,30,26)" fg:x="1915" fg:w="27"/><text x="1.8060%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (27 samples, 0.02%)</title><rect x="1.5560%" y="149" width="0.0219%" height="15" fill="rgb(220,122,19)" fg:x="1915" fg:w="27"/><text x="1.8060%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (63 samples, 0.05%)</title><rect x="1.5780%" y="213" width="0.0512%" height="15" fill="rgb(250,228,42)" fg:x="1942" fg:w="63"/><text x="1.8280%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (382 samples, 0.31%)</title><rect x="1.6357%" y="213" width="0.3104%" height="15" fill="rgb(240,193,28)" fg:x="2013" fg:w="382"/><text x="1.8857%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (47 samples, 0.04%)</title><rect x="1.9079%" y="197" width="0.0382%" height="15" fill="rgb(216,20,37)" fg:x="2348" fg:w="47"/><text x="2.1579%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (717 samples, 0.58%)</title><rect x="1.9460%" y="213" width="0.5826%" height="15" fill="rgb(206,188,39)" fg:x="2395" fg:w="717"/><text x="2.1960%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (341 samples, 0.28%)</title><rect x="2.2516%" y="197" width="0.2771%" height="15" fill="rgb(217,207,13)" fg:x="2771" fg:w="341"/><text x="2.5016%" y="207.50"></text></g><g><title>esp`esp::stoch::alias::Alias::new (1,673 samples, 1.36%)</title><rect x="3.7718%" y="197" width="1.3594%" height="15" fill="rgb(231,73,38)" fg:x="4642" fg:w="1673"/><text x="4.0218%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (87 samples, 0.07%)</title><rect x="5.0605%" y="181" width="0.0707%" height="15" fill="rgb(225,20,46)" fg:x="6228" fg:w="87"/><text x="5.3105%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (87 samples, 0.07%)</title><rect x="5.0605%" y="165" width="0.0707%" height="15" fill="rgb(210,31,41)" fg:x="6228" fg:w="87"/><text x="5.3105%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (87 samples, 0.07%)</title><rect x="5.0605%" y="149" width="0.0707%" height="15" fill="rgb(221,200,47)" fg:x="6228" fg:w="87"/><text x="5.3105%" y="159.50"></text></g><g><title>esp`esp::stoch::generate_screened_sampler (3,292 samples, 2.67%)</title><rect x="2.5286%" y="213" width="2.6749%" height="15" fill="rgb(226,26,5)" fg:x="3112" fg:w="3292"/><text x="2.7786%" y="223.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (89 samples, 0.07%)</title><rect x="5.1312%" y="197" width="0.0723%" height="15" fill="rgb(249,33,26)" fg:x="6315" fg:w="89"/><text x="5.3812%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (89 samples, 0.07%)</title><rect x="5.1312%" y="181" width="0.0723%" height="15" fill="rgb(235,183,28)" fg:x="6315" fg:w="89"/><text x="5.3812%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (89 samples, 0.07%)</title><rect x="5.1312%" y="165" width="0.0723%" height="15" fill="rgb(221,5,38)" fg:x="6315" fg:w="89"/><text x="5.3812%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (15 samples, 0.01%)</title><rect x="5.7845%" y="197" width="0.0122%" height="15" fill="rgb(247,18,42)" fg:x="7119" fg:w="15"/><text x="6.0345%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (233 samples, 0.19%)</title><rect x="5.7967%" y="197" width="0.1893%" height="15" fill="rgb(241,131,45)" fg:x="7134" fg:w="233"/><text x="6.0467%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (224 samples, 0.18%)</title><rect x="5.8040%" y="181" width="0.1820%" height="15" fill="rgb(249,31,29)" fg:x="7143" fg:w="224"/><text x="6.0540%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (124 samples, 0.10%)</title><rect x="5.8853%" y="165" width="0.1008%" height="15" fill="rgb(225,111,53)" fg:x="7243" fg:w="124"/><text x="6.1353%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (685 samples, 0.56%)</title><rect x="5.9860%" y="197" width="0.5566%" height="15" fill="rgb(238,160,17)" fg:x="7367" fg:w="685"/><text x="6.2360%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (447 samples, 0.36%)</title><rect x="6.1794%" y="181" width="0.3632%" height="15" fill="rgb(214,148,48)" fg:x="7605" fg:w="447"/><text x="6.4294%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,268 samples, 1.03%)</title><rect x="6.5524%" y="197" width="1.0303%" height="15" fill="rgb(232,36,49)" fg:x="8064" fg:w="1268"/><text x="6.8024%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (116 samples, 0.09%)</title><rect x="7.4884%" y="181" width="0.0943%" height="15" fill="rgb(209,103,24)" fg:x="9216" fg:w="116"/><text x="7.7384%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (48 samples, 0.04%)</title><rect x="7.6257%" y="181" width="0.0390%" height="15" fill="rgb(229,88,8)" fg:x="9385" fg:w="48"/><text x="7.8757%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (66 samples, 0.05%)</title><rect x="7.8939%" y="149" width="0.0536%" height="15" fill="rgb(213,181,19)" fg:x="9715" fg:w="66"/><text x="8.1439%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (33 samples, 0.03%)</title><rect x="7.9207%" y="133" width="0.0268%" height="15" fill="rgb(254,191,54)" fg:x="9748" fg:w="33"/><text x="8.1707%" y="143.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (3,394 samples, 2.76%)</title><rect x="5.2035%" y="213" width="2.7578%" height="15" fill="rgb(241,83,37)" fg:x="6404" fg:w="3394"/><text x="5.4535%" y="223.50">es..</text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (466 samples, 0.38%)</title><rect x="7.5827%" y="197" width="0.3786%" height="15" fill="rgb(233,36,39)" fg:x="9332" fg:w="466"/><text x="7.8327%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (365 samples, 0.30%)</title><rect x="7.6647%" y="181" width="0.2966%" height="15" fill="rgb(226,3,54)" fg:x="9433" fg:w="365"/><text x="7.9147%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (258 samples, 0.21%)</title><rect x="7.7517%" y="165" width="0.2096%" height="15" fill="rgb(245,192,40)" fg:x="9540" fg:w="258"/><text x="8.0017%" y="175.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (1,036 samples, 0.84%)</title><rect x="7.9613%" y="213" width="0.8418%" height="15" fill="rgb(238,167,29)" fg:x="9798" fg:w="1036"/><text x="8.2113%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,815 samples, 3.10%)</title><rect x="8.8039%" y="213" width="3.0999%" height="15" fill="rgb(232,182,51)" fg:x="10835" fg:w="3815"/><text x="9.0539%" y="223.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (620 samples, 0.50%)</title><rect x="11.4000%" y="197" width="0.5038%" height="15" fill="rgb(231,60,39)" fg:x="14030" fg:w="620"/><text x="11.6500%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (840 samples, 0.68%)</title><rect x="11.9038%" y="213" width="0.6825%" height="15" fill="rgb(208,69,12)" fg:x="14650" fg:w="840"/><text x="12.1538%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (288 samples, 0.23%)</title><rect x="12.3523%" y="197" width="0.2340%" height="15" fill="rgb(235,93,37)" fg:x="15202" fg:w="288"/><text x="12.6023%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_semistoch_singles (15,324 samples, 12.45%)</title><rect x="0.1365%" y="229" width="12.4515%" height="15" fill="rgb(213,116,39)" fg:x="168" fg:w="15324"/><text x="0.3865%" y="239.50">esp`esp::wf::Wf::ap..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (35 samples, 0.03%)</title><rect x="12.5880%" y="229" width="0.0284%" height="15" fill="rgb(222,207,29)" fg:x="15492" fg:w="35"/><text x="12.8380%" y="239.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.02%)</title><rect x="12.6164%" y="229" width="0.0171%" height="15" fill="rgb(206,96,30)" fg:x="15527" fg:w="21"/><text x="12.8664%" y="239.50"></text></g><g><title>esp`esp::semistoch::faster_semistoch_enpt2 (15,770 samples, 12.81%)</title><rect x="0.0008%" y="245" width="12.8138%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="15770"/><text x="0.2508%" y="255.50">esp`esp::semistoch:..</text></g><g><title>libsystem_malloc.dylib`free_large (210 samples, 0.17%)</title><rect x="12.6440%" y="229" width="0.1706%" height="15" fill="rgb(250,191,14)" fg:x="15561" fg:w="210"/><text x="12.8940%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (210 samples, 0.17%)</title><rect x="12.6440%" y="213" width="0.1706%" height="15" fill="rgb(239,60,40)" fg:x="15561" fg:w="210"/><text x="12.8940%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (210 samples, 0.17%)</title><rect x="12.6440%" y="197" width="0.1706%" height="15" fill="rgb(206,27,48)" fg:x="15561" fg:w="210"/><text x="12.8940%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="13.0186%" y="197" width="0.0187%" height="15" fill="rgb(225,35,8)" fg:x="16022" fg:w="23"/><text x="13.2686%" y="207.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (25 samples, 0.02%)</title><rect x="15.2775%" y="181" width="0.0203%" height="15" fill="rgb(250,213,24)" fg:x="18802" fg:w="25"/><text x="15.5275%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="15.2775%" y="165" width="0.0203%" height="15" fill="rgb(247,123,22)" fg:x="18802" fg:w="25"/><text x="15.5275%" y="175.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (2,802 samples, 2.28%)</title><rect x="13.0373%" y="197" width="2.2768%" height="15" fill="rgb(231,138,38)" fg:x="16045" fg:w="2802"/><text x="13.2873%" y="207.50">e..</text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (20 samples, 0.02%)</title><rect x="15.2978%" y="181" width="0.0163%" height="15" fill="rgb(231,145,46)" fg:x="18827" fg:w="20"/><text x="15.5478%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 0.02%)</title><rect x="15.2978%" y="165" width="0.0163%" height="15" fill="rgb(251,118,11)" fg:x="18827" fg:w="20"/><text x="15.5478%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (26 samples, 0.02%)</title><rect x="15.4782%" y="149" width="0.0211%" height="15" fill="rgb(217,147,25)" fg:x="19049" fg:w="26"/><text x="15.7282%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (49 samples, 0.04%)</title><rect x="15.4993%" y="133" width="0.0398%" height="15" fill="rgb(247,81,37)" fg:x="19075" fg:w="49"/><text x="15.7493%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (87 samples, 0.07%)</title><rect x="15.4993%" y="149" width="0.0707%" height="15" fill="rgb(209,12,38)" fg:x="19075" fg:w="87"/><text x="15.7493%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (38 samples, 0.03%)</title><rect x="15.5391%" y="133" width="0.0309%" height="15" fill="rgb(227,1,9)" fg:x="19124" fg:w="38"/><text x="15.7891%" y="143.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (286 samples, 0.23%)</title><rect x="15.3384%" y="181" width="0.2324%" height="15" fill="rgb(248,47,43)" fg:x="18877" fg:w="286"/><text x="15.5884%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (114 samples, 0.09%)</title><rect x="15.4782%" y="165" width="0.0926%" height="15" fill="rgb(221,10,30)" fg:x="19049" fg:w="114"/><text x="15.7282%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (314 samples, 0.26%)</title><rect x="15.3214%" y="197" width="0.2551%" height="15" fill="rgb(210,229,1)" fg:x="18856" fg:w="314"/><text x="15.5714%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 0.03%)</title><rect x="15.5798%" y="181" width="0.0301%" height="15" fill="rgb(222,148,37)" fg:x="19174" fg:w="37"/><text x="15.8298%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.01%)</title><rect x="15.6131%" y="165" width="0.0106%" height="15" fill="rgb(234,67,33)" fg:x="19215" fg:w="13"/><text x="15.8631%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (19 samples, 0.02%)</title><rect x="15.6098%" y="181" width="0.0154%" height="15" fill="rgb(247,98,35)" fg:x="19211" fg:w="19"/><text x="15.8598%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (57 samples, 0.05%)</title><rect x="15.5798%" y="197" width="0.0463%" height="15" fill="rgb(247,138,52)" fg:x="19174" fg:w="57"/><text x="15.8298%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (117 samples, 0.10%)</title><rect x="15.6602%" y="181" width="0.0951%" height="15" fill="rgb(213,79,30)" fg:x="19273" fg:w="117"/><text x="15.9102%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (22 samples, 0.02%)</title><rect x="15.7553%" y="181" width="0.0179%" height="15" fill="rgb(246,177,23)" fg:x="19390" fg:w="22"/><text x="16.0053%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (180 samples, 0.15%)</title><rect x="15.6285%" y="197" width="0.1463%" height="15" fill="rgb(230,62,27)" fg:x="19234" fg:w="180"/><text x="15.8785%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (16 samples, 0.01%)</title><rect x="15.7748%" y="197" width="0.0130%" height="15" fill="rgb(216,154,8)" fg:x="19414" fg:w="16"/><text x="16.0248%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (48 samples, 0.04%)</title><rect x="15.7926%" y="197" width="0.0390%" height="15" fill="rgb(244,35,45)" fg:x="19436" fg:w="48"/><text x="16.0426%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (247 samples, 0.20%)</title><rect x="15.8316%" y="197" width="0.2007%" height="15" fill="rgb(251,115,12)" fg:x="19484" fg:w="247"/><text x="16.0816%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (247 samples, 0.20%)</title><rect x="15.8316%" y="181" width="0.2007%" height="15" fill="rgb(240,54,50)" fg:x="19484" fg:w="247"/><text x="16.0816%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (247 samples, 0.20%)</title><rect x="15.8316%" y="165" width="0.2007%" height="15" fill="rgb(233,84,52)" fg:x="19484" fg:w="247"/><text x="16.0816%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (3,930 samples, 3.19%)</title><rect x="12.8463%" y="213" width="3.1933%" height="15" fill="rgb(207,117,47)" fg:x="15810" fg:w="3930"/><text x="13.0963%" y="223.50">esp..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (27 samples, 0.02%)</title><rect x="16.0397%" y="213" width="0.0219%" height="15" fill="rgb(249,43,39)" fg:x="19740" fg:w="27"/><text x="16.2897%" y="223.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el_and_spin_flipped (20 samples, 0.02%)</title><rect x="16.0616%" y="213" width="0.0163%" height="15" fill="rgb(209,38,44)" fg:x="19767" fg:w="20"/><text x="16.3116%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (137 samples, 0.11%)</title><rect x="20.5135%" y="149" width="0.1113%" height="15" fill="rgb(236,212,23)" fg:x="25246" fg:w="137"/><text x="20.7635%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (44 samples, 0.04%)</title><rect x="20.5891%" y="133" width="0.0358%" height="15" fill="rgb(242,79,21)" fg:x="25339" fg:w="44"/><text x="20.8391%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (17 samples, 0.01%)</title><rect x="20.6110%" y="117" width="0.0138%" height="15" fill="rgb(211,96,35)" fg:x="25366" fg:w="17"/><text x="20.8610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (219 samples, 0.18%)</title><rect x="20.4965%" y="181" width="0.1779%" height="15" fill="rgb(253,215,40)" fg:x="25225" fg:w="219"/><text x="20.7465%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (205 samples, 0.17%)</title><rect x="20.5078%" y="165" width="0.1666%" height="15" fill="rgb(211,81,21)" fg:x="25239" fg:w="205"/><text x="20.7578%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (61 samples, 0.05%)</title><rect x="20.6248%" y="149" width="0.0496%" height="15" fill="rgb(208,190,38)" fg:x="25383" fg:w="61"/><text x="20.8748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (27 samples, 0.02%)</title><rect x="20.6525%" y="133" width="0.0219%" height="15" fill="rgb(235,213,38)" fg:x="25417" fg:w="27"/><text x="20.9025%" y="143.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,282 samples, 1.85%)</title><rect x="20.4843%" y="197" width="1.8542%" height="15" fill="rgb(237,122,38)" fg:x="25210" fg:w="2282"/><text x="20.7343%" y="207.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,040 samples, 1.66%)</title><rect x="20.6809%" y="181" width="1.6576%" height="15" fill="rgb(244,218,35)" fg:x="25452" fg:w="2040"/><text x="20.9309%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (16 samples, 0.01%)</title><rect x="24.5779%" y="101" width="0.0130%" height="15" fill="rgb(240,68,47)" fg:x="30248" fg:w="16"/><text x="24.8279%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (16 samples, 0.01%)</title><rect x="24.5779%" y="85" width="0.0130%" height="15" fill="rgb(210,16,53)" fg:x="30248" fg:w="16"/><text x="24.8279%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (36 samples, 0.03%)</title><rect x="24.5909%" y="101" width="0.0293%" height="15" fill="rgb(235,124,12)" fg:x="30264" fg:w="36"/><text x="24.8409%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (36 samples, 0.03%)</title><rect x="24.5909%" y="85" width="0.0293%" height="15" fill="rgb(224,169,11)" fg:x="30264" fg:w="36"/><text x="24.8409%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (36 samples, 0.03%)</title><rect x="24.5909%" y="69" width="0.0293%" height="15" fill="rgb(250,166,2)" fg:x="30264" fg:w="36"/><text x="24.8409%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (70 samples, 0.06%)</title><rect x="24.5771%" y="181" width="0.0569%" height="15" fill="rgb(242,216,29)" fg:x="30247" fg:w="70"/><text x="24.8271%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (70 samples, 0.06%)</title><rect x="24.5771%" y="165" width="0.0569%" height="15" fill="rgb(230,116,27)" fg:x="30247" fg:w="70"/><text x="24.8271%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (70 samples, 0.06%)</title><rect x="24.5771%" y="149" width="0.0569%" height="15" fill="rgb(228,99,48)" fg:x="30247" fg:w="70"/><text x="24.8271%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (70 samples, 0.06%)</title><rect x="24.5771%" y="133" width="0.0569%" height="15" fill="rgb(253,11,6)" fg:x="30247" fg:w="70"/><text x="24.8271%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (70 samples, 0.06%)</title><rect x="24.5771%" y="117" width="0.0569%" height="15" fill="rgb(247,143,39)" fg:x="30247" fg:w="70"/><text x="24.8271%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.01%)</title><rect x="24.6234%" y="101" width="0.0106%" height="15" fill="rgb(236,97,10)" fg:x="30304" fg:w="13"/><text x="24.8734%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (48 samples, 0.04%)</title><rect x="24.6372%" y="181" width="0.0390%" height="15" fill="rgb(233,208,19)" fg:x="30321" fg:w="48"/><text x="24.8872%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (21 samples, 0.02%)</title><rect x="24.6591%" y="165" width="0.0171%" height="15" fill="rgb(216,164,2)" fg:x="30348" fg:w="21"/><text x="24.9091%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (18 samples, 0.01%)</title><rect x="24.6616%" y="149" width="0.0146%" height="15" fill="rgb(220,129,5)" fg:x="30351" fg:w="18"/><text x="24.9116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (23 samples, 0.02%)</title><rect x="24.7201%" y="165" width="0.0187%" height="15" fill="rgb(242,17,10)" fg:x="30423" fg:w="23"/><text x="24.9701%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (26 samples, 0.02%)</title><rect x="24.7493%" y="165" width="0.0211%" height="15" fill="rgb(242,107,0)" fg:x="30459" fg:w="26"/><text x="24.9993%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (106 samples, 0.09%)</title><rect x="24.7705%" y="165" width="0.0861%" height="15" fill="rgb(251,28,31)" fg:x="30485" fg:w="106"/><text x="25.0205%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (106 samples, 0.09%)</title><rect x="24.7705%" y="149" width="0.0861%" height="15" fill="rgb(233,223,10)" fg:x="30485" fg:w="106"/><text x="25.0205%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.01%)</title><rect x="24.8590%" y="149" width="0.0146%" height="15" fill="rgb(215,21,27)" fg:x="30594" fg:w="18"/><text x="25.1090%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (244 samples, 0.20%)</title><rect x="24.6762%" y="181" width="0.1983%" height="15" fill="rgb(232,23,21)" fg:x="30369" fg:w="244"/><text x="24.9262%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (22 samples, 0.02%)</title><rect x="24.8566%" y="165" width="0.0179%" height="15" fill="rgb(244,5,23)" fg:x="30591" fg:w="22"/><text x="25.1066%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (14 samples, 0.01%)</title><rect x="24.9021%" y="149" width="0.0114%" height="15" fill="rgb(226,81,46)" fg:x="30647" fg:w="14"/><text x="25.1521%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.01%)</title><rect x="24.9143%" y="133" width="0.0146%" height="15" fill="rgb(247,70,30)" fg:x="30662" fg:w="18"/><text x="25.1643%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (69 samples, 0.06%)</title><rect x="24.8745%" y="181" width="0.0561%" height="15" fill="rgb(212,68,19)" fg:x="30613" fg:w="69"/><text x="25.1245%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (68 samples, 0.06%)</title><rect x="24.8753%" y="165" width="0.0553%" height="15" fill="rgb(240,187,13)" fg:x="30614" fg:w="68"/><text x="25.1253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (21 samples, 0.02%)</title><rect x="24.9135%" y="149" width="0.0171%" height="15" fill="rgb(223,113,26)" fg:x="30661" fg:w="21"/><text x="25.1635%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (119 samples, 0.10%)</title><rect x="24.9305%" y="181" width="0.0967%" height="15" fill="rgb(206,192,2)" fg:x="30682" fg:w="119"/><text x="25.1805%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (119 samples, 0.10%)</title><rect x="24.9305%" y="165" width="0.0967%" height="15" fill="rgb(241,108,4)" fg:x="30682" fg:w="119"/><text x="25.1805%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,316 samples, 2.69%)</title><rect x="22.3385%" y="197" width="2.6944%" height="15" fill="rgb(247,173,49)" fg:x="27492" fg:w="3316"/><text x="22.5885%" y="207.50">es..</text></g><g><title>esp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="25.0329%" y="197" width="0.0228%" height="15" fill="rgb(224,114,35)" fg:x="30808" fg:w="28"/><text x="25.2829%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (171 samples, 0.14%)</title><rect x="25.1483%" y="165" width="0.1389%" height="15" fill="rgb(245,159,27)" fg:x="30950" fg:w="171"/><text x="25.3983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (152 samples, 0.12%)</title><rect x="25.1637%" y="149" width="0.1235%" height="15" fill="rgb(245,172,44)" fg:x="30969" fg:w="152"/><text x="25.4137%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (247 samples, 0.20%)</title><rect x="25.0922%" y="181" width="0.2007%" height="15" fill="rgb(236,23,11)" fg:x="30881" fg:w="247"/><text x="25.3422%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (13 samples, 0.01%)</title><rect x="25.2929%" y="181" width="0.0106%" height="15" fill="rgb(205,117,38)" fg:x="31128" fg:w="13"/><text x="25.5429%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (13 samples, 0.01%)</title><rect x="25.2929%" y="165" width="0.0106%" height="15" fill="rgb(237,72,25)" fg:x="31128" fg:w="13"/><text x="25.5429%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (13 samples, 0.01%)</title><rect x="25.2929%" y="149" width="0.0106%" height="15" fill="rgb(244,70,9)" fg:x="31128" fg:w="13"/><text x="25.5429%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.02%)</title><rect x="25.3165%" y="149" width="0.0203%" height="15" fill="rgb(217,125,39)" fg:x="31157" fg:w="25"/><text x="25.5665%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (42 samples, 0.03%)</title><rect x="25.3035%" y="181" width="0.0341%" height="15" fill="rgb(235,36,10)" fg:x="31141" fg:w="42"/><text x="25.5535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (30 samples, 0.02%)</title><rect x="25.3132%" y="165" width="0.0244%" height="15" fill="rgb(251,123,47)" fg:x="31153" fg:w="30"/><text x="25.5632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (217 samples, 0.18%)</title><rect x="25.8373%" y="149" width="0.1763%" height="15" fill="rgb(221,13,13)" fg:x="31798" fg:w="217"/><text x="26.0873%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (131 samples, 0.11%)</title><rect x="26.0137%" y="149" width="0.1064%" height="15" fill="rgb(238,131,9)" fg:x="32015" fg:w="131"/><text x="26.2637%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (966 samples, 0.78%)</title><rect x="25.3376%" y="181" width="0.7849%" height="15" fill="rgb(211,50,8)" fg:x="31183" fg:w="966"/><text x="25.5876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (715 samples, 0.58%)</title><rect x="25.5416%" y="165" width="0.5810%" height="15" fill="rgb(245,182,24)" fg:x="31434" fg:w="715"/><text x="25.7916%" y="175.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,327 samples, 1.08%)</title><rect x="25.0557%" y="197" width="1.0782%" height="15" fill="rgb(242,14,37)" fg:x="30836" fg:w="1327"/><text x="25.3057%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (89 samples, 0.07%)</title><rect x="26.1339%" y="197" width="0.0723%" height="15" fill="rgb(246,228,12)" fg:x="32163" fg:w="89"/><text x="26.3839%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (17 samples, 0.01%)</title><rect x="26.3232%" y="133" width="0.0138%" height="15" fill="rgb(213,55,15)" fg:x="32396" fg:w="17"/><text x="26.5732%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (37 samples, 0.03%)</title><rect x="26.4792%" y="85" width="0.0301%" height="15" fill="rgb(209,9,3)" fg:x="32588" fg:w="37"/><text x="26.7292%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (188 samples, 0.15%)</title><rect x="26.3614%" y="117" width="0.1528%" height="15" fill="rgb(230,59,30)" fg:x="32443" fg:w="188"/><text x="26.6114%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (77 samples, 0.06%)</title><rect x="26.4516%" y="101" width="0.0626%" height="15" fill="rgb(209,121,21)" fg:x="32554" fg:w="77"/><text x="26.7016%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (22 samples, 0.02%)</title><rect x="26.6653%" y="85" width="0.0179%" height="15" fill="rgb(220,109,13)" fg:x="32817" fg:w="22"/><text x="26.9153%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (285 samples, 0.23%)</title><rect x="26.5207%" y="117" width="0.2316%" height="15" fill="rgb(232,18,1)" fg:x="32639" fg:w="285"/><text x="26.7707%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (265 samples, 0.22%)</title><rect x="26.5369%" y="101" width="0.2153%" height="15" fill="rgb(215,41,42)" fg:x="32659" fg:w="265"/><text x="26.7869%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (84 samples, 0.07%)</title><rect x="26.6840%" y="85" width="0.0683%" height="15" fill="rgb(224,123,36)" fg:x="32840" fg:w="84"/><text x="26.9340%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.02%)</title><rect x="26.7368%" y="69" width="0.0154%" height="15" fill="rgb(240,125,3)" fg:x="32905" fg:w="19"/><text x="26.9868%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (43 samples, 0.03%)</title><rect x="26.7523%" y="117" width="0.0349%" height="15" fill="rgb(205,98,50)" fg:x="32924" fg:w="43"/><text x="27.0023%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.03%)</title><rect x="26.7571%" y="101" width="0.0301%" height="15" fill="rgb(205,185,37)" fg:x="32930" fg:w="37"/><text x="27.0071%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (111 samples, 0.09%)</title><rect x="26.7896%" y="117" width="0.0902%" height="15" fill="rgb(238,207,15)" fg:x="32970" fg:w="111"/><text x="27.0396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (715 samples, 0.58%)</title><rect x="26.3411%" y="133" width="0.5810%" height="15" fill="rgb(213,199,42)" fg:x="32418" fg:w="715"/><text x="26.5911%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (52 samples, 0.04%)</title><rect x="26.8798%" y="117" width="0.0423%" height="15" fill="rgb(235,201,11)" fg:x="33081" fg:w="52"/><text x="27.1298%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (769 samples, 0.62%)</title><rect x="26.3029%" y="149" width="0.6248%" height="15" fill="rgb(207,46,11)" fg:x="32371" fg:w="769"/><text x="26.5529%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (62 samples, 0.05%)</title><rect x="26.9302%" y="149" width="0.0504%" height="15" fill="rgb(241,35,35)" fg:x="33143" fg:w="62"/><text x="27.1802%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (56 samples, 0.05%)</title><rect x="26.9351%" y="133" width="0.0455%" height="15" fill="rgb(243,32,47)" fg:x="33149" fg:w="56"/><text x="27.1851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (865 samples, 0.70%)</title><rect x="26.2802%" y="165" width="0.7029%" height="15" fill="rgb(247,202,23)" fg:x="32343" fg:w="865"/><text x="26.5302%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (899 samples, 0.73%)</title><rect x="26.2574%" y="181" width="0.7305%" height="15" fill="rgb(219,102,11)" fg:x="32315" fg:w="899"/><text x="26.5074%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (939 samples, 0.76%)</title><rect x="26.2274%" y="197" width="0.7630%" height="15" fill="rgb(243,110,44)" fg:x="32278" fg:w="939"/><text x="26.4774%" y="207.50"></text></g><g><title>esp`alloc::vec::from_elem (13 samples, 0.01%)</title><rect x="26.9936%" y="197" width="0.0106%" height="15" fill="rgb(222,74,54)" fg:x="33221" fg:w="13"/><text x="27.2436%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.01%)</title><rect x="27.0318%" y="181" width="0.0106%" height="15" fill="rgb(216,99,12)" fg:x="33268" fg:w="13"/><text x="27.2818%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (165 samples, 0.13%)</title><rect x="27.0610%" y="165" width="0.1341%" height="15" fill="rgb(226,22,26)" fg:x="33304" fg:w="165"/><text x="27.3110%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (228 samples, 0.19%)</title><rect x="27.0423%" y="181" width="0.1853%" height="15" fill="rgb(217,163,10)" fg:x="33281" fg:w="228"/><text x="27.2923%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (40 samples, 0.03%)</title><rect x="27.1951%" y="165" width="0.0325%" height="15" fill="rgb(213,25,53)" fg:x="33469" fg:w="40"/><text x="27.4451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.03%)</title><rect x="27.1992%" y="149" width="0.0284%" height="15" fill="rgb(252,105,26)" fg:x="33474" fg:w="35"/><text x="27.4492%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (276 samples, 0.22%)</title><rect x="27.2276%" y="181" width="0.2243%" height="15" fill="rgb(220,39,43)" fg:x="33509" fg:w="276"/><text x="27.4776%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (276 samples, 0.22%)</title><rect x="27.2276%" y="165" width="0.2243%" height="15" fill="rgb(229,68,48)" fg:x="33509" fg:w="276"/><text x="27.4776%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (276 samples, 0.22%)</title><rect x="27.2276%" y="149" width="0.2243%" height="15" fill="rgb(252,8,32)" fg:x="33509" fg:w="276"/><text x="27.4776%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (106 samples, 0.09%)</title><rect x="27.5453%" y="165" width="0.0861%" height="15" fill="rgb(223,20,43)" fg:x="33900" fg:w="106"/><text x="27.7953%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (97 samples, 0.08%)</title><rect x="27.5526%" y="149" width="0.0788%" height="15" fill="rgb(229,81,49)" fg:x="33909" fg:w="97"/><text x="27.8026%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (101 samples, 0.08%)</title><rect x="27.6314%" y="165" width="0.0821%" height="15" fill="rgb(236,28,36)" fg:x="34006" fg:w="101"/><text x="27.8814%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (15 samples, 0.01%)</title><rect x="27.7135%" y="165" width="0.0122%" height="15" fill="rgb(249,185,26)" fg:x="34107" fg:w="15"/><text x="27.9635%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (532 samples, 0.43%)</title><rect x="27.7338%" y="165" width="0.4323%" height="15" fill="rgb(249,174,33)" fg:x="34132" fg:w="532"/><text x="27.9838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (16 samples, 0.01%)</title><rect x="28.1661%" y="165" width="0.0130%" height="15" fill="rgb(233,201,37)" fg:x="34664" fg:w="16"/><text x="28.4161%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (267 samples, 0.22%)</title><rect x="28.1880%" y="149" width="0.2169%" height="15" fill="rgb(221,78,26)" fg:x="34691" fg:w="267"/><text x="28.4380%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (279 samples, 0.23%)</title><rect x="28.1791%" y="165" width="0.2267%" height="15" fill="rgb(250,127,30)" fg:x="34680" fg:w="279"/><text x="28.4291%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,837 samples, 1.49%)</title><rect x="28.4692%" y="149" width="1.4926%" height="15" fill="rgb(230,49,44)" fg:x="35037" fg:w="1837"/><text x="28.7192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (57 samples, 0.05%)</title><rect x="29.9618%" y="149" width="0.0463%" height="15" fill="rgb(229,67,23)" fg:x="36874" fg:w="57"/><text x="30.2118%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,159 samples, 2.57%)</title><rect x="27.4519%" y="181" width="2.5668%" height="15" fill="rgb(249,83,47)" fg:x="33785" fg:w="3159"/><text x="27.7019%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,985 samples, 1.61%)</title><rect x="28.4058%" y="165" width="1.6129%" height="15" fill="rgb(215,43,3)" fg:x="34959" fg:w="1985"/><text x="28.6558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.01%)</title><rect x="30.0081%" y="149" width="0.0106%" height="15" fill="rgb(238,154,13)" fg:x="36931" fg:w="13"/><text x="30.2581%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.01%)</title><rect x="30.0366%" y="133" width="0.0138%" height="15" fill="rgb(219,56,2)" fg:x="36966" fg:w="17"/><text x="30.2866%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.03%)</title><rect x="30.0187%" y="181" width="0.0333%" height="15" fill="rgb(233,0,4)" fg:x="36944" fg:w="41"/><text x="30.2687%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (40 samples, 0.03%)</title><rect x="30.0195%" y="165" width="0.0325%" height="15" fill="rgb(235,30,7)" fg:x="36945" fg:w="40"/><text x="30.2695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (19 samples, 0.02%)</title><rect x="30.0366%" y="149" width="0.0154%" height="15" fill="rgb(250,79,13)" fg:x="36966" fg:w="19"/><text x="30.2866%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (154 samples, 0.13%)</title><rect x="30.0520%" y="181" width="0.1251%" height="15" fill="rgb(211,146,34)" fg:x="36985" fg:w="154"/><text x="30.3020%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (154 samples, 0.13%)</title><rect x="30.0520%" y="165" width="0.1251%" height="15" fill="rgb(228,22,38)" fg:x="36985" fg:w="154"/><text x="30.3020%" y="175.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (3,918 samples, 3.18%)</title><rect x="27.0041%" y="197" width="3.1836%" height="15" fill="rgb(235,168,5)" fg:x="33234" fg:w="3918"/><text x="27.2541%" y="207.50">esp..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (33 samples, 0.03%)</title><rect x="30.1877%" y="197" width="0.0268%" height="15" fill="rgb(221,155,16)" fg:x="37152" fg:w="33"/><text x="30.4377%" y="207.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (611 samples, 0.50%)</title><rect x="41.4016%" y="181" width="0.4965%" height="15" fill="rgb(215,215,53)" fg:x="50953" fg:w="611"/><text x="41.6516%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (226 samples, 0.18%)</title><rect x="41.8981%" y="181" width="0.1836%" height="15" fill="rgb(223,4,10)" fg:x="51564" fg:w="226"/><text x="42.1481%" y="191.50"></text></g><g><title>esp`__rdl_realloc (16 samples, 0.01%)</title><rect x="42.1687%" y="149" width="0.0130%" height="15" fill="rgb(234,103,6)" fg:x="51897" fg:w="16"/><text x="42.4187%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (122 samples, 0.10%)</title><rect x="42.1914%" y="133" width="0.0991%" height="15" fill="rgb(227,97,0)" fg:x="51925" fg:w="122"/><text x="42.4414%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (116 samples, 0.09%)</title><rect x="42.1963%" y="117" width="0.0943%" height="15" fill="rgb(234,150,53)" fg:x="51931" fg:w="116"/><text x="42.4463%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (30 samples, 0.02%)</title><rect x="42.2662%" y="101" width="0.0244%" height="15" fill="rgb(228,201,54)" fg:x="52017" fg:w="30"/><text x="42.5162%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (135 samples, 0.11%)</title><rect x="42.1817%" y="149" width="0.1097%" height="15" fill="rgb(222,22,37)" fg:x="51913" fg:w="135"/><text x="42.4317%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (52 samples, 0.04%)</title><rect x="42.4393%" y="117" width="0.0423%" height="15" fill="rgb(237,53,32)" fg:x="52230" fg:w="52"/><text x="42.6893%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.01%)</title><rect x="42.4896%" y="117" width="0.0130%" height="15" fill="rgb(233,25,53)" fg:x="52292" fg:w="16"/><text x="42.7396%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (22 samples, 0.02%)</title><rect x="42.6408%" y="85" width="0.0179%" height="15" fill="rgb(210,40,34)" fg:x="52478" fg:w="22"/><text x="42.8908%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (147 samples, 0.12%)</title><rect x="42.5595%" y="101" width="0.1194%" height="15" fill="rgb(241,220,44)" fg:x="52378" fg:w="147"/><text x="42.8095%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (24 samples, 0.02%)</title><rect x="42.6595%" y="85" width="0.0195%" height="15" fill="rgb(235,28,35)" fg:x="52501" fg:w="24"/><text x="42.9095%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (48 samples, 0.04%)</title><rect x="43.1836%" y="69" width="0.0390%" height="15" fill="rgb(210,56,17)" fg:x="53146" fg:w="48"/><text x="43.4336%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (30 samples, 0.02%)</title><rect x="43.1982%" y="53" width="0.0244%" height="15" fill="rgb(224,130,29)" fg:x="53164" fg:w="30"/><text x="43.4482%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (383 samples, 0.31%)</title><rect x="43.2226%" y="69" width="0.3112%" height="15" fill="rgb(235,212,8)" fg:x="53194" fg:w="383"/><text x="43.4726%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (191 samples, 0.16%)</title><rect x="43.5338%" y="69" width="0.1552%" height="15" fill="rgb(223,33,50)" fg:x="53577" fg:w="191"/><text x="43.7838%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (24 samples, 0.02%)</title><rect x="43.6890%" y="69" width="0.0195%" height="15" fill="rgb(219,149,13)" fg:x="53768" fg:w="24"/><text x="43.9390%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (28 samples, 0.02%)</title><rect x="43.7085%" y="69" width="0.0228%" height="15" fill="rgb(250,156,29)" fg:x="53792" fg:w="28"/><text x="43.9585%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.01%)</title><rect x="43.7190%" y="53" width="0.0122%" height="15" fill="rgb(216,193,19)" fg:x="53805" fg:w="15"/><text x="43.9690%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (193 samples, 0.16%)</title><rect x="43.7410%" y="53" width="0.1568%" height="15" fill="rgb(216,135,14)" fg:x="53832" fg:w="193"/><text x="43.9910%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,247 samples, 1.01%)</title><rect x="42.8927%" y="85" width="1.0132%" height="15" fill="rgb(241,47,5)" fg:x="52788" fg:w="1247"/><text x="43.1427%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (215 samples, 0.17%)</title><rect x="43.7312%" y="69" width="0.1747%" height="15" fill="rgb(233,42,35)" fg:x="53820" fg:w="215"/><text x="43.9812%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,511 samples, 1.23%)</title><rect x="42.6790%" y="101" width="1.2278%" height="15" fill="rgb(231,13,6)" fg:x="52525" fg:w="1511"/><text x="42.9290%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (44 samples, 0.04%)</title><rect x="43.9165%" y="101" width="0.0358%" height="15" fill="rgb(207,181,40)" fg:x="54048" fg:w="44"/><text x="44.1665%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.01%)</title><rect x="43.9417%" y="85" width="0.0106%" height="15" fill="rgb(254,173,49)" fg:x="54079" fg:w="13"/><text x="44.1917%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (190 samples, 0.15%)</title><rect x="44.1740%" y="53" width="0.1544%" height="15" fill="rgb(221,1,38)" fg:x="54365" fg:w="190"/><text x="44.4240%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (41 samples, 0.03%)</title><rect x="44.3284%" y="53" width="0.0333%" height="15" fill="rgb(206,124,46)" fg:x="54555" fg:w="41"/><text x="44.5784%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (545 samples, 0.44%)</title><rect x="43.9807%" y="85" width="0.4428%" height="15" fill="rgb(249,21,11)" fg:x="54127" fg:w="545"/><text x="44.2307%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (373 samples, 0.30%)</title><rect x="44.1204%" y="69" width="0.3031%" height="15" fill="rgb(222,201,40)" fg:x="54299" fg:w="373"/><text x="44.3704%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (76 samples, 0.06%)</title><rect x="44.3617%" y="53" width="0.0618%" height="15" fill="rgb(235,61,29)" fg:x="54596" fg:w="76"/><text x="44.6117%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (99 samples, 0.08%)</title><rect x="44.6624%" y="69" width="0.0804%" height="15" fill="rgb(219,207,3)" fg:x="54966" fg:w="99"/><text x="44.9124%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (13 samples, 0.01%)</title><rect x="44.7428%" y="69" width="0.0106%" height="15" fill="rgb(222,56,46)" fg:x="55065" fg:w="13"/><text x="44.9928%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,254 samples, 1.02%)</title><rect x="43.9522%" y="101" width="1.0189%" height="15" fill="rgb(239,76,54)" fg:x="54092" fg:w="1254"/><text x="44.2022%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (672 samples, 0.55%)</title><rect x="44.4251%" y="85" width="0.5460%" height="15" fill="rgb(231,124,27)" fg:x="54674" fg:w="672"/><text x="44.6751%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (260 samples, 0.21%)</title><rect x="44.7599%" y="69" width="0.2113%" height="15" fill="rgb(249,195,6)" fg:x="55086" fg:w="260"/><text x="45.0099%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.02%)</title><rect x="44.9525%" y="53" width="0.0187%" height="15" fill="rgb(237,174,47)" fg:x="55323" fg:w="23"/><text x="45.2025%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (112 samples, 0.09%)</title><rect x="44.9712%" y="101" width="0.0910%" height="15" fill="rgb(206,201,31)" fg:x="55346" fg:w="112"/><text x="45.2212%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (89 samples, 0.07%)</title><rect x="44.9898%" y="85" width="0.0723%" height="15" fill="rgb(231,57,52)" fg:x="55369" fg:w="89"/><text x="45.2398%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (260 samples, 0.21%)</title><rect x="45.0687%" y="101" width="0.2113%" height="15" fill="rgb(248,177,22)" fg:x="55466" fg:w="260"/><text x="45.3187%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (45 samples, 0.04%)</title><rect x="45.2434%" y="85" width="0.0366%" height="15" fill="rgb(215,211,37)" fg:x="55681" fg:w="45"/><text x="45.4934%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4,701 samples, 3.82%)</title><rect x="42.5026%" y="117" width="3.8198%" height="15" fill="rgb(241,128,51)" fg:x="52308" fg:w="4701"/><text x="42.7526%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,283 samples, 1.04%)</title><rect x="45.2799%" y="101" width="1.0425%" height="15" fill="rgb(227,165,31)" fg:x="55726" fg:w="1283"/><text x="45.5299%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (14 samples, 0.01%)</title><rect x="46.3249%" y="117" width="0.0114%" height="15" fill="rgb(228,167,24)" fg:x="57012" fg:w="14"/><text x="46.5749%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4,886 samples, 3.97%)</title><rect x="42.3840%" y="133" width="3.9701%" height="15" fill="rgb(228,143,12)" fg:x="52162" fg:w="4886"/><text x="42.6340%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`small_size (71 samples, 0.06%)</title><rect x="46.3541%" y="133" width="0.0577%" height="15" fill="rgb(249,149,8)" fg:x="57048" fg:w="71"/><text x="46.6041%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (352 samples, 0.29%)</title><rect x="46.4142%" y="133" width="0.2860%" height="15" fill="rgb(243,35,44)" fg:x="57122" fg:w="352"/><text x="46.6642%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (331 samples, 0.27%)</title><rect x="46.4313%" y="117" width="0.2690%" height="15" fill="rgb(246,89,9)" fg:x="57143" fg:w="331"/><text x="46.6813%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5,425 samples, 4.41%)</title><rect x="42.2987%" y="149" width="4.4081%" height="15" fill="rgb(233,213,13)" fg:x="52057" fg:w="5425"/><text x="42.5487%" y="159.50">libsy..</text></g><g><title>esp`alloc::raw_vec::finish_grow (5,657 samples, 4.60%)</title><rect x="42.1419%" y="165" width="4.5966%" height="15" fill="rgb(233,141,41)" fg:x="51864" fg:w="5657"/><text x="42.3919%" y="175.50">esp`a..</text></g><g><title>libsystem_malloc.dylib`szone_size (36 samples, 0.03%)</title><rect x="46.7092%" y="149" width="0.0293%" height="15" fill="rgb(239,167,4)" fg:x="57485" fg:w="36"/><text x="46.9592%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5,751 samples, 4.67%)</title><rect x="42.0817%" y="181" width="4.6730%" height="15" fill="rgb(209,217,16)" fg:x="51790" fg:w="5751"/><text x="42.3317%" y="191.50">esp`a..</text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.02%)</title><rect x="46.7393%" y="165" width="0.0154%" height="15" fill="rgb(219,88,35)" fg:x="57522" fg:w="19"/><text x="46.9893%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (60 samples, 0.05%)</title><rect x="46.7588%" y="181" width="0.0488%" height="15" fill="rgb(220,193,23)" fg:x="57546" fg:w="60"/><text x="47.0088%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (5,657 samples, 4.60%)</title><rect x="46.8075%" y="181" width="4.5966%" height="15" fill="rgb(230,90,52)" fg:x="57606" fg:w="5657"/><text x="47.0575%" y="191.50">esp`e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (4,619 samples, 3.75%)</title><rect x="47.6509%" y="165" width="3.7531%" height="15" fill="rgb(252,106,19)" fg:x="58644" fg:w="4619"/><text x="47.9009%" y="175.50">esp`..</text></g><g><title>esp`esp::ham::Ham::ham_sing (355 samples, 0.29%)</title><rect x="51.4041%" y="181" width="0.2885%" height="15" fill="rgb(206,74,20)" fg:x="63263" fg:w="355"/><text x="51.6541%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (156 samples, 0.13%)</title><rect x="51.5658%" y="165" width="0.1268%" height="15" fill="rgb(230,138,44)" fg:x="63462" fg:w="156"/><text x="51.8158%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (821 samples, 0.67%)</title><rect x="52.8130%" y="165" width="0.6671%" height="15" fill="rgb(235,182,43)" fg:x="64997" fg:w="821"/><text x="53.0630%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (38 samples, 0.03%)</title><rect x="56.8993%" y="149" width="0.0309%" height="15" fill="rgb(242,16,51)" fg:x="70026" fg:w="38"/><text x="57.1493%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (118 samples, 0.10%)</title><rect x="58.8600%" y="133" width="0.0959%" height="15" fill="rgb(248,9,4)" fg:x="72439" fg:w="118"/><text x="59.1100%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (1,855 samples, 1.51%)</title><rect x="58.9559%" y="133" width="1.5073%" height="15" fill="rgb(210,31,22)" fg:x="72557" fg:w="1855"/><text x="59.2059%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (840 samples, 0.68%)</title><rect x="59.7806%" y="117" width="0.6825%" height="15" fill="rgb(239,54,39)" fg:x="73572" fg:w="840"/><text x="60.0306%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (125 samples, 0.10%)</title><rect x="60.4632%" y="133" width="0.1016%" height="15" fill="rgb(230,99,41)" fg:x="74412" fg:w="125"/><text x="60.7132%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (124 samples, 0.10%)</title><rect x="60.4640%" y="117" width="0.1008%" height="15" fill="rgb(253,106,12)" fg:x="74413" fg:w="124"/><text x="60.7140%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (49 samples, 0.04%)</title><rect x="60.5647%" y="133" width="0.0398%" height="15" fill="rgb(213,46,41)" fg:x="74537" fg:w="49"/><text x="60.8147%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,088 samples, 9.01%)</title><rect x="51.6925%" y="181" width="9.0095%" height="15" fill="rgb(215,133,35)" fg:x="63618" fg:w="11088"/><text x="51.9425%" y="191.50">esp`hashbrown..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (8,888 samples, 7.22%)</title><rect x="53.4801%" y="165" width="7.2219%" height="15" fill="rgb(213,28,5)" fg:x="65818" fg:w="8888"/><text x="53.7301%" y="175.50">esp`hashbr..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4,642 samples, 3.77%)</title><rect x="56.9302%" y="149" width="3.7718%" height="15" fill="rgb(215,77,49)" fg:x="70064" fg:w="4642"/><text x="57.1802%" y="159.50">esp`..</text></g><g><title>libsystem_malloc.dylib`free_large (120 samples, 0.10%)</title><rect x="60.6045%" y="133" width="0.0975%" height="15" fill="rgb(248,100,22)" fg:x="74586" fg:w="120"/><text x="60.8545%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (120 samples, 0.10%)</title><rect x="60.6045%" y="117" width="0.0975%" height="15" fill="rgb(208,67,9)" fg:x="74586" fg:w="120"/><text x="60.8545%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (120 samples, 0.10%)</title><rect x="60.6045%" y="101" width="0.0975%" height="15" fill="rgb(219,133,21)" fg:x="74586" fg:w="120"/><text x="60.8545%" y="111.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,290 samples, 1.86%)</title><rect x="60.7020%" y="181" width="1.8607%" height="15" fill="rgb(246,46,29)" fg:x="74706" fg:w="2290"/><text x="60.9520%" y="191.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,013 samples, 0.82%)</title><rect x="61.7397%" y="165" width="0.8231%" height="15" fill="rgb(246,185,52)" fg:x="75983" fg:w="1013"/><text x="61.9897%" y="175.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (39,861 samples, 32.39%)</title><rect x="30.2153%" y="197" width="32.3889%" height="15" fill="rgb(252,136,11)" fg:x="37186" fg:w="39861"/><text x="30.4653%" y="207.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (51 samples, 0.04%)</title><rect x="62.5628%" y="181" width="0.0414%" height="15" fill="rgb(219,138,53)" fg:x="76996" fg:w="51"/><text x="62.8128%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="65.1280%" y="181" width="0.0187%" height="15" fill="rgb(211,51,23)" fg:x="80153" fg:w="23"/><text x="65.3780%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (92 samples, 0.07%)</title><rect x="65.1475%" y="181" width="0.0748%" height="15" fill="rgb(247,221,28)" fg:x="80177" fg:w="92"/><text x="65.3975%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (16 samples, 0.01%)</title><rect x="65.2222%" y="181" width="0.0130%" height="15" fill="rgb(251,222,45)" fg:x="80269" fg:w="16"/><text x="65.4722%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (18 samples, 0.01%)</title><rect x="65.2352%" y="181" width="0.0146%" height="15" fill="rgb(217,162,53)" fg:x="80285" fg:w="18"/><text x="65.4852%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (590 samples, 0.48%)</title><rect x="75.3457%" y="165" width="0.4794%" height="15" fill="rgb(229,93,14)" fg:x="92728" fg:w="590"/><text x="75.5957%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (194 samples, 0.16%)</title><rect x="75.8251%" y="165" width="0.1576%" height="15" fill="rgb(209,67,49)" fg:x="93318" fg:w="194"/><text x="76.0751%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (20 samples, 0.02%)</title><rect x="76.0827%" y="69" width="0.0163%" height="15" fill="rgb(213,87,29)" fg:x="93635" fg:w="20"/><text x="76.3327%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (106 samples, 0.09%)</title><rect x="76.0299%" y="85" width="0.0861%" height="15" fill="rgb(205,151,52)" fg:x="93570" fg:w="106"/><text x="76.2799%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (19 samples, 0.02%)</title><rect x="76.1006%" y="69" width="0.0154%" height="15" fill="rgb(253,215,39)" fg:x="93657" fg:w="19"/><text x="76.3506%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (62 samples, 0.05%)</title><rect x="76.1518%" y="37" width="0.0504%" height="15" fill="rgb(221,220,41)" fg:x="93720" fg:w="62"/><text x="76.4018%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (111 samples, 0.09%)</title><rect x="76.1160%" y="85" width="0.0902%" height="15" fill="rgb(218,133,21)" fg:x="93676" fg:w="111"/><text x="76.3660%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (107 samples, 0.09%)</title><rect x="76.1193%" y="69" width="0.0869%" height="15" fill="rgb(221,193,43)" fg:x="93680" fg:w="107"/><text x="76.3693%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (68 samples, 0.06%)</title><rect x="76.1510%" y="53" width="0.0553%" height="15" fill="rgb(240,128,52)" fg:x="93719" fg:w="68"/><text x="76.4010%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (35 samples, 0.03%)</title><rect x="76.2111%" y="85" width="0.0284%" height="15" fill="rgb(253,114,12)" fg:x="93793" fg:w="35"/><text x="76.4611%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (32 samples, 0.03%)</title><rect x="76.3045%" y="37" width="0.0260%" height="15" fill="rgb(215,223,47)" fg:x="93908" fg:w="32"/><text x="76.5545%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (141 samples, 0.11%)</title><rect x="76.2436%" y="69" width="0.1146%" height="15" fill="rgb(248,225,23)" fg:x="93833" fg:w="141"/><text x="76.4936%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (102 samples, 0.08%)</title><rect x="76.2753%" y="53" width="0.0829%" height="15" fill="rgb(250,108,0)" fg:x="93872" fg:w="102"/><text x="76.5253%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (34 samples, 0.03%)</title><rect x="76.3305%" y="37" width="0.0276%" height="15" fill="rgb(228,208,7)" fg:x="93940" fg:w="34"/><text x="76.5805%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (149 samples, 0.12%)</title><rect x="76.2395%" y="85" width="0.1211%" height="15" fill="rgb(244,45,10)" fg:x="93828" fg:w="149"/><text x="76.4895%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1,198 samples, 0.97%)</title><rect x="76.0202%" y="101" width="0.9734%" height="15" fill="rgb(207,125,25)" fg:x="93558" fg:w="1198"/><text x="76.2702%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (772 samples, 0.63%)</title><rect x="76.3663%" y="85" width="0.6273%" height="15" fill="rgb(210,195,18)" fg:x="93984" fg:w="772"/><text x="76.6163%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,213 samples, 0.99%)</title><rect x="76.0096%" y="117" width="0.9856%" height="15" fill="rgb(249,80,12)" fg:x="93545" fg:w="1213"/><text x="76.2596%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (55 samples, 0.04%)</title><rect x="76.9952%" y="117" width="0.0447%" height="15" fill="rgb(221,65,9)" fg:x="94758" fg:w="55"/><text x="77.2452%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (31 samples, 0.03%)</title><rect x="77.0399%" y="117" width="0.0252%" height="15" fill="rgb(235,49,36)" fg:x="94813" fg:w="31"/><text x="77.2899%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (31 samples, 0.03%)</title><rect x="77.0399%" y="101" width="0.0252%" height="15" fill="rgb(225,32,20)" fg:x="94813" fg:w="31"/><text x="77.2899%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,325 samples, 1.08%)</title><rect x="75.9901%" y="133" width="1.0766%" height="15" fill="rgb(215,141,46)" fg:x="93521" fg:w="1325"/><text x="76.2401%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (1,331 samples, 1.08%)</title><rect x="75.9885%" y="149" width="1.0815%" height="15" fill="rgb(250,160,47)" fg:x="93519" fg:w="1331"/><text x="76.2385%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,346 samples, 1.09%)</title><rect x="75.9828%" y="165" width="1.0937%" height="15" fill="rgb(216,222,40)" fg:x="93512" fg:w="1346"/><text x="76.2328%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (21 samples, 0.02%)</title><rect x="77.0765%" y="165" width="0.0171%" height="15" fill="rgb(234,217,39)" fg:x="94858" fg:w="21"/><text x="77.3265%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (2,145 samples, 1.74%)</title><rect x="77.0935%" y="165" width="1.7429%" height="15" fill="rgb(207,178,40)" fg:x="94879" fg:w="2145"/><text x="77.3435%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,003 samples, 0.81%)</title><rect x="78.0215%" y="149" width="0.8150%" height="15" fill="rgb(221,136,13)" fg:x="96021" fg:w="1003"/><text x="78.2715%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (550 samples, 0.45%)</title><rect x="78.8364%" y="165" width="0.4469%" height="15" fill="rgb(249,199,10)" fg:x="97024" fg:w="550"/><text x="79.0864%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (468 samples, 0.38%)</title><rect x="79.2833%" y="165" width="0.3803%" height="15" fill="rgb(249,222,13)" fg:x="97574" fg:w="468"/><text x="79.5333%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (281 samples, 0.23%)</title><rect x="79.4353%" y="149" width="0.2283%" height="15" fill="rgb(244,185,38)" fg:x="97761" fg:w="281"/><text x="79.6853%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (321 samples, 0.26%)</title><rect x="80.0382%" y="149" width="0.2608%" height="15" fill="rgb(236,202,9)" fg:x="98503" fg:w="321"/><text x="80.2882%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (19 samples, 0.02%)</title><rect x="82.2971%" y="133" width="0.0154%" height="15" fill="rgb(250,229,37)" fg:x="101283" fg:w="19"/><text x="82.5471%" y="143.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (84 samples, 0.07%)</title><rect x="83.5841%" y="117" width="0.0683%" height="15" fill="rgb(206,174,23)" fg:x="102867" fg:w="84"/><text x="83.8341%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (1,392 samples, 1.13%)</title><rect x="83.6524%" y="117" width="1.1311%" height="15" fill="rgb(211,33,43)" fg:x="102951" fg:w="1392"/><text x="83.9024%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (605 samples, 0.49%)</title><rect x="84.2919%" y="101" width="0.4916%" height="15" fill="rgb(245,58,50)" fg:x="103738" fg:w="605"/><text x="84.5419%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (82 samples, 0.07%)</title><rect x="84.7835%" y="117" width="0.0666%" height="15" fill="rgb(244,68,36)" fg:x="104343" fg:w="82"/><text x="85.0335%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (82 samples, 0.07%)</title><rect x="84.7835%" y="101" width="0.0666%" height="15" fill="rgb(232,229,15)" fg:x="104343" fg:w="82"/><text x="85.0335%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,522 samples, 5.30%)</title><rect x="79.6636%" y="165" width="5.2994%" height="15" fill="rgb(254,30,23)" fg:x="98042" fg:w="6522"/><text x="79.9136%" y="175.50">esp`ha..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (5,740 samples, 4.66%)</title><rect x="80.2990%" y="149" width="4.6640%" height="15" fill="rgb(235,160,14)" fg:x="98824" fg:w="5740"/><text x="80.5490%" y="159.50">esp`h..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,262 samples, 2.65%)</title><rect x="82.3125%" y="133" width="2.6505%" height="15" fill="rgb(212,155,44)" fg:x="101302" fg:w="3262"/><text x="82.5625%" y="143.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (136 samples, 0.11%)</title><rect x="84.8525%" y="117" width="0.1105%" height="15" fill="rgb(226,2,50)" fg:x="104428" fg:w="136"/><text x="85.1025%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (136 samples, 0.11%)</title><rect x="84.8525%" y="101" width="0.1105%" height="15" fill="rgb(234,177,6)" fg:x="104428" fg:w="136"/><text x="85.1025%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (136 samples, 0.11%)</title><rect x="84.8525%" y="85" width="0.1105%" height="15" fill="rgb(217,24,9)" fg:x="104428" fg:w="136"/><text x="85.1025%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,098 samples, 1.70%)</title><rect x="84.9630%" y="165" width="1.7047%" height="15" fill="rgb(220,13,46)" fg:x="104564" fg:w="2098"/><text x="85.2130%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (912 samples, 0.74%)</title><rect x="85.9267%" y="149" width="0.7410%" height="15" fill="rgb(239,221,27)" fg:x="105750" fg:w="912"/><text x="86.1767%" y="159.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (26,370 samples, 21.43%)</title><rect x="65.2523%" y="181" width="21.4268%" height="15" fill="rgb(222,198,25)" fg:x="80306" fg:w="26370"/><text x="65.5023%" y="191.50">esp`esp::var::ham_gen::OffDiagElem..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.01%)</title><rect x="86.6678%" y="165" width="0.0114%" height="15" fill="rgb(211,99,13)" fg:x="106662" fg:w="14"/><text x="86.9178%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.01%)</title><rect x="86.6791%" y="181" width="0.0114%" height="15" fill="rgb(232,111,31)" fg:x="106676" fg:w="14"/><text x="86.9291%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el_and_spin_flipped (32,034 samples, 26.03%)</title><rect x="62.6042%" y="197" width="26.0291%" height="15" fill="rgb(245,82,37)" fg:x="77047" fg:w="32034"/><text x="62.8542%" y="207.50">esp`esp::var::ham_gen::OffDiagElems::add_e..</text></g><g><title>esp`hashbrown::map::make_hash (2,391 samples, 1.94%)</title><rect x="86.6905%" y="181" width="1.9428%" height="15" fill="rgb(227,149,46)" fg:x="106690" fg:w="2391"/><text x="86.9405%" y="191.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,407 samples, 1.14%)</title><rect x="87.4900%" y="165" width="1.1433%" height="15" fill="rgb(218,36,50)" fg:x="107674" fg:w="1407"/><text x="87.7400%" y="175.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (67 samples, 0.05%)</title><rect x="88.8348%" y="181" width="0.0544%" height="15" fill="rgb(226,80,48)" fg:x="109329" fg:w="67"/><text x="89.0848%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (283 samples, 0.23%)</title><rect x="89.1753%" y="149" width="0.2300%" height="15" fill="rgb(238,224,15)" fg:x="109748" fg:w="283"/><text x="89.4253%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (106 samples, 0.09%)</title><rect x="89.3191%" y="133" width="0.0861%" height="15" fill="rgb(241,136,10)" fg:x="109925" fg:w="106"/><text x="89.5691%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (32 samples, 0.03%)</title><rect x="89.4117%" y="101" width="0.0260%" height="15" fill="rgb(208,32,45)" fg:x="110039" fg:w="32"/><text x="89.6617%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.01%)</title><rect x="89.4239%" y="85" width="0.0138%" height="15" fill="rgb(207,135,9)" fg:x="110054" fg:w="17"/><text x="89.6739%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (63 samples, 0.05%)</title><rect x="89.4068%" y="133" width="0.0512%" height="15" fill="rgb(206,86,44)" fg:x="110033" fg:w="63"/><text x="89.6568%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (61 samples, 0.05%)</title><rect x="89.4085%" y="117" width="0.0496%" height="15" fill="rgb(245,177,15)" fg:x="110035" fg:w="61"/><text x="89.6585%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.02%)</title><rect x="89.4377%" y="101" width="0.0203%" height="15" fill="rgb(206,64,50)" fg:x="110071" fg:w="25"/><text x="89.6877%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (168 samples, 0.14%)</title><rect x="89.4052%" y="149" width="0.1365%" height="15" fill="rgb(234,36,40)" fg:x="110031" fg:w="168"/><text x="89.6552%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (103 samples, 0.08%)</title><rect x="89.4580%" y="133" width="0.0837%" height="15" fill="rgb(213,64,8)" fg:x="110096" fg:w="103"/><text x="89.7080%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.01%)</title><rect x="89.5523%" y="149" width="0.0106%" height="15" fill="rgb(210,75,36)" fg:x="110212" fg:w="13"/><text x="89.8023%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (739 samples, 0.60%)</title><rect x="88.9713%" y="165" width="0.6005%" height="15" fill="rgb(229,88,21)" fg:x="109497" fg:w="739"/><text x="89.2213%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (843 samples, 0.68%)</title><rect x="88.8893%" y="181" width="0.6850%" height="15" fill="rgb(252,204,47)" fg:x="109396" fg:w="843"/><text x="89.1393%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,161 samples, 0.94%)</title><rect x="88.6333%" y="197" width="0.9434%" height="15" fill="rgb(208,77,27)" fg:x="109081" fg:w="1161"/><text x="88.8833%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,419 samples, 1.97%)</title><rect x="89.5767%" y="197" width="1.9655%" height="15" fill="rgb(221,76,26)" fg:x="110242" fg:w="2419"/><text x="89.8267%" y="207.50">e..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (974 samples, 0.79%)</title><rect x="90.7508%" y="181" width="0.7914%" height="15" fill="rgb(225,139,18)" fg:x="111687" fg:w="974"/><text x="91.0008%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (243 samples, 0.20%)</title><rect x="91.5617%" y="181" width="0.1974%" height="15" fill="rgb(230,137,11)" fg:x="112685" fg:w="243"/><text x="91.8117%" y="191.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (7,139 samples, 5.80%)</title><rect x="91.5479%" y="197" width="5.8008%" height="15" fill="rgb(212,28,1)" fg:x="112668" fg:w="7139"/><text x="91.7979%" y="207.50">esp`spr..</text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (6,879 samples, 5.59%)</title><rect x="91.7592%" y="181" width="5.5895%" height="15" fill="rgb(248,164,17)" fg:x="112928" fg:w="6879"/><text x="92.0092%" y="191.50">esp`spr..</text></g><g><title>esp`core::slice::sort::recurse (5,212 samples, 4.23%)</title><rect x="93.1137%" y="165" width="4.2350%" height="15" fill="rgb(222,171,42)" fg:x="114595" fg:w="5212"/><text x="93.3637%" y="175.50">esp`c..</text></g><g><title>esp`core::slice::sort::recurse (3,847 samples, 3.13%)</title><rect x="94.2228%" y="149" width="3.1259%" height="15" fill="rgb(243,84,45)" fg:x="115960" fg:w="3847"/><text x="94.4728%" y="159.50">esp..</text></g><g><title>esp`core::slice::sort::recurse (1,859 samples, 1.51%)</title><rect x="95.8381%" y="133" width="1.5105%" height="15" fill="rgb(252,49,23)" fg:x="117948" fg:w="1859"/><text x="96.0881%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (439 samples, 0.36%)</title><rect x="96.9920%" y="117" width="0.3567%" height="15" fill="rgb(215,19,7)" fg:x="119368" fg:w="439"/><text x="97.2420%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (46 samples, 0.04%)</title><rect x="97.3113%" y="101" width="0.0374%" height="15" fill="rgb(238,81,41)" fg:x="119761" fg:w="46"/><text x="97.5613%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.02%)</title><rect x="97.3495%" y="197" width="0.0195%" height="15" fill="rgb(210,199,37)" fg:x="119808" fg:w="24"/><text x="97.5995%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (707 samples, 0.57%)</title><rect x="97.4064%" y="181" width="0.5745%" height="15" fill="rgb(244,192,49)" fg:x="119878" fg:w="707"/><text x="97.6564%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (671 samples, 0.55%)</title><rect x="97.4356%" y="165" width="0.5452%" height="15" fill="rgb(226,211,11)" fg:x="119914" fg:w="671"/><text x="97.6856%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (231 samples, 0.19%)</title><rect x="97.7931%" y="149" width="0.1877%" height="15" fill="rgb(236,162,54)" fg:x="120354" fg:w="231"/><text x="98.0431%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (47 samples, 0.04%)</title><rect x="97.9426%" y="133" width="0.0382%" height="15" fill="rgb(220,229,9)" fg:x="120538" fg:w="47"/><text x="98.1926%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (756 samples, 0.61%)</title><rect x="97.3690%" y="197" width="0.6143%" height="15" fill="rgb(250,87,22)" fg:x="119832" fg:w="756"/><text x="97.6190%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (37 samples, 0.03%)</title><rect x="97.9946%" y="197" width="0.0301%" height="15" fill="rgb(239,43,17)" fg:x="120602" fg:w="37"/><text x="98.2446%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (14 samples, 0.01%)</title><rect x="98.0410%" y="197" width="0.0114%" height="15" fill="rgb(231,177,25)" fg:x="120659" fg:w="14"/><text x="98.2910%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (100,899 samples, 81.99%)</title><rect x="16.0778%" y="213" width="81.9850%" height="15" fill="rgb(219,179,1)" fg:x="19787" fg:w="100899"/><text x="16.3278%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (42 samples, 0.03%)</title><rect x="98.0629%" y="213" width="0.0341%" height="15" fill="rgb(238,219,53)" fg:x="120686" fg:w="42"/><text x="98.3129%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (104,983 samples, 85.30%)</title><rect x="12.8147%" y="229" width="85.3035%" height="15" fill="rgb(232,167,36)" fg:x="15771" fg:w="104983"/><text x="13.0647%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.01%)</title><rect x="98.3530%" y="213" width="0.0138%" height="15" fill="rgb(244,19,51)" fg:x="121043" fg:w="17"/><text x="98.6030%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (277 samples, 0.23%)</title><rect x="98.3863%" y="213" width="0.2251%" height="15" fill="rgb(224,6,22)" fg:x="121084" fg:w="277"/><text x="98.6363%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (136 samples, 0.11%)</title><rect x="98.5009%" y="197" width="0.1105%" height="15" fill="rgb(224,145,5)" fg:x="121225" fg:w="136"/><text x="98.7509%" y="207.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (87 samples, 0.07%)</title><rect x="98.6114%" y="213" width="0.0707%" height="15" fill="rgb(234,130,49)" fg:x="121361" fg:w="87"/><text x="98.8614%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (72 samples, 0.06%)</title><rect x="98.6821%" y="213" width="0.0585%" height="15" fill="rgb(254,6,2)" fg:x="121448" fg:w="72"/><text x="98.9321%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (45 samples, 0.04%)</title><rect x="98.7040%" y="197" width="0.0366%" height="15" fill="rgb(208,96,46)" fg:x="121475" fg:w="45"/><text x="98.9540%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (27 samples, 0.02%)</title><rect x="98.7406%" y="213" width="0.0219%" height="15" fill="rgb(239,3,39)" fg:x="121520" fg:w="27"/><text x="98.9906%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (19 samples, 0.02%)</title><rect x="98.7471%" y="197" width="0.0154%" height="15" fill="rgb(233,210,1)" fg:x="121528" fg:w="19"/><text x="98.9971%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (766 samples, 0.62%)</title><rect x="98.7633%" y="213" width="0.6224%" height="15" fill="rgb(244,137,37)" fg:x="121548" fg:w="766"/><text x="99.0133%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (120 samples, 0.10%)</title><rect x="99.2882%" y="197" width="0.0975%" height="15" fill="rgb(240,136,2)" fg:x="122194" fg:w="120"/><text x="99.5382%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (463 samples, 0.38%)</title><rect x="99.3865%" y="213" width="0.3762%" height="15" fill="rgb(239,18,37)" fg:x="122315" fg:w="463"/><text x="99.6365%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (168 samples, 0.14%)</title><rect x="99.6262%" y="197" width="0.1365%" height="15" fill="rgb(218,185,22)" fg:x="122610" fg:w="168"/><text x="99.8762%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (24 samples, 0.02%)</title><rect x="99.8156%" y="165" width="0.0195%" height="15" fill="rgb(225,218,4)" fg:x="122843" fg:w="24"/><text x="100.0656%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (13 samples, 0.01%)</title><rect x="99.8245%" y="149" width="0.0106%" height="15" fill="rgb(230,182,32)" fg:x="122854" fg:w="13"/><text x="100.0745%" y="159.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (93 samples, 0.08%)</title><rect x="99.7627%" y="213" width="0.0756%" height="15" fill="rgb(242,56,43)" fg:x="122778" fg:w="93"/><text x="100.0127%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (71 samples, 0.06%)</title><rect x="99.7806%" y="197" width="0.0577%" height="15" fill="rgb(233,99,24)" fg:x="122800" fg:w="71"/><text x="100.0306%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (63 samples, 0.05%)</title><rect x="99.7871%" y="181" width="0.0512%" height="15" fill="rgb(234,209,42)" fg:x="122808" fg:w="63"/><text x="100.0371%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (2,122 samples, 1.72%)</title><rect x="98.1181%" y="229" width="1.7242%" height="15" fill="rgb(227,7,12)" fg:x="120754" fg:w="2122"/><text x="98.3681%" y="239.50"></text></g><g><title>esp`esp::var::variational (107,117 samples, 87.04%)</title><rect x="12.8147%" y="245" width="87.0375%" height="15" fill="rgb(245,203,43)" fg:x="15771" fg:w="107117"/><text x="13.0647%" y="255.50">esp`esp::var::variational</text></g><g><title>esp`alloc::slice::merge_sort (20 samples, 0.02%)</title><rect x="99.8749%" y="197" width="0.0163%" height="15" fill="rgb(238,205,33)" fg:x="122916" fg:w="20"/><text x="100.1249%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (49 samples, 0.04%)</title><rect x="99.8529%" y="213" width="0.0398%" height="15" fill="rgb(231,56,7)" fg:x="122889" fg:w="49"/><text x="100.1029%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (57 samples, 0.05%)</title><rect x="99.8529%" y="245" width="0.0463%" height="15" fill="rgb(244,186,29)" fg:x="122889" fg:w="57"/><text x="100.1029%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (57 samples, 0.05%)</title><rect x="99.8529%" y="229" width="0.0463%" height="15" fill="rgb(234,111,31)" fg:x="122889" fg:w="57"/><text x="100.1029%" y="239.50"></text></g><g><title>esp`main (122,950 samples, 99.90%)</title><rect x="0.0000%" y="325" width="99.9025%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="122950"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (122,950 samples, 99.90%)</title><rect x="0.0000%" y="309" width="99.9025%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="122950"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (122,949 samples, 99.90%)</title><rect x="0.0008%" y="293" width="99.9017%" height="15" fill="rgb(251,153,30)" fg:x="1" fg:w="122949"/><text x="0.2508%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (122,949 samples, 99.90%)</title><rect x="0.0008%" y="277" width="99.9017%" height="15" fill="rgb(239,152,38)" fg:x="1" fg:w="122949"/><text x="0.2508%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (122,949 samples, 99.90%)</title><rect x="0.0008%" y="261" width="99.9017%" height="15" fill="rgb(249,139,47)" fg:x="1" fg:w="122949"/><text x="0.2508%" y="271.50">esp`esp::main</text></g><g><title>all (123,070 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="123070"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (123,070 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="123070"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (123,070 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="123070"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (120 samples, 0.10%)</title><rect x="99.9025%" y="325" width="0.0975%" height="15" fill="rgb(249,42,33)" fg:x="122950" fg:w="120"/><text x="100.1525%" y="335.50"></text></g></svg></svg>