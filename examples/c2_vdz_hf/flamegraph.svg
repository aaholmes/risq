<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="552762"><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (59 samples, 0.01%)</title><rect x="1.3111%" y="165" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="7247" fg:w="59"/><text x="1.5611%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (59 samples, 0.01%)</title><rect x="1.3111%" y="149" width="0.0107%" height="15" fill="rgb(217,0,24)" fg:x="7247" fg:w="59"/><text x="1.5611%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (6,652 samples, 1.20%)</title><rect x="0.1284%" y="181" width="1.2034%" height="15" fill="rgb(221,193,54)" fg:x="710" fg:w="6652"/><text x="0.3784%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (160 samples, 0.03%)</title><rect x="1.4125%" y="133" width="0.0289%" height="15" fill="rgb(248,212,6)" fg:x="7808" fg:w="160"/><text x="1.6625%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (293 samples, 0.05%)</title><rect x="1.4422%" y="117" width="0.0530%" height="15" fill="rgb(208,68,35)" fg:x="7972" fg:w="293"/><text x="1.6922%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (910 samples, 0.16%)</title><rect x="1.3501%" y="165" width="0.1646%" height="15" fill="rgb(232,128,0)" fg:x="7463" fg:w="910"/><text x="1.6001%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (567 samples, 0.10%)</title><rect x="1.4122%" y="149" width="0.1026%" height="15" fill="rgb(207,160,47)" fg:x="7806" fg:w="567"/><text x="1.6622%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (405 samples, 0.07%)</title><rect x="1.4415%" y="133" width="0.0733%" height="15" fill="rgb(228,23,34)" fg:x="7968" fg:w="405"/><text x="1.6915%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (108 samples, 0.02%)</title><rect x="1.4952%" y="117" width="0.0195%" height="15" fill="rgb(218,30,26)" fg:x="8265" fg:w="108"/><text x="1.7452%" y="127.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (1,017 samples, 0.18%)</title><rect x="1.3366%" y="181" width="0.1840%" height="15" fill="rgb(220,122,19)" fg:x="7388" fg:w="1017"/><text x="1.5866%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (472 samples, 0.09%)</title><rect x="1.5509%" y="165" width="0.0854%" height="15" fill="rgb(250,228,42)" fg:x="8573" fg:w="472"/><text x="1.8009%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (76 samples, 0.01%)</title><rect x="1.6363%" y="165" width="0.0137%" height="15" fill="rgb(240,193,28)" fg:x="9045" fg:w="76"/><text x="1.8863%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (668 samples, 0.12%)</title><rect x="1.5298%" y="181" width="0.1208%" height="15" fill="rgb(216,20,37)" fg:x="8456" fg:w="668"/><text x="1.7798%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (102 samples, 0.02%)</title><rect x="1.6506%" y="181" width="0.0185%" height="15" fill="rgb(206,188,39)" fg:x="9124" fg:w="102"/><text x="1.9006%" y="191.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (68 samples, 0.01%)</title><rect x="1.6568%" y="165" width="0.0123%" height="15" fill="rgb(217,207,13)" fg:x="9158" fg:w="68"/><text x="1.9068%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,D,nalgebra::base::dimension::Const&lt;1_usize&gt;,S&gt;&gt;::gemv (67 samples, 0.01%)</title><rect x="1.6691%" y="181" width="0.0121%" height="15" fill="rgb(231,73,38)" fg:x="9226" fg:w="67"/><text x="1.9191%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (134 samples, 0.02%)</title><rect x="1.6843%" y="181" width="0.0242%" height="15" fill="rgb(225,20,46)" fg:x="9310" fg:w="134"/><text x="1.9343%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (301 samples, 0.05%)</title><rect x="1.7091%" y="181" width="0.0545%" height="15" fill="rgb(210,31,41)" fg:x="9447" fg:w="301"/><text x="1.9591%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (301 samples, 0.05%)</title><rect x="1.7091%" y="165" width="0.0545%" height="15" fill="rgb(221,200,47)" fg:x="9447" fg:w="301"/><text x="1.9591%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (301 samples, 0.05%)</title><rect x="1.7091%" y="149" width="0.0545%" height="15" fill="rgb(226,26,5)" fg:x="9447" fg:w="301"/><text x="1.9591%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (9,805 samples, 1.77%)</title><rect x="0.0013%" y="197" width="1.7738%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="9805"/><text x="0.2513%" y="207.50">e..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (1,543 samples, 0.28%)</title><rect x="1.7751%" y="197" width="0.2791%" height="15" fill="rgb(235,183,28)" fg:x="9812" fg:w="1543"/><text x="2.0251%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (158 samples, 0.03%)</title><rect x="4.1334%" y="133" width="0.0286%" height="15" fill="rgb(221,5,38)" fg:x="22848" fg:w="158"/><text x="4.3834%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (59 samples, 0.01%)</title><rect x="4.1513%" y="117" width="0.0107%" height="15" fill="rgb(247,18,42)" fg:x="22947" fg:w="59"/><text x="4.4013%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (214 samples, 0.04%)</title><rect x="4.1322%" y="149" width="0.0387%" height="15" fill="rgb(241,131,45)" fg:x="22841" fg:w="214"/><text x="4.3822%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (228 samples, 0.04%)</title><rect x="4.1298%" y="165" width="0.0412%" height="15" fill="rgb(249,31,29)" fg:x="22828" fg:w="228"/><text x="4.3798%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,504 samples, 0.45%)</title><rect x="4.1255%" y="181" width="0.4530%" height="15" fill="rgb(225,111,53)" fg:x="22804" fg:w="2504"/><text x="4.3755%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,245 samples, 0.41%)</title><rect x="4.1723%" y="165" width="0.4061%" height="15" fill="rgb(238,160,17)" fg:x="23063" fg:w="2245"/><text x="4.4223%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (77 samples, 0.01%)</title><rect x="5.1760%" y="165" width="0.0139%" height="15" fill="rgb(214,148,48)" fg:x="28611" fg:w="77"/><text x="5.4260%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (77 samples, 0.01%)</title><rect x="5.1760%" y="149" width="0.0139%" height="15" fill="rgb(232,36,49)" fg:x="28611" fg:w="77"/><text x="5.4260%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (77 samples, 0.01%)</title><rect x="5.1760%" y="133" width="0.0139%" height="15" fill="rgb(209,103,24)" fg:x="28611" fg:w="77"/><text x="5.4260%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (77 samples, 0.01%)</title><rect x="5.1760%" y="117" width="0.0139%" height="15" fill="rgb(229,88,8)" fg:x="28611" fg:w="77"/><text x="5.4260%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (78 samples, 0.01%)</title><rect x="5.1901%" y="165" width="0.0141%" height="15" fill="rgb(213,181,19)" fg:x="28689" fg:w="78"/><text x="5.4401%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (172 samples, 0.03%)</title><rect x="5.2042%" y="165" width="0.0311%" height="15" fill="rgb(254,191,54)" fg:x="28767" fg:w="172"/><text x="5.4542%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (97 samples, 0.02%)</title><rect x="5.2353%" y="165" width="0.0175%" height="15" fill="rgb(241,83,37)" fg:x="28939" fg:w="97"/><text x="5.4853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (87 samples, 0.02%)</title><rect x="5.2372%" y="149" width="0.0157%" height="15" fill="rgb(233,36,39)" fg:x="28949" fg:w="87"/><text x="5.4872%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,767 samples, 0.68%)</title><rect x="4.5785%" y="181" width="0.6815%" height="15" fill="rgb(226,3,54)" fg:x="25308" fg:w="3767"/><text x="4.8285%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.02%)</title><rect x="5.2599%" y="181" width="0.0163%" height="15" fill="rgb(245,192,40)" fg:x="29075" fg:w="90"/><text x="5.5099%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (58 samples, 0.01%)</title><rect x="5.2762%" y="181" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="29165" fg:w="58"/><text x="5.5262%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (91 samples, 0.02%)</title><rect x="5.2999%" y="133" width="0.0165%" height="15" fill="rgb(232,182,51)" fg:x="29296" fg:w="91"/><text x="5.5499%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (86 samples, 0.02%)</title><rect x="5.3008%" y="117" width="0.0156%" height="15" fill="rgb(231,60,39)" fg:x="29301" fg:w="86"/><text x="5.5508%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (153 samples, 0.03%)</title><rect x="5.2903%" y="181" width="0.0277%" height="15" fill="rgb(208,69,12)" fg:x="29243" fg:w="153"/><text x="5.5403%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (109 samples, 0.02%)</title><rect x="5.2983%" y="165" width="0.0197%" height="15" fill="rgb(235,93,37)" fg:x="29287" fg:w="109"/><text x="5.5483%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (103 samples, 0.02%)</title><rect x="5.2994%" y="149" width="0.0186%" height="15" fill="rgb(213,116,39)" fg:x="29293" fg:w="103"/><text x="5.5494%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (207 samples, 0.04%)</title><rect x="5.3202%" y="181" width="0.0374%" height="15" fill="rgb(222,207,29)" fg:x="29408" fg:w="207"/><text x="5.5702%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (152 samples, 0.03%)</title><rect x="5.3721%" y="149" width="0.0275%" height="15" fill="rgb(206,96,30)" fg:x="29695" fg:w="152"/><text x="5.6221%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (218 samples, 0.04%)</title><rect x="5.3661%" y="165" width="0.0394%" height="15" fill="rgb(218,138,4)" fg:x="29662" fg:w="218"/><text x="5.6161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (221 samples, 0.04%)</title><rect x="5.4056%" y="165" width="0.0400%" height="15" fill="rgb(250,191,14)" fg:x="29880" fg:w="221"/><text x="5.6556%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (221 samples, 0.04%)</title><rect x="5.4056%" y="149" width="0.0400%" height="15" fill="rgb(239,60,40)" fg:x="29880" fg:w="221"/><text x="5.6556%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (221 samples, 0.04%)</title><rect x="5.4056%" y="133" width="0.0400%" height="15" fill="rgb(206,27,48)" fg:x="29880" fg:w="221"/><text x="5.6556%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (93 samples, 0.02%)</title><rect x="5.4665%" y="149" width="0.0168%" height="15" fill="rgb(225,35,8)" fg:x="30217" fg:w="93"/><text x="5.7165%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (89 samples, 0.02%)</title><rect x="5.4673%" y="133" width="0.0161%" height="15" fill="rgb(250,213,24)" fg:x="30221" fg:w="89"/><text x="5.7173%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (214 samples, 0.04%)</title><rect x="5.4834%" y="149" width="0.0387%" height="15" fill="rgb(247,123,22)" fg:x="30310" fg:w="214"/><text x="5.7334%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (440 samples, 0.08%)</title><rect x="5.5228%" y="149" width="0.0796%" height="15" fill="rgb(231,138,38)" fg:x="30528" fg:w="440"/><text x="5.7728%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (271 samples, 0.05%)</title><rect x="5.6064%" y="133" width="0.0490%" height="15" fill="rgb(231,145,46)" fg:x="30990" fg:w="271"/><text x="5.8564%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (282 samples, 0.05%)</title><rect x="5.6051%" y="149" width="0.0510%" height="15" fill="rgb(251,118,11)" fg:x="30983" fg:w="282"/><text x="5.8551%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,629 samples, 0.29%)</title><rect x="5.6695%" y="133" width="0.2947%" height="15" fill="rgb(217,147,25)" fg:x="31339" fg:w="1629"/><text x="5.9195%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (59 samples, 0.01%)</title><rect x="5.9642%" y="133" width="0.0107%" height="15" fill="rgb(247,81,37)" fg:x="32968" fg:w="59"/><text x="6.2142%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2,932 samples, 0.53%)</title><rect x="5.4456%" y="165" width="0.5304%" height="15" fill="rgb(209,12,38)" fg:x="30101" fg:w="2932"/><text x="5.6956%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,768 samples, 0.32%)</title><rect x="5.6561%" y="149" width="0.3198%" height="15" fill="rgb(227,1,9)" fg:x="31265" fg:w="1768"/><text x="5.9061%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (158 samples, 0.03%)</title><rect x="5.9859%" y="165" width="0.0286%" height="15" fill="rgb(248,47,43)" fg:x="33088" fg:w="158"/><text x="6.2359%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (158 samples, 0.03%)</title><rect x="5.9859%" y="149" width="0.0286%" height="15" fill="rgb(221,10,30)" fg:x="33088" fg:w="158"/><text x="6.2359%" y="159.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::ham_gen::OffDiagElems&gt; (3,646 samples, 0.66%)</title><rect x="5.3576%" y="181" width="0.6596%" height="15" fill="rgb(210,229,1)" fg:x="29615" fg:w="3646"/><text x="5.6076%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (1,464 samples, 0.26%)</title><rect x="6.0172%" y="181" width="0.2649%" height="15" fill="rgb(222,148,37)" fg:x="33261" fg:w="1464"/><text x="6.2672%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6,029 samples, 1.09%)</title><rect x="66.5476%" y="165" width="1.0907%" height="15" fill="rgb(234,67,33)" fg:x="367850" fg:w="6029"/><text x="66.7976%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (179 samples, 0.03%)</title><rect x="67.6736%" y="133" width="0.0324%" height="15" fill="rgb(247,98,35)" fg:x="374074" fg:w="179"/><text x="67.9236%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (166 samples, 0.03%)</title><rect x="67.6760%" y="117" width="0.0300%" height="15" fill="rgb(247,138,52)" fg:x="374087" fg:w="166"/><text x="67.9260%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (157 samples, 0.03%)</title><rect x="67.6776%" y="101" width="0.0284%" height="15" fill="rgb(213,79,30)" fg:x="374096" fg:w="157"/><text x="67.9276%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (66 samples, 0.01%)</title><rect x="67.7697%" y="101" width="0.0119%" height="15" fill="rgb(246,177,23)" fg:x="374605" fg:w="66"/><text x="68.0197%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (320 samples, 0.06%)</title><rect x="67.8030%" y="85" width="0.0579%" height="15" fill="rgb(230,62,27)" fg:x="374789" fg:w="320"/><text x="68.0530%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (69 samples, 0.01%)</title><rect x="67.8484%" y="69" width="0.0125%" height="15" fill="rgb(216,154,8)" fg:x="375040" fg:w="69"/><text x="68.0984%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (685 samples, 0.12%)</title><rect x="68.0027%" y="53" width="0.1239%" height="15" fill="rgb(244,35,45)" fg:x="375893" fg:w="685"/><text x="68.2527%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (204 samples, 0.04%)</title><rect x="68.1266%" y="53" width="0.0369%" height="15" fill="rgb(251,115,12)" fg:x="376578" fg:w="204"/><text x="68.3766%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (268 samples, 0.05%)</title><rect x="68.1689%" y="37" width="0.0485%" height="15" fill="rgb(240,54,50)" fg:x="376812" fg:w="268"/><text x="68.4189%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,983 samples, 0.36%)</title><rect x="67.8609%" y="85" width="0.3587%" height="15" fill="rgb(233,84,52)" fg:x="375109" fg:w="1983"/><text x="68.1109%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,728 samples, 0.31%)</title><rect x="67.9070%" y="69" width="0.3126%" height="15" fill="rgb(207,117,47)" fg:x="375364" fg:w="1728"/><text x="68.1570%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (288 samples, 0.05%)</title><rect x="68.1675%" y="53" width="0.0521%" height="15" fill="rgb(249,43,39)" fg:x="376804" fg:w="288"/><text x="68.4175%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (96 samples, 0.02%)</title><rect x="68.2221%" y="85" width="0.0174%" height="15" fill="rgb(209,38,44)" fg:x="377106" fg:w="96"/><text x="68.4721%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (255 samples, 0.05%)</title><rect x="68.3169%" y="37" width="0.0461%" height="15" fill="rgb(236,212,23)" fg:x="377630" fg:w="255"/><text x="68.5669%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (93 samples, 0.02%)</title><rect x="68.3631%" y="37" width="0.0168%" height="15" fill="rgb(242,79,21)" fg:x="377885" fg:w="93"/><text x="68.6131%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (851 samples, 0.15%)</title><rect x="68.2475%" y="69" width="0.1540%" height="15" fill="rgb(211,96,35)" fg:x="377246" fg:w="851"/><text x="68.4975%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (611 samples, 0.11%)</title><rect x="68.2909%" y="53" width="0.1105%" height="15" fill="rgb(253,215,40)" fg:x="377486" fg:w="611"/><text x="68.5409%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (119 samples, 0.02%)</title><rect x="68.3799%" y="37" width="0.0215%" height="15" fill="rgb(211,81,21)" fg:x="377978" fg:w="119"/><text x="68.6299%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (129 samples, 0.02%)</title><rect x="68.4611%" y="53" width="0.0233%" height="15" fill="rgb(208,190,38)" fg:x="378427" fg:w="129"/><text x="68.7111%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,762 samples, 0.32%)</title><rect x="68.2395%" y="85" width="0.3188%" height="15" fill="rgb(235,213,38)" fg:x="377202" fg:w="1762"/><text x="68.4895%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (865 samples, 0.16%)</title><rect x="68.4018%" y="69" width="0.1565%" height="15" fill="rgb(237,122,38)" fg:x="378099" fg:w="865"/><text x="68.6518%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (407 samples, 0.07%)</title><rect x="68.4846%" y="53" width="0.0736%" height="15" fill="rgb(244,218,35)" fg:x="378557" fg:w="407"/><text x="68.7346%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (107 samples, 0.02%)</title><rect x="68.5583%" y="85" width="0.0194%" height="15" fill="rgb(240,68,47)" fg:x="378964" fg:w="107"/><text x="68.8083%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (86 samples, 0.02%)</title><rect x="68.5621%" y="69" width="0.0156%" height="15" fill="rgb(210,16,53)" fg:x="378985" fg:w="86"/><text x="68.8121%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (300 samples, 0.05%)</title><rect x="68.5794%" y="85" width="0.0543%" height="15" fill="rgb(235,124,12)" fg:x="379081" fg:w="300"/><text x="68.8294%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7,266 samples, 1.31%)</title><rect x="67.7870%" y="101" width="1.3145%" height="15" fill="rgb(224,169,11)" fg:x="374701" fg:w="7266"/><text x="68.0370%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,586 samples, 0.47%)</title><rect x="68.6337%" y="85" width="0.4678%" height="15" fill="rgb(250,166,2)" fg:x="379381" fg:w="2586"/><text x="68.8837%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7,470 samples, 1.35%)</title><rect x="67.7570%" y="117" width="1.3514%" height="15" fill="rgb(242,216,29)" fg:x="374535" fg:w="7470"/><text x="68.0070%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (153 samples, 0.03%)</title><rect x="69.1084%" y="117" width="0.0277%" height="15" fill="rgb(230,116,27)" fg:x="382005" fg:w="153"/><text x="69.3584%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (655 samples, 0.12%)</title><rect x="69.1375%" y="117" width="0.1185%" height="15" fill="rgb(228,99,48)" fg:x="382166" fg:w="655"/><text x="69.3875%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (629 samples, 0.11%)</title><rect x="69.1422%" y="101" width="0.1138%" height="15" fill="rgb(253,11,6)" fg:x="382192" fg:w="629"/><text x="69.3922%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8,565 samples, 1.55%)</title><rect x="67.7080%" y="133" width="1.5495%" height="15" fill="rgb(247,143,39)" fg:x="374264" fg:w="8565"/><text x="67.9580%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (8,927 samples, 1.61%)</title><rect x="67.6599%" y="149" width="1.6150%" height="15" fill="rgb(236,97,10)" fg:x="373998" fg:w="8927"/><text x="67.9099%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (96 samples, 0.02%)</title><rect x="69.2575%" y="133" width="0.0174%" height="15" fill="rgb(233,208,19)" fg:x="382829" fg:w="96"/><text x="69.5075%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9,105 samples, 1.65%)</title><rect x="67.6383%" y="165" width="1.6472%" height="15" fill="rgb(216,164,2)" fg:x="373879" fg:w="9105"/><text x="67.8883%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (76 samples, 0.01%)</title><rect x="69.2866%" y="165" width="0.0137%" height="15" fill="rgb(220,129,5)" fg:x="382990" fg:w="76"/><text x="69.5366%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (50,377 samples, 9.11%)</title><rect x="69.3003%" y="165" width="9.1137%" height="15" fill="rgb(242,17,10)" fg:x="383066" fg:w="50377"/><text x="69.5503%" y="175.50">esp`esp::ham:..</text></g><g><title>esp`esp::ham::Ham::ham_doub (7,066 samples, 1.28%)</title><rect x="77.1357%" y="149" width="1.2783%" height="15" fill="rgb(242,107,0)" fg:x="426377" fg:w="7066"/><text x="77.3857%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,038 samples, 0.19%)</title><rect x="78.2263%" y="133" width="0.1878%" height="15" fill="rgb(251,28,31)" fg:x="432405" fg:w="1038"/><text x="78.4763%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (861 samples, 0.16%)</title><rect x="78.4140%" y="165" width="0.1558%" height="15" fill="rgb(233,223,10)" fg:x="433443" fg:w="861"/><text x="78.6640%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (481 samples, 0.09%)</title><rect x="78.4828%" y="149" width="0.0870%" height="15" fill="rgb(215,21,27)" fg:x="433823" fg:w="481"/><text x="78.7328%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,301 samples, 0.24%)</title><rect x="78.8669%" y="149" width="0.2354%" height="15" fill="rgb(232,23,21)" fg:x="435946" fg:w="1301"/><text x="79.1169%" y="159.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (211 samples, 0.04%)</title><rect x="81.2688%" y="117" width="0.0382%" height="15" fill="rgb(244,5,23)" fg:x="449223" fg:w="211"/><text x="81.5188%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,877 samples, 0.52%)</title><rect x="81.3070%" y="117" width="0.5205%" height="15" fill="rgb(226,81,46)" fg:x="449434" fg:w="2877"/><text x="81.5570%" y="127.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,450 samples, 0.26%)</title><rect x="81.5651%" y="101" width="0.2623%" height="15" fill="rgb(247,70,30)" fg:x="450861" fg:w="1450"/><text x="81.8151%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (199 samples, 0.04%)</title><rect x="81.8274%" y="117" width="0.0360%" height="15" fill="rgb(212,68,19)" fg:x="452311" fg:w="199"/><text x="82.0774%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (198 samples, 0.04%)</title><rect x="81.8276%" y="101" width="0.0358%" height="15" fill="rgb(240,187,13)" fg:x="452312" fg:w="198"/><text x="82.0776%" y="111.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18,451 samples, 3.34%)</title><rect x="78.5698%" y="165" width="3.3380%" height="15" fill="rgb(223,113,26)" fg:x="434304" fg:w="18451"/><text x="78.8198%" y="175.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15,508 samples, 2.81%)</title><rect x="79.1022%" y="149" width="2.8055%" height="15" fill="rgb(206,192,2)" fg:x="437247" fg:w="15508"/><text x="79.3522%" y="159.50">es..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7,240 samples, 1.31%)</title><rect x="80.5980%" y="133" width="1.3098%" height="15" fill="rgb(241,108,4)" fg:x="445515" fg:w="7240"/><text x="80.8480%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (200 samples, 0.04%)</title><rect x="81.8716%" y="117" width="0.0362%" height="15" fill="rgb(247,173,49)" fg:x="452555" fg:w="200"/><text x="82.1216%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (200 samples, 0.04%)</title><rect x="81.8716%" y="101" width="0.0362%" height="15" fill="rgb(224,114,35)" fg:x="452555" fg:w="200"/><text x="82.1216%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (200 samples, 0.04%)</title><rect x="81.8716%" y="85" width="0.0362%" height="15" fill="rgb(245,159,27)" fg:x="452555" fg:w="200"/><text x="82.1216%" y="95.50"></text></g><g><title>esp`hashbrown::map::make_hash (82,363 samples, 14.90%)</title><rect x="81.9078%" y="165" width="14.9003%" height="15" fill="rgb(245,172,44)" fg:x="452755" fg:w="82363"/><text x="82.1578%" y="175.50">esp`hashbrown::map::mak..</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (41,747 samples, 7.55%)</title><rect x="89.2556%" y="149" width="7.5524%" height="15" fill="rgb(236,23,11)" fg:x="493371" fg:w="41747"/><text x="89.5056%" y="159.50">esp`&lt;std::..</text></g><g><title>esp`esp::var::ham_gen::OffDiagElems::add_el (500,460 samples, 90.54%)</title><rect x="6.2828%" y="181" width="90.5381%" height="15" fill="rgb(205,117,38)" fg:x="34729" fg:w="500460"/><text x="6.5328%" y="191.50">esp`esp::var::ham_gen::OffDiagElems::add_el</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (71 samples, 0.01%)</title><rect x="96.8080%" y="165" width="0.0128%" height="15" fill="rgb(237,72,25)" fg:x="535118" fg:w="71"/><text x="97.0580%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (117 samples, 0.02%)</title><rect x="96.8209%" y="181" width="0.0212%" height="15" fill="rgb(244,70,9)" fg:x="535189" fg:w="117"/><text x="97.0709%" y="191.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (503 samples, 0.09%)</title><rect x="97.5939%" y="165" width="0.0910%" height="15" fill="rgb(217,125,39)" fg:x="539462" fg:w="503"/><text x="97.8439%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (7,563 samples, 1.37%)</title><rect x="96.8420%" y="181" width="1.3682%" height="15" fill="rgb(235,36,10)" fg:x="535306" fg:w="7563"/><text x="97.0920%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,904 samples, 0.53%)</title><rect x="97.6849%" y="165" width="0.5254%" height="15" fill="rgb(251,123,47)" fg:x="539965" fg:w="2904"/><text x="97.9349%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (283 samples, 0.05%)</title><rect x="98.2150%" y="165" width="0.0512%" height="15" fill="rgb(221,13,13)" fg:x="542895" fg:w="283"/><text x="98.4650%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new_from_unsorted (7,806 samples, 1.41%)</title><rect x="98.2103%" y="181" width="1.4122%" height="15" fill="rgb(238,131,9)" fg:x="542869" fg:w="7806"/><text x="98.4603%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::sort_indices_data_slices (7,497 samples, 1.36%)</title><rect x="98.2662%" y="165" width="1.3563%" height="15" fill="rgb(211,50,8)" fg:x="543178" fg:w="7497"/><text x="98.5162%" y="175.50"></text></g><g><title>esp`core::slice::sort::recurse (5,123 samples, 0.93%)</title><rect x="98.6956%" y="149" width="0.9268%" height="15" fill="rgb(245,182,24)" fg:x="545552" fg:w="5123"/><text x="98.9456%" y="159.50"></text></g><g><title>esp`core::slice::sort::recurse (3,793 samples, 0.69%)</title><rect x="98.9363%" y="133" width="0.6862%" height="15" fill="rgb(242,14,37)" fg:x="546882" fg:w="3793"/><text x="99.1863%" y="143.50"></text></g><g><title>esp`core::slice::sort::recurse (1,763 samples, 0.32%)</title><rect x="99.3035%" y="117" width="0.3189%" height="15" fill="rgb(246,228,12)" fg:x="548912" fg:w="1763"/><text x="99.5535%" y="127.50"></text></g><g><title>esp`core::slice::sort::recurse (414 samples, 0.07%)</title><rect x="99.5475%" y="101" width="0.0749%" height="15" fill="rgb(213,55,15)" fg:x="550261" fg:w="414"/><text x="99.7975%" y="111.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (539,375 samples, 97.58%)</title><rect x="2.0542%" y="197" width="97.5782%" height="15" fill="rgb(209,9,3)" fg:x="11355" fg:w="539375"/><text x="2.3042%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`hashbrown::map::make_hash (102 samples, 0.02%)</title><rect x="99.6326%" y="197" width="0.0185%" height="15" fill="rgb(230,59,30)" fg:x="550731" fg:w="102"/><text x="99.8826%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (550,835 samples, 99.65%)</title><rect x="0.0000%" y="213" width="99.6514%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="550835"/><text x="0.2500%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`esp::ham::Ham::ham_sing (216 samples, 0.04%)</title><rect x="99.7228%" y="197" width="0.0391%" height="15" fill="rgb(220,109,13)" fg:x="551230" fg:w="216"/><text x="99.9728%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (101 samples, 0.02%)</title><rect x="99.7437%" y="181" width="0.0183%" height="15" fill="rgb(232,18,1)" fg:x="551345" fg:w="101"/><text x="99.9937%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (80 samples, 0.01%)</title><rect x="99.7619%" y="197" width="0.0145%" height="15" fill="rgb(215,41,42)" fg:x="551446" fg:w="80"/><text x="100.0119%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (61 samples, 0.01%)</title><rect x="99.7764%" y="197" width="0.0110%" height="15" fill="rgb(224,123,36)" fg:x="551526" fg:w="61"/><text x="100.0264%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (624 samples, 0.11%)</title><rect x="99.7927%" y="197" width="0.1129%" height="15" fill="rgb(240,125,3)" fg:x="551616" fg:w="624"/><text x="100.0427%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (91 samples, 0.02%)</title><rect x="99.8891%" y="181" width="0.0165%" height="15" fill="rgb(205,98,50)" fg:x="552149" fg:w="91"/><text x="100.1391%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (72 samples, 0.01%)</title><rect x="99.9056%" y="197" width="0.0130%" height="15" fill="rgb(205,185,37)" fg:x="552240" fg:w="72"/><text x="100.1556%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (59 samples, 0.01%)</title><rect x="99.9079%" y="181" width="0.0107%" height="15" fill="rgb(238,207,15)" fg:x="552253" fg:w="59"/><text x="100.1579%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (262 samples, 0.05%)</title><rect x="99.9186%" y="197" width="0.0474%" height="15" fill="rgb(213,199,42)" fg:x="552312" fg:w="262"/><text x="100.1686%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (154 samples, 0.03%)</title><rect x="99.9381%" y="181" width="0.0279%" height="15" fill="rgb(235,201,11)" fg:x="552420" fg:w="154"/><text x="100.1881%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (1,741 samples, 0.31%)</title><rect x="99.6514%" y="213" width="0.3150%" height="15" fill="rgb(207,46,11)" fg:x="550835" fg:w="1741"/><text x="99.9014%" y="223.50"></text></g><g><title>esp`esp::var::variational (552,589 samples, 99.97%)</title><rect x="0.0000%" y="229" width="99.9687%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="552589"/><text x="0.2500%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`std::sync::once::Once::call_inner (59 samples, 0.01%)</title><rect x="99.9687%" y="229" width="0.0107%" height="15" fill="rgb(243,32,47)" fg:x="552589" fg:w="59"/><text x="100.2187%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (59 samples, 0.01%)</title><rect x="99.9687%" y="213" width="0.0107%" height="15" fill="rgb(247,202,23)" fg:x="552589" fg:w="59"/><text x="100.2187%" y="223.50"></text></g><g><title>esp`main (552,652 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9801%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="552652"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (552,652 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9801%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="552652"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (552,652 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9801%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="552652"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (552,652 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9801%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="552652"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (552,652 samples, 99.98%)</title><rect x="0.0000%" y="245" width="99.9801%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="552652"/><text x="0.2500%" y="255.50">esp`esp::main</text></g><g><title>all (552,762 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="552762"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (552,762 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="552762"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (552,762 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="552762"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (110 samples, 0.02%)</title><rect x="99.9801%" y="309" width="0.0199%" height="15" fill="rgb(220,39,43)" fg:x="552652" fg:w="110"/><text x="100.2301%" y="319.50"></text></g></svg></svg>