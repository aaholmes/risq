<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="367292"><g><title>libsystem_malloc.dylib`small_size (184 samples, 0.05%)</title><rect x="0.0264%" y="213" width="0.0501%" height="15" fill="rgb(227,0,7)" fg:x="97" fg:w="184"/><text x="0.2764%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (315 samples, 0.09%)</title><rect x="0.0207%" y="229" width="0.0858%" height="15" fill="rgb(217,0,24)" fg:x="76" fg:w="315"/><text x="0.2707%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (110 samples, 0.03%)</title><rect x="0.0765%" y="213" width="0.0299%" height="15" fill="rgb(221,193,54)" fg:x="281" fg:w="110"/><text x="0.3265%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (105 samples, 0.03%)</title><rect x="0.0779%" y="197" width="0.0286%" height="15" fill="rgb(248,212,6)" fg:x="286" fg:w="105"/><text x="0.3279%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (57 samples, 0.02%)</title><rect x="0.1065%" y="229" width="0.0155%" height="15" fill="rgb(208,68,35)" fg:x="391" fg:w="57"/><text x="0.3565%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (57 samples, 0.02%)</title><rect x="0.1065%" y="213" width="0.0155%" height="15" fill="rgb(232,128,0)" fg:x="391" fg:w="57"/><text x="0.3565%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (57 samples, 0.02%)</title><rect x="0.1065%" y="197" width="0.0155%" height="15" fill="rgb(207,160,47)" fg:x="391" fg:w="57"/><text x="0.3565%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (102 samples, 0.03%)</title><rect x="0.1590%" y="213" width="0.0278%" height="15" fill="rgb(228,23,34)" fg:x="584" fg:w="102"/><text x="0.4090%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (96 samples, 0.03%)</title><rect x="0.1606%" y="197" width="0.0261%" height="15" fill="rgb(218,30,26)" fg:x="590" fg:w="96"/><text x="0.4106%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (97 samples, 0.03%)</title><rect x="0.1868%" y="213" width="0.0264%" height="15" fill="rgb(220,122,19)" fg:x="686" fg:w="97"/><text x="0.4368%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (573 samples, 0.16%)</title><rect x="0.2186%" y="213" width="0.1560%" height="15" fill="rgb(250,228,42)" fg:x="803" fg:w="573"/><text x="0.4686%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (288 samples, 0.08%)</title><rect x="0.3817%" y="197" width="0.0784%" height="15" fill="rgb(240,193,28)" fg:x="1402" fg:w="288"/><text x="0.6317%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (304 samples, 0.08%)</title><rect x="0.3782%" y="213" width="0.0828%" height="15" fill="rgb(216,20,37)" fg:x="1389" fg:w="304"/><text x="0.6282%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,441 samples, 0.66%)</title><rect x="0.4800%" y="197" width="0.6646%" height="15" fill="rgb(206,188,39)" fg:x="1763" fg:w="2441"/><text x="0.7300%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (69 samples, 0.02%)</title><rect x="1.1446%" y="197" width="0.0188%" height="15" fill="rgb(217,207,13)" fg:x="4204" fg:w="69"/><text x="1.3946%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,841 samples, 1.05%)</title><rect x="0.1220%" y="229" width="1.0458%" height="15" fill="rgb(231,73,38)" fg:x="448" fg:w="3841"/><text x="0.3720%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2,596 samples, 0.71%)</title><rect x="0.4609%" y="213" width="0.7068%" height="15" fill="rgb(225,20,46)" fg:x="1693" fg:w="2596"/><text x="0.7109%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (37 samples, 0.01%)</title><rect x="1.2031%" y="197" width="0.0101%" height="15" fill="rgb(210,31,41)" fg:x="4419" fg:w="37"/><text x="1.4531%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (60 samples, 0.02%)</title><rect x="1.2132%" y="197" width="0.0163%" height="15" fill="rgb(221,200,47)" fg:x="4456" fg:w="60"/><text x="1.4632%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (189 samples, 0.05%)</title><rect x="1.2366%" y="181" width="0.0515%" height="15" fill="rgb(226,26,5)" fg:x="4542" fg:w="189"/><text x="1.4866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (447 samples, 0.12%)</title><rect x="1.1677%" y="229" width="0.1217%" height="15" fill="rgb(249,33,26)" fg:x="4289" fg:w="447"/><text x="1.4177%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (437 samples, 0.12%)</title><rect x="1.1705%" y="213" width="0.1190%" height="15" fill="rgb(235,183,28)" fg:x="4299" fg:w="437"/><text x="1.4205%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (204 samples, 0.06%)</title><rect x="1.2339%" y="197" width="0.0555%" height="15" fill="rgb(221,5,38)" fg:x="4532" fg:w="204"/><text x="1.4839%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (132 samples, 0.04%)</title><rect x="1.2894%" y="229" width="0.0359%" height="15" fill="rgb(247,18,42)" fg:x="4736" fg:w="132"/><text x="1.5394%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (132 samples, 0.04%)</title><rect x="1.2894%" y="213" width="0.0359%" height="15" fill="rgb(241,131,45)" fg:x="4736" fg:w="132"/><text x="1.5394%" y="223.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::sparse::SparseMatUpperTri&gt; (4,862 samples, 1.32%)</title><rect x="0.0049%" y="245" width="1.3237%" height="15" fill="rgb(249,31,29)" fg:x="18" fg:w="4862"/><text x="0.2549%" y="255.50"></text></g><g><title>esp`__rdl_alloc (171 samples, 0.05%)</title><rect x="1.4307%" y="213" width="0.0466%" height="15" fill="rgb(225,111,53)" fg:x="5255" fg:w="171"/><text x="1.6807%" y="223.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (501 samples, 0.14%)</title><rect x="2.3602%" y="197" width="0.1364%" height="15" fill="rgb(238,160,17)" fg:x="8669" fg:w="501"/><text x="2.6102%" y="207.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (186 samples, 0.05%)</title><rect x="16.8324%" y="181" width="0.0506%" height="15" fill="rgb(214,148,48)" fg:x="61824" fg:w="186"/><text x="17.0824%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (186 samples, 0.05%)</title><rect x="16.8324%" y="165" width="0.0506%" height="15" fill="rgb(232,36,49)" fg:x="61824" fg:w="186"/><text x="17.0824%" y="175.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMatUpperTri as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (52,904 samples, 14.40%)</title><rect x="2.4967%" y="197" width="14.4038%" height="15" fill="rgb(209,103,24)" fg:x="9170" fg:w="52904"/><text x="2.7467%" y="207.50">esp`&lt;esp::var::sparse:..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (39 samples, 0.01%)</title><rect x="16.8898%" y="181" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="62035" fg:w="39"/><text x="17.1398%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39 samples, 0.01%)</title><rect x="16.8898%" y="165" width="0.0106%" height="15" fill="rgb(213,181,19)" fg:x="62035" fg:w="39"/><text x="17.1398%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (39 samples, 0.01%)</title><rect x="16.8898%" y="149" width="0.0106%" height="15" fill="rgb(254,191,54)" fg:x="62035" fg:w="39"/><text x="17.1398%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (39 samples, 0.01%)</title><rect x="16.8898%" y="133" width="0.0106%" height="15" fill="rgb(241,83,37)" fg:x="62035" fg:w="39"/><text x="17.1398%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (50 samples, 0.01%)</title><rect x="16.9004%" y="181" width="0.0136%" height="15" fill="rgb(233,36,39)" fg:x="62074" fg:w="50"/><text x="17.1504%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (46 samples, 0.01%)</title><rect x="16.9015%" y="165" width="0.0125%" height="15" fill="rgb(226,3,54)" fg:x="62078" fg:w="46"/><text x="17.1515%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (46 samples, 0.01%)</title><rect x="16.9015%" y="149" width="0.0125%" height="15" fill="rgb(245,192,40)" fg:x="62078" fg:w="46"/><text x="17.1515%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (46 samples, 0.01%)</title><rect x="16.9015%" y="133" width="0.0125%" height="15" fill="rgb(238,167,29)" fg:x="62078" fg:w="46"/><text x="17.1515%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (51 samples, 0.01%)</title><rect x="16.9004%" y="197" width="0.0139%" height="15" fill="rgb(232,182,51)" fg:x="62074" fg:w="51"/><text x="17.1504%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (808 samples, 0.22%)</title><rect x="17.4973%" y="149" width="0.2200%" height="15" fill="rgb(231,60,39)" fg:x="64266" fg:w="808"/><text x="17.7473%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (1,115 samples, 0.30%)</title><rect x="17.7276%" y="133" width="0.3036%" height="15" fill="rgb(208,69,12)" fg:x="65112" fg:w="1115"/><text x="17.9776%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,519 samples, 0.41%)</title><rect x="17.7172%" y="149" width="0.4136%" height="15" fill="rgb(235,93,37)" fg:x="65074" fg:w="1519"/><text x="17.9672%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (366 samples, 0.10%)</title><rect x="18.0312%" y="133" width="0.0996%" height="15" fill="rgb(213,116,39)" fg:x="66227" fg:w="366"/><text x="18.2812%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (97 samples, 0.03%)</title><rect x="18.1044%" y="117" width="0.0264%" height="15" fill="rgb(222,207,29)" fg:x="66496" fg:w="97"/><text x="18.3544%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (4,018 samples, 1.09%)</title><rect x="17.0382%" y="181" width="1.0940%" height="15" fill="rgb(206,96,30)" fg:x="62580" fg:w="4018"/><text x="17.2882%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (2,350 samples, 0.64%)</title><rect x="17.4923%" y="165" width="0.6398%" height="15" fill="rgb(218,138,4)" fg:x="64248" fg:w="2350"/><text x="17.7423%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (147 samples, 0.04%)</title><rect x="18.1322%" y="181" width="0.0400%" height="15" fill="rgb(250,191,14)" fg:x="66598" fg:w="147"/><text x="18.3822%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (4,654 samples, 1.27%)</title><rect x="16.9143%" y="197" width="1.2671%" height="15" fill="rgb(239,60,40)" fg:x="62125" fg:w="4654"/><text x="17.1643%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::create_results (45 samples, 0.01%)</title><rect x="18.1814%" y="197" width="0.0123%" height="15" fill="rgb(206,27,48)" fg:x="66779" fg:w="45"/><text x="18.4314%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 0.01%)</title><rect x="18.1814%" y="181" width="0.0123%" height="15" fill="rgb(225,35,8)" fg:x="66779" fg:w="45"/><text x="18.4314%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (318 samples, 0.09%)</title><rect x="18.1937%" y="181" width="0.0866%" height="15" fill="rgb(250,213,24)" fg:x="66824" fg:w="318"/><text x="18.4437%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (331 samples, 0.09%)</title><rect x="18.1937%" y="197" width="0.0901%" height="15" fill="rgb(247,123,22)" fg:x="66824" fg:w="331"/><text x="18.4437%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (54 samples, 0.01%)</title><rect x="18.2838%" y="197" width="0.0147%" height="15" fill="rgb(231,138,38)" fg:x="67155" fg:w="54"/><text x="18.5338%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,630 samples, 0.44%)</title><rect x="18.4872%" y="181" width="0.4438%" height="15" fill="rgb(231,145,46)" fg:x="67902" fg:w="1630"/><text x="18.7372%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (308 samples, 0.08%)</title><rect x="18.9310%" y="181" width="0.0839%" height="15" fill="rgb(251,118,11)" fg:x="69532" fg:w="308"/><text x="19.1810%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (187 samples, 0.05%)</title><rect x="19.0148%" y="181" width="0.0509%" height="15" fill="rgb(217,147,25)" fg:x="69840" fg:w="187"/><text x="19.2648%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (2,819 samples, 0.77%)</title><rect x="18.2985%" y="197" width="0.7675%" height="15" fill="rgb(247,81,37)" fg:x="67209" fg:w="2819"/><text x="18.5485%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (127 samples, 0.03%)</title><rect x="19.0668%" y="181" width="0.0346%" height="15" fill="rgb(209,12,38)" fg:x="70031" fg:w="127"/><text x="19.3168%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (290 samples, 0.08%)</title><rect x="19.1082%" y="165" width="0.0790%" height="15" fill="rgb(227,1,9)" fg:x="70183" fg:w="290"/><text x="19.3582%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (409 samples, 0.11%)</title><rect x="19.1014%" y="181" width="0.1114%" height="15" fill="rgb(248,47,43)" fg:x="70158" fg:w="409"/><text x="19.3514%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (94 samples, 0.03%)</title><rect x="19.1872%" y="165" width="0.0256%" height="15" fill="rgb(221,10,30)" fg:x="70473" fg:w="94"/><text x="19.4372%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (45 samples, 0.01%)</title><rect x="19.2005%" y="149" width="0.0123%" height="15" fill="rgb(210,229,1)" fg:x="70522" fg:w="45"/><text x="19.4505%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (540 samples, 0.15%)</title><rect x="19.0660%" y="197" width="0.1470%" height="15" fill="rgb(222,148,37)" fg:x="70028" fg:w="540"/><text x="19.3160%" y="207.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (124 samples, 0.03%)</title><rect x="19.2131%" y="197" width="0.0338%" height="15" fill="rgb(234,67,33)" fg:x="70568" fg:w="124"/><text x="19.4631%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (645 samples, 0.18%)</title><rect x="19.2544%" y="197" width="0.1756%" height="15" fill="rgb(247,98,35)" fg:x="70720" fg:w="645"/><text x="19.5044%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (375 samples, 0.10%)</title><rect x="19.4303%" y="197" width="0.1021%" height="15" fill="rgb(247,138,52)" fg:x="71366" fg:w="375"/><text x="19.6803%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (374 samples, 0.10%)</title><rect x="19.4306%" y="181" width="0.1018%" height="15" fill="rgb(213,79,30)" fg:x="71367" fg:w="374"/><text x="19.6806%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (374 samples, 0.10%)</title><rect x="19.4306%" y="165" width="0.1018%" height="15" fill="rgb(246,177,23)" fg:x="71367" fg:w="374"/><text x="19.6806%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (66,435 samples, 18.09%)</title><rect x="1.4866%" y="213" width="18.0878%" height="15" fill="rgb(230,62,27)" fg:x="5460" fg:w="66435"/><text x="1.7366%" y="223.50">esp`eigenvalues::algorithms:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (154 samples, 0.04%)</title><rect x="19.5324%" y="197" width="0.0419%" height="15" fill="rgb(216,154,8)" fg:x="71741" fg:w="154"/><text x="19.7824%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (56 samples, 0.02%)</title><rect x="30.1646%" y="165" width="0.0152%" height="15" fill="rgb(244,35,45)" fg:x="110792" fg:w="56"/><text x="30.4146%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4,553 samples, 1.24%)</title><rect x="30.1798%" y="165" width="1.2396%" height="15" fill="rgb(251,115,12)" fg:x="110848" fg:w="4553"/><text x="30.4298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4,305 samples, 1.17%)</title><rect x="30.2473%" y="149" width="1.1721%" height="15" fill="rgb(240,54,50)" fg:x="111096" fg:w="4305"/><text x="30.4973%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (6,171 samples, 1.68%)</title><rect x="29.7720%" y="181" width="1.6801%" height="15" fill="rgb(233,84,52)" fg:x="109350" fg:w="6171"/><text x="30.0220%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (120 samples, 0.03%)</title><rect x="31.4194%" y="165" width="0.0327%" height="15" fill="rgb(207,117,47)" fg:x="115401" fg:w="120"/><text x="31.6694%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (86 samples, 0.02%)</title><rect x="31.4521%" y="181" width="0.0234%" height="15" fill="rgb(249,43,39)" fg:x="115521" fg:w="86"/><text x="31.7021%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (86 samples, 0.02%)</title><rect x="31.4521%" y="165" width="0.0234%" height="15" fill="rgb(209,38,44)" fg:x="115521" fg:w="86"/><text x="31.7021%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (86 samples, 0.02%)</title><rect x="31.4521%" y="149" width="0.0234%" height="15" fill="rgb(236,212,23)" fg:x="115521" fg:w="86"/><text x="31.7021%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (467 samples, 0.13%)</title><rect x="31.4823%" y="165" width="0.1271%" height="15" fill="rgb(242,79,21)" fg:x="115632" fg:w="467"/><text x="31.7323%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (100 samples, 0.03%)</title><rect x="31.6100%" y="165" width="0.0272%" height="15" fill="rgb(211,96,35)" fg:x="116101" fg:w="100"/><text x="31.8600%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (596 samples, 0.16%)</title><rect x="31.4755%" y="181" width="0.1623%" height="15" fill="rgb(253,215,40)" fg:x="115607" fg:w="596"/><text x="31.7255%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (68 samples, 0.02%)</title><rect x="33.0070%" y="165" width="0.0185%" height="15" fill="rgb(211,81,21)" fg:x="121232" fg:w="68"/><text x="33.2570%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (57 samples, 0.02%)</title><rect x="33.0255%" y="165" width="0.0155%" height="15" fill="rgb(208,190,38)" fg:x="121300" fg:w="57"/><text x="33.2755%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (126 samples, 0.03%)</title><rect x="35.2869%" y="149" width="0.0343%" height="15" fill="rgb(235,213,38)" fg:x="129606" fg:w="126"/><text x="35.5369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (71 samples, 0.02%)</title><rect x="35.3019%" y="133" width="0.0193%" height="15" fill="rgb(237,122,38)" fg:x="129661" fg:w="71"/><text x="35.5519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5,423 samples, 1.48%)</title><rect x="35.3212%" y="149" width="1.4765%" height="15" fill="rgb(244,218,35)" fg:x="129732" fg:w="5423"/><text x="35.5712%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4,768 samples, 1.30%)</title><rect x="36.7977%" y="149" width="1.2981%" height="15" fill="rgb(240,68,47)" fg:x="135155" fg:w="4768"/><text x="37.0477%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (73 samples, 0.02%)</title><rect x="38.0958%" y="149" width="0.0199%" height="15" fill="rgb(210,16,53)" fg:x="139923" fg:w="73"/><text x="38.3458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (64 samples, 0.02%)</title><rect x="38.1157%" y="149" width="0.0174%" height="15" fill="rgb(235,124,12)" fg:x="139996" fg:w="64"/><text x="38.3657%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.01%)</title><rect x="38.1356%" y="133" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="140069" fg:w="42"/><text x="38.3856%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18,755 samples, 5.11%)</title><rect x="33.0410%" y="165" width="5.1063%" height="15" fill="rgb(250,166,2)" fg:x="121357" fg:w="18755"/><text x="33.2910%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (52 samples, 0.01%)</title><rect x="38.1331%" y="149" width="0.0142%" height="15" fill="rgb(242,216,29)" fg:x="140060" fg:w="52"/><text x="38.3831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (23,910 samples, 6.51%)</title><rect x="31.6378%" y="181" width="6.5098%" height="15" fill="rgb(230,116,27)" fg:x="116203" fg:w="23910"/><text x="31.8878%" y="191.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`szone_size (115 samples, 0.03%)</title><rect x="38.1481%" y="181" width="0.0313%" height="15" fill="rgb(228,99,48)" fg:x="140115" fg:w="115"/><text x="38.3981%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32,565 samples, 8.87%)</title><rect x="29.3538%" y="197" width="8.8662%" height="15" fill="rgb(253,11,6)" fg:x="107814" fg:w="32565"/><text x="29.6038%" y="207.50">esp`&lt;hashbrow..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (149 samples, 0.04%)</title><rect x="38.1794%" y="181" width="0.0406%" height="15" fill="rgb(247,143,39)" fg:x="140230" fg:w="149"/><text x="38.4294%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (139 samples, 0.04%)</title><rect x="38.2224%" y="197" width="0.0378%" height="15" fill="rgb(236,97,10)" fg:x="140388" fg:w="139"/><text x="38.4724%" y="207.50"></text></g><g><title>esp`__rdl_realloc (67 samples, 0.02%)</title><rect x="38.3499%" y="165" width="0.0182%" height="15" fill="rgb(233,208,19)" fg:x="140856" fg:w="67"/><text x="38.5999%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (40 samples, 0.01%)</title><rect x="38.4441%" y="149" width="0.0109%" height="15" fill="rgb(216,164,2)" fg:x="141202" fg:w="40"/><text x="38.6941%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (160 samples, 0.04%)</title><rect x="38.4972%" y="133" width="0.0436%" height="15" fill="rgb(220,129,5)" fg:x="141397" fg:w="160"/><text x="38.7472%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (651 samples, 0.18%)</title><rect x="39.0134%" y="85" width="0.1772%" height="15" fill="rgb(242,17,10)" fg:x="143293" fg:w="651"/><text x="39.2634%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (96 samples, 0.03%)</title><rect x="39.1906%" y="85" width="0.0261%" height="15" fill="rgb(242,107,0)" fg:x="143944" fg:w="96"/><text x="39.4406%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,141 samples, 0.58%)</title><rect x="38.6363%" y="117" width="0.5829%" height="15" fill="rgb(251,28,31)" fg:x="141908" fg:w="2141"/><text x="38.8863%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,294 samples, 0.35%)</title><rect x="38.8669%" y="101" width="0.3523%" height="15" fill="rgb(233,223,10)" fg:x="142755" fg:w="1294"/><text x="39.1169%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (106 samples, 0.03%)</title><rect x="39.2737%" y="69" width="0.0289%" height="15" fill="rgb(215,21,27)" fg:x="144249" fg:w="106"/><text x="39.5237%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (64 samples, 0.02%)</title><rect x="39.3025%" y="69" width="0.0174%" height="15" fill="rgb(232,23,21)" fg:x="144355" fg:w="64"/><text x="39.5525%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (701 samples, 0.19%)</title><rect x="39.2570%" y="101" width="0.1909%" height="15" fill="rgb(244,5,23)" fg:x="144188" fg:w="701"/><text x="39.5070%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (665 samples, 0.18%)</title><rect x="39.2669%" y="85" width="0.1811%" height="15" fill="rgb(226,81,46)" fg:x="144224" fg:w="665"/><text x="39.5169%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (470 samples, 0.13%)</title><rect x="39.3199%" y="69" width="0.1280%" height="15" fill="rgb(247,70,30)" fg:x="144419" fg:w="470"/><text x="39.5699%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (309 samples, 0.08%)</title><rect x="39.8332%" y="85" width="0.0841%" height="15" fill="rgb(212,68,19)" fg:x="146304" fg:w="309"/><text x="40.0832%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (53 samples, 0.01%)</title><rect x="39.9173%" y="85" width="0.0144%" height="15" fill="rgb(240,187,13)" fg:x="146613" fg:w="53"/><text x="40.1673%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (43 samples, 0.01%)</title><rect x="39.9200%" y="69" width="0.0117%" height="15" fill="rgb(223,113,26)" fg:x="146623" fg:w="43"/><text x="40.1700%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,608 samples, 0.98%)</title><rect x="39.2263%" y="117" width="0.9823%" height="15" fill="rgb(206,192,2)" fg:x="144075" fg:w="3608"/><text x="39.4763%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,783 samples, 0.76%)</title><rect x="39.4509%" y="101" width="0.7577%" height="15" fill="rgb(241,108,4)" fg:x="144900" fg:w="2783"/><text x="39.7009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,004 samples, 0.27%)</title><rect x="39.9353%" y="85" width="0.2734%" height="15" fill="rgb(247,173,49)" fg:x="146679" fg:w="1004"/><text x="40.1853%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (174 samples, 0.05%)</title><rect x="40.1612%" y="69" width="0.0474%" height="15" fill="rgb(224,114,35)" fg:x="147509" fg:w="174"/><text x="40.4112%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (372 samples, 0.10%)</title><rect x="40.2086%" y="117" width="0.1013%" height="15" fill="rgb(245,159,27)" fg:x="147683" fg:w="372"/><text x="40.4586%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (323 samples, 0.09%)</title><rect x="40.2219%" y="101" width="0.0879%" height="15" fill="rgb(245,172,44)" fg:x="147732" fg:w="323"/><text x="40.4719%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (855 samples, 0.23%)</title><rect x="40.3148%" y="117" width="0.2328%" height="15" fill="rgb(236,23,11)" fg:x="148073" fg:w="855"/><text x="40.5648%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8,238 samples, 2.24%)</title><rect x="38.5557%" y="133" width="2.2429%" height="15" fill="rgb(205,117,38)" fg:x="141612" fg:w="8238"/><text x="38.8057%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (922 samples, 0.25%)</title><rect x="40.5476%" y="117" width="0.2510%" height="15" fill="rgb(237,72,25)" fg:x="148928" fg:w="922"/><text x="40.7976%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8,665 samples, 2.36%)</title><rect x="38.4550%" y="149" width="2.3592%" height="15" fill="rgb(244,70,9)" fg:x="141242" fg:w="8665"/><text x="38.7050%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (836 samples, 0.23%)</title><rect x="40.8215%" y="149" width="0.2276%" height="15" fill="rgb(217,125,39)" fg:x="149934" fg:w="836"/><text x="41.0715%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (782 samples, 0.21%)</title><rect x="40.8362%" y="133" width="0.2129%" height="15" fill="rgb(235,36,10)" fg:x="149988" fg:w="782"/><text x="41.0862%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9,856 samples, 2.68%)</title><rect x="38.3719%" y="165" width="2.6834%" height="15" fill="rgb(251,123,47)" fg:x="140937" fg:w="9856"/><text x="38.6219%" y="175.50">li..</text></g><g><title>esp`alloc::raw_vec::finish_grow (10,034 samples, 2.73%)</title><rect x="38.3300%" y="181" width="2.7319%" height="15" fill="rgb(221,13,13)" fg:x="140783" fg:w="10034"/><text x="38.5800%" y="191.50">es..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10,314 samples, 2.81%)</title><rect x="38.2627%" y="197" width="2.8081%" height="15" fill="rgb(238,131,9)" fg:x="140536" fg:w="10314"/><text x="38.5127%" y="207.50">es..</text></g><g><title>esp`alloc::slice::merge_sort (48 samples, 0.01%)</title><rect x="41.0752%" y="197" width="0.0131%" height="15" fill="rgb(211,50,8)" fg:x="150866" fg:w="48"/><text x="41.3252%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (715 samples, 0.19%)</title><rect x="41.0883%" y="197" width="0.1947%" height="15" fill="rgb(245,182,24)" fg:x="150914" fg:w="715"/><text x="41.3383%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (205 samples, 0.06%)</title><rect x="41.2830%" y="197" width="0.0558%" height="15" fill="rgb(242,14,37)" fg:x="151629" fg:w="205"/><text x="41.5330%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (230 samples, 0.06%)</title><rect x="47.3427%" y="149" width="0.0626%" height="15" fill="rgb(246,228,12)" fg:x="173886" fg:w="230"/><text x="47.5927%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (209 samples, 0.06%)</title><rect x="47.3484%" y="133" width="0.0569%" height="15" fill="rgb(213,55,15)" fg:x="173907" fg:w="209"/><text x="47.5984%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (201 samples, 0.05%)</title><rect x="47.3506%" y="117" width="0.0547%" height="15" fill="rgb(209,9,3)" fg:x="173915" fg:w="201"/><text x="47.6006%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (77 samples, 0.02%)</title><rect x="47.3844%" y="101" width="0.0210%" height="15" fill="rgb(230,59,30)" fg:x="174039" fg:w="77"/><text x="47.6344%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (39 samples, 0.01%)</title><rect x="47.4611%" y="117" width="0.0106%" height="15" fill="rgb(209,121,21)" fg:x="174321" fg:w="39"/><text x="47.7111%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (48 samples, 0.01%)</title><rect x="47.5352%" y="85" width="0.0131%" height="15" fill="rgb(220,109,13)" fg:x="174593" fg:w="48"/><text x="47.7852%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (260 samples, 0.07%)</title><rect x="47.4946%" y="101" width="0.0708%" height="15" fill="rgb(232,18,1)" fg:x="174444" fg:w="260"/><text x="47.7446%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (62 samples, 0.02%)</title><rect x="47.5485%" y="85" width="0.0169%" height="15" fill="rgb(215,41,42)" fg:x="174642" fg:w="62"/><text x="47.7985%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (599 samples, 0.16%)</title><rect x="47.7239%" y="69" width="0.1631%" height="15" fill="rgb(224,123,36)" fg:x="175286" fg:w="599"/><text x="47.9739%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (154 samples, 0.04%)</title><rect x="47.8870%" y="69" width="0.0419%" height="15" fill="rgb(240,125,3)" fg:x="175885" fg:w="154"/><text x="48.1370%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,340 samples, 0.36%)</title><rect x="47.5654%" y="101" width="0.3648%" height="15" fill="rgb(205,98,50)" fg:x="174704" fg:w="1340"/><text x="47.8154%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,119 samples, 0.30%)</title><rect x="47.6256%" y="85" width="0.3047%" height="15" fill="rgb(205,185,37)" fg:x="174925" fg:w="1119"/><text x="47.8756%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (64 samples, 0.02%)</title><rect x="47.9354%" y="101" width="0.0174%" height="15" fill="rgb(238,207,15)" fg:x="176063" fg:w="64"/><text x="48.1854%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (47 samples, 0.01%)</title><rect x="48.0209%" y="53" width="0.0128%" height="15" fill="rgb(213,199,42)" fg:x="176377" fg:w="47"/><text x="48.2709%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (116 samples, 0.03%)</title><rect x="48.0337%" y="53" width="0.0316%" height="15" fill="rgb(235,201,11)" fg:x="176424" fg:w="116"/><text x="48.2837%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (484 samples, 0.13%)</title><rect x="47.9618%" y="85" width="0.1318%" height="15" fill="rgb(207,46,11)" fg:x="176160" fg:w="484"/><text x="48.2118%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (343 samples, 0.09%)</title><rect x="48.0002%" y="69" width="0.0934%" height="15" fill="rgb(241,35,35)" fg:x="176301" fg:w="343"/><text x="48.2502%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (104 samples, 0.03%)</title><rect x="48.0653%" y="53" width="0.0283%" height="15" fill="rgb(243,32,47)" fg:x="176540" fg:w="104"/><text x="48.3153%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (86 samples, 0.02%)</title><rect x="48.1505%" y="69" width="0.0234%" height="15" fill="rgb(247,202,23)" fg:x="176853" fg:w="86"/><text x="48.4005%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,055 samples, 0.29%)</title><rect x="47.9529%" y="101" width="0.2872%" height="15" fill="rgb(219,102,11)" fg:x="176127" fg:w="1055"/><text x="48.2029%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (536 samples, 0.15%)</title><rect x="48.0942%" y="85" width="0.1459%" height="15" fill="rgb(243,110,44)" fg:x="176646" fg:w="536"/><text x="48.3442%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (237 samples, 0.06%)</title><rect x="48.1756%" y="69" width="0.0645%" height="15" fill="rgb(222,74,54)" fg:x="176945" fg:w="237"/><text x="48.4256%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (64 samples, 0.02%)</title><rect x="48.2401%" y="101" width="0.0174%" height="15" fill="rgb(216,99,12)" fg:x="177182" fg:w="64"/><text x="48.4901%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (56 samples, 0.02%)</title><rect x="48.2423%" y="85" width="0.0152%" height="15" fill="rgb(226,22,26)" fg:x="177190" fg:w="56"/><text x="48.4923%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (303 samples, 0.08%)</title><rect x="48.2589%" y="101" width="0.0825%" height="15" fill="rgb(217,163,10)" fg:x="177251" fg:w="303"/><text x="48.5089%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (62 samples, 0.02%)</title><rect x="48.3245%" y="85" width="0.0169%" height="15" fill="rgb(213,25,53)" fg:x="177492" fg:w="62"/><text x="48.5745%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5,638 samples, 1.54%)</title><rect x="47.4764%" y="117" width="1.5350%" height="15" fill="rgb(252,105,26)" fg:x="174377" fg:w="5638"/><text x="47.7264%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,461 samples, 0.67%)</title><rect x="48.3414%" y="101" width="0.6700%" height="15" fill="rgb(220,39,43)" fg:x="177554" fg:w="2461"/><text x="48.5914%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5,778 samples, 1.57%)</title><rect x="47.4456%" y="133" width="1.5731%" height="15" fill="rgb(229,68,48)" fg:x="174264" fg:w="5778"/><text x="47.6956%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (257 samples, 0.07%)</title><rect x="49.0188%" y="133" width="0.0700%" height="15" fill="rgb(252,8,32)" fg:x="180042" fg:w="257"/><text x="49.2688%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (595 samples, 0.16%)</title><rect x="49.0898%" y="133" width="0.1620%" height="15" fill="rgb(223,20,43)" fg:x="180303" fg:w="595"/><text x="49.3398%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (583 samples, 0.16%)</title><rect x="49.0931%" y="117" width="0.1587%" height="15" fill="rgb(229,81,49)" fg:x="180315" fg:w="583"/><text x="49.3431%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6,775 samples, 1.84%)</title><rect x="47.4091%" y="149" width="1.8446%" height="15" fill="rgb(236,28,36)" fg:x="174130" fg:w="6775"/><text x="47.6591%" y="159.50">l..</text></g><g><title>esp`alloc::raw_vec::finish_grow (7,103 samples, 1.93%)</title><rect x="47.3280%" y="165" width="1.9339%" height="15" fill="rgb(249,185,26)" fg:x="173832" fg:w="7103"/><text x="47.5780%" y="175.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7,244 samples, 1.97%)</title><rect x="47.2989%" y="181" width="1.9723%" height="15" fill="rgb(249,174,33)" fg:x="173725" fg:w="7244"/><text x="47.5489%" y="191.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (118 samples, 0.03%)</title><rect x="49.2725%" y="181" width="0.0321%" height="15" fill="rgb(233,201,37)" fg:x="180974" fg:w="118"/><text x="49.5225%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (57,295 samples, 15.60%)</title><rect x="41.3388%" y="197" width="15.5993%" height="15" fill="rgb(221,78,26)" fg:x="151834" fg:w="57295"/><text x="41.5888%" y="207.50">esp`esp::var::off_diag::..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (28,037 samples, 7.63%)</title><rect x="49.3046%" y="181" width="7.6334%" height="15" fill="rgb(250,127,30)" fg:x="181092" fg:w="28037"/><text x="49.5546%" y="191.50">esp`esp::h..</text></g><g><title>esp`esp::ham::Ham::ham_doub (15,150 samples, 4.12%)</title><rect x="52.8133%" y="165" width="4.1248%" height="15" fill="rgb(230,49,44)" fg:x="193979" fg:w="15150"/><text x="53.0633%" y="175.50">esp`..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (69 samples, 0.02%)</title><rect x="58.8880%" y="181" width="0.0188%" height="15" fill="rgb(229,67,23)" fg:x="216291" fg:w="69"/><text x="59.1380%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (128 samples, 0.03%)</title><rect x="61.9929%" y="165" width="0.0348%" height="15" fill="rgb(249,83,47)" fg:x="227695" fg:w="128"/><text x="62.2429%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (4,340 samples, 1.18%)</title><rect x="62.0278%" y="165" width="1.1816%" height="15" fill="rgb(215,43,3)" fg:x="227823" fg:w="4340"/><text x="62.2778%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,793 samples, 0.76%)</title><rect x="62.4490%" y="149" width="0.7604%" height="15" fill="rgb(238,154,13)" fg:x="229370" fg:w="2793"/><text x="62.6990%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (18,993 samples, 5.17%)</title><rect x="58.9158%" y="181" width="5.1711%" height="15" fill="rgb(219,56,2)" fg:x="216393" fg:w="18993"/><text x="59.1658%" y="191.50">esp`es..</text></g><g><title>esp`esp::ham::Ham::ham_sing (3,223 samples, 0.88%)</title><rect x="63.2094%" y="165" width="0.8775%" height="15" fill="rgb(233,0,4)" fg:x="232163" fg:w="3223"/><text x="63.4594%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,195 samples, 0.60%)</title><rect x="63.4893%" y="149" width="0.5976%" height="15" fill="rgb(235,30,7)" fg:x="233191" fg:w="2195"/><text x="63.7393%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (194 samples, 0.05%)</title><rect x="65.5048%" y="85" width="0.0528%" height="15" fill="rgb(250,79,13)" fg:x="240594" fg:w="194"/><text x="65.7548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (67 samples, 0.02%)</title><rect x="65.5394%" y="69" width="0.0182%" height="15" fill="rgb(211,146,34)" fg:x="240721" fg:w="67"/><text x="65.7894%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (100 samples, 0.03%)</title><rect x="65.5911%" y="53" width="0.0272%" height="15" fill="rgb(228,22,38)" fg:x="240911" fg:w="100"/><text x="65.8411%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (98 samples, 0.03%)</title><rect x="65.6184%" y="53" width="0.0267%" height="15" fill="rgb(235,168,5)" fg:x="241011" fg:w="98"/><text x="65.8684%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (322 samples, 0.09%)</title><rect x="65.5639%" y="69" width="0.0877%" height="15" fill="rgb(221,155,16)" fg:x="240811" fg:w="322"/><text x="65.8139%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (346 samples, 0.09%)</title><rect x="65.5576%" y="85" width="0.0942%" height="15" fill="rgb(215,215,53)" fg:x="240788" fg:w="346"/><text x="65.8076%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (70 samples, 0.02%)</title><rect x="65.6538%" y="85" width="0.0191%" height="15" fill="rgb(223,4,10)" fg:x="241141" fg:w="70"/><text x="65.9038%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (37 samples, 0.01%)</title><rect x="65.6627%" y="69" width="0.0101%" height="15" fill="rgb(234,103,6)" fg:x="241174" fg:w="37"/><text x="65.9127%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (45 samples, 0.01%)</title><rect x="65.7060%" y="37" width="0.0123%" height="15" fill="rgb(227,97,0)" fg:x="241333" fg:w="45"/><text x="65.9560%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (208 samples, 0.06%)</title><rect x="65.6753%" y="69" width="0.0566%" height="15" fill="rgb(234,150,53)" fg:x="241220" fg:w="208"/><text x="65.9253%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (147 samples, 0.04%)</title><rect x="65.6919%" y="53" width="0.0400%" height="15" fill="rgb(228,201,54)" fg:x="241281" fg:w="147"/><text x="65.9419%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (50 samples, 0.01%)</title><rect x="65.7183%" y="37" width="0.0136%" height="15" fill="rgb(222,22,37)" fg:x="241378" fg:w="50"/><text x="65.9683%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (282 samples, 0.08%)</title><rect x="65.6728%" y="85" width="0.0768%" height="15" fill="rgb(237,53,32)" fg:x="241211" fg:w="282"/><text x="65.9228%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (65 samples, 0.02%)</title><rect x="65.7319%" y="69" width="0.0177%" height="15" fill="rgb(233,25,53)" fg:x="241428" fg:w="65"/><text x="65.9819%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (43 samples, 0.01%)</title><rect x="65.7379%" y="53" width="0.0117%" height="15" fill="rgb(210,40,34)" fg:x="241450" fg:w="43"/><text x="65.9879%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (72 samples, 0.02%)</title><rect x="65.7510%" y="85" width="0.0196%" height="15" fill="rgb(241,220,44)" fg:x="241498" fg:w="72"/><text x="66.0010%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,585 samples, 0.70%)</title><rect x="65.4988%" y="101" width="0.7038%" height="15" fill="rgb(235,28,35)" fg:x="240572" fg:w="2585"/><text x="65.7488%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,587 samples, 0.43%)</title><rect x="65.7706%" y="85" width="0.4321%" height="15" fill="rgb(210,56,17)" fg:x="241570" fg:w="1587"/><text x="66.0206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,613 samples, 0.71%)</title><rect x="65.4923%" y="117" width="0.7114%" height="15" fill="rgb(224,130,29)" fg:x="240548" fg:w="2613"/><text x="65.7423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (121 samples, 0.03%)</title><rect x="66.2037%" y="117" width="0.0329%" height="15" fill="rgb(235,212,8)" fg:x="243161" fg:w="121"/><text x="66.4537%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (123 samples, 0.03%)</title><rect x="66.2372%" y="117" width="0.0335%" height="15" fill="rgb(223,33,50)" fg:x="243284" fg:w="123"/><text x="66.4872%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (118 samples, 0.03%)</title><rect x="66.2386%" y="101" width="0.0321%" height="15" fill="rgb(219,149,13)" fg:x="243289" fg:w="118"/><text x="66.4886%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,902 samples, 0.79%)</title><rect x="65.4809%" y="133" width="0.7901%" height="15" fill="rgb(250,156,29)" fg:x="240506" fg:w="2902"/><text x="65.7309%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,927 samples, 0.80%)</title><rect x="65.4773%" y="149" width="0.7969%" height="15" fill="rgb(216,193,19)" fg:x="240493" fg:w="2927"/><text x="65.7273%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el (8,040 samples, 2.19%)</title><rect x="64.0885%" y="181" width="2.1890%" height="15" fill="rgb(216,135,14)" fg:x="235392" fg:w="8040"/><text x="64.3385%" y="191.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,952 samples, 0.80%)</title><rect x="65.4738%" y="165" width="0.8037%" height="15" fill="rgb(241,47,5)" fg:x="240480" fg:w="2952"/><text x="65.7238%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (36,228 samples, 9.86%)</title><rect x="56.9381%" y="197" width="9.8635%" height="15" fill="rgb(233,42,35)" fg:x="209129" fg:w="36228"/><text x="57.1881%" y="207.50">esp`esp::var::..</text></g><g><title>esp`hashbrown::map::make_hash (1,925 samples, 0.52%)</title><rect x="66.2775%" y="181" width="0.5241%" height="15" fill="rgb(231,13,6)" fg:x="243432" fg:w="1925"/><text x="66.5275%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,189 samples, 0.32%)</title><rect x="66.4779%" y="165" width="0.3237%" height="15" fill="rgb(207,181,40)" fg:x="244168" fg:w="1189"/><text x="66.7279%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (160 samples, 0.04%)</title><rect x="73.6485%" y="117" width="0.0436%" height="15" fill="rgb(254,173,49)" fg:x="270505" fg:w="160"/><text x="73.8985%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (156 samples, 0.04%)</title><rect x="73.6496%" y="101" width="0.0425%" height="15" fill="rgb(221,1,38)" fg:x="270509" fg:w="156"/><text x="73.8996%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (188 samples, 0.05%)</title><rect x="73.6411%" y="133" width="0.0512%" height="15" fill="rgb(206,124,46)" fg:x="270478" fg:w="188"/><text x="73.8911%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (64 samples, 0.02%)</title><rect x="73.6961%" y="101" width="0.0174%" height="15" fill="rgb(249,21,11)" fg:x="270680" fg:w="64"/><text x="73.9461%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (74 samples, 0.02%)</title><rect x="73.6950%" y="117" width="0.0201%" height="15" fill="rgb(222,201,40)" fg:x="270676" fg:w="74"/><text x="73.9450%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (89 samples, 0.02%)</title><rect x="73.6945%" y="133" width="0.0242%" height="15" fill="rgb(235,61,29)" fg:x="270674" fg:w="89"/><text x="73.9445%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (312 samples, 0.08%)</title><rect x="73.6368%" y="149" width="0.0849%" height="15" fill="rgb(219,207,3)" fg:x="270462" fg:w="312"/><text x="73.8868%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (381 samples, 0.10%)</title><rect x="73.6234%" y="165" width="0.1037%" height="15" fill="rgb(222,56,46)" fg:x="270413" fg:w="381"/><text x="73.8734%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (49 samples, 0.01%)</title><rect x="73.7402%" y="133" width="0.0133%" height="15" fill="rgb(239,76,54)" fg:x="270842" fg:w="49"/><text x="73.9902%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (39 samples, 0.01%)</title><rect x="73.7754%" y="117" width="0.0106%" height="15" fill="rgb(231,124,27)" fg:x="270971" fg:w="39"/><text x="74.0254%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (346 samples, 0.09%)</title><rect x="73.7285%" y="165" width="0.0942%" height="15" fill="rgb(249,195,6)" fg:x="270799" fg:w="346"/><text x="73.9785%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (314 samples, 0.09%)</title><rect x="73.7372%" y="149" width="0.0855%" height="15" fill="rgb(237,174,47)" fg:x="270831" fg:w="314"/><text x="73.9872%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (253 samples, 0.07%)</title><rect x="73.7539%" y="133" width="0.0689%" height="15" fill="rgb(206,201,31)" fg:x="270892" fg:w="253"/><text x="74.0039%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (134 samples, 0.04%)</title><rect x="73.7863%" y="117" width="0.0365%" height="15" fill="rgb(231,57,52)" fg:x="271011" fg:w="134"/><text x="74.0363%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (94 samples, 0.03%)</title><rect x="73.8396%" y="149" width="0.0256%" height="15" fill="rgb(248,177,22)" fg:x="271207" fg:w="94"/><text x="74.0896%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (88 samples, 0.02%)</title><rect x="73.8412%" y="133" width="0.0240%" height="15" fill="rgb(215,211,37)" fg:x="271213" fg:w="88"/><text x="74.0912%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (143 samples, 0.04%)</title><rect x="73.8265%" y="165" width="0.0389%" height="15" fill="rgb(241,128,51)" fg:x="271159" fg:w="143"/><text x="74.0765%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (113 samples, 0.03%)</title><rect x="73.9284%" y="133" width="0.0308%" height="15" fill="rgb(227,165,31)" fg:x="271533" fg:w="113"/><text x="74.1784%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (321 samples, 0.09%)</title><rect x="73.8745%" y="165" width="0.0874%" height="15" fill="rgb(228,167,24)" fg:x="271335" fg:w="321"/><text x="74.1245%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (208 samples, 0.06%)</title><rect x="73.9052%" y="149" width="0.0566%" height="15" fill="rgb(228,143,12)" fg:x="271448" fg:w="208"/><text x="74.1552%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (20,486 samples, 5.58%)</title><rect x="68.5373%" y="181" width="5.5776%" height="15" fill="rgb(249,149,8)" fg:x="251732" fg:w="20486"/><text x="68.7873%" y="191.50">esp`all..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (547 samples, 0.15%)</title><rect x="73.9659%" y="165" width="0.1489%" height="15" fill="rgb(243,35,44)" fg:x="271671" fg:w="547"/><text x="74.2159%" y="175.50"></text></g><g><title>esp`esp::var::sparse::SparseMatUpperTri::sort_remove_duplicates (26,998 samples, 7.35%)</title><rect x="66.8016%" y="197" width="7.3506%" height="15" fill="rgb(246,89,9)" fg:x="245357" fg:w="26998"/><text x="67.0516%" y="207.50">esp`esp::v..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (109 samples, 0.03%)</title><rect x="74.1225%" y="181" width="0.0297%" height="15" fill="rgb(233,213,13)" fg:x="272246" fg:w="109"/><text x="74.3725%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::expand_sparse_ham_rows (80 samples, 0.02%)</title><rect x="74.1522%" y="197" width="0.0218%" height="15" fill="rgb(233,141,41)" fg:x="272355" fg:w="80"/><text x="74.4022%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.01%)</title><rect x="74.1612%" y="181" width="0.0128%" height="15" fill="rgb(239,167,4)" fg:x="272388" fg:w="47"/><text x="74.4112%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (13,262 samples, 3.61%)</title><rect x="74.1740%" y="197" width="3.6108%" height="15" fill="rgb(209,217,16)" fg:x="272435" fg:w="13262"/><text x="74.4240%" y="207.50">esp`..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,413 samples, 0.66%)</title><rect x="77.1277%" y="181" width="0.6570%" height="15" fill="rgb(219,88,35)" fg:x="283284" fg:w="2413"/><text x="77.3777%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,663 samples, 0.45%)</title><rect x="78.8179%" y="181" width="0.4528%" height="15" fill="rgb(220,193,23)" fg:x="289492" fg:w="1663"/><text x="79.0679%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (201 samples, 0.05%)</title><rect x="79.8122%" y="165" width="0.0547%" height="15" fill="rgb(230,90,52)" fg:x="293144" fg:w="201"/><text x="80.0622%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,252 samples, 0.61%)</title><rect x="81.9893%" y="149" width="0.6131%" height="15" fill="rgb(252,106,19)" fg:x="301140" fg:w="2252"/><text x="82.2393%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (38 samples, 0.01%)</title><rect x="82.6495%" y="69" width="0.0103%" height="15" fill="rgb(206,74,20)" fg:x="303565" fg:w="38"/><text x="82.8995%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (175 samples, 0.05%)</title><rect x="82.6247%" y="101" width="0.0476%" height="15" fill="rgb(230,138,44)" fg:x="303474" fg:w="175"/><text x="82.8747%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (127 samples, 0.03%)</title><rect x="82.6378%" y="85" width="0.0346%" height="15" fill="rgb(235,182,43)" fg:x="303522" fg:w="127"/><text x="82.8878%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (323 samples, 0.09%)</title><rect x="82.6092%" y="133" width="0.0879%" height="15" fill="rgb(242,16,51)" fg:x="303417" fg:w="323"/><text x="82.8592%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (317 samples, 0.09%)</title><rect x="82.6108%" y="117" width="0.0863%" height="15" fill="rgb(248,9,4)" fg:x="303423" fg:w="317"/><text x="82.8608%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (91 samples, 0.02%)</title><rect x="82.6724%" y="101" width="0.0248%" height="15" fill="rgb(210,31,22)" fg:x="303649" fg:w="91"/><text x="82.9224%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (59 samples, 0.02%)</title><rect x="82.6811%" y="85" width="0.0161%" height="15" fill="rgb(239,54,39)" fg:x="303681" fg:w="59"/><text x="82.9311%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (427 samples, 0.12%)</title><rect x="82.6980%" y="133" width="0.1163%" height="15" fill="rgb(230,99,41)" fg:x="303743" fg:w="427"/><text x="82.9480%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (780 samples, 0.21%)</title><rect x="82.6024%" y="149" width="0.2124%" height="15" fill="rgb(253,106,12)" fg:x="303392" fg:w="780"/><text x="82.8524%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (263 samples, 0.07%)</title><rect x="82.8148%" y="149" width="0.0716%" height="15" fill="rgb(213,46,41)" fg:x="304172" fg:w="263"/><text x="83.0648%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (42 samples, 0.01%)</title><rect x="82.9013%" y="133" width="0.0114%" height="15" fill="rgb(215,133,35)" fg:x="304490" fg:w="42"/><text x="83.1513%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (38 samples, 0.01%)</title><rect x="82.9024%" y="117" width="0.0103%" height="15" fill="rgb(213,28,5)" fg:x="304494" fg:w="38"/><text x="83.1524%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (102 samples, 0.03%)</title><rect x="82.8869%" y="149" width="0.0278%" height="15" fill="rgb(215,77,49)" fg:x="304437" fg:w="102"/><text x="83.1369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (72 samples, 0.02%)</title><rect x="82.9234%" y="149" width="0.0196%" height="15" fill="rgb(248,100,22)" fg:x="304571" fg:w="72"/><text x="83.1734%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (41 samples, 0.01%)</title><rect x="82.9430%" y="149" width="0.0112%" height="15" fill="rgb(208,67,9)" fg:x="304643" fg:w="41"/><text x="83.1930%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11,350 samples, 3.09%)</title><rect x="79.8670%" y="165" width="3.0902%" height="15" fill="rgb(219,133,21)" fg:x="293345" fg:w="11350"/><text x="80.1170%" y="175.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (13,555 samples, 3.69%)</title><rect x="79.2707%" y="181" width="3.6905%" height="15" fill="rgb(246,46,29)" fg:x="291155" fg:w="13555"/><text x="79.5207%" y="191.50">esp`..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,017 samples, 5.18%)</title><rect x="77.7847%" y="197" width="5.1776%" height="15" fill="rgb(246,185,52)" fg:x="285697" fg:w="19017"/><text x="78.0347%" y="207.50">esp`ha..</text></g><g><title>esp`hashbrown::map::make_hash (3,266 samples, 0.89%)</title><rect x="82.9623%" y="197" width="0.8892%" height="15" fill="rgb(252,136,11)" fg:x="304714" fg:w="3266"/><text x="83.2123%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,906 samples, 0.52%)</title><rect x="83.3326%" y="181" width="0.5189%" height="15" fill="rgb(219,138,53)" fg:x="306074" fg:w="1906"/><text x="83.5826%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (92 samples, 0.03%)</title><rect x="83.8515%" y="197" width="0.0250%" height="15" fill="rgb(211,51,23)" fg:x="307980" fg:w="92"/><text x="84.1015%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (30,805 samples, 8.39%)</title><rect x="83.8766%" y="197" width="8.3871%" height="15" fill="rgb(247,221,28)" fg:x="308072" fg:w="30805"/><text x="84.1266%" y="207.50">esp`std::col..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (5,459 samples, 1.49%)</title><rect x="90.7774%" y="181" width="1.4863%" height="15" fill="rgb(251,222,45)" fg:x="333418" fg:w="5459"/><text x="91.0274%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (228 samples, 0.06%)</title><rect x="92.2639%" y="197" width="0.0621%" height="15" fill="rgb(217,162,53)" fg:x="338878" fg:w="228"/><text x="92.5139%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (67 samples, 0.02%)</title><rect x="92.7801%" y="165" width="0.0182%" height="15" fill="rgb(229,93,14)" fg:x="340774" fg:w="67"/><text x="93.0301%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (99 samples, 0.03%)</title><rect x="95.1230%" y="149" width="0.0270%" height="15" fill="rgb(209,67,49)" fg:x="349379" fg:w="99"/><text x="95.3730%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (85 samples, 0.02%)</title><rect x="95.1268%" y="133" width="0.0231%" height="15" fill="rgb(213,87,29)" fg:x="349393" fg:w="85"/><text x="95.3768%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14,587 samples, 3.97%)</title><rect x="92.6108%" y="181" width="3.9715%" height="15" fill="rgb(205,151,52)" fg:x="340152" fg:w="14587"/><text x="92.8608%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13,898 samples, 3.78%)</title><rect x="92.7984%" y="165" width="3.7839%" height="15" fill="rgb(253,215,39)" fg:x="340841" fg:w="13898"/><text x="93.0484%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5,234 samples, 1.43%)</title><rect x="95.1573%" y="149" width="1.4250%" height="15" fill="rgb(221,220,41)" fg:x="349505" fg:w="5234"/><text x="95.4073%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,065 samples, 0.29%)</title><rect x="96.2923%" y="133" width="0.2900%" height="15" fill="rgb(218,133,21)" fg:x="353674" fg:w="1065"/><text x="96.5423%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15,701 samples, 4.27%)</title><rect x="92.3260%" y="197" width="4.2748%" height="15" fill="rgb(221,193,43)" fg:x="339106" fg:w="15701"/><text x="92.5760%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (68 samples, 0.02%)</title><rect x="96.5823%" y="181" width="0.0185%" height="15" fill="rgb(240,128,52)" fg:x="354739" fg:w="68"/><text x="96.8323%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (131 samples, 0.04%)</title><rect x="96.6008%" y="197" width="0.0357%" height="15" fill="rgb(253,114,12)" fg:x="354807" fg:w="131"/><text x="96.8508%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (192 samples, 0.05%)</title><rect x="96.6365%" y="197" width="0.0523%" height="15" fill="rgb(215,223,47)" fg:x="354938" fg:w="192"/><text x="96.8865%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (150 samples, 0.04%)</title><rect x="96.6887%" y="197" width="0.0408%" height="15" fill="rgb(248,225,23)" fg:x="355130" fg:w="150"/><text x="96.9387%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (81 samples, 0.02%)</title><rect x="96.7296%" y="197" width="0.0221%" height="15" fill="rgb(250,108,0)" fg:x="355280" fg:w="81"/><text x="96.9796%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (65 samples, 0.02%)</title><rect x="96.7339%" y="181" width="0.0177%" height="15" fill="rgb(228,208,7)" fg:x="355296" fg:w="65"/><text x="96.9839%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (65 samples, 0.02%)</title><rect x="96.7339%" y="165" width="0.0177%" height="15" fill="rgb(244,45,10)" fg:x="355296" fg:w="65"/><text x="96.9839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (103 samples, 0.03%)</title><rect x="96.7530%" y="197" width="0.0280%" height="15" fill="rgb(207,125,25)" fg:x="355366" fg:w="103"/><text x="97.0030%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (349 samples, 0.10%)</title><rect x="96.7824%" y="197" width="0.0950%" height="15" fill="rgb(210,195,18)" fg:x="355474" fg:w="349"/><text x="97.0324%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (161 samples, 0.04%)</title><rect x="96.8820%" y="197" width="0.0438%" height="15" fill="rgb(249,80,12)" fg:x="355840" fg:w="161"/><text x="97.1320%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (284,108 samples, 77.35%)</title><rect x="19.5743%" y="213" width="77.3521%" height="15" fill="rgb(221,65,9)" fg:x="71895" fg:w="284108"/><text x="19.8243%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el (89 samples, 0.02%)</title><rect x="96.9264%" y="213" width="0.0242%" height="15" fill="rgb(235,49,36)" fg:x="356003" fg:w="89"/><text x="97.1764%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (346 samples, 0.09%)</title><rect x="96.9507%" y="213" width="0.0942%" height="15" fill="rgb(225,32,20)" fg:x="356092" fg:w="346"/><text x="97.2007%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (101 samples, 0.03%)</title><rect x="97.0449%" y="213" width="0.0275%" height="15" fill="rgb(215,141,46)" fg:x="356438" fg:w="101"/><text x="97.2949%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (85 samples, 0.02%)</title><rect x="97.0724%" y="213" width="0.0231%" height="15" fill="rgb(250,160,47)" fg:x="356539" fg:w="85"/><text x="97.3224%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (283 samples, 0.08%)</title><rect x="97.0993%" y="213" width="0.0771%" height="15" fill="rgb(216,222,40)" fg:x="356638" fg:w="283"/><text x="97.3493%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (99 samples, 0.03%)</title><rect x="97.1780%" y="213" width="0.0270%" height="15" fill="rgb(234,217,39)" fg:x="356927" fg:w="99"/><text x="97.4280%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (127 samples, 0.03%)</title><rect x="97.2071%" y="213" width="0.0346%" height="15" fill="rgb(207,178,40)" fg:x="357034" fg:w="127"/><text x="97.4571%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (352,257 samples, 95.91%)</title><rect x="1.3354%" y="229" width="95.9065%" height="15" fill="rgb(221,136,13)" fg:x="4905" fg:w="352257"/><text x="1.5854%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>libsystem_malloc.dylib`free_large (47 samples, 0.01%)</title><rect x="97.4848%" y="133" width="0.0128%" height="15" fill="rgb(249,199,10)" fg:x="358054" fg:w="47"/><text x="97.7348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (47 samples, 0.01%)</title><rect x="97.4848%" y="117" width="0.0128%" height="15" fill="rgb(249,222,13)" fg:x="358054" fg:w="47"/><text x="97.7348%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (47 samples, 0.01%)</title><rect x="97.4848%" y="101" width="0.0128%" height="15" fill="rgb(244,185,38)" fg:x="358054" fg:w="47"/><text x="97.7348%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (58 samples, 0.02%)</title><rect x="97.4848%" y="213" width="0.0158%" height="15" fill="rgb(236,202,9)" fg:x="358054" fg:w="58"/><text x="97.7348%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (58 samples, 0.02%)</title><rect x="97.4848%" y="197" width="0.0158%" height="15" fill="rgb(250,229,37)" fg:x="358054" fg:w="58"/><text x="97.7348%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 0.02%)</title><rect x="97.4848%" y="181" width="0.0158%" height="15" fill="rgb(206,174,23)" fg:x="358054" fg:w="58"/><text x="97.7348%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (58 samples, 0.02%)</title><rect x="97.4848%" y="165" width="0.0158%" height="15" fill="rgb(211,33,43)" fg:x="358054" fg:w="58"/><text x="97.7348%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (58 samples, 0.02%)</title><rect x="97.4848%" y="149" width="0.0158%" height="15" fill="rgb(245,58,50)" fg:x="358054" fg:w="58"/><text x="97.7348%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (121 samples, 0.03%)</title><rect x="97.5096%" y="213" width="0.0329%" height="15" fill="rgb(244,68,36)" fg:x="358145" fg:w="121"/><text x="97.7596%" y="223.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (210 samples, 0.06%)</title><rect x="97.5426%" y="213" width="0.0572%" height="15" fill="rgb(232,229,15)" fg:x="358266" fg:w="210"/><text x="97.7926%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,716 samples, 0.47%)</title><rect x="97.5997%" y="213" width="0.4672%" height="15" fill="rgb(254,30,23)" fg:x="358476" fg:w="1716"/><text x="97.8497%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,257 samples, 0.34%)</title><rect x="97.7247%" y="197" width="0.3422%" height="15" fill="rgb(235,160,14)" fg:x="358935" fg:w="1257"/><text x="97.9747%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1,171 samples, 0.32%)</title><rect x="98.0669%" y="213" width="0.3188%" height="15" fill="rgb(212,155,44)" fg:x="360192" fg:w="1171"/><text x="98.3169%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (789 samples, 0.21%)</title><rect x="98.1709%" y="197" width="0.2148%" height="15" fill="rgb(226,2,50)" fg:x="360574" fg:w="789"/><text x="98.4209%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,805 samples, 1.04%)</title><rect x="98.3858%" y="213" width="1.0360%" height="15" fill="rgb(234,177,6)" fg:x="361363" fg:w="3805"/><text x="98.6358%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (309 samples, 0.08%)</title><rect x="99.3376%" y="197" width="0.0841%" height="15" fill="rgb(217,24,9)" fg:x="364859" fg:w="309"/><text x="99.5876%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (49 samples, 0.01%)</title><rect x="99.4378%" y="197" width="0.0133%" height="15" fill="rgb(220,13,46)" fg:x="365227" fg:w="49"/><text x="99.6878%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (154 samples, 0.04%)</title><rect x="99.5712%" y="165" width="0.0419%" height="15" fill="rgb(239,221,27)" fg:x="365717" fg:w="154"/><text x="99.8212%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (88 samples, 0.02%)</title><rect x="99.5892%" y="149" width="0.0240%" height="15" fill="rgb(222,198,25)" fg:x="365783" fg:w="88"/><text x="99.8392%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (75 samples, 0.02%)</title><rect x="99.6210%" y="165" width="0.0204%" height="15" fill="rgb(211,99,13)" fg:x="365900" fg:w="75"/><text x="99.8710%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (75 samples, 0.02%)</title><rect x="99.6210%" y="149" width="0.0204%" height="15" fill="rgb(232,111,31)" fg:x="365900" fg:w="75"/><text x="99.8710%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (75 samples, 0.02%)</title><rect x="99.6210%" y="133" width="0.0204%" height="15" fill="rgb(245,82,37)" fg:x="365900" fg:w="75"/><text x="99.8710%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (808 samples, 0.22%)</title><rect x="99.4217%" y="213" width="0.2200%" height="15" fill="rgb(227,149,46)" fg:x="365168" fg:w="808"/><text x="99.6717%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (700 samples, 0.19%)</title><rect x="99.4511%" y="197" width="0.1906%" height="15" fill="rgb(218,36,50)" fg:x="365276" fg:w="700"/><text x="99.7011%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (553 samples, 0.15%)</title><rect x="99.4911%" y="181" width="0.1506%" height="15" fill="rgb(226,80,48)" fg:x="365423" fg:w="553"/><text x="99.7411%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (267 samples, 0.07%)</title><rect x="99.6417%" y="213" width="0.0727%" height="15" fill="rgb(238,224,15)" fg:x="365976" fg:w="267"/><text x="99.8917%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (162 samples, 0.04%)</title><rect x="99.6703%" y="197" width="0.0441%" height="15" fill="rgb(241,136,10)" fg:x="366081" fg:w="162"/><text x="99.9203%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::find_new_dets (9,109 samples, 2.48%)</title><rect x="97.2420%" y="229" width="2.4800%" height="15" fill="rgb(208,32,45)" fg:x="357162" fg:w="9109"/><text x="97.4920%" y="239.50">es..</text></g><g><title>esp`esp::var::variational (361,391 samples, 98.39%)</title><rect x="1.3354%" y="245" width="98.3934%" height="15" fill="rgb(207,135,9)" fg:x="4905" fg:w="361391"/><text x="1.5854%" y="255.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (64 samples, 0.02%)</title><rect x="99.7629%" y="149" width="0.0174%" height="15" fill="rgb(206,86,44)" fg:x="366421" fg:w="64"/><text x="100.0129%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (64 samples, 0.02%)</title><rect x="99.7629%" y="133" width="0.0174%" height="15" fill="rgb(245,177,15)" fg:x="366421" fg:w="64"/><text x="100.0129%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (49 samples, 0.01%)</title><rect x="99.7669%" y="117" width="0.0133%" height="15" fill="rgb(206,64,50)" fg:x="366436" fg:w="49"/><text x="100.0169%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (68 samples, 0.02%)</title><rect x="99.7623%" y="197" width="0.0185%" height="15" fill="rgb(234,36,40)" fg:x="366419" fg:w="68"/><text x="100.0123%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (67 samples, 0.02%)</title><rect x="99.7626%" y="181" width="0.0182%" height="15" fill="rgb(213,64,8)" fg:x="366420" fg:w="67"/><text x="100.0126%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (66 samples, 0.02%)</title><rect x="99.7629%" y="165" width="0.0180%" height="15" fill="rgb(210,75,36)" fg:x="366421" fg:w="66"/><text x="100.0129%" y="175.50"></text></g><g><title>esp`alloc::slice::merge_sort (137 samples, 0.04%)</title><rect x="99.7808%" y="197" width="0.0373%" height="15" fill="rgb(229,88,21)" fg:x="366487" fg:w="137"/><text x="100.0308%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (352 samples, 0.10%)</title><rect x="99.7294%" y="213" width="0.0958%" height="15" fill="rgb(252,204,47)" fg:x="366298" fg:w="352"/><text x="99.9794%" y="223.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.01%)</title><rect x="99.8413%" y="197" width="0.0109%" height="15" fill="rgb(208,77,27)" fg:x="366709" fg:w="40"/><text x="100.0913%" y="207.50"></text></g><g><title>esp`std::io::append_to_string (37 samples, 0.01%)</title><rect x="99.8421%" y="181" width="0.0101%" height="15" fill="rgb(221,76,26)" fg:x="366712" fg:w="37"/><text x="100.0921%" y="191.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (146 samples, 0.04%)</title><rect x="99.8252%" y="213" width="0.0398%" height="15" fill="rgb(225,139,18)" fg:x="366650" fg:w="146"/><text x="100.0752%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (500 samples, 0.14%)</title><rect x="99.7294%" y="245" width="0.1361%" height="15" fill="rgb(230,137,11)" fg:x="366298" fg:w="500"/><text x="99.9794%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (500 samples, 0.14%)</title><rect x="99.7294%" y="229" width="0.1361%" height="15" fill="rgb(212,28,1)" fg:x="366298" fg:w="500"/><text x="99.9794%" y="239.50"></text></g><g><title>esp`main (366,823 samples, 99.87%)</title><rect x="0.0000%" y="325" width="99.8723%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="366823"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (366,823 samples, 99.87%)</title><rect x="0.0000%" y="309" width="99.8723%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="366823"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (366,823 samples, 99.87%)</title><rect x="0.0000%" y="293" width="99.8723%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="366823"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (366,823 samples, 99.87%)</title><rect x="0.0000%" y="277" width="99.8723%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="366823"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (366,823 samples, 99.87%)</title><rect x="0.0000%" y="261" width="99.8723%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="366823"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>all (367,292 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="367292"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (367,292 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="367292"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (367,292 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,192,49)" fg:x="0" fg:w="367292"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (469 samples, 0.13%)</title><rect x="99.8723%" y="325" width="0.1277%" height="15" fill="rgb(226,211,11)" fg:x="366823" fg:w="469"/><text x="100.1223%" y="335.50"></text></g></svg></svg>