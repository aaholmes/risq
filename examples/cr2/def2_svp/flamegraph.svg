<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="163886"><g><title>libsystem_malloc.dylib`small_size (68 samples, 0.04%)</title><rect x="0.0391%" y="213" width="0.0415%" height="15" fill="rgb(227,0,7)" fg:x="64" fg:w="68"/><text x="0.2891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (94 samples, 0.06%)</title><rect x="0.0305%" y="229" width="0.0574%" height="15" fill="rgb(217,0,24)" fg:x="50" fg:w="94"/><text x="0.2805%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (39 samples, 0.02%)</title><rect x="0.0879%" y="229" width="0.0238%" height="15" fill="rgb(221,193,54)" fg:x="144" fg:w="39"/><text x="0.3379%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (39 samples, 0.02%)</title><rect x="0.0879%" y="213" width="0.0238%" height="15" fill="rgb(248,212,6)" fg:x="144" fg:w="39"/><text x="0.3379%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (39 samples, 0.02%)</title><rect x="0.0879%" y="197" width="0.0238%" height="15" fill="rgb(208,68,35)" fg:x="144" fg:w="39"/><text x="0.3379%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (31 samples, 0.02%)</title><rect x="0.1422%" y="213" width="0.0189%" height="15" fill="rgb(232,128,0)" fg:x="233" fg:w="31"/><text x="0.3922%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (31 samples, 0.02%)</title><rect x="0.1422%" y="197" width="0.0189%" height="15" fill="rgb(207,160,47)" fg:x="233" fg:w="31"/><text x="0.3922%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (39 samples, 0.02%)</title><rect x="0.1611%" y="213" width="0.0238%" height="15" fill="rgb(228,23,34)" fg:x="264" fg:w="39"/><text x="0.4111%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (201 samples, 0.12%)</title><rect x="0.1892%" y="213" width="0.1226%" height="15" fill="rgb(218,30,26)" fg:x="310" fg:w="201"/><text x="0.4392%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (179 samples, 0.11%)</title><rect x="0.3167%" y="197" width="0.1092%" height="15" fill="rgb(220,122,19)" fg:x="519" fg:w="179"/><text x="0.5667%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (185 samples, 0.11%)</title><rect x="0.3142%" y="213" width="0.1129%" height="15" fill="rgb(250,228,42)" fg:x="515" fg:w="185"/><text x="0.5642%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,157 samples, 0.71%)</title><rect x="0.4570%" y="197" width="0.7060%" height="15" fill="rgb(240,193,28)" fg:x="749" fg:w="1157"/><text x="0.7070%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (36 samples, 0.02%)</title><rect x="1.1630%" y="197" width="0.0220%" height="15" fill="rgb(216,20,37)" fg:x="1906" fg:w="36"/><text x="1.4130%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1,764 samples, 1.08%)</title><rect x="0.1117%" y="229" width="1.0764%" height="15" fill="rgb(206,188,39)" fg:x="183" fg:w="1764"/><text x="0.3617%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,247 samples, 0.76%)</title><rect x="0.4271%" y="213" width="0.7609%" height="15" fill="rgb(217,207,13)" fg:x="700" fg:w="1247"/><text x="0.6771%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (47 samples, 0.03%)</title><rect x="1.1892%" y="213" width="0.0287%" height="15" fill="rgb(231,73,38)" fg:x="1949" fg:w="47"/><text x="1.4392%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (48 samples, 0.03%)</title><rect x="1.1892%" y="229" width="0.0293%" height="15" fill="rgb(225,20,46)" fg:x="1949" fg:w="48"/><text x="1.4392%" y="239.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::wf::Wf&gt; (1,997 samples, 1.22%)</title><rect x="0.0043%" y="245" width="1.2185%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1997"/><text x="0.2543%" y="255.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (21 samples, 0.01%)</title><rect x="1.2228%" y="229" width="0.0128%" height="15" fill="rgb(221,200,47)" fg:x="2004" fg:w="21"/><text x="1.4728%" y="239.50"></text></g><g><title>esp`__rdl_alloc (49 samples, 0.03%)</title><rect x="1.2716%" y="213" width="0.0299%" height="15" fill="rgb(226,26,5)" fg:x="2084" fg:w="49"/><text x="1.5216%" y="223.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (31 samples, 0.02%)</title><rect x="3.1723%" y="181" width="0.0189%" height="15" fill="rgb(249,33,26)" fg:x="5199" fg:w="31"/><text x="3.4223%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (368 samples, 0.22%)</title><rect x="2.9679%" y="197" width="0.2245%" height="15" fill="rgb(235,183,28)" fg:x="4864" fg:w="368"/><text x="3.2179%" y="207.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (215 samples, 0.13%)</title><rect x="19.3732%" y="181" width="0.1312%" height="15" fill="rgb(221,5,38)" fg:x="31750" fg:w="215"/><text x="19.6232%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (215 samples, 0.13%)</title><rect x="19.3732%" y="165" width="0.1312%" height="15" fill="rgb(247,18,42)" fg:x="31750" fg:w="215"/><text x="19.6232%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (175 samples, 0.11%)</title><rect x="19.5044%" y="181" width="0.1068%" height="15" fill="rgb(241,131,45)" fg:x="31965" fg:w="175"/><text x="19.7544%" y="191.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (26,914 samples, 16.42%)</title><rect x="3.1925%" y="197" width="16.4224%" height="15" fill="rgb(249,31,29)" fg:x="5232" fg:w="26914"/><text x="3.4425%" y="207.50">esp`&lt;esp::var::sparse::Sp..</text></g><g><title>libsystem_malloc.dylib`free_large (65 samples, 0.04%)</title><rect x="19.6167%" y="117" width="0.0397%" height="15" fill="rgb(225,111,53)" fg:x="32149" fg:w="65"/><text x="19.8667%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (65 samples, 0.04%)</title><rect x="19.6167%" y="101" width="0.0397%" height="15" fill="rgb(238,160,17)" fg:x="32149" fg:w="65"/><text x="19.8667%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (65 samples, 0.04%)</title><rect x="19.6167%" y="85" width="0.0397%" height="15" fill="rgb(214,148,48)" fg:x="32149" fg:w="65"/><text x="19.8667%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (85 samples, 0.05%)</title><rect x="19.6149%" y="197" width="0.0519%" height="15" fill="rgb(232,36,49)" fg:x="32146" fg:w="85"/><text x="19.8649%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (85 samples, 0.05%)</title><rect x="19.6149%" y="181" width="0.0519%" height="15" fill="rgb(209,103,24)" fg:x="32146" fg:w="85"/><text x="19.8649%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (85 samples, 0.05%)</title><rect x="19.6149%" y="165" width="0.0519%" height="15" fill="rgb(229,88,8)" fg:x="32146" fg:w="85"/><text x="19.8649%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (85 samples, 0.05%)</title><rect x="19.6149%" y="149" width="0.0519%" height="15" fill="rgb(213,181,19)" fg:x="32146" fg:w="85"/><text x="19.8649%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (85 samples, 0.05%)</title><rect x="19.6149%" y="133" width="0.0519%" height="15" fill="rgb(254,191,54)" fg:x="32146" fg:w="85"/><text x="19.8649%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (653 samples, 0.40%)</title><rect x="20.6448%" y="149" width="0.3984%" height="15" fill="rgb(241,83,37)" fg:x="33834" fg:w="653"/><text x="20.8948%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (1,041 samples, 0.64%)</title><rect x="21.0659%" y="133" width="0.6352%" height="15" fill="rgb(233,36,39)" fg:x="34524" fg:w="1041"/><text x="21.3159%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,473 samples, 0.90%)</title><rect x="21.0433%" y="149" width="0.8988%" height="15" fill="rgb(226,3,54)" fg:x="34487" fg:w="1473"/><text x="21.2933%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (395 samples, 0.24%)</title><rect x="21.7011%" y="133" width="0.2410%" height="15" fill="rgb(245,192,40)" fg:x="35565" fg:w="395"/><text x="21.9511%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (94 samples, 0.06%)</title><rect x="21.8847%" y="117" width="0.0574%" height="15" fill="rgb(238,167,29)" fg:x="35866" fg:w="94"/><text x="22.1347%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (2,144 samples, 1.31%)</title><rect x="20.6357%" y="165" width="1.3082%" height="15" fill="rgb(232,182,51)" fg:x="33819" fg:w="2144"/><text x="20.8857%" y="175.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,365 samples, 2.05%)</title><rect x="19.8919%" y="181" width="2.0533%" height="15" fill="rgb(231,60,39)" fg:x="32600" fg:w="3365"/><text x="20.1419%" y="191.50">e..</text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (3,903 samples, 2.38%)</title><rect x="19.6667%" y="197" width="2.3815%" height="15" fill="rgb(208,69,12)" fg:x="32231" fg:w="3903"/><text x="19.9167%" y="207.50">es..</text></g><g><title>libsystem_kernel.dylib`madvise (169 samples, 0.10%)</title><rect x="21.9451%" y="181" width="0.1031%" height="15" fill="rgb(235,93,37)" fg:x="35965" fg:w="169"/><text x="22.1951%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (125 samples, 0.08%)</title><rect x="22.0550%" y="181" width="0.0763%" height="15" fill="rgb(213,116,39)" fg:x="36145" fg:w="125"/><text x="22.3050%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (130 samples, 0.08%)</title><rect x="22.0550%" y="197" width="0.0793%" height="15" fill="rgb(222,207,29)" fg:x="36145" fg:w="130"/><text x="22.3050%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (45 samples, 0.03%)</title><rect x="22.1343%" y="197" width="0.0275%" height="15" fill="rgb(206,96,30)" fg:x="36275" fg:w="45"/><text x="22.3843%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,042 samples, 0.64%)</title><rect x="22.5163%" y="181" width="0.6358%" height="15" fill="rgb(218,138,4)" fg:x="36901" fg:w="1042"/><text x="22.7663%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (276 samples, 0.17%)</title><rect x="23.1521%" y="181" width="0.1684%" height="15" fill="rgb(250,191,14)" fg:x="37943" fg:w="276"/><text x="23.4021%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (81 samples, 0.05%)</title><rect x="23.3205%" y="181" width="0.0494%" height="15" fill="rgb(239,60,40)" fg:x="38219" fg:w="81"/><text x="23.5705%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (1,983 samples, 1.21%)</title><rect x="22.1617%" y="197" width="1.2100%" height="15" fill="rgb(206,27,48)" fg:x="36320" fg:w="1983"/><text x="22.4117%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (97 samples, 0.06%)</title><rect x="23.3736%" y="181" width="0.0592%" height="15" fill="rgb(225,35,8)" fg:x="38306" fg:w="97"/><text x="23.6236%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (140 samples, 0.09%)</title><rect x="23.4437%" y="165" width="0.0854%" height="15" fill="rgb(250,213,24)" fg:x="38421" fg:w="140"/><text x="23.6937%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (343 samples, 0.21%)</title><rect x="23.3717%" y="197" width="0.2093%" height="15" fill="rgb(247,123,22)" fg:x="38303" fg:w="343"/><text x="23.6217%" y="207.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (243 samples, 0.15%)</title><rect x="23.4328%" y="181" width="0.1483%" height="15" fill="rgb(231,138,38)" fg:x="38403" fg:w="243"/><text x="23.6828%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (85 samples, 0.05%)</title><rect x="23.5292%" y="165" width="0.0519%" height="15" fill="rgb(231,145,46)" fg:x="38561" fg:w="85"/><text x="23.7792%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (46 samples, 0.03%)</title><rect x="23.5530%" y="149" width="0.0281%" height="15" fill="rgb(251,118,11)" fg:x="38600" fg:w="46"/><text x="23.8030%" y="159.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (114 samples, 0.07%)</title><rect x="23.5816%" y="197" width="0.0696%" height="15" fill="rgb(217,147,25)" fg:x="38647" fg:w="114"/><text x="23.8316%" y="207.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (19 samples, 0.01%)</title><rect x="23.6512%" y="197" width="0.0116%" height="15" fill="rgb(247,81,37)" fg:x="38761" fg:w="19"/><text x="23.9012%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (594 samples, 0.36%)</title><rect x="23.6640%" y="197" width="0.3624%" height="15" fill="rgb(209,12,38)" fg:x="38782" fg:w="594"/><text x="23.9140%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (921 samples, 0.56%)</title><rect x="24.0289%" y="197" width="0.5620%" height="15" fill="rgb(227,1,9)" fg:x="39380" fg:w="921"/><text x="24.2789%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (918 samples, 0.56%)</title><rect x="24.0307%" y="181" width="0.5601%" height="15" fill="rgb(248,47,43)" fg:x="39383" fg:w="918"/><text x="24.2807%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (918 samples, 0.56%)</title><rect x="24.0307%" y="165" width="0.5601%" height="15" fill="rgb(221,10,30)" fg:x="39383" fg:w="918"/><text x="24.2807%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (38,218 samples, 23.32%)</title><rect x="1.3076%" y="213" width="23.3199%" height="15" fill="rgb(210,229,1)" fg:x="2143" fg:w="38218"/><text x="1.5576%" y="223.50">esp`eigenvalues::algorithms::davidson..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (58 samples, 0.04%)</title><rect x="24.5921%" y="197" width="0.0354%" height="15" fill="rgb(222,148,37)" fg:x="40303" fg:w="58"/><text x="24.8421%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (21 samples, 0.01%)</title><rect x="31.0496%" y="165" width="0.0128%" height="15" fill="rgb(234,67,33)" fg:x="50886" fg:w="21"/><text x="31.2996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1,008 samples, 0.62%)</title><rect x="31.0624%" y="165" width="0.6151%" height="15" fill="rgb(247,98,35)" fg:x="50907" fg:w="1008"/><text x="31.3124%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (939 samples, 0.57%)</title><rect x="31.1045%" y="149" width="0.5730%" height="15" fill="rgb(247,138,52)" fg:x="50976" fg:w="939"/><text x="31.3545%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1,497 samples, 0.91%)</title><rect x="30.7866%" y="181" width="0.9134%" height="15" fill="rgb(213,79,30)" fg:x="50455" fg:w="1497"/><text x="31.0366%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (37 samples, 0.02%)</title><rect x="31.6775%" y="165" width="0.0226%" height="15" fill="rgb(246,177,23)" fg:x="51915" fg:w="37"/><text x="31.9275%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (68 samples, 0.04%)</title><rect x="31.7001%" y="181" width="0.0415%" height="15" fill="rgb(230,62,27)" fg:x="51952" fg:w="68"/><text x="31.9501%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (68 samples, 0.04%)</title><rect x="31.7001%" y="165" width="0.0415%" height="15" fill="rgb(216,154,8)" fg:x="51952" fg:w="68"/><text x="31.9501%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (68 samples, 0.04%)</title><rect x="31.7001%" y="149" width="0.0415%" height="15" fill="rgb(244,35,45)" fg:x="51952" fg:w="68"/><text x="31.9501%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (32 samples, 0.02%)</title><rect x="31.7489%" y="165" width="0.0195%" height="15" fill="rgb(251,115,12)" fg:x="52032" fg:w="32"/><text x="31.9989%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (26 samples, 0.02%)</title><rect x="31.7690%" y="165" width="0.0159%" height="15" fill="rgb(240,54,50)" fg:x="52065" fg:w="26"/><text x="32.0190%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (72 samples, 0.04%)</title><rect x="31.7416%" y="181" width="0.0439%" height="15" fill="rgb(233,84,52)" fg:x="52020" fg:w="72"/><text x="31.9916%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.02%)</title><rect x="32.7209%" y="165" width="0.0183%" height="15" fill="rgb(207,117,47)" fg:x="53625" fg:w="30"/><text x="32.9709%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (99 samples, 0.06%)</title><rect x="34.1353%" y="149" width="0.0604%" height="15" fill="rgb(249,43,39)" fg:x="55943" fg:w="99"/><text x="34.3853%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (58 samples, 0.04%)</title><rect x="34.1603%" y="133" width="0.0354%" height="15" fill="rgb(209,38,44)" fg:x="55984" fg:w="58"/><text x="34.4103%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,342 samples, 0.82%)</title><rect x="34.1957%" y="149" width="0.8189%" height="15" fill="rgb(236,212,23)" fg:x="56042" fg:w="1342"/><text x="34.4457%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1,505 samples, 0.92%)</title><rect x="35.0146%" y="149" width="0.9183%" height="15" fill="rgb(242,79,21)" fg:x="57384" fg:w="1505"/><text x="35.2646%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (63 samples, 0.04%)</title><rect x="35.9329%" y="149" width="0.0384%" height="15" fill="rgb(211,96,35)" fg:x="58889" fg:w="63"/><text x="36.1829%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (19 samples, 0.01%)</title><rect x="36.0037%" y="133" width="0.0116%" height="15" fill="rgb(253,215,40)" fg:x="59005" fg:w="19"/><text x="36.2537%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (73 samples, 0.04%)</title><rect x="35.9713%" y="149" width="0.0445%" height="15" fill="rgb(211,81,21)" fg:x="58952" fg:w="73"/><text x="36.2213%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (74 samples, 0.05%)</title><rect x="36.0202%" y="133" width="0.0452%" height="15" fill="rgb(208,190,38)" fg:x="59032" fg:w="74"/><text x="36.2702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5,441 samples, 3.32%)</title><rect x="32.7472%" y="165" width="3.3200%" height="15" fill="rgb(235,213,38)" fg:x="53668" fg:w="5441"/><text x="32.9972%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (84 samples, 0.05%)</title><rect x="36.0159%" y="149" width="0.0513%" height="15" fill="rgb(237,122,38)" fg:x="59025" fg:w="84"/><text x="36.2659%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7,018 samples, 4.28%)</title><rect x="31.7855%" y="181" width="4.2822%" height="15" fill="rgb(244,218,35)" fg:x="52092" fg:w="7018"/><text x="32.0355%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (58 samples, 0.04%)</title><rect x="36.0684%" y="181" width="0.0354%" height="15" fill="rgb(240,68,47)" fg:x="59111" fg:w="58"/><text x="36.3184%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,263 samples, 5.65%)</title><rect x="30.4773%" y="197" width="5.6521%" height="15" fill="rgb(210,16,53)" fg:x="49948" fg:w="9263"/><text x="30.7273%" y="207.50">esp`&lt;ha..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.03%)</title><rect x="36.1038%" y="181" width="0.0256%" height="15" fill="rgb(235,124,12)" fg:x="59169" fg:w="42"/><text x="36.3538%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (58 samples, 0.04%)</title><rect x="36.1300%" y="197" width="0.0354%" height="15" fill="rgb(224,169,11)" fg:x="59212" fg:w="58"/><text x="36.3800%" y="207.50"></text></g><g><title>esp`__rdl_realloc (24 samples, 0.01%)</title><rect x="36.2325%" y="165" width="0.0146%" height="15" fill="rgb(250,166,2)" fg:x="59380" fg:w="24"/><text x="36.4825%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (40 samples, 0.02%)</title><rect x="36.3332%" y="133" width="0.0244%" height="15" fill="rgb(242,216,29)" fg:x="59545" fg:w="40"/><text x="36.5832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (143 samples, 0.09%)</title><rect x="36.6798%" y="85" width="0.0873%" height="15" fill="rgb(230,116,27)" fg:x="60113" fg:w="143"/><text x="36.9298%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (576 samples, 0.35%)</title><rect x="36.4259%" y="117" width="0.3515%" height="15" fill="rgb(228,99,48)" fg:x="59697" fg:w="576"/><text x="36.6759%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (288 samples, 0.18%)</title><rect x="36.6017%" y="101" width="0.1757%" height="15" fill="rgb(253,11,6)" fg:x="59985" fg:w="288"/><text x="36.8517%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (30 samples, 0.02%)</title><rect x="36.8177%" y="69" width="0.0183%" height="15" fill="rgb(247,143,39)" fg:x="60339" fg:w="30"/><text x="37.0677%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (94 samples, 0.06%)</title><rect x="36.8042%" y="101" width="0.0574%" height="15" fill="rgb(236,97,10)" fg:x="60317" fg:w="94"/><text x="37.0542%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (79 samples, 0.05%)</title><rect x="36.8134%" y="85" width="0.0482%" height="15" fill="rgb(233,208,19)" fg:x="60332" fg:w="79"/><text x="37.0634%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (42 samples, 0.03%)</title><rect x="36.8360%" y="69" width="0.0256%" height="15" fill="rgb(216,164,2)" fg:x="60369" fg:w="42"/><text x="37.0860%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (88 samples, 0.05%)</title><rect x="37.1069%" y="85" width="0.0537%" height="15" fill="rgb(220,129,5)" fg:x="60813" fg:w="88"/><text x="37.3569%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (851 samples, 0.52%)</title><rect x="36.7829%" y="117" width="0.5193%" height="15" fill="rgb(242,17,10)" fg:x="60282" fg:w="851"/><text x="37.0329%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (717 samples, 0.44%)</title><rect x="36.8646%" y="101" width="0.4375%" height="15" fill="rgb(242,107,0)" fg:x="60416" fg:w="717"/><text x="37.1146%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (229 samples, 0.14%)</title><rect x="37.1624%" y="85" width="0.1397%" height="15" fill="rgb(251,28,31)" fg:x="60904" fg:w="229"/><text x="37.4124%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (38 samples, 0.02%)</title><rect x="37.2790%" y="69" width="0.0232%" height="15" fill="rgb(233,223,10)" fg:x="61095" fg:w="38"/><text x="37.5290%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (120 samples, 0.07%)</title><rect x="37.3021%" y="117" width="0.0732%" height="15" fill="rgb(215,21,27)" fg:x="61133" fg:w="120"/><text x="37.5521%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (104 samples, 0.06%)</title><rect x="37.3119%" y="101" width="0.0635%" height="15" fill="rgb(232,23,21)" fg:x="61149" fg:w="104"/><text x="37.5619%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (304 samples, 0.19%)</title><rect x="37.3809%" y="117" width="0.1855%" height="15" fill="rgb(244,5,23)" fg:x="61262" fg:w="304"/><text x="37.6309%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,187 samples, 1.33%)</title><rect x="36.3655%" y="133" width="1.3345%" height="15" fill="rgb(226,81,46)" fg:x="59598" fg:w="2187"/><text x="36.6155%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (219 samples, 0.13%)</title><rect x="37.5664%" y="117" width="0.1336%" height="15" fill="rgb(247,70,30)" fg:x="61566" fg:w="219"/><text x="37.8164%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,300 samples, 1.40%)</title><rect x="36.3076%" y="149" width="1.4034%" height="15" fill="rgb(212,68,19)" fg:x="59503" fg:w="2300"/><text x="36.5576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (189 samples, 0.12%)</title><rect x="37.7201%" y="149" width="0.1153%" height="15" fill="rgb(240,187,13)" fg:x="61818" fg:w="189"/><text x="37.9701%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (172 samples, 0.10%)</title><rect x="37.7305%" y="133" width="0.1050%" height="15" fill="rgb(223,113,26)" fg:x="61835" fg:w="172"/><text x="37.9805%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,602 samples, 1.59%)</title><rect x="36.2490%" y="165" width="1.5877%" height="15" fill="rgb(206,192,2)" fg:x="59407" fg:w="2602"/><text x="36.4990%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,670 samples, 1.63%)</title><rect x="36.2136%" y="181" width="1.6292%" height="15" fill="rgb(241,108,4)" fg:x="59349" fg:w="2670"/><text x="36.4636%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,753 samples, 1.68%)</title><rect x="36.1660%" y="197" width="1.6798%" height="15" fill="rgb(247,173,49)" fg:x="59271" fg:w="2753"/><text x="36.4160%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (259 samples, 0.16%)</title><rect x="37.8586%" y="197" width="0.1580%" height="15" fill="rgb(224,114,35)" fg:x="62045" fg:w="259"/><text x="38.1086%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (32 samples, 0.02%)</title><rect x="38.0167%" y="197" width="0.0195%" height="15" fill="rgb(245,159,27)" fg:x="62304" fg:w="32"/><text x="38.2667%" y="207.50"></text></g><g><title>esp`esp::var::off_diag::OffDiagElemsNoHash::expand_rows (26 samples, 0.02%)</title><rect x="38.0368%" y="197" width="0.0159%" height="15" fill="rgb(245,172,44)" fg:x="62337" fg:w="26"/><text x="38.2868%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.03%)</title><rect x="40.7478%" y="149" width="0.0268%" height="15" fill="rgb(236,23,11)" fg:x="66780" fg:w="44"/><text x="40.9978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.02%)</title><rect x="40.7515%" y="133" width="0.0232%" height="15" fill="rgb(205,117,38)" fg:x="66786" fg:w="38"/><text x="41.0015%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (38 samples, 0.02%)</title><rect x="40.7515%" y="117" width="0.0232%" height="15" fill="rgb(237,72,25)" fg:x="66786" fg:w="38"/><text x="41.0015%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (20 samples, 0.01%)</title><rect x="40.8180%" y="117" width="0.0122%" height="15" fill="rgb(244,70,9)" fg:x="66895" fg:w="20"/><text x="41.0680%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (93 samples, 0.06%)</title><rect x="40.8522%" y="101" width="0.0567%" height="15" fill="rgb(217,125,39)" fg:x="66951" fg:w="93"/><text x="41.1022%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (129 samples, 0.08%)</title><rect x="41.0358%" y="69" width="0.0787%" height="15" fill="rgb(235,36,10)" fg:x="67252" fg:w="129"/><text x="41.2858%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (91 samples, 0.06%)</title><rect x="41.1146%" y="69" width="0.0555%" height="15" fill="rgb(251,123,47)" fg:x="67381" fg:w="91"/><text x="41.3646%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (499 samples, 0.30%)</title><rect x="40.9089%" y="101" width="0.3045%" height="15" fill="rgb(221,13,13)" fg:x="67044" fg:w="499"/><text x="41.1589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (421 samples, 0.26%)</title><rect x="40.9565%" y="85" width="0.2569%" height="15" fill="rgb(238,131,9)" fg:x="67122" fg:w="421"/><text x="41.2065%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (64 samples, 0.04%)</title><rect x="41.1744%" y="69" width="0.0391%" height="15" fill="rgb(211,50,8)" fg:x="67479" fg:w="64"/><text x="41.4244%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (63 samples, 0.04%)</title><rect x="41.1750%" y="53" width="0.0384%" height="15" fill="rgb(245,182,24)" fg:x="67480" fg:w="63"/><text x="41.4250%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (39 samples, 0.02%)</title><rect x="41.2177%" y="101" width="0.0238%" height="15" fill="rgb(242,14,37)" fg:x="67550" fg:w="39"/><text x="41.4677%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (59 samples, 0.04%)</title><rect x="41.3190%" y="53" width="0.0360%" height="15" fill="rgb(246,228,12)" fg:x="67716" fg:w="59"/><text x="41.5690%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (230 samples, 0.14%)</title><rect x="41.2488%" y="85" width="0.1403%" height="15" fill="rgb(213,55,15)" fg:x="67601" fg:w="230"/><text x="41.4988%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (164 samples, 0.10%)</title><rect x="41.2891%" y="69" width="0.1001%" height="15" fill="rgb(209,9,3)" fg:x="67667" fg:w="164"/><text x="41.5391%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (56 samples, 0.03%)</title><rect x="41.3550%" y="53" width="0.0342%" height="15" fill="rgb(230,59,30)" fg:x="67775" fg:w="56"/><text x="41.6050%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (32 samples, 0.02%)</title><rect x="41.4373%" y="69" width="0.0195%" height="15" fill="rgb(209,121,21)" fg:x="67910" fg:w="32"/><text x="41.6873%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (424 samples, 0.26%)</title><rect x="41.2415%" y="101" width="0.2587%" height="15" fill="rgb(220,109,13)" fg:x="67589" fg:w="424"/><text x="41.4915%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (182 samples, 0.11%)</title><rect x="41.3891%" y="85" width="0.1111%" height="15" fill="rgb(232,18,1)" fg:x="67831" fg:w="182"/><text x="41.6391%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (67 samples, 0.04%)</title><rect x="41.4593%" y="69" width="0.0409%" height="15" fill="rgb(215,41,42)" fg:x="67946" fg:w="67"/><text x="41.7093%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (41 samples, 0.03%)</title><rect x="41.5002%" y="101" width="0.0250%" height="15" fill="rgb(224,123,36)" fg:x="68013" fg:w="41"/><text x="41.7502%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.02%)</title><rect x="41.5039%" y="85" width="0.0214%" height="15" fill="rgb(240,125,3)" fg:x="68019" fg:w="35"/><text x="41.7539%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (126 samples, 0.08%)</title><rect x="41.5252%" y="101" width="0.0769%" height="15" fill="rgb(205,98,50)" fg:x="68054" fg:w="126"/><text x="41.7752%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (31 samples, 0.02%)</title><rect x="41.5832%" y="85" width="0.0189%" height="15" fill="rgb(205,185,37)" fg:x="68149" fg:w="31"/><text x="41.8332%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,361 samples, 1.44%)</title><rect x="40.8351%" y="117" width="1.4406%" height="15" fill="rgb(238,207,15)" fg:x="66923" fg:w="2361"/><text x="41.0851%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,104 samples, 0.67%)</title><rect x="41.6021%" y="101" width="0.6736%" height="15" fill="rgb(213,199,42)" fg:x="68180" fg:w="1104"/><text x="41.8521%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,416 samples, 1.47%)</title><rect x="40.8076%" y="133" width="1.4742%" height="15" fill="rgb(235,201,11)" fg:x="66878" fg:w="2416"/><text x="41.0576%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (82 samples, 0.05%)</title><rect x="42.2818%" y="133" width="0.0500%" height="15" fill="rgb(207,46,11)" fg:x="69294" fg:w="82"/><text x="42.5318%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (144 samples, 0.09%)</title><rect x="42.3325%" y="133" width="0.0879%" height="15" fill="rgb(241,35,35)" fg:x="69377" fg:w="144"/><text x="42.5825%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (139 samples, 0.08%)</title><rect x="42.3355%" y="117" width="0.0848%" height="15" fill="rgb(243,32,47)" fg:x="69382" fg:w="139"/><text x="42.5855%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,696 samples, 1.65%)</title><rect x="40.7771%" y="149" width="1.6450%" height="15" fill="rgb(247,202,23)" fg:x="66828" fg:w="2696"/><text x="41.0271%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,771 samples, 1.69%)</title><rect x="40.7393%" y="165" width="1.6908%" height="15" fill="rgb(219,102,11)" fg:x="66766" fg:w="2771"/><text x="40.9893%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,801 samples, 1.71%)</title><rect x="40.7222%" y="181" width="1.7091%" height="15" fill="rgb(243,110,44)" fg:x="66738" fg:w="2801"/><text x="40.9722%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (28 samples, 0.02%)</title><rect x="42.4325%" y="181" width="0.0171%" height="15" fill="rgb(222,74,54)" fg:x="69541" fg:w="28"/><text x="42.6825%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (15,581 samples, 9.51%)</title><rect x="38.0527%" y="197" width="9.5072%" height="15" fill="rgb(216,99,12)" fg:x="62363" fg:w="15581"/><text x="38.3027%" y="207.50">esp`esp::var::..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (8,375 samples, 5.11%)</title><rect x="42.4496%" y="181" width="5.1103%" height="15" fill="rgb(226,22,26)" fg:x="69569" fg:w="8375"/><text x="42.6996%" y="191.50">esp`es..</text></g><g><title>esp`esp::ham::Ham::ham_doub (4,908 samples, 2.99%)</title><rect x="44.5651%" y="165" width="2.9948%" height="15" fill="rgb(217,163,10)" fg:x="73036" fg:w="4908"/><text x="44.8151%" y="175.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (39 samples, 0.02%)</title><rect x="48.9346%" y="181" width="0.0238%" height="15" fill="rgb(213,25,53)" fg:x="80197" fg:w="39"/><text x="49.1846%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (4,656 samples, 2.84%)</title><rect x="48.9688%" y="181" width="2.8410%" height="15" fill="rgb(252,105,26)" fg:x="80253" fg:w="4656"/><text x="49.2188%" y="191.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_doub (1,509 samples, 0.92%)</title><rect x="50.8890%" y="165" width="0.9208%" height="15" fill="rgb(220,39,43)" fg:x="83400" fg:w="1509"/><text x="51.1390%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (986 samples, 0.60%)</title><rect x="51.2082%" y="149" width="0.6016%" height="15" fill="rgb(229,68,48)" fg:x="83923" fg:w="986"/><text x="51.4582%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (1,130 samples, 0.69%)</title><rect x="51.8098%" y="181" width="0.6895%" height="15" fill="rgb(252,8,32)" fg:x="84909" fg:w="1130"/><text x="52.0598%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (760 samples, 0.46%)</title><rect x="52.0356%" y="165" width="0.4637%" height="15" fill="rgb(223,20,43)" fg:x="85279" fg:w="760"/><text x="52.2856%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (71 samples, 0.04%)</title><rect x="53.2730%" y="85" width="0.0433%" height="15" fill="rgb(229,81,49)" fg:x="87307" fg:w="71"/><text x="53.5230%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (25 samples, 0.02%)</title><rect x="53.3011%" y="69" width="0.0153%" height="15" fill="rgb(236,28,36)" fg:x="87353" fg:w="25"/><text x="53.5511%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (42 samples, 0.03%)</title><rect x="53.3163%" y="85" width="0.0256%" height="15" fill="rgb(249,185,26)" fg:x="87378" fg:w="42"/><text x="53.5663%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (40 samples, 0.02%)</title><rect x="53.3176%" y="69" width="0.0244%" height="15" fill="rgb(249,174,33)" fg:x="87380" fg:w="40"/><text x="53.5676%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (24 samples, 0.01%)</title><rect x="53.3273%" y="53" width="0.0146%" height="15" fill="rgb(233,201,37)" fg:x="87396" fg:w="24"/><text x="53.5773%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.01%)</title><rect x="53.3279%" y="37" width="0.0140%" height="15" fill="rgb(221,78,26)" fg:x="87397" fg:w="23"/><text x="53.5779%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (28 samples, 0.02%)</title><rect x="53.3432%" y="85" width="0.0171%" height="15" fill="rgb(250,127,30)" fg:x="87422" fg:w="28"/><text x="53.5932%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (71 samples, 0.04%)</title><rect x="53.3621%" y="69" width="0.0433%" height="15" fill="rgb(230,49,44)" fg:x="87453" fg:w="71"/><text x="53.6121%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (49 samples, 0.03%)</title><rect x="53.3755%" y="53" width="0.0299%" height="15" fill="rgb(229,67,23)" fg:x="87475" fg:w="49"/><text x="53.6255%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.05%)</title><rect x="53.3603%" y="85" width="0.0470%" height="15" fill="rgb(249,83,47)" fg:x="87450" fg:w="77"/><text x="53.6103%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1,122 samples, 0.68%)</title><rect x="53.2706%" y="101" width="0.6846%" height="15" fill="rgb(215,43,3)" fg:x="87303" fg:w="1122"/><text x="53.5206%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (895 samples, 0.55%)</title><rect x="53.4091%" y="85" width="0.5461%" height="15" fill="rgb(238,154,13)" fg:x="87530" fg:w="895"/><text x="53.6591%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,128 samples, 0.69%)</title><rect x="53.2675%" y="117" width="0.6883%" height="15" fill="rgb(219,56,2)" fg:x="87298" fg:w="1128"/><text x="53.5175%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (53 samples, 0.03%)</title><rect x="53.9558%" y="117" width="0.0323%" height="15" fill="rgb(233,0,4)" fg:x="88426" fg:w="53"/><text x="54.2058%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,207 samples, 0.74%)</title><rect x="53.2614%" y="133" width="0.7365%" height="15" fill="rgb(235,30,7)" fg:x="87288" fg:w="1207"/><text x="53.5114%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (1,218 samples, 0.74%)</title><rect x="53.2602%" y="149" width="0.7432%" height="15" fill="rgb(250,79,13)" fg:x="87286" fg:w="1218"/><text x="53.5102%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el (2,471 samples, 1.51%)</title><rect x="52.4993%" y="181" width="1.5078%" height="15" fill="rgb(211,146,34)" fg:x="86039" fg:w="2471"/><text x="52.7493%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,227 samples, 0.75%)</title><rect x="53.2584%" y="165" width="0.7487%" height="15" fill="rgb(228,22,38)" fg:x="87283" fg:w="1227"/><text x="53.5084%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (11,208 samples, 6.84%)</title><rect x="47.5599%" y="197" width="6.8389%" height="15" fill="rgb(235,168,5)" fg:x="77944" fg:w="11208"/><text x="47.8099%" y="207.50">esp`esp::..</text></g><g><title>esp`hashbrown::map::make_hash (642 samples, 0.39%)</title><rect x="54.0071%" y="181" width="0.3917%" height="15" fill="rgb(221,155,16)" fg:x="88510" fg:w="642"/><text x="54.2571%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (389 samples, 0.24%)</title><rect x="54.1614%" y="165" width="0.2374%" height="15" fill="rgb(215,215,53)" fg:x="88763" fg:w="389"/><text x="54.4114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (42 samples, 0.03%)</title><rect x="60.8173%" y="85" width="0.0256%" height="15" fill="rgb(223,4,10)" fg:x="99671" fg:w="42"/><text x="61.0673%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (42 samples, 0.03%)</title><rect x="60.8173%" y="69" width="0.0256%" height="15" fill="rgb(234,103,6)" fg:x="99671" fg:w="42"/><text x="61.0673%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (42 samples, 0.03%)</title><rect x="60.8173%" y="53" width="0.0256%" height="15" fill="rgb(227,97,0)" fg:x="99671" fg:w="42"/><text x="61.0673%" y="63.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,917 samples, 5.44%)</title><rect x="55.4141%" y="181" width="5.4410%" height="15" fill="rgb(234,150,53)" fg:x="90816" fg:w="8917"/><text x="55.6641%" y="191.50">esp`&lt;al..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (71 samples, 0.04%)</title><rect x="60.8118%" y="165" width="0.0433%" height="15" fill="rgb(228,201,54)" fg:x="99662" fg:w="71"/><text x="61.0618%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (71 samples, 0.04%)</title><rect x="60.8118%" y="149" width="0.0433%" height="15" fill="rgb(222,22,37)" fg:x="99662" fg:w="71"/><text x="61.0618%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (71 samples, 0.04%)</title><rect x="60.8118%" y="133" width="0.0433%" height="15" fill="rgb(237,53,32)" fg:x="99662" fg:w="71"/><text x="61.0618%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (71 samples, 0.04%)</title><rect x="60.8118%" y="117" width="0.0433%" height="15" fill="rgb(233,25,53)" fg:x="99662" fg:w="71"/><text x="61.0618%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (71 samples, 0.04%)</title><rect x="60.8118%" y="101" width="0.0433%" height="15" fill="rgb(210,40,34)" fg:x="99662" fg:w="71"/><text x="61.0618%" y="111.50"></text></g><g><title>esp`DYLD-STUB$$memcpy (19 samples, 0.01%)</title><rect x="60.8551%" y="181" width="0.0116%" height="15" fill="rgb(241,220,44)" fg:x="99733" fg:w="19"/><text x="61.1051%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (55 samples, 0.03%)</title><rect x="64.5967%" y="117" width="0.0336%" height="15" fill="rgb(235,28,35)" fg:x="105865" fg:w="55"/><text x="64.8467%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.03%)</title><rect x="64.5986%" y="101" width="0.0317%" height="15" fill="rgb(210,56,17)" fg:x="105868" fg:w="52"/><text x="64.8486%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 0.04%)</title><rect x="64.5931%" y="133" width="0.0378%" height="15" fill="rgb(224,130,29)" fg:x="105859" fg:w="62"/><text x="64.8431%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (39 samples, 0.02%)</title><rect x="64.6340%" y="117" width="0.0238%" height="15" fill="rgb(235,212,8)" fg:x="105926" fg:w="39"/><text x="64.8840%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (35 samples, 0.02%)</title><rect x="64.6364%" y="101" width="0.0214%" height="15" fill="rgb(223,33,50)" fg:x="105930" fg:w="35"/><text x="64.8864%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (118 samples, 0.07%)</title><rect x="64.5888%" y="149" width="0.0720%" height="15" fill="rgb(219,149,13)" fg:x="105852" fg:w="118"/><text x="64.8388%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (46 samples, 0.03%)</title><rect x="64.6327%" y="133" width="0.0281%" height="15" fill="rgb(250,156,29)" fg:x="105924" fg:w="46"/><text x="64.8827%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (136 samples, 0.08%)</title><rect x="64.5796%" y="165" width="0.0830%" height="15" fill="rgb(216,193,19)" fg:x="105837" fg:w="136"/><text x="64.8296%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (28 samples, 0.02%)</title><rect x="64.6706%" y="133" width="0.0171%" height="15" fill="rgb(216,135,14)" fg:x="105986" fg:w="28"/><text x="64.9206%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (87 samples, 0.05%)</title><rect x="64.6645%" y="165" width="0.0531%" height="15" fill="rgb(241,47,5)" fg:x="105976" fg:w="87"/><text x="64.9145%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (78 samples, 0.05%)</title><rect x="64.6700%" y="149" width="0.0476%" height="15" fill="rgb(233,42,35)" fg:x="105985" fg:w="78"/><text x="64.9200%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (49 samples, 0.03%)</title><rect x="64.6876%" y="133" width="0.0299%" height="15" fill="rgb(231,13,6)" fg:x="106014" fg:w="49"/><text x="64.9376%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24 samples, 0.01%)</title><rect x="64.7029%" y="117" width="0.0146%" height="15" fill="rgb(207,181,40)" fg:x="106039" fg:w="24"/><text x="64.9529%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.02%)</title><rect x="64.7291%" y="149" width="0.0165%" height="15" fill="rgb(254,173,49)" fg:x="106082" fg:w="27"/><text x="64.9791%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (25 samples, 0.02%)</title><rect x="64.7304%" y="133" width="0.0153%" height="15" fill="rgb(221,1,38)" fg:x="106084" fg:w="25"/><text x="64.9804%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.03%)</title><rect x="64.7175%" y="165" width="0.0287%" height="15" fill="rgb(206,124,46)" fg:x="106063" fg:w="47"/><text x="64.9675%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.01%)</title><rect x="64.7895%" y="133" width="0.0128%" height="15" fill="rgb(249,21,11)" fg:x="106181" fg:w="21"/><text x="65.0395%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (87 samples, 0.05%)</title><rect x="64.7535%" y="165" width="0.0531%" height="15" fill="rgb(222,201,40)" fg:x="106122" fg:w="87"/><text x="65.0035%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (56 samples, 0.03%)</title><rect x="64.7725%" y="149" width="0.0342%" height="15" fill="rgb(235,61,29)" fg:x="106153" fg:w="56"/><text x="65.0225%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (6,734 samples, 4.11%)</title><rect x="60.8740%" y="181" width="4.1090%" height="15" fill="rgb(219,207,3)" fg:x="99764" fg:w="6734"/><text x="61.1240%" y="191.50">esp`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (284 samples, 0.17%)</title><rect x="64.8097%" y="165" width="0.1733%" height="15" fill="rgb(222,56,46)" fg:x="106214" fg:w="284"/><text x="65.0597%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new (1,338 samples, 0.82%)</title><rect x="64.9830%" y="181" width="0.8164%" height="15" fill="rgb(239,76,54)" fg:x="106498" fg:w="1338"/><text x="65.2330%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (1,338 samples, 0.82%)</title><rect x="64.9830%" y="165" width="0.8164%" height="15" fill="rgb(231,124,27)" fg:x="106498" fg:w="1338"/><text x="65.2330%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::create_sparse (18,753 samples, 11.44%)</title><rect x="54.3988%" y="197" width="11.4427%" height="15" fill="rgb(249,195,6)" fg:x="89152" fg:w="18753"/><text x="54.6488%" y="207.50">esp`esp::var::off..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.03%)</title><rect x="65.8085%" y="181" width="0.0329%" height="15" fill="rgb(237,174,47)" fg:x="107851" fg:w="54"/><text x="66.0585%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4,378 samples, 2.67%)</title><rect x="65.8415%" y="197" width="2.6714%" height="15" fill="rgb(206,201,31)" fg:x="107905" fg:w="4378"/><text x="66.0915%" y="207.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (819 samples, 0.50%)</title><rect x="68.0131%" y="181" width="0.4997%" height="15" fill="rgb(231,57,52)" fg:x="111464" fg:w="819"/><text x="68.2631%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (559 samples, 0.34%)</title><rect x="69.2457%" y="181" width="0.3411%" height="15" fill="rgb(248,177,22)" fg:x="113484" fg:w="559"/><text x="69.4957%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (66 samples, 0.04%)</title><rect x="69.9779%" y="165" width="0.0403%" height="15" fill="rgb(215,211,37)" fg:x="114684" fg:w="66"/><text x="70.2279%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (761 samples, 0.46%)</title><rect x="71.6175%" y="149" width="0.4643%" height="15" fill="rgb(241,128,51)" fg:x="117371" fg:w="761"/><text x="71.8675%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (17 samples, 0.01%)</title><rect x="72.0952%" y="101" width="0.0104%" height="15" fill="rgb(227,165,31)" fg:x="118154" fg:w="17"/><text x="72.3452%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (65 samples, 0.04%)</title><rect x="72.1062%" y="101" width="0.0397%" height="15" fill="rgb(228,167,24)" fg:x="118172" fg:w="65"/><text x="72.3562%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (47 samples, 0.03%)</title><rect x="72.1172%" y="85" width="0.0287%" height="15" fill="rgb(228,143,12)" fg:x="118190" fg:w="47"/><text x="72.3672%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (20 samples, 0.01%)</title><rect x="72.1337%" y="69" width="0.0122%" height="15" fill="rgb(249,149,8)" fg:x="118217" fg:w="20"/><text x="72.3837%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (125 samples, 0.08%)</title><rect x="72.0910%" y="117" width="0.0763%" height="15" fill="rgb(243,35,44)" fg:x="118147" fg:w="125"/><text x="72.3410%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.02%)</title><rect x="72.1459%" y="101" width="0.0214%" height="15" fill="rgb(246,89,9)" fg:x="118237" fg:w="35"/><text x="72.3959%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.01%)</title><rect x="72.1544%" y="85" width="0.0128%" height="15" fill="rgb(233,213,13)" fg:x="118251" fg:w="21"/><text x="72.4044%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (129 samples, 0.08%)</title><rect x="72.0891%" y="133" width="0.0787%" height="15" fill="rgb(233,141,41)" fg:x="118144" fg:w="129"/><text x="72.3391%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (184 samples, 0.11%)</title><rect x="72.1697%" y="133" width="0.1123%" height="15" fill="rgb(239,167,4)" fg:x="118276" fg:w="184"/><text x="72.4197%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (329 samples, 0.20%)</title><rect x="72.0818%" y="149" width="0.2007%" height="15" fill="rgb(209,217,16)" fg:x="118132" fg:w="329"/><text x="72.3318%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (76 samples, 0.05%)</title><rect x="72.2826%" y="149" width="0.0464%" height="15" fill="rgb(219,88,35)" fg:x="118461" fg:w="76"/><text x="72.5326%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (17 samples, 0.01%)</title><rect x="72.3381%" y="133" width="0.0104%" height="15" fill="rgb(220,193,23)" fg:x="118552" fg:w="17"/><text x="72.5881%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.02%)</title><rect x="72.3289%" y="149" width="0.0201%" height="15" fill="rgb(230,90,52)" fg:x="118537" fg:w="33"/><text x="72.5789%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (29 samples, 0.02%)</title><rect x="72.3558%" y="149" width="0.0177%" height="15" fill="rgb(252,106,19)" fg:x="118581" fg:w="29"/><text x="72.6058%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,880 samples, 2.37%)</title><rect x="70.0182%" y="165" width="2.3675%" height="15" fill="rgb(206,74,20)" fg:x="114750" fg:w="3880"/><text x="70.2682%" y="175.50">es..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (4,589 samples, 2.80%)</title><rect x="69.5868%" y="181" width="2.8001%" height="15" fill="rgb(230,138,44)" fg:x="114043" fg:w="4589"/><text x="69.8368%" y="191.50">es..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,354 samples, 3.88%)</title><rect x="68.5129%" y="197" width="3.8771%" height="15" fill="rgb(235,182,43)" fg:x="112283" fg:w="6354"/><text x="68.7629%" y="207.50">esp`..</text></g><g><title>esp`hashbrown::map::make_hash (948 samples, 0.58%)</title><rect x="72.3900%" y="197" width="0.5785%" height="15" fill="rgb(242,16,51)" fg:x="118637" fg:w="948"/><text x="72.6400%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (542 samples, 0.33%)</title><rect x="72.6377%" y="181" width="0.3307%" height="15" fill="rgb(248,9,4)" fg:x="119043" fg:w="542"/><text x="72.8877%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.02%)</title><rect x="72.9684%" y="197" width="0.0159%" height="15" fill="rgb(210,31,22)" fg:x="119585" fg:w="26"/><text x="73.2184%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9,415 samples, 5.74%)</title><rect x="72.9843%" y="197" width="5.7448%" height="15" fill="rgb(239,54,39)" fg:x="119611" fg:w="9415"/><text x="73.2343%" y="207.50">esp`std..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,750 samples, 1.07%)</title><rect x="77.6613%" y="181" width="1.0678%" height="15" fill="rgb(230,99,41)" fg:x="127276" fg:w="1750"/><text x="77.9113%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (102 samples, 0.06%)</title><rect x="78.7297%" y="197" width="0.0622%" height="15" fill="rgb(253,106,12)" fg:x="129027" fg:w="102"/><text x="78.9797%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (26 samples, 0.02%)</title><rect x="79.1288%" y="165" width="0.0159%" height="15" fill="rgb(213,46,41)" fg:x="129681" fg:w="26"/><text x="79.3788%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4,503 samples, 2.75%)</title><rect x="78.9903%" y="181" width="2.7476%" height="15" fill="rgb(215,133,35)" fg:x="129454" fg:w="4503"/><text x="79.2403%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4,250 samples, 2.59%)</title><rect x="79.1446%" y="165" width="2.5933%" height="15" fill="rgb(213,28,5)" fg:x="129707" fg:w="4250"/><text x="79.3946%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,392 samples, 0.85%)</title><rect x="80.8885%" y="149" width="0.8494%" height="15" fill="rgb(215,77,49)" fg:x="132565" fg:w="1392"/><text x="81.1385%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (246 samples, 0.15%)</title><rect x="81.5878%" y="133" width="0.1501%" height="15" fill="rgb(248,100,22)" fg:x="133711" fg:w="246"/><text x="81.8378%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4,838 samples, 2.95%)</title><rect x="78.7920%" y="197" width="2.9521%" height="15" fill="rgb(208,67,9)" fg:x="129129" fg:w="4838"/><text x="79.0420%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (32 samples, 0.02%)</title><rect x="81.7440%" y="197" width="0.0195%" height="15" fill="rgb(219,133,21)" fg:x="133967" fg:w="32"/><text x="81.9940%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (96 samples, 0.06%)</title><rect x="81.7635%" y="197" width="0.0586%" height="15" fill="rgb(246,46,29)" fg:x="133999" fg:w="96"/><text x="82.0135%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (41 samples, 0.03%)</title><rect x="81.8221%" y="197" width="0.0250%" height="15" fill="rgb(246,185,52)" fg:x="134095" fg:w="41"/><text x="82.0721%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (44 samples, 0.03%)</title><rect x="81.8471%" y="197" width="0.0268%" height="15" fill="rgb(252,136,11)" fg:x="134136" fg:w="44"/><text x="82.0971%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (41 samples, 0.03%)</title><rect x="81.8490%" y="181" width="0.0250%" height="15" fill="rgb(219,138,53)" fg:x="134139" fg:w="41"/><text x="82.0990%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (41 samples, 0.03%)</title><rect x="81.8490%" y="165" width="0.0250%" height="15" fill="rgb(211,51,23)" fg:x="134139" fg:w="41"/><text x="82.0990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (34 samples, 0.02%)</title><rect x="81.8770%" y="197" width="0.0207%" height="15" fill="rgb(247,221,28)" fg:x="134185" fg:w="34"/><text x="82.1270%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (109 samples, 0.07%)</title><rect x="81.8984%" y="197" width="0.0665%" height="15" fill="rgb(251,222,45)" fg:x="134220" fg:w="109"/><text x="82.1484%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (94,026 samples, 57.37%)</title><rect x="24.6275%" y="213" width="57.3728%" height="15" fill="rgb(217,162,53)" fg:x="40361" fg:w="94026"/><text x="24.8775%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.03%)</title><rect x="81.9704%" y="197" width="0.0299%" height="15" fill="rgb(229,93,14)" fg:x="134338" fg:w="49"/><text x="82.2204%" y="207.50"></text></g><g><title>esp`esp::var::off_diag::add_el (27 samples, 0.02%)</title><rect x="82.0003%" y="213" width="0.0165%" height="15" fill="rgb(209,67,49)" fg:x="134387" fg:w="27"/><text x="82.2503%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (67 samples, 0.04%)</title><rect x="82.0168%" y="213" width="0.0409%" height="15" fill="rgb(213,87,29)" fg:x="134414" fg:w="67"/><text x="82.2668%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (31 samples, 0.02%)</title><rect x="82.0576%" y="213" width="0.0189%" height="15" fill="rgb(205,151,52)" fg:x="134481" fg:w="31"/><text x="82.3076%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (30 samples, 0.02%)</title><rect x="82.0766%" y="213" width="0.0183%" height="15" fill="rgb(253,215,39)" fg:x="134512" fg:w="30"/><text x="82.3266%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (86 samples, 0.05%)</title><rect x="82.0961%" y="213" width="0.0525%" height="15" fill="rgb(221,220,41)" fg:x="134544" fg:w="86"/><text x="82.3461%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (40 samples, 0.02%)</title><rect x="82.1486%" y="213" width="0.0244%" height="15" fill="rgb(218,133,21)" fg:x="134630" fg:w="40"/><text x="82.3986%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (27 samples, 0.02%)</title><rect x="82.1779%" y="213" width="0.0165%" height="15" fill="rgb(221,193,43)" fg:x="134678" fg:w="27"/><text x="82.4279%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (132,681 samples, 80.96%)</title><rect x="1.2356%" y="229" width="80.9593%" height="15" fill="rgb(240,128,52)" fg:x="2025" fg:w="132681"/><text x="1.4856%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.02%)</title><rect x="83.0162%" y="213" width="0.0201%" height="15" fill="rgb(253,114,12)" fg:x="136052" fg:w="33"/><text x="83.2662%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (38 samples, 0.02%)</title><rect x="83.0376%" y="133" width="0.0232%" height="15" fill="rgb(215,223,47)" fg:x="136087" fg:w="38"/><text x="83.2876%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (38 samples, 0.02%)</title><rect x="83.0376%" y="117" width="0.0232%" height="15" fill="rgb(248,225,23)" fg:x="136087" fg:w="38"/><text x="83.2876%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (38 samples, 0.02%)</title><rect x="83.0376%" y="101" width="0.0232%" height="15" fill="rgb(250,108,0)" fg:x="136087" fg:w="38"/><text x="83.2876%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (50 samples, 0.03%)</title><rect x="83.0364%" y="213" width="0.0305%" height="15" fill="rgb(228,208,7)" fg:x="136085" fg:w="50"/><text x="83.2864%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (50 samples, 0.03%)</title><rect x="83.0364%" y="197" width="0.0305%" height="15" fill="rgb(244,45,10)" fg:x="136085" fg:w="50"/><text x="83.2864%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (50 samples, 0.03%)</title><rect x="83.0364%" y="181" width="0.0305%" height="15" fill="rgb(207,125,25)" fg:x="136085" fg:w="50"/><text x="83.2864%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (50 samples, 0.03%)</title><rect x="83.0364%" y="165" width="0.0305%" height="15" fill="rgb(210,195,18)" fg:x="136085" fg:w="50"/><text x="83.2864%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (50 samples, 0.03%)</title><rect x="83.0364%" y="149" width="0.0305%" height="15" fill="rgb(249,80,12)" fg:x="136085" fg:w="50"/><text x="83.2864%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (105 samples, 0.06%)</title><rect x="83.0669%" y="213" width="0.0641%" height="15" fill="rgb(221,65,9)" fg:x="136135" fg:w="105"/><text x="83.3169%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (87 samples, 0.05%)</title><rect x="83.1310%" y="213" width="0.0531%" height="15" fill="rgb(235,49,36)" fg:x="136240" fg:w="87"/><text x="83.3810%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (17,979 samples, 10.97%)</title><rect x="83.1840%" y="213" width="10.9704%" height="15" fill="rgb(225,32,20)" fg:x="136327" fg:w="17979"/><text x="83.4340%" y="223.50">esp`esp::ham::Ha..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (9,234 samples, 5.63%)</title><rect x="88.5201%" y="197" width="5.6344%" height="15" fill="rgb(215,141,46)" fg:x="145072" fg:w="9234"/><text x="88.7701%" y="207.50">esp`esp..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (464 samples, 0.28%)</title><rect x="94.1545%" y="213" width="0.2831%" height="15" fill="rgb(250,160,47)" fg:x="154306" fg:w="464"/><text x="94.4045%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (555 samples, 0.34%)</title><rect x="94.4376%" y="213" width="0.3387%" height="15" fill="rgb(216,222,40)" fg:x="154770" fg:w="555"/><text x="94.6876%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (411 samples, 0.25%)</title><rect x="94.5255%" y="197" width="0.2508%" height="15" fill="rgb(234,217,39)" fg:x="154914" fg:w="411"/><text x="94.7755%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (421 samples, 0.26%)</title><rect x="94.7762%" y="213" width="0.2569%" height="15" fill="rgb(207,178,40)" fg:x="155325" fg:w="421"/><text x="95.0262%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (301 samples, 0.18%)</title><rect x="94.8495%" y="197" width="0.1837%" height="15" fill="rgb(221,136,13)" fg:x="155445" fg:w="301"/><text x="95.0995%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (19 samples, 0.01%)</title><rect x="95.0331%" y="213" width="0.0116%" height="15" fill="rgb(249,199,10)" fg:x="155746" fg:w="19"/><text x="95.2831%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6,541 samples, 3.99%)</title><rect x="95.0447%" y="213" width="3.9912%" height="15" fill="rgb(249,222,13)" fg:x="155765" fg:w="6541"/><text x="95.2947%" y="223.50">esp`..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,065 samples, 0.65%)</title><rect x="98.3861%" y="197" width="0.6498%" height="15" fill="rgb(244,185,38)" fg:x="161241" fg:w="1065"/><text x="98.6361%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (36 samples, 0.02%)</title><rect x="99.1305%" y="165" width="0.0220%" height="15" fill="rgb(236,202,9)" fg:x="162461" fg:w="36"/><text x="99.3805%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (21 samples, 0.01%)</title><rect x="99.1396%" y="149" width="0.0128%" height="15" fill="rgb(250,229,37)" fg:x="162476" fg:w="21"/><text x="99.3896%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (228 samples, 0.14%)</title><rect x="99.0359%" y="213" width="0.1391%" height="15" fill="rgb(206,174,23)" fg:x="162306" fg:w="228"/><text x="99.2859%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (186 samples, 0.11%)</title><rect x="99.0615%" y="197" width="0.1135%" height="15" fill="rgb(211,33,43)" fg:x="162348" fg:w="186"/><text x="99.3115%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (147 samples, 0.09%)</title><rect x="99.0853%" y="181" width="0.0897%" height="15" fill="rgb(245,58,50)" fg:x="162387" fg:w="147"/><text x="99.3353%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (32 samples, 0.02%)</title><rect x="99.1555%" y="165" width="0.0195%" height="15" fill="rgb(244,68,36)" fg:x="162502" fg:w="32"/><text x="99.4055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (32 samples, 0.02%)</title><rect x="99.1555%" y="149" width="0.0195%" height="15" fill="rgb(232,229,15)" fg:x="162502" fg:w="32"/><text x="99.4055%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (32 samples, 0.02%)</title><rect x="99.1555%" y="133" width="0.0195%" height="15" fill="rgb(254,30,23)" fg:x="162502" fg:w="32"/><text x="99.4055%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (549 samples, 0.33%)</title><rect x="99.1750%" y="213" width="0.3350%" height="15" fill="rgb(235,160,14)" fg:x="162534" fg:w="549"/><text x="99.4250%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (217 samples, 0.13%)</title><rect x="99.3776%" y="197" width="0.1324%" height="15" fill="rgb(212,155,44)" fg:x="162866" fg:w="217"/><text x="99.6276%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (28,395 samples, 17.33%)</title><rect x="82.1949%" y="229" width="17.3261%" height="15" fill="rgb(226,2,50)" fg:x="134706" fg:w="28395"/><text x="82.4449%" y="239.50">esp`esp::wf::Wf::get_new_de..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (37 samples, 0.02%)</title><rect x="99.5265%" y="229" width="0.0226%" height="15" fill="rgb(234,177,6)" fg:x="163110" fg:w="37"/><text x="99.7765%" y="239.50"></text></g><g><title>esp`esp::var::variational (161,150 samples, 98.33%)</title><rect x="1.2228%" y="245" width="98.3305%" height="15" fill="rgb(217,24,9)" fg:x="2004" fg:w="161150"/><text x="1.4728%" y="255.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (77 samples, 0.05%)</title><rect x="99.6327%" y="149" width="0.0470%" height="15" fill="rgb(220,13,46)" fg:x="163284" fg:w="77"/><text x="99.8827%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (76 samples, 0.05%)</title><rect x="99.6333%" y="133" width="0.0464%" height="15" fill="rgb(239,221,27)" fg:x="163285" fg:w="76"/><text x="99.8833%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (63 samples, 0.04%)</title><rect x="99.6412%" y="117" width="0.0384%" height="15" fill="rgb(222,198,25)" fg:x="163298" fg:w="63"/><text x="99.8912%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (81 samples, 0.05%)</title><rect x="99.6308%" y="197" width="0.0494%" height="15" fill="rgb(211,99,13)" fg:x="163281" fg:w="81"/><text x="99.8808%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (81 samples, 0.05%)</title><rect x="99.6308%" y="181" width="0.0494%" height="15" fill="rgb(232,111,31)" fg:x="163281" fg:w="81"/><text x="99.8808%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (80 samples, 0.05%)</title><rect x="99.6315%" y="165" width="0.0488%" height="15" fill="rgb(245,82,37)" fg:x="163282" fg:w="80"/><text x="99.8815%" y="175.50"></text></g><g><title>esp`alloc::slice::merge_sort (125 samples, 0.08%)</title><rect x="99.6803%" y="197" width="0.0763%" height="15" fill="rgb(227,149,46)" fg:x="163362" fg:w="125"/><text x="99.9303%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (24 samples, 0.01%)</title><rect x="99.7565%" y="197" width="0.0146%" height="15" fill="rgb(218,36,50)" fg:x="163487" fg:w="24"/><text x="100.0065%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (358 samples, 0.22%)</title><rect x="99.5533%" y="213" width="0.2184%" height="15" fill="rgb(226,80,48)" fg:x="163154" fg:w="358"/><text x="99.8033%" y="223.50"></text></g><g><title>esp`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.02%)</title><rect x="99.7931%" y="197" width="0.0232%" height="15" fill="rgb(238,224,15)" fg:x="163547" fg:w="38"/><text x="100.0431%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.01%)</title><rect x="99.8224%" y="165" width="0.0146%" height="15" fill="rgb(241,136,10)" fg:x="163595" fg:w="24"/><text x="100.0724%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (23 samples, 0.01%)</title><rect x="99.8230%" y="149" width="0.0140%" height="15" fill="rgb(208,32,45)" fg:x="163596" fg:w="23"/><text x="100.0730%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.01%)</title><rect x="99.8237%" y="133" width="0.0134%" height="15" fill="rgb(207,135,9)" fg:x="163597" fg:w="22"/><text x="100.0737%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.01%)</title><rect x="99.8249%" y="117" width="0.0122%" height="15" fill="rgb(206,86,44)" fg:x="163599" fg:w="20"/><text x="100.0749%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.01%)</title><rect x="99.8261%" y="101" width="0.0110%" height="15" fill="rgb(245,177,15)" fg:x="163601" fg:w="18"/><text x="100.0761%" y="111.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.03%)</title><rect x="99.8163%" y="197" width="0.0281%" height="15" fill="rgb(206,64,50)" fg:x="163585" fg:w="46"/><text x="100.0663%" y="207.50"></text></g><g><title>esp`std::io::append_to_string (41 samples, 0.03%)</title><rect x="99.8194%" y="181" width="0.0250%" height="15" fill="rgb(234,36,40)" fg:x="163590" fg:w="41"/><text x="100.0694%" y="191.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (142 samples, 0.09%)</title><rect x="99.7724%" y="213" width="0.0866%" height="15" fill="rgb(213,64,8)" fg:x="163513" fg:w="142"/><text x="100.0224%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (503 samples, 0.31%)</title><rect x="99.5533%" y="245" width="0.3069%" height="15" fill="rgb(210,75,36)" fg:x="163154" fg:w="503"/><text x="99.8033%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (503 samples, 0.31%)</title><rect x="99.5533%" y="229" width="0.3069%" height="15" fill="rgb(229,88,21)" fg:x="163154" fg:w="503"/><text x="99.8033%" y="239.50"></text></g><g><title>esp`main (163,665 samples, 99.87%)</title><rect x="0.0000%" y="325" width="99.8652%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="163665"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (163,665 samples, 99.87%)</title><rect x="0.0000%" y="309" width="99.8652%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="163665"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (163,665 samples, 99.87%)</title><rect x="0.0000%" y="293" width="99.8652%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="163665"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (163,665 samples, 99.87%)</title><rect x="0.0000%" y="277" width="99.8652%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="163665"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (163,665 samples, 99.87%)</title><rect x="0.0000%" y="261" width="99.8652%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="163665"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>all (163,886 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="163886"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (163,886 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="163886"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (163,886 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="163886"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (221 samples, 0.13%)</title><rect x="99.8652%" y="325" width="0.1348%" height="15" fill="rgb(243,84,45)" fg:x="163665" fg:w="221"/><text x="100.1152%" y="335.50"></text></g></svg></svg>