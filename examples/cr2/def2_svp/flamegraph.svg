<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="159382"><g><title>esp`__rdl_alloc (99 samples, 0.06%)</title><rect x="0.0182%" y="197" width="0.0621%" height="15" fill="rgb(227,0,7)" fg:x="29" fg:w="99"/><text x="0.2682%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.02%)</title><rect x="0.0841%" y="197" width="0.0220%" height="15" fill="rgb(217,0,24)" fg:x="134" fg:w="35"/><text x="0.3341%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (117 samples, 0.07%)</title><rect x="0.6337%" y="181" width="0.0734%" height="15" fill="rgb(221,193,54)" fg:x="1010" fg:w="117"/><text x="0.8837%" y="191.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (43 samples, 0.03%)</title><rect x="6.0289%" y="165" width="0.0270%" height="15" fill="rgb(248,212,6)" fg:x="9609" fg:w="43"/><text x="6.2789%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 0.03%)</title><rect x="6.0289%" y="149" width="0.0270%" height="15" fill="rgb(208,68,35)" fg:x="9609" fg:w="43"/><text x="6.2789%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMatUpperTri as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (8,534 samples, 5.35%)</title><rect x="0.7071%" y="181" width="5.3544%" height="15" fill="rgb(232,128,0)" fg:x="1127" fg:w="8534"/><text x="0.9571%" y="191.50">esp`&lt;es..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (26 samples, 0.02%)</title><rect x="6.0615%" y="181" width="0.0163%" height="15" fill="rgb(207,160,47)" fg:x="9661" fg:w="26"/><text x="6.3115%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (26 samples, 0.02%)</title><rect x="6.0615%" y="165" width="0.0163%" height="15" fill="rgb(228,23,34)" fg:x="9661" fg:w="26"/><text x="6.3115%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (25 samples, 0.02%)</title><rect x="6.0622%" y="149" width="0.0157%" height="15" fill="rgb(218,30,26)" fg:x="9662" fg:w="25"/><text x="6.3122%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (25 samples, 0.02%)</title><rect x="6.0622%" y="133" width="0.0157%" height="15" fill="rgb(220,122,19)" fg:x="9662" fg:w="25"/><text x="6.3122%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (25 samples, 0.02%)</title><rect x="6.0622%" y="117" width="0.0157%" height="15" fill="rgb(250,228,42)" fg:x="9662" fg:w="25"/><text x="6.3122%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (201 samples, 0.13%)</title><rect x="6.3125%" y="133" width="0.1261%" height="15" fill="rgb(240,193,28)" fg:x="10061" fg:w="201"/><text x="6.5625%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (391 samples, 0.25%)</title><rect x="6.4455%" y="117" width="0.2453%" height="15" fill="rgb(216,20,37)" fg:x="10273" fg:w="391"/><text x="6.6955%" y="127.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (538 samples, 0.34%)</title><rect x="6.4386%" y="133" width="0.3376%" height="15" fill="rgb(206,188,39)" fg:x="10262" fg:w="538"/><text x="6.6886%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (136 samples, 0.09%)</title><rect x="6.6908%" y="117" width="0.0853%" height="15" fill="rgb(217,207,13)" fg:x="10664" fg:w="136"/><text x="6.9408%" y="127.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (34 samples, 0.02%)</title><rect x="6.7548%" y="101" width="0.0213%" height="15" fill="rgb(231,73,38)" fg:x="10766" fg:w="34"/><text x="7.0048%" y="111.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (1,018 samples, 0.64%)</title><rect x="6.1400%" y="165" width="0.6387%" height="15" fill="rgb(225,20,46)" fg:x="9786" fg:w="1018"/><text x="6.3900%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (748 samples, 0.47%)</title><rect x="6.3094%" y="149" width="0.4693%" height="15" fill="rgb(210,31,41)" fg:x="10056" fg:w="748"/><text x="6.5594%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (48 samples, 0.03%)</title><rect x="6.7787%" y="165" width="0.0301%" height="15" fill="rgb(221,200,47)" fg:x="10804" fg:w="48"/><text x="7.0287%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (1,166 samples, 0.73%)</title><rect x="6.0779%" y="181" width="0.7316%" height="15" fill="rgb(226,26,5)" fg:x="9687" fg:w="1166"/><text x="6.3279%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 0.02%)</title><rect x="6.8126%" y="165" width="0.0220%" height="15" fill="rgb(249,33,26)" fg:x="10858" fg:w="35"/><text x="7.0626%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (36 samples, 0.02%)</title><rect x="6.8126%" y="181" width="0.0226%" height="15" fill="rgb(235,183,28)" fg:x="10858" fg:w="36"/><text x="7.0626%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (18 samples, 0.01%)</title><rect x="6.8352%" y="181" width="0.0113%" height="15" fill="rgb(221,5,38)" fg:x="10894" fg:w="18"/><text x="7.0852%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (491 samples, 0.31%)</title><rect x="6.9619%" y="165" width="0.3081%" height="15" fill="rgb(247,18,42)" fg:x="11096" fg:w="491"/><text x="7.2119%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (104 samples, 0.07%)</title><rect x="7.2700%" y="165" width="0.0653%" height="15" fill="rgb(241,131,45)" fg:x="11587" fg:w="104"/><text x="7.5200%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (792 samples, 0.50%)</title><rect x="6.8464%" y="181" width="0.4969%" height="15" fill="rgb(249,31,29)" fg:x="10912" fg:w="792"/><text x="7.0964%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (38 samples, 0.02%)</title><rect x="7.3434%" y="165" width="0.0238%" height="15" fill="rgb(225,111,53)" fg:x="11704" fg:w="38"/><text x="7.5934%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (55 samples, 0.03%)</title><rect x="7.3722%" y="149" width="0.0345%" height="15" fill="rgb(238,160,17)" fg:x="11750" fg:w="55"/><text x="7.6222%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (132 samples, 0.08%)</title><rect x="7.3434%" y="181" width="0.0828%" height="15" fill="rgb(214,148,48)" fg:x="11704" fg:w="132"/><text x="7.5934%" y="191.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (94 samples, 0.06%)</title><rect x="7.3672%" y="165" width="0.0590%" height="15" fill="rgb(232,36,49)" fg:x="11742" fg:w="94"/><text x="7.6172%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (31 samples, 0.02%)</title><rect x="7.4067%" y="149" width="0.0195%" height="15" fill="rgb(209,103,24)" fg:x="11805" fg:w="31"/><text x="7.6567%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (20 samples, 0.01%)</title><rect x="7.4136%" y="133" width="0.0125%" height="15" fill="rgb(229,88,8)" fg:x="11816" fg:w="20"/><text x="7.6636%" y="143.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (40 samples, 0.03%)</title><rect x="7.4262%" y="181" width="0.0251%" height="15" fill="rgb(213,181,19)" fg:x="11836" fg:w="40"/><text x="7.6762%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (169 samples, 0.11%)</title><rect x="7.4569%" y="181" width="0.1060%" height="15" fill="rgb(254,191,54)" fg:x="11885" fg:w="169"/><text x="7.7069%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (71 samples, 0.04%)</title><rect x="7.5630%" y="181" width="0.0445%" height="15" fill="rgb(241,83,37)" fg:x="12054" fg:w="71"/><text x="7.8130%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (71 samples, 0.04%)</title><rect x="7.5630%" y="165" width="0.0445%" height="15" fill="rgb(233,36,39)" fg:x="12054" fg:w="71"/><text x="7.8130%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (71 samples, 0.04%)</title><rect x="7.5630%" y="149" width="0.0445%" height="15" fill="rgb(226,3,54)" fg:x="12054" fg:w="71"/><text x="7.8130%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (11,976 samples, 7.51%)</title><rect x="0.1060%" y="197" width="7.5140%" height="15" fill="rgb(245,192,40)" fg:x="169" fg:w="11976"/><text x="0.3560%" y="207.50">esp`eigenv..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 0.01%)</title><rect x="7.6075%" y="181" width="0.0125%" height="15" fill="rgb(238,167,29)" fg:x="12125" fg:w="20"/><text x="7.8575%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (2,846 samples, 1.79%)</title><rect x="22.2604%" y="149" width="1.7856%" height="15" fill="rgb(232,182,51)" fg:x="35479" fg:w="2846"/><text x="22.5104%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (2,694 samples, 1.69%)</title><rect x="22.3557%" y="133" width="1.6903%" height="15" fill="rgb(231,60,39)" fg:x="35631" fg:w="2694"/><text x="22.6057%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (3,695 samples, 2.32%)</title><rect x="21.7659%" y="165" width="2.3183%" height="15" fill="rgb(208,69,12)" fg:x="34691" fg:w="3695"/><text x="22.0159%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (61 samples, 0.04%)</title><rect x="24.0460%" y="149" width="0.0383%" height="15" fill="rgb(235,93,37)" fg:x="38325" fg:w="61"/><text x="24.2960%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (23 samples, 0.01%)</title><rect x="24.0905%" y="165" width="0.0144%" height="15" fill="rgb(213,116,39)" fg:x="38396" fg:w="23"/><text x="24.3405%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (44 samples, 0.03%)</title><rect x="25.8925%" y="149" width="0.0276%" height="15" fill="rgb(222,207,29)" fg:x="41268" fg:w="44"/><text x="26.1425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (38 samples, 0.02%)</title><rect x="25.9201%" y="149" width="0.0238%" height="15" fill="rgb(206,96,30)" fg:x="41312" fg:w="38"/><text x="26.1701%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (26 samples, 0.02%)</title><rect x="29.4136%" y="133" width="0.0163%" height="15" fill="rgb(218,138,4)" fg:x="46880" fg:w="26"/><text x="29.6636%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3,254 samples, 2.04%)</title><rect x="29.4299%" y="133" width="2.0416%" height="15" fill="rgb(250,191,14)" fg:x="46906" fg:w="3254"/><text x="29.6799%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3,059 samples, 1.92%)</title><rect x="31.4716%" y="133" width="1.9193%" height="15" fill="rgb(239,60,40)" fg:x="50160" fg:w="3059"/><text x="31.7216%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (24 samples, 0.02%)</title><rect x="33.3908%" y="133" width="0.0151%" height="15" fill="rgb(206,27,48)" fg:x="53219" fg:w="24"/><text x="33.6408%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (28 samples, 0.02%)</title><rect x="33.4059%" y="133" width="0.0176%" height="15" fill="rgb(225,35,8)" fg:x="53243" fg:w="28"/><text x="33.6559%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14,870 samples, 9.33%)</title><rect x="24.1050%" y="165" width="9.3298%" height="15" fill="rgb(250,213,24)" fg:x="38419" fg:w="14870"/><text x="24.3550%" y="175.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11,939 samples, 7.49%)</title><rect x="25.9440%" y="149" width="7.4908%" height="15" fill="rgb(247,123,22)" fg:x="41350" fg:w="11939"/><text x="26.1940%" y="159.50">libsystem_..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (18 samples, 0.01%)</title><rect x="33.4235%" y="133" width="0.0113%" height="15" fill="rgb(231,138,38)" fg:x="53271" fg:w="18"/><text x="33.6735%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (66 samples, 0.04%)</title><rect x="33.4348%" y="165" width="0.0414%" height="15" fill="rgb(231,145,46)" fg:x="53289" fg:w="66"/><text x="33.6848%" y="175.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,574 samples, 12.28%)</title><rect x="21.2370%" y="181" width="12.2812%" height="15" fill="rgb(251,118,11)" fg:x="33848" fg:w="19574"/><text x="21.4870%" y="191.50">esp`&lt;hashbrown::ra..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (67 samples, 0.04%)</title><rect x="33.4762%" y="165" width="0.0420%" height="15" fill="rgb(217,147,25)" fg:x="53355" fg:w="67"/><text x="33.7262%" y="175.50"></text></g><g><title>esp`__rdl_dealloc (88 samples, 0.06%)</title><rect x="33.5195%" y="181" width="0.0552%" height="15" fill="rgb(247,81,37)" fg:x="53424" fg:w="88"/><text x="33.7695%" y="191.50"></text></g><g><title>esp`__rdl_realloc (19 samples, 0.01%)</title><rect x="33.6813%" y="165" width="0.0119%" height="15" fill="rgb(209,12,38)" fg:x="53682" fg:w="19"/><text x="33.9313%" y="175.50"></text></g><g><title>esp`__rdl_realloc (38 samples, 0.02%)</title><rect x="33.7516%" y="149" width="0.0238%" height="15" fill="rgb(227,1,9)" fg:x="53794" fg:w="38"/><text x="34.0016%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.01%)</title><rect x="33.7755%" y="149" width="0.0100%" height="15" fill="rgb(248,47,43)" fg:x="53832" fg:w="16"/><text x="34.0255%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (39 samples, 0.02%)</title><rect x="33.9122%" y="133" width="0.0245%" height="15" fill="rgb(221,10,30)" fg:x="54050" fg:w="39"/><text x="34.1622%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (118 samples, 0.07%)</title><rect x="34.0170%" y="117" width="0.0740%" height="15" fill="rgb(210,229,1)" fg:x="54217" fg:w="118"/><text x="34.2670%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (21 samples, 0.01%)</title><rect x="34.0911%" y="117" width="0.0132%" height="15" fill="rgb(222,148,37)" fg:x="54335" fg:w="21"/><text x="34.3411%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.01%)</title><rect x="34.1042%" y="117" width="0.0119%" height="15" fill="rgb(234,67,33)" fg:x="54356" fg:w="19"/><text x="34.3542%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (567 samples, 0.36%)</title><rect x="35.0316%" y="69" width="0.3557%" height="15" fill="rgb(247,98,35)" fg:x="55834" fg:w="567"/><text x="35.2816%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,877 samples, 1.18%)</title><rect x="34.2554%" y="101" width="1.1777%" height="15" fill="rgb(247,138,52)" fg:x="54597" fg:w="1877"/><text x="34.5054%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,137 samples, 0.71%)</title><rect x="34.7197%" y="85" width="0.7134%" height="15" fill="rgb(213,79,30)" fg:x="55337" fg:w="1137"/><text x="34.9697%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (73 samples, 0.05%)</title><rect x="35.3873%" y="69" width="0.0458%" height="15" fill="rgb(246,177,23)" fg:x="56401" fg:w="73"/><text x="35.6373%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (41 samples, 0.03%)</title><rect x="35.4977%" y="85" width="0.0257%" height="15" fill="rgb(230,62,27)" fg:x="56577" fg:w="41"/><text x="35.7477%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (24 samples, 0.02%)</title><rect x="35.5084%" y="69" width="0.0151%" height="15" fill="rgb(216,154,8)" fg:x="56594" fg:w="24"/><text x="35.7584%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (226 samples, 0.14%)</title><rect x="36.2105%" y="69" width="0.1418%" height="15" fill="rgb(244,35,45)" fg:x="57713" fg:w="226"/><text x="36.4605%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,337 samples, 1.47%)</title><rect x="35.4413%" y="101" width="1.4663%" height="15" fill="rgb(251,115,12)" fg:x="56487" fg:w="2337"/><text x="35.6913%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,197 samples, 1.38%)</title><rect x="35.5291%" y="85" width="1.3784%" height="15" fill="rgb(240,54,50)" fg:x="56627" fg:w="2197"/><text x="35.7791%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (875 samples, 0.55%)</title><rect x="36.3586%" y="69" width="0.5490%" height="15" fill="rgb(233,84,52)" fg:x="57949" fg:w="875"/><text x="36.6086%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (163 samples, 0.10%)</title><rect x="36.8053%" y="53" width="0.1023%" height="15" fill="rgb(207,117,47)" fg:x="58661" fg:w="163"/><text x="37.0553%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (320 samples, 0.20%)</title><rect x="36.9076%" y="101" width="0.2008%" height="15" fill="rgb(249,43,39)" fg:x="58824" fg:w="320"/><text x="37.1576%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (271 samples, 0.17%)</title><rect x="36.9383%" y="85" width="0.1700%" height="15" fill="rgb(209,38,44)" fg:x="58873" fg:w="271"/><text x="37.1883%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (756 samples, 0.47%)</title><rect x="37.1190%" y="101" width="0.4743%" height="15" fill="rgb(236,212,23)" fg:x="59161" fg:w="756"/><text x="37.3690%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (44 samples, 0.03%)</title><rect x="37.5657%" y="85" width="0.0276%" height="15" fill="rgb(242,79,21)" fg:x="59873" fg:w="44"/><text x="37.8157%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6,268 samples, 3.93%)</title><rect x="34.1161%" y="117" width="3.9327%" height="15" fill="rgb(211,96,35)" fg:x="54375" fg:w="6268"/><text x="34.3661%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (726 samples, 0.46%)</title><rect x="37.5933%" y="101" width="0.4555%" height="15" fill="rgb(253,215,40)" fg:x="59917" fg:w="726"/><text x="37.8433%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (18 samples, 0.01%)</title><rect x="38.0570%" y="117" width="0.0113%" height="15" fill="rgb(211,81,21)" fg:x="60656" fg:w="18"/><text x="38.3070%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (16 samples, 0.01%)</title><rect x="38.0683%" y="117" width="0.0100%" height="15" fill="rgb(208,190,38)" fg:x="60674" fg:w="16"/><text x="38.3183%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6,610 samples, 4.15%)</title><rect x="33.9367%" y="133" width="4.1473%" height="15" fill="rgb(235,213,38)" fg:x="54089" fg:w="6610"/><text x="34.1867%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (680 samples, 0.43%)</title><rect x="38.0946%" y="133" width="0.4266%" height="15" fill="rgb(237,122,38)" fg:x="60716" fg:w="680"/><text x="38.3446%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (655 samples, 0.41%)</title><rect x="38.1103%" y="117" width="0.4110%" height="15" fill="rgb(244,218,35)" fg:x="60741" fg:w="655"/><text x="38.3603%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7,570 samples, 4.75%)</title><rect x="33.7855%" y="149" width="4.7496%" height="15" fill="rgb(240,68,47)" fg:x="53848" fg:w="7570"/><text x="34.0355%" y="159.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_size (22 samples, 0.01%)</title><rect x="38.5213%" y="133" width="0.0138%" height="15" fill="rgb(210,16,53)" fg:x="61396" fg:w="22"/><text x="38.7713%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (7,737 samples, 4.85%)</title><rect x="33.6995%" y="165" width="4.8544%" height="15" fill="rgb(235,124,12)" fg:x="53711" fg:w="7737"/><text x="33.9495%" y="175.50">esp`al..</text></g><g><title>libsystem_malloc.dylib`szone_size (30 samples, 0.02%)</title><rect x="38.5351%" y="149" width="0.0188%" height="15" fill="rgb(224,169,11)" fg:x="61418" fg:w="30"/><text x="38.7851%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7,942 samples, 4.98%)</title><rect x="33.5797%" y="181" width="4.9830%" height="15" fill="rgb(250,166,2)" fg:x="53520" fg:w="7942"/><text x="33.8297%" y="191.50">esp`al..</text></g><g><title>esp`alloc::slice::merge_sort (18 samples, 0.01%)</title><rect x="38.5709%" y="181" width="0.0113%" height="15" fill="rgb(242,216,29)" fg:x="61475" fg:w="18"/><text x="38.8209%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (405 samples, 0.25%)</title><rect x="38.5821%" y="181" width="0.2541%" height="15" fill="rgb(230,116,27)" fg:x="61493" fg:w="405"/><text x="38.8321%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (111 samples, 0.07%)</title><rect x="38.8363%" y="181" width="0.0696%" height="15" fill="rgb(228,99,48)" fg:x="61898" fg:w="111"/><text x="39.0863%" y="191.50"></text></g><g><title>esp`__rdl_realloc (16 samples, 0.01%)</title><rect x="45.4669%" y="133" width="0.0100%" height="15" fill="rgb(253,11,6)" fg:x="72466" fg:w="16"/><text x="45.7169%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.01%)</title><rect x="45.5346%" y="85" width="0.0119%" height="15" fill="rgb(247,143,39)" fg:x="72574" fg:w="19"/><text x="45.7846%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (162 samples, 0.10%)</title><rect x="45.4769%" y="133" width="0.1016%" height="15" fill="rgb(236,97,10)" fg:x="72482" fg:w="162"/><text x="45.7269%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (141 samples, 0.09%)</title><rect x="45.4901%" y="117" width="0.0885%" height="15" fill="rgb(233,208,19)" fg:x="72503" fg:w="141"/><text x="45.7401%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (140 samples, 0.09%)</title><rect x="45.4907%" y="101" width="0.0878%" height="15" fill="rgb(216,164,2)" fg:x="72504" fg:w="140"/><text x="45.7407%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (51 samples, 0.03%)</title><rect x="45.5465%" y="85" width="0.0320%" height="15" fill="rgb(220,129,5)" fg:x="72593" fg:w="51"/><text x="45.7965%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (19 samples, 0.01%)</title><rect x="45.6432%" y="117" width="0.0119%" height="15" fill="rgb(242,17,10)" fg:x="72747" fg:w="19"/><text x="45.8932%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (41 samples, 0.03%)</title><rect x="45.6808%" y="101" width="0.0257%" height="15" fill="rgb(242,107,0)" fg:x="72807" fg:w="41"/><text x="45.9308%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (23 samples, 0.01%)</title><rect x="45.8201%" y="69" width="0.0144%" height="15" fill="rgb(251,28,31)" fg:x="73029" fg:w="23"/><text x="46.0701%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (148 samples, 0.09%)</title><rect x="45.7486%" y="85" width="0.0929%" height="15" fill="rgb(233,223,10)" fg:x="72915" fg:w="148"/><text x="45.9986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (482 samples, 0.30%)</title><rect x="46.0987%" y="53" width="0.3024%" height="15" fill="rgb(215,21,27)" fg:x="73473" fg:w="482"/><text x="46.3487%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (83 samples, 0.05%)</title><rect x="46.4011%" y="53" width="0.0521%" height="15" fill="rgb(232,23,21)" fg:x="73955" fg:w="83"/><text x="46.6511%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (978 samples, 0.61%)</title><rect x="45.8414%" y="85" width="0.6136%" height="15" fill="rgb(244,5,23)" fg:x="73063" fg:w="978"/><text x="46.0914%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (834 samples, 0.52%)</title><rect x="45.9318%" y="69" width="0.5233%" height="15" fill="rgb(226,81,46)" fg:x="73207" fg:w="834"/><text x="46.1818%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (39 samples, 0.02%)</title><rect x="46.4632%" y="85" width="0.0245%" height="15" fill="rgb(247,70,30)" fg:x="74054" fg:w="39"/><text x="46.7132%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (86 samples, 0.05%)</title><rect x="46.6420%" y="37" width="0.0540%" height="15" fill="rgb(212,68,19)" fg:x="74339" fg:w="86"/><text x="46.8920%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (356 samples, 0.22%)</title><rect x="46.5090%" y="69" width="0.2234%" height="15" fill="rgb(240,187,13)" fg:x="74127" fg:w="356"/><text x="46.7590%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (235 samples, 0.15%)</title><rect x="46.5849%" y="53" width="0.1474%" height="15" fill="rgb(223,113,26)" fg:x="74248" fg:w="235"/><text x="46.8349%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (58 samples, 0.04%)</title><rect x="46.6960%" y="37" width="0.0364%" height="15" fill="rgb(206,192,2)" fg:x="74425" fg:w="58"/><text x="46.9460%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (76 samples, 0.05%)</title><rect x="46.8384%" y="53" width="0.0477%" height="15" fill="rgb(241,108,4)" fg:x="74652" fg:w="76"/><text x="47.0884%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (851 samples, 0.53%)</title><rect x="46.4877%" y="85" width="0.5339%" height="15" fill="rgb(247,173,49)" fg:x="74093" fg:w="851"/><text x="46.7377%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (460 samples, 0.29%)</title><rect x="46.7330%" y="69" width="0.2886%" height="15" fill="rgb(224,114,35)" fg:x="74484" fg:w="460"/><text x="46.9830%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (216 samples, 0.14%)</title><rect x="46.8861%" y="53" width="0.1355%" height="15" fill="rgb(245,159,27)" fg:x="74728" fg:w="216"/><text x="47.1361%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.01%)</title><rect x="47.0116%" y="37" width="0.0100%" height="15" fill="rgb(245,172,44)" fg:x="74928" fg:w="16"/><text x="47.2616%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (65 samples, 0.04%)</title><rect x="47.0216%" y="85" width="0.0408%" height="15" fill="rgb(236,23,11)" fg:x="74944" fg:w="65"/><text x="47.2716%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (57 samples, 0.04%)</title><rect x="47.0266%" y="69" width="0.0358%" height="15" fill="rgb(205,117,38)" fg:x="74952" fg:w="57"/><text x="47.2766%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.01%)</title><rect x="47.1465%" y="69" width="0.0144%" height="15" fill="rgb(237,72,25)" fg:x="75143" fg:w="23"/><text x="47.3965%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (187 samples, 0.12%)</title><rect x="47.0674%" y="85" width="0.1173%" height="15" fill="rgb(244,70,9)" fg:x="75017" fg:w="187"/><text x="47.3174%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (38 samples, 0.02%)</title><rect x="47.1609%" y="69" width="0.0238%" height="15" fill="rgb(217,125,39)" fg:x="75166" fg:w="38"/><text x="47.4109%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4,358 samples, 2.73%)</title><rect x="45.7147%" y="101" width="2.7343%" height="15" fill="rgb(235,36,10)" fg:x="72861" fg:w="4358"/><text x="45.9647%" y="111.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,015 samples, 1.26%)</title><rect x="47.1848%" y="85" width="1.2643%" height="15" fill="rgb(251,123,47)" fg:x="75204" fg:w="2015"/><text x="47.4348%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4,468 samples, 2.80%)</title><rect x="45.6551%" y="117" width="2.8033%" height="15" fill="rgb(221,13,13)" fg:x="72766" fg:w="4468"/><text x="45.9051%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`small_size (155 samples, 0.10%)</title><rect x="48.4584%" y="117" width="0.0973%" height="15" fill="rgb(238,131,9)" fg:x="77234" fg:w="155"/><text x="48.7084%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (490 samples, 0.31%)</title><rect x="48.5576%" y="117" width="0.3074%" height="15" fill="rgb(211,50,8)" fg:x="77392" fg:w="490"/><text x="48.8076%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (476 samples, 0.30%)</title><rect x="48.5663%" y="101" width="0.2987%" height="15" fill="rgb(245,182,24)" fg:x="77406" fg:w="476"/><text x="48.8163%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5,234 samples, 3.28%)</title><rect x="45.5823%" y="133" width="3.2839%" height="15" fill="rgb(242,14,37)" fg:x="72650" fg:w="5234"/><text x="45.8323%" y="143.50">lib..</text></g><g><title>esp`alloc::raw_vec::finish_grow (5,466 samples, 3.43%)</title><rect x="45.4562%" y="149" width="3.4295%" height="15" fill="rgb(246,228,12)" fg:x="72449" fg:w="5466"/><text x="45.7062%" y="159.50">esp..</text></g><g><title>libsystem_malloc.dylib`szone_size (29 samples, 0.02%)</title><rect x="48.8675%" y="133" width="0.0182%" height="15" fill="rgb(213,55,15)" fg:x="77886" fg:w="29"/><text x="49.1175%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5,563 samples, 3.49%)</title><rect x="45.4079%" y="165" width="3.4904%" height="15" fill="rgb(209,9,3)" fg:x="72372" fg:w="5563"/><text x="45.6579%" y="175.50">esp..</text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.01%)</title><rect x="48.8882%" y="149" width="0.0100%" height="15" fill="rgb(230,59,30)" fg:x="77919" fg:w="16"/><text x="49.1382%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (88 samples, 0.06%)</title><rect x="48.9020%" y="165" width="0.0552%" height="15" fill="rgb(209,121,21)" fg:x="77941" fg:w="88"/><text x="49.1520%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el (34,681 samples, 21.76%)</title><rect x="38.9059%" y="181" width="21.7597%" height="15" fill="rgb(220,109,13)" fg:x="62009" fg:w="34681"/><text x="39.1559%" y="191.50">esp`esp::var::off_diag::add_el</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (18,661 samples, 11.71%)</title><rect x="48.9572%" y="165" width="11.7083%" height="15" fill="rgb(232,18,1)" fg:x="78029" fg:w="18661"/><text x="49.2072%" y="175.50">esp`esp::ham::Ham..</text></g><g><title>esp`esp::ham::Ham::ham_doub (10,380 samples, 6.51%)</title><rect x="54.1529%" y="149" width="6.5127%" height="15" fill="rgb(215,41,42)" fg:x="86310" fg:w="10380"/><text x="54.4029%" y="159.50">esp`esp::..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (28 samples, 0.02%)</title><rect x="61.6964%" y="165" width="0.0176%" height="15" fill="rgb(224,123,36)" fg:x="98333" fg:w="28"/><text x="61.9464%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (1,214 samples, 0.76%)</title><rect x="63.3516%" y="149" width="0.7617%" height="15" fill="rgb(240,125,3)" fg:x="100971" fg:w="1214"/><text x="63.6016%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (702 samples, 0.44%)</title><rect x="63.6728%" y="133" width="0.4405%" height="15" fill="rgb(205,98,50)" fg:x="101483" fg:w="702"/><text x="63.9228%" y="143.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (4,626 samples, 2.90%)</title><rect x="61.7184%" y="165" width="2.9025%" height="15" fill="rgb(205,185,37)" fg:x="98368" fg:w="4626"/><text x="61.9684%" y="175.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_sing (809 samples, 0.51%)</title><rect x="64.1133%" y="149" width="0.5076%" height="15" fill="rgb(238,207,15)" fg:x="102185" fg:w="809"/><text x="64.3633%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (496 samples, 0.31%)</title><rect x="64.3096%" y="133" width="0.3112%" height="15" fill="rgb(213,199,42)" fg:x="102498" fg:w="496"/><text x="64.5596%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (16 samples, 0.01%)</title><rect x="64.8517%" y="69" width="0.0100%" height="15" fill="rgb(235,201,11)" fg:x="103362" fg:w="16"/><text x="65.1017%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (29 samples, 0.02%)</title><rect x="64.8837%" y="37" width="0.0182%" height="15" fill="rgb(207,46,11)" fg:x="103413" fg:w="29"/><text x="65.1337%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.01%)</title><rect x="64.9019%" y="37" width="0.0107%" height="15" fill="rgb(241,35,35)" fg:x="103442" fg:w="17"/><text x="65.1519%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (82 samples, 0.05%)</title><rect x="64.8618%" y="69" width="0.0514%" height="15" fill="rgb(243,32,47)" fg:x="103378" fg:w="82"/><text x="65.1118%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (70 samples, 0.04%)</title><rect x="64.8693%" y="53" width="0.0439%" height="15" fill="rgb(247,202,23)" fg:x="103390" fg:w="70"/><text x="65.1193%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (48 samples, 0.03%)</title><rect x="64.9189%" y="53" width="0.0301%" height="15" fill="rgb(219,102,11)" fg:x="103469" fg:w="48"/><text x="65.1689%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (36 samples, 0.02%)</title><rect x="64.9264%" y="37" width="0.0226%" height="15" fill="rgb(243,110,44)" fg:x="103481" fg:w="36"/><text x="65.1764%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 0.05%)</title><rect x="64.9176%" y="69" width="0.0458%" height="15" fill="rgb(222,74,54)" fg:x="103467" fg:w="73"/><text x="65.1676%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.01%)</title><rect x="64.9496%" y="53" width="0.0138%" height="15" fill="rgb(216,99,12)" fg:x="103518" fg:w="22"/><text x="65.1996%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (17 samples, 0.01%)</title><rect x="64.9647%" y="69" width="0.0107%" height="15" fill="rgb(226,22,26)" fg:x="103542" fg:w="17"/><text x="65.2147%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (576 samples, 0.36%)</title><rect x="64.8499%" y="85" width="0.3614%" height="15" fill="rgb(217,163,10)" fg:x="103359" fg:w="576"/><text x="65.0999%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (376 samples, 0.24%)</title><rect x="64.9753%" y="69" width="0.2359%" height="15" fill="rgb(213,25,53)" fg:x="103559" fg:w="376"/><text x="65.2253%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (583 samples, 0.37%)</title><rect x="64.8461%" y="101" width="0.3658%" height="15" fill="rgb(252,105,26)" fg:x="103353" fg:w="583"/><text x="65.0961%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_size (27 samples, 0.02%)</title><rect x="65.2119%" y="101" width="0.0169%" height="15" fill="rgb(220,39,43)" fg:x="103936" fg:w="27"/><text x="65.4619%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (657 samples, 0.41%)</title><rect x="64.8411%" y="117" width="0.4122%" height="15" fill="rgb(229,68,48)" fg:x="103345" fg:w="657"/><text x="65.0911%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (39 samples, 0.02%)</title><rect x="65.2288%" y="101" width="0.0245%" height="15" fill="rgb(252,8,32)" fg:x="103963" fg:w="39"/><text x="65.4788%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (38 samples, 0.02%)</title><rect x="65.2294%" y="85" width="0.0238%" height="15" fill="rgb(223,20,43)" fg:x="103964" fg:w="38"/><text x="65.4794%" y="95.50"></text></g><g><title>esp`esp::var::off_diag::add_el (1,009 samples, 0.63%)</title><rect x="64.6215%" y="165" width="0.6331%" height="15" fill="rgb(229,81,49)" fg:x="102995" fg:w="1009"/><text x="64.8715%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (665 samples, 0.42%)</title><rect x="64.8373%" y="149" width="0.4172%" height="15" fill="rgb(236,28,36)" fg:x="103339" fg:w="665"/><text x="65.0873%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (661 samples, 0.41%)</title><rect x="64.8398%" y="133" width="0.4147%" height="15" fill="rgb(249,185,26)" fg:x="103343" fg:w="661"/><text x="65.0898%" y="143.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (7,872 samples, 4.94%)</title><rect x="60.6656%" y="181" width="4.9391%" height="15" fill="rgb(249,174,33)" fg:x="96690" fg:w="7872"/><text x="60.9156%" y="191.50">esp`es..</text></g><g><title>esp`hashbrown::map::make_hash (558 samples, 0.35%)</title><rect x="65.2545%" y="165" width="0.3501%" height="15" fill="rgb(233,201,37)" fg:x="104004" fg:w="558"/><text x="65.5045%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (324 samples, 0.20%)</title><rect x="65.4014%" y="149" width="0.2033%" height="15" fill="rgb(221,78,26)" fg:x="104238" fg:w="324"/><text x="65.6514%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.02%)</title><rect x="67.5440%" y="101" width="0.0226%" height="15" fill="rgb(250,127,30)" fg:x="107653" fg:w="36"/><text x="67.7940%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.02%)</title><rect x="67.5440%" y="85" width="0.0226%" height="15" fill="rgb(230,49,44)" fg:x="107653" fg:w="36"/><text x="67.7940%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (46 samples, 0.03%)</title><rect x="67.5384%" y="117" width="0.0289%" height="15" fill="rgb(229,67,23)" fg:x="107644" fg:w="46"/><text x="67.7884%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (60 samples, 0.04%)</title><rect x="67.5359%" y="133" width="0.0376%" height="15" fill="rgb(249,83,47)" fg:x="107640" fg:w="60"/><text x="67.7859%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (72 samples, 0.05%)</title><rect x="67.5302%" y="149" width="0.0452%" height="15" fill="rgb(215,43,3)" fg:x="107631" fg:w="72"/><text x="67.7802%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (73 samples, 0.05%)</title><rect x="67.5754%" y="149" width="0.0458%" height="15" fill="rgb(238,154,13)" fg:x="107703" fg:w="73"/><text x="67.8254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (64 samples, 0.04%)</title><rect x="67.5810%" y="133" width="0.0402%" height="15" fill="rgb(219,56,2)" fg:x="107712" fg:w="64"/><text x="67.8310%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (50 samples, 0.03%)</title><rect x="67.5898%" y="117" width="0.0314%" height="15" fill="rgb(233,0,4)" fg:x="107726" fg:w="50"/><text x="67.8398%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (18 samples, 0.01%)</title><rect x="67.6099%" y="101" width="0.0113%" height="15" fill="rgb(235,30,7)" fg:x="107758" fg:w="18"/><text x="67.8599%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (33 samples, 0.02%)</title><rect x="67.6224%" y="149" width="0.0207%" height="15" fill="rgb(250,79,13)" fg:x="107778" fg:w="33"/><text x="67.8724%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (20 samples, 0.01%)</title><rect x="67.6306%" y="133" width="0.0125%" height="15" fill="rgb(211,146,34)" fg:x="107791" fg:w="20"/><text x="67.8806%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.01%)</title><rect x="67.6325%" y="117" width="0.0107%" height="15" fill="rgb(228,22,38)" fg:x="107794" fg:w="17"/><text x="67.8825%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.02%)</title><rect x="67.6708%" y="117" width="0.0151%" height="15" fill="rgb(235,168,5)" fg:x="107855" fg:w="24"/><text x="67.9208%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (65 samples, 0.04%)</title><rect x="67.6463%" y="149" width="0.0408%" height="15" fill="rgb(221,155,16)" fg:x="107816" fg:w="65"/><text x="67.8963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (38 samples, 0.02%)</title><rect x="67.6632%" y="133" width="0.0238%" height="15" fill="rgb(215,215,53)" fg:x="107843" fg:w="38"/><text x="67.9132%" y="143.50"></text></g><g><title>esp`alloc::slice::merge_sort (3,243 samples, 2.03%)</title><rect x="65.7464%" y="165" width="2.0347%" height="15" fill="rgb(223,4,10)" fg:x="104788" fg:w="3243"/><text x="65.9964%" y="175.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (144 samples, 0.09%)</title><rect x="67.6908%" y="149" width="0.0903%" height="15" fill="rgb(234,103,6)" fg:x="107887" fg:w="144"/><text x="67.9408%" y="159.50"></text></g><g><title>esp`esp::var::sparse::SparseMatUpperTri::sort_remove_duplicates (3,492 samples, 2.19%)</title><rect x="65.6046%" y="181" width="2.1910%" height="15" fill="rgb(227,97,0)" fg:x="104562" fg:w="3492"/><text x="65.8546%" y="191.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.01%)</title><rect x="67.7843%" y="165" width="0.0113%" height="15" fill="rgb(234,150,53)" fg:x="108036" fg:w="18"/><text x="68.0343%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::expand_sparse_ham_rows (71 samples, 0.04%)</title><rect x="67.7956%" y="181" width="0.0445%" height="15" fill="rgb(228,201,54)" fg:x="108054" fg:w="71"/><text x="68.0456%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (33 samples, 0.02%)</title><rect x="67.8195%" y="165" width="0.0207%" height="15" fill="rgb(222,22,37)" fg:x="108092" fg:w="33"/><text x="68.0695%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (8,131 samples, 5.10%)</title><rect x="67.8402%" y="181" width="5.1016%" height="15" fill="rgb(237,53,32)" fg:x="108125" fg:w="8131"/><text x="68.0902%" y="191.50">esp`ha..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,482 samples, 0.93%)</title><rect x="72.0119%" y="165" width="0.9298%" height="15" fill="rgb(233,25,53)" fg:x="114774" fg:w="1482"/><text x="72.2619%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,000 samples, 0.63%)</title><rect x="74.3428%" y="165" width="0.6274%" height="15" fill="rgb(210,40,34)" fg:x="118489" fg:w="1000"/><text x="74.5928%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (99 samples, 0.06%)</title><rect x="75.6478%" y="149" width="0.0621%" height="15" fill="rgb(241,220,44)" fg:x="120569" fg:w="99"/><text x="75.8978%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,360 samples, 0.85%)</title><rect x="78.5465%" y="133" width="0.8533%" height="15" fill="rgb(235,28,35)" fg:x="125189" fg:w="1360"/><text x="78.7965%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (20 samples, 0.01%)</title><rect x="79.4142%" y="85" width="0.0125%" height="15" fill="rgb(210,56,17)" fg:x="126572" fg:w="20"/><text x="79.6642%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (52 samples, 0.03%)</title><rect x="79.4268%" y="85" width="0.0326%" height="15" fill="rgb(224,130,29)" fg:x="126592" fg:w="52"/><text x="79.6768%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (32 samples, 0.02%)</title><rect x="79.4393%" y="69" width="0.0201%" height="15" fill="rgb(235,212,8)" fg:x="126612" fg:w="32"/><text x="79.6893%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (123 samples, 0.08%)</title><rect x="79.4073%" y="117" width="0.0772%" height="15" fill="rgb(223,33,50)" fg:x="126561" fg:w="123"/><text x="79.6573%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (116 samples, 0.07%)</title><rect x="79.4117%" y="101" width="0.0728%" height="15" fill="rgb(219,149,13)" fg:x="126568" fg:w="116"/><text x="79.6617%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (40 samples, 0.03%)</title><rect x="79.4594%" y="85" width="0.0251%" height="15" fill="rgb(250,156,29)" fg:x="126644" fg:w="40"/><text x="79.7094%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (28 samples, 0.02%)</title><rect x="79.4669%" y="69" width="0.0176%" height="15" fill="rgb(216,193,19)" fg:x="126656" fg:w="28"/><text x="79.7169%" y="79.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (384 samples, 0.24%)</title><rect x="79.3998%" y="133" width="0.2409%" height="15" fill="rgb(216,135,14)" fg:x="126549" fg:w="384"/><text x="79.6498%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (248 samples, 0.16%)</title><rect x="79.4851%" y="117" width="0.1556%" height="15" fill="rgb(241,47,5)" fg:x="126685" fg:w="248"/><text x="79.7351%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (138 samples, 0.09%)</title><rect x="79.6407%" y="133" width="0.0866%" height="15" fill="rgb(233,42,35)" fg:x="126933" fg:w="138"/><text x="79.8907%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.01%)</title><rect x="79.7418%" y="117" width="0.0113%" height="15" fill="rgb(231,13,6)" fg:x="127094" fg:w="18"/><text x="79.9918%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (43 samples, 0.03%)</title><rect x="79.7273%" y="133" width="0.0270%" height="15" fill="rgb(207,181,40)" fg:x="127071" fg:w="43"/><text x="79.9773%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (21 samples, 0.01%)</title><rect x="79.7543%" y="133" width="0.0132%" height="15" fill="rgb(254,173,49)" fg:x="127114" fg:w="21"/><text x="80.0043%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (28 samples, 0.02%)</title><rect x="79.7675%" y="133" width="0.0176%" height="15" fill="rgb(221,1,38)" fg:x="127135" fg:w="28"/><text x="80.0175%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.01%)</title><rect x="79.7850%" y="133" width="0.0132%" height="15" fill="rgb(206,124,46)" fg:x="127163" fg:w="21"/><text x="80.0350%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6,520 samples, 4.09%)</title><rect x="75.7099%" y="149" width="4.0908%" height="15" fill="rgb(249,21,11)" fg:x="120668" fg:w="6520"/><text x="75.9599%" y="159.50">esp`..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7,704 samples, 4.83%)</title><rect x="74.9702%" y="165" width="4.8337%" height="15" fill="rgb(222,201,40)" fg:x="119489" fg:w="7704"/><text x="75.2202%" y="175.50">esp`ha..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10,940 samples, 6.86%)</title><rect x="72.9417%" y="181" width="6.8640%" height="15" fill="rgb(235,61,29)" fg:x="116256" fg:w="10940"/><text x="73.1917%" y="191.50">esp`hashb..</text></g><g><title>esp`hashbrown::map::make_hash (2,148 samples, 1.35%)</title><rect x="79.8057%" y="181" width="1.3477%" height="15" fill="rgb(219,207,3)" fg:x="127196" fg:w="2148"/><text x="80.0557%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,266 samples, 0.79%)</title><rect x="80.3591%" y="165" width="0.7943%" height="15" fill="rgb(222,56,46)" fg:x="128078" fg:w="1266"/><text x="80.6091%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (57 samples, 0.04%)</title><rect x="81.1535%" y="181" width="0.0358%" height="15" fill="rgb(239,76,54)" fg:x="129344" fg:w="57"/><text x="81.4035%" y="191.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (13,105 samples, 8.22%)</title><rect x="81.1892%" y="181" width="8.2224%" height="15" fill="rgb(231,124,27)" fg:x="129401" fg:w="13105"/><text x="81.4392%" y="191.50">esp`std::co..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,829 samples, 1.15%)</title><rect x="88.2640%" y="165" width="1.1476%" height="15" fill="rgb(249,195,6)" fg:x="140677" fg:w="1829"/><text x="88.5140%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (98 samples, 0.06%)</title><rect x="89.4129%" y="181" width="0.0615%" height="15" fill="rgb(237,174,47)" fg:x="142508" fg:w="98"/><text x="89.6629%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (35 samples, 0.02%)</title><rect x="90.1369%" y="149" width="0.0220%" height="15" fill="rgb(206,201,31)" fg:x="143662" fg:w="35"/><text x="90.3869%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (18 samples, 0.01%)</title><rect x="93.3455%" y="133" width="0.0113%" height="15" fill="rgb(231,57,52)" fg:x="148776" fg:w="18"/><text x="93.5955%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9,146 samples, 5.74%)</title><rect x="89.9117%" y="165" width="5.7384%" height="15" fill="rgb(248,177,22)" fg:x="143303" fg:w="9146"/><text x="90.1617%" y="175.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8,752 samples, 5.49%)</title><rect x="90.1589%" y="149" width="5.4912%" height="15" fill="rgb(215,211,37)" fg:x="143697" fg:w="8752"/><text x="90.4089%" y="159.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3,652 samples, 2.29%)</title><rect x="93.3587%" y="133" width="2.2914%" height="15" fill="rgb(241,128,51)" fg:x="148797" fg:w="3652"/><text x="93.6087%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (851 samples, 0.53%)</title><rect x="95.1161%" y="117" width="0.5339%" height="15" fill="rgb(227,165,31)" fg:x="151598" fg:w="851"/><text x="95.3661%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9,873 samples, 6.19%)</title><rect x="89.4743%" y="181" width="6.1946%" height="15" fill="rgb(228,167,24)" fg:x="142606" fg:w="9873"/><text x="89.7243%" y="191.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.02%)</title><rect x="95.6501%" y="165" width="0.0188%" height="15" fill="rgb(228,143,12)" fg:x="152449" fg:w="30"/><text x="95.9001%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (72 samples, 0.05%)</title><rect x="95.6689%" y="181" width="0.0452%" height="15" fill="rgb(249,149,8)" fg:x="152479" fg:w="72"/><text x="95.9189%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (127 samples, 0.08%)</title><rect x="95.7141%" y="181" width="0.0797%" height="15" fill="rgb(243,35,44)" fg:x="152551" fg:w="127"/><text x="95.9641%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (73 samples, 0.05%)</title><rect x="95.7938%" y="181" width="0.0458%" height="15" fill="rgb(246,89,9)" fg:x="152678" fg:w="73"/><text x="96.0438%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (19 samples, 0.01%)</title><rect x="95.8396%" y="181" width="0.0119%" height="15" fill="rgb(233,213,13)" fg:x="152751" fg:w="19"/><text x="96.0896%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (53 samples, 0.03%)</title><rect x="95.8521%" y="181" width="0.0333%" height="15" fill="rgb(233,141,41)" fg:x="152771" fg:w="53"/><text x="96.1021%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (203 samples, 0.13%)</title><rect x="95.8866%" y="181" width="0.1274%" height="15" fill="rgb(239,167,4)" fg:x="152826" fg:w="203"/><text x="96.1366%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 0.05%)</title><rect x="96.0159%" y="181" width="0.0521%" height="15" fill="rgb(209,217,16)" fg:x="153032" fg:w="83"/><text x="96.2659%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (140,971 samples, 88.45%)</title><rect x="7.6201%" y="197" width="88.4485%" height="15" fill="rgb(219,88,35)" fg:x="12145" fg:w="140971"/><text x="7.8701%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el (69 samples, 0.04%)</title><rect x="96.0686%" y="197" width="0.0433%" height="15" fill="rgb(220,193,23)" fg:x="153116" fg:w="69"/><text x="96.3186%" y="207.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (70 samples, 0.04%)</title><rect x="96.1119%" y="197" width="0.0439%" height="15" fill="rgb(230,90,52)" fg:x="153185" fg:w="70"/><text x="96.3619%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (55 samples, 0.03%)</title><rect x="96.1558%" y="197" width="0.0345%" height="15" fill="rgb(252,106,19)" fg:x="153255" fg:w="55"/><text x="96.4058%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (60 samples, 0.04%)</title><rect x="96.1903%" y="197" width="0.0376%" height="15" fill="rgb(206,74,20)" fg:x="153310" fg:w="60"/><text x="96.4403%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (89 samples, 0.06%)</title><rect x="96.2292%" y="197" width="0.0558%" height="15" fill="rgb(230,138,44)" fg:x="153372" fg:w="89"/><text x="96.4792%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.04%)</title><rect x="96.2863%" y="197" width="0.0351%" height="15" fill="rgb(235,182,43)" fg:x="153463" fg:w="56"/><text x="96.5363%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (63 samples, 0.04%)</title><rect x="96.3239%" y="197" width="0.0395%" height="15" fill="rgb(242,16,51)" fg:x="153523" fg:w="63"/><text x="96.5739%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (153,587 samples, 96.36%)</title><rect x="0.0000%" y="213" width="96.3641%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="153587"/><text x="0.2500%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>libsystem_malloc.dylib`free_large (23 samples, 0.01%)</title><rect x="96.6489%" y="117" width="0.0144%" height="15" fill="rgb(210,31,22)" fg:x="154041" fg:w="23"/><text x="96.8989%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (23 samples, 0.01%)</title><rect x="96.6489%" y="101" width="0.0144%" height="15" fill="rgb(239,54,39)" fg:x="154041" fg:w="23"/><text x="96.8989%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (23 samples, 0.01%)</title><rect x="96.6489%" y="85" width="0.0144%" height="15" fill="rgb(230,99,41)" fg:x="154041" fg:w="23"/><text x="96.8989%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.02%)</title><rect x="96.6483%" y="197" width="0.0213%" height="15" fill="rgb(253,106,12)" fg:x="154040" fg:w="34"/><text x="96.8983%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (34 samples, 0.02%)</title><rect x="96.6483%" y="181" width="0.0213%" height="15" fill="rgb(213,46,41)" fg:x="154040" fg:w="34"/><text x="96.8983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (34 samples, 0.02%)</title><rect x="96.6483%" y="165" width="0.0213%" height="15" fill="rgb(215,133,35)" fg:x="154040" fg:w="34"/><text x="96.8983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (34 samples, 0.02%)</title><rect x="96.6483%" y="149" width="0.0213%" height="15" fill="rgb(213,28,5)" fg:x="154040" fg:w="34"/><text x="96.8983%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (34 samples, 0.02%)</title><rect x="96.6483%" y="133" width="0.0213%" height="15" fill="rgb(215,77,49)" fg:x="154040" fg:w="34"/><text x="96.8983%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (24 samples, 0.02%)</title><rect x="96.6696%" y="197" width="0.0151%" height="15" fill="rgb(248,100,22)" fg:x="154074" fg:w="24"/><text x="96.9196%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (65 samples, 0.04%)</title><rect x="96.6847%" y="197" width="0.0408%" height="15" fill="rgb(208,67,9)" fg:x="154098" fg:w="65"/><text x="96.9347%" y="207.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (81 samples, 0.05%)</title><rect x="96.7255%" y="197" width="0.0508%" height="15" fill="rgb(219,133,21)" fg:x="154163" fg:w="81"/><text x="96.9755%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,488 samples, 0.93%)</title><rect x="96.7763%" y="197" width="0.9336%" height="15" fill="rgb(246,46,29)" fg:x="154244" fg:w="1488"/><text x="97.0263%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,098 samples, 0.69%)</title><rect x="97.0210%" y="181" width="0.6889%" height="15" fill="rgb(246,185,52)" fg:x="154634" fg:w="1098"/><text x="97.2710%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1,062 samples, 0.67%)</title><rect x="97.7099%" y="197" width="0.6663%" height="15" fill="rgb(252,136,11)" fg:x="155732" fg:w="1062"/><text x="97.9599%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (740 samples, 0.46%)</title><rect x="97.9119%" y="181" width="0.4643%" height="15" fill="rgb(219,138,53)" fg:x="156054" fg:w="740"/><text x="98.1619%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,396 samples, 0.88%)</title><rect x="98.3762%" y="197" width="0.8759%" height="15" fill="rgb(211,51,23)" fg:x="156794" fg:w="1396"/><text x="98.6262%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (164 samples, 0.10%)</title><rect x="99.1492%" y="181" width="0.1029%" height="15" fill="rgb(247,221,28)" fg:x="158026" fg:w="164"/><text x="99.3992%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (48 samples, 0.03%)</title><rect x="99.2904%" y="181" width="0.0301%" height="15" fill="rgb(251,222,45)" fg:x="158251" fg:w="48"/><text x="99.5404%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (96 samples, 0.06%)</title><rect x="99.5150%" y="149" width="0.0602%" height="15" fill="rgb(217,162,53)" fg:x="158609" fg:w="96"/><text x="99.7650%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (54 samples, 0.03%)</title><rect x="99.5414%" y="133" width="0.0339%" height="15" fill="rgb(229,93,14)" fg:x="158651" fg:w="54"/><text x="99.7914%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (566 samples, 0.36%)</title><rect x="99.2521%" y="197" width="0.3551%" height="15" fill="rgb(209,67,49)" fg:x="158190" fg:w="566"/><text x="99.5021%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (457 samples, 0.29%)</title><rect x="99.3205%" y="181" width="0.2867%" height="15" fill="rgb(213,87,29)" fg:x="158299" fg:w="457"/><text x="99.5705%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (362 samples, 0.23%)</title><rect x="99.3801%" y="165" width="0.2271%" height="15" fill="rgb(205,151,52)" fg:x="158394" fg:w="362"/><text x="99.6301%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (30 samples, 0.02%)</title><rect x="99.5884%" y="149" width="0.0188%" height="15" fill="rgb(253,215,39)" fg:x="158726" fg:w="30"/><text x="99.8384%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (30 samples, 0.02%)</title><rect x="99.5884%" y="133" width="0.0188%" height="15" fill="rgb(221,220,41)" fg:x="158726" fg:w="30"/><text x="99.8384%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (30 samples, 0.02%)</title><rect x="99.5884%" y="117" width="0.0188%" height="15" fill="rgb(218,133,21)" fg:x="158726" fg:w="30"/><text x="99.8384%" y="127.50"></text></g><g><title>esp`hashbrown::map::make_hash (100 samples, 0.06%)</title><rect x="99.6072%" y="197" width="0.0627%" height="15" fill="rgb(221,193,43)" fg:x="158756" fg:w="100"/><text x="99.8572%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.03%)</title><rect x="99.6380%" y="181" width="0.0320%" height="15" fill="rgb(240,128,52)" fg:x="158805" fg:w="51"/><text x="99.8880%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::find_new_dets (5,282 samples, 3.31%)</title><rect x="96.3641%" y="213" width="3.3141%" height="15" fill="rgb(253,114,12)" fg:x="153587" fg:w="5282"/><text x="96.6141%" y="223.50">esp..</text></g><g><title>esp`esp::var::variational (158,884 samples, 99.69%)</title><rect x="0.0000%" y="229" width="99.6875%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="158884"/><text x="0.2500%" y="239.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (65 samples, 0.04%)</title><rect x="99.7647%" y="133" width="0.0408%" height="15" fill="rgb(248,225,23)" fg:x="159007" fg:w="65"/><text x="100.0147%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (64 samples, 0.04%)</title><rect x="99.7653%" y="117" width="0.0402%" height="15" fill="rgb(250,108,0)" fg:x="159008" fg:w="64"/><text x="100.0153%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.03%)</title><rect x="99.7760%" y="101" width="0.0295%" height="15" fill="rgb(228,208,7)" fg:x="159025" fg:w="47"/><text x="100.0260%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (68 samples, 0.04%)</title><rect x="99.7647%" y="149" width="0.0427%" height="15" fill="rgb(244,45,10)" fg:x="159007" fg:w="68"/><text x="100.0147%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (71 samples, 0.04%)</title><rect x="99.7635%" y="181" width="0.0445%" height="15" fill="rgb(207,125,25)" fg:x="159005" fg:w="71"/><text x="100.0135%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (70 samples, 0.04%)</title><rect x="99.7641%" y="165" width="0.0439%" height="15" fill="rgb(210,195,18)" fg:x="159006" fg:w="70"/><text x="100.0141%" y="175.50"></text></g><g><title>esp`alloc::slice::merge_sort (126 samples, 0.08%)</title><rect x="99.8080%" y="181" width="0.0791%" height="15" fill="rgb(249,80,12)" fg:x="159076" fg:w="126"/><text x="100.0580%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (24 samples, 0.02%)</title><rect x="99.8871%" y="181" width="0.0151%" height="15" fill="rgb(221,65,9)" fg:x="159202" fg:w="24"/><text x="100.1371%" y="191.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (342 samples, 0.21%)</title><rect x="99.6882%" y="197" width="0.2146%" height="15" fill="rgb(235,49,36)" fg:x="158885" fg:w="342"/><text x="99.9382%" y="207.50"></text></g><g><title>esp`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.03%)</title><rect x="99.9203%" y="181" width="0.0257%" height="15" fill="rgb(225,32,20)" fg:x="159255" fg:w="41"/><text x="100.1703%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.01%)</title><rect x="99.9517%" y="149" width="0.0113%" height="15" fill="rgb(215,141,46)" fg:x="159305" fg:w="18"/><text x="100.2017%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (17 samples, 0.01%)</title><rect x="99.9523%" y="133" width="0.0107%" height="15" fill="rgb(250,160,47)" fg:x="159306" fg:w="17"/><text x="100.2023%" y="143.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="99.9460%" y="181" width="0.0276%" height="15" fill="rgb(216,222,40)" fg:x="159296" fg:w="44"/><text x="100.1960%" y="191.50"></text></g><g><title>esp`std::io::append_to_string (42 samples, 0.03%)</title><rect x="99.9473%" y="165" width="0.0264%" height="15" fill="rgb(234,217,39)" fg:x="159298" fg:w="42"/><text x="100.1973%" y="175.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (24 samples, 0.02%)</title><rect x="99.9736%" y="181" width="0.0151%" height="15" fill="rgb(207,178,40)" fg:x="159340" fg:w="24"/><text x="100.2236%" y="191.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (150 samples, 0.09%)</title><rect x="99.9027%" y="197" width="0.0941%" height="15" fill="rgb(221,136,13)" fg:x="159227" fg:w="150"/><text x="100.1527%" y="207.50"></text></g><g><title>esp`std::rt::lang_start_internal (159,380 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9987%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="159380"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (159,380 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9987%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="159380"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (159,380 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9987%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="159380"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (159,380 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9987%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="159380"/><text x="0.2500%" y="255.50">esp`esp::main</text></g><g><title>esp`std::sync::once::Once::call_inner (496 samples, 0.31%)</title><rect x="99.6875%" y="229" width="0.3112%" height="15" fill="rgb(250,229,37)" fg:x="158884" fg:w="496"/><text x="99.9375%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (496 samples, 0.31%)</title><rect x="99.6875%" y="213" width="0.3112%" height="15" fill="rgb(206,174,23)" fg:x="158884" fg:w="496"/><text x="99.9375%" y="223.50"></text></g><g><title>0x1 (159,381 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9994%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="159381"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (159,381 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9994%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="159381"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>esp`main (159,381 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9994%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="159381"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>all (159,382 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="159382"/><text x="0.2500%" y="367.50"></text></g></svg></svg>