<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="452441"><g><title>libsystem_malloc.dylib`small_size (184 samples, 0.04%)</title><rect x="0.0239%" y="213" width="0.0407%" height="15" fill="rgb(227,0,7)" fg:x="108" fg:w="184"/><text x="0.2739%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (315 samples, 0.07%)</title><rect x="0.0179%" y="229" width="0.0696%" height="15" fill="rgb(217,0,24)" fg:x="81" fg:w="315"/><text x="0.2679%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (104 samples, 0.02%)</title><rect x="0.0645%" y="213" width="0.0230%" height="15" fill="rgb(221,193,54)" fg:x="292" fg:w="104"/><text x="0.3145%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (100 samples, 0.02%)</title><rect x="0.0654%" y="197" width="0.0221%" height="15" fill="rgb(248,212,6)" fg:x="296" fg:w="100"/><text x="0.3154%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (86 samples, 0.02%)</title><rect x="0.0875%" y="229" width="0.0190%" height="15" fill="rgb(208,68,35)" fg:x="396" fg:w="86"/><text x="0.3375%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (85 samples, 0.02%)</title><rect x="0.0877%" y="213" width="0.0188%" height="15" fill="rgb(232,128,0)" fg:x="397" fg:w="85"/><text x="0.3377%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (85 samples, 0.02%)</title><rect x="0.0877%" y="197" width="0.0188%" height="15" fill="rgb(207,160,47)" fg:x="397" fg:w="85"/><text x="0.3377%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (51 samples, 0.01%)</title><rect x="0.1324%" y="213" width="0.0113%" height="15" fill="rgb(228,23,34)" fg:x="599" fg:w="51"/><text x="0.3824%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (109 samples, 0.02%)</title><rect x="0.1437%" y="213" width="0.0241%" height="15" fill="rgb(218,30,26)" fg:x="650" fg:w="109"/><text x="0.3937%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (490 samples, 0.11%)</title><rect x="0.1735%" y="213" width="0.1083%" height="15" fill="rgb(220,122,19)" fg:x="785" fg:w="490"/><text x="0.4235%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (285 samples, 0.06%)</title><rect x="0.2856%" y="197" width="0.0630%" height="15" fill="rgb(250,228,42)" fg:x="1292" fg:w="285"/><text x="0.5356%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (302 samples, 0.07%)</title><rect x="0.2838%" y="213" width="0.0667%" height="15" fill="rgb(240,193,28)" fg:x="1284" fg:w="302"/><text x="0.5338%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,248 samples, 0.50%)</title><rect x="0.3702%" y="197" width="0.4969%" height="15" fill="rgb(216,20,37)" fg:x="1675" fg:w="2248"/><text x="0.6202%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (70 samples, 0.02%)</title><rect x="0.8671%" y="197" width="0.0155%" height="15" fill="rgb(206,188,39)" fg:x="3923" fg:w="70"/><text x="1.1171%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,525 samples, 0.78%)</title><rect x="0.1065%" y="229" width="0.7791%" height="15" fill="rgb(217,207,13)" fg:x="482" fg:w="3525"/><text x="0.3565%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2,421 samples, 0.54%)</title><rect x="0.3505%" y="213" width="0.5351%" height="15" fill="rgb(231,73,38)" fg:x="1586" fg:w="2421"/><text x="0.6005%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (57 samples, 0.01%)</title><rect x="0.9243%" y="197" width="0.0126%" height="15" fill="rgb(225,20,46)" fg:x="4182" fg:w="57"/><text x="1.1743%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (148 samples, 0.03%)</title><rect x="0.9429%" y="181" width="0.0327%" height="15" fill="rgb(210,31,41)" fg:x="4266" fg:w="148"/><text x="1.1929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (416 samples, 0.09%)</title><rect x="0.8856%" y="229" width="0.0919%" height="15" fill="rgb(221,200,47)" fg:x="4007" fg:w="416"/><text x="1.1356%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (404 samples, 0.09%)</title><rect x="0.8883%" y="213" width="0.0893%" height="15" fill="rgb(226,26,5)" fg:x="4019" fg:w="404"/><text x="1.1383%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (170 samples, 0.04%)</title><rect x="0.9400%" y="197" width="0.0376%" height="15" fill="rgb(249,33,26)" fg:x="4253" fg:w="170"/><text x="1.1900%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (112 samples, 0.02%)</title><rect x="0.9776%" y="229" width="0.0248%" height="15" fill="rgb(235,183,28)" fg:x="4423" fg:w="112"/><text x="1.2276%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (112 samples, 0.02%)</title><rect x="0.9776%" y="213" width="0.0248%" height="15" fill="rgb(221,5,38)" fg:x="4423" fg:w="112"/><text x="1.2276%" y="223.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::sparse::SparseMatUpperTri&gt; (4,527 samples, 1.00%)</title><rect x="0.0046%" y="245" width="1.0006%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="4527"/><text x="0.2546%" y="255.50"></text></g><g><title>esp`__rdl_alloc (172 samples, 0.04%)</title><rect x="1.0629%" y="213" width="0.0380%" height="15" fill="rgb(241,131,45)" fg:x="4809" fg:w="172"/><text x="1.3129%" y="223.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (85 samples, 0.02%)</title><rect x="3.1034%" y="181" width="0.0188%" height="15" fill="rgb(249,31,29)" fg:x="14041" fg:w="85"/><text x="3.3534%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,399 samples, 0.31%)</title><rect x="2.8134%" y="197" width="0.3092%" height="15" fill="rgb(225,111,53)" fg:x="12729" fg:w="1399"/><text x="3.0634%" y="207.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (415 samples, 0.09%)</title><rect x="31.4733%" y="181" width="0.0917%" height="15" fill="rgb(238,160,17)" fg:x="142398" fg:w="415"/><text x="31.7233%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (415 samples, 0.09%)</title><rect x="31.4733%" y="165" width="0.0917%" height="15" fill="rgb(214,148,48)" fg:x="142398" fg:w="415"/><text x="31.7233%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (58 samples, 0.01%)</title><rect x="31.5650%" y="181" width="0.0128%" height="15" fill="rgb(232,36,49)" fg:x="142813" fg:w="58"/><text x="31.8150%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (83 samples, 0.02%)</title><rect x="31.5778%" y="181" width="0.0183%" height="15" fill="rgb(209,103,24)" fg:x="142871" fg:w="83"/><text x="31.8278%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 0.02%)</title><rect x="31.5778%" y="165" width="0.0183%" height="15" fill="rgb(229,88,8)" fg:x="142871" fg:w="83"/><text x="31.8278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (83 samples, 0.02%)</title><rect x="31.5778%" y="149" width="0.0183%" height="15" fill="rgb(213,181,19)" fg:x="142871" fg:w="83"/><text x="31.8278%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (83 samples, 0.02%)</title><rect x="31.5778%" y="133" width="0.0183%" height="15" fill="rgb(254,191,54)" fg:x="142871" fg:w="83"/><text x="31.8278%" y="143.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMatUpperTri as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (128,827 samples, 28.47%)</title><rect x="3.1226%" y="197" width="28.4738%" height="15" fill="rgb(241,83,37)" fg:x="14128" fg:w="128827"/><text x="3.3726%" y="207.50">esp`&lt;esp::var::sparse::SparseMatUpperTri as ei..</text></g><g><title>libsystem_malloc.dylib`free_large (76 samples, 0.02%)</title><rect x="31.5990%" y="117" width="0.0168%" height="15" fill="rgb(233,36,39)" fg:x="142967" fg:w="76"/><text x="31.8490%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (76 samples, 0.02%)</title><rect x="31.5990%" y="101" width="0.0168%" height="15" fill="rgb(226,3,54)" fg:x="142967" fg:w="76"/><text x="31.8490%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (76 samples, 0.02%)</title><rect x="31.5990%" y="85" width="0.0168%" height="15" fill="rgb(245,192,40)" fg:x="142967" fg:w="76"/><text x="31.8490%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (110 samples, 0.02%)</title><rect x="31.5964%" y="197" width="0.0243%" height="15" fill="rgb(238,167,29)" fg:x="142955" fg:w="110"/><text x="31.8464%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (110 samples, 0.02%)</title><rect x="31.5964%" y="181" width="0.0243%" height="15" fill="rgb(232,182,51)" fg:x="142955" fg:w="110"/><text x="31.8464%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (106 samples, 0.02%)</title><rect x="31.5973%" y="165" width="0.0234%" height="15" fill="rgb(231,60,39)" fg:x="142959" fg:w="106"/><text x="31.8473%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (106 samples, 0.02%)</title><rect x="31.5973%" y="149" width="0.0234%" height="15" fill="rgb(208,69,12)" fg:x="142959" fg:w="106"/><text x="31.8473%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (105 samples, 0.02%)</title><rect x="31.5975%" y="133" width="0.0232%" height="15" fill="rgb(235,93,37)" fg:x="142960" fg:w="105"/><text x="31.8475%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (1,531 samples, 0.34%)</title><rect x="32.5567%" y="149" width="0.3384%" height="15" fill="rgb(213,116,39)" fg:x="147300" fg:w="1531"/><text x="32.8067%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (3,360 samples, 0.74%)</title><rect x="32.9170%" y="133" width="0.7426%" height="15" fill="rgb(222,207,29)" fg:x="148930" fg:w="3360"/><text x="33.1670%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (4,556 samples, 1.01%)</title><rect x="32.8951%" y="149" width="1.0070%" height="15" fill="rgb(206,96,30)" fg:x="148831" fg:w="4556"/><text x="33.1451%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (1,097 samples, 0.24%)</title><rect x="33.6596%" y="133" width="0.2425%" height="15" fill="rgb(218,138,4)" fg:x="152290" fg:w="1097"/><text x="33.9096%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (264 samples, 0.06%)</title><rect x="33.8437%" y="117" width="0.0584%" height="15" fill="rgb(250,191,14)" fg:x="153123" fg:w="264"/><text x="34.0937%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (6,157 samples, 1.36%)</title><rect x="32.5455%" y="165" width="1.3608%" height="15" fill="rgb(239,60,40)" fg:x="147249" fg:w="6157"/><text x="32.7955%" y="175.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (9,287 samples, 2.05%)</title><rect x="31.8548%" y="181" width="2.0526%" height="15" fill="rgb(206,27,48)" fg:x="144124" fg:w="9287"/><text x="32.1048%" y="191.50">e..</text></g><g><title>libsystem_kernel.dylib`madvise (338 samples, 0.07%)</title><rect x="33.9074%" y="181" width="0.0747%" height="15" fill="rgb(225,35,8)" fg:x="153411" fg:w="338"/><text x="34.1574%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (10,782 samples, 2.38%)</title><rect x="31.6207%" y="197" width="2.3831%" height="15" fill="rgb(250,213,24)" fg:x="143065" fg:w="10782"/><text x="31.8707%" y="207.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (98 samples, 0.02%)</title><rect x="33.9821%" y="181" width="0.0217%" height="15" fill="rgb(247,123,22)" fg:x="153749" fg:w="98"/><text x="34.2321%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (98 samples, 0.02%)</title><rect x="33.9821%" y="165" width="0.0217%" height="15" fill="rgb(231,138,38)" fg:x="153749" fg:w="98"/><text x="34.2321%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (98 samples, 0.02%)</title><rect x="33.9821%" y="149" width="0.0217%" height="15" fill="rgb(231,145,46)" fg:x="153749" fg:w="98"/><text x="34.2321%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (371 samples, 0.08%)</title><rect x="34.0122%" y="181" width="0.0820%" height="15" fill="rgb(251,118,11)" fg:x="153885" fg:w="371"/><text x="34.2622%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (388 samples, 0.09%)</title><rect x="34.0122%" y="197" width="0.0858%" height="15" fill="rgb(217,147,25)" fg:x="153885" fg:w="388"/><text x="34.2622%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (192 samples, 0.04%)</title><rect x="34.0979%" y="197" width="0.0424%" height="15" fill="rgb(247,81,37)" fg:x="154273" fg:w="192"/><text x="34.3479%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,463 samples, 0.99%)</title><rect x="34.5340%" y="181" width="0.9864%" height="15" fill="rgb(209,12,38)" fg:x="156246" fg:w="4463"/><text x="34.7840%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (785 samples, 0.17%)</title><rect x="35.5204%" y="181" width="0.1735%" height="15" fill="rgb(227,1,9)" fg:x="160709" fg:w="785"/><text x="35.7704%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (470 samples, 0.10%)</title><rect x="35.6939%" y="181" width="0.1039%" height="15" fill="rgb(248,47,43)" fg:x="161494" fg:w="470"/><text x="35.9439%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (7,502 samples, 1.66%)</title><rect x="34.1404%" y="197" width="1.6581%" height="15" fill="rgb(221,10,30)" fg:x="154465" fg:w="7502"/><text x="34.3904%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (333 samples, 0.07%)</title><rect x="35.8016%" y="181" width="0.0736%" height="15" fill="rgb(210,229,1)" fg:x="161981" fg:w="333"/><text x="36.0516%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (860 samples, 0.19%)</title><rect x="35.8849%" y="165" width="0.1901%" height="15" fill="rgb(222,148,37)" fg:x="162358" fg:w="860"/><text x="36.1349%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,246 samples, 0.28%)</title><rect x="35.8752%" y="181" width="0.2754%" height="15" fill="rgb(234,67,33)" fg:x="162314" fg:w="1246"/><text x="36.1252%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (342 samples, 0.08%)</title><rect x="36.0750%" y="165" width="0.0756%" height="15" fill="rgb(247,98,35)" fg:x="163218" fg:w="342"/><text x="36.3250%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (128 samples, 0.03%)</title><rect x="36.1223%" y="149" width="0.0283%" height="15" fill="rgb(247,138,52)" fg:x="163432" fg:w="128"/><text x="36.3723%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (1,595 samples, 0.35%)</title><rect x="35.7985%" y="197" width="0.3525%" height="15" fill="rgb(213,79,30)" fg:x="161967" fg:w="1595"/><text x="36.0485%" y="207.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (342 samples, 0.08%)</title><rect x="36.1515%" y="197" width="0.0756%" height="15" fill="rgb(246,177,23)" fg:x="163564" fg:w="342"/><text x="36.4015%" y="207.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (53 samples, 0.01%)</title><rect x="36.2270%" y="197" width="0.0117%" height="15" fill="rgb(230,62,27)" fg:x="163906" fg:w="53"/><text x="36.4770%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,532 samples, 0.34%)</title><rect x="36.2401%" y="197" width="0.3386%" height="15" fill="rgb(216,154,8)" fg:x="163965" fg:w="1532"/><text x="36.4901%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (813 samples, 0.18%)</title><rect x="36.5796%" y="197" width="0.1797%" height="15" fill="rgb(244,35,45)" fg:x="165501" fg:w="813"/><text x="36.8296%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (812 samples, 0.18%)</title><rect x="36.5798%" y="181" width="0.1795%" height="15" fill="rgb(251,115,12)" fg:x="165502" fg:w="812"/><text x="36.8298%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (812 samples, 0.18%)</title><rect x="36.5798%" y="165" width="0.1795%" height="15" fill="rgb(240,54,50)" fg:x="165502" fg:w="812"/><text x="36.8298%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (161,526 samples, 35.70%)</title><rect x="1.1087%" y="213" width="35.7010%" height="15" fill="rgb(233,84,52)" fg:x="5016" fg:w="161526"/><text x="1.3587%" y="223.50">esp`eigenvalues::algorithms::davidson::Davidson::new</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (226 samples, 0.05%)</title><rect x="36.7597%" y="197" width="0.0500%" height="15" fill="rgb(207,117,47)" fg:x="166316" fg:w="226"/><text x="37.0097%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (67 samples, 0.01%)</title><rect x="45.7706%" y="165" width="0.0148%" height="15" fill="rgb(249,43,39)" fg:x="207085" fg:w="67"/><text x="46.0206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4,854 samples, 1.07%)</title><rect x="45.7854%" y="165" width="1.0728%" height="15" fill="rgb(209,38,44)" fg:x="207152" fg:w="4854"/><text x="46.0354%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4,585 samples, 1.01%)</title><rect x="45.8449%" y="149" width="1.0134%" height="15" fill="rgb(236,212,23)" fg:x="207421" fg:w="4585"/><text x="46.0949%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (6,433 samples, 1.42%)</title><rect x="45.4623%" y="181" width="1.4218%" height="15" fill="rgb(242,79,21)" fg:x="205690" fg:w="6433"/><text x="45.7123%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (117 samples, 0.03%)</title><rect x="46.8583%" y="165" width="0.0259%" height="15" fill="rgb(211,96,35)" fg:x="212006" fg:w="117"/><text x="47.1083%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (79 samples, 0.02%)</title><rect x="46.8841%" y="181" width="0.0175%" height="15" fill="rgb(253,215,40)" fg:x="212123" fg:w="79"/><text x="47.1341%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (79 samples, 0.02%)</title><rect x="46.8841%" y="165" width="0.0175%" height="15" fill="rgb(211,81,21)" fg:x="212123" fg:w="79"/><text x="47.1341%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (79 samples, 0.02%)</title><rect x="46.8841%" y="149" width="0.0175%" height="15" fill="rgb(208,190,38)" fg:x="212123" fg:w="79"/><text x="47.1341%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (199 samples, 0.04%)</title><rect x="46.9087%" y="165" width="0.0440%" height="15" fill="rgb(235,213,38)" fg:x="212234" fg:w="199"/><text x="47.1587%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (88 samples, 0.02%)</title><rect x="46.9526%" y="165" width="0.0195%" height="15" fill="rgb(237,122,38)" fg:x="212433" fg:w="88"/><text x="47.2026%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (321 samples, 0.07%)</title><rect x="46.9016%" y="181" width="0.0709%" height="15" fill="rgb(244,218,35)" fg:x="212202" fg:w="321"/><text x="47.1516%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (65 samples, 0.01%)</title><rect x="48.1495%" y="165" width="0.0144%" height="15" fill="rgb(240,68,47)" fg:x="217848" fg:w="65"/><text x="48.3995%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (53 samples, 0.01%)</title><rect x="48.1638%" y="165" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="217913" fg:w="53"/><text x="48.4138%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (137 samples, 0.03%)</title><rect x="50.0803%" y="149" width="0.0303%" height="15" fill="rgb(235,124,12)" fg:x="226584" fg:w="137"/><text x="50.3303%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (82 samples, 0.02%)</title><rect x="50.0925%" y="133" width="0.0181%" height="15" fill="rgb(224,169,11)" fg:x="226639" fg:w="82"/><text x="50.3425%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5,747 samples, 1.27%)</title><rect x="50.1106%" y="149" width="1.2702%" height="15" fill="rgb(250,166,2)" fg:x="226721" fg:w="5747"/><text x="50.3606%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5,752 samples, 1.27%)</title><rect x="51.3808%" y="149" width="1.2713%" height="15" fill="rgb(242,216,29)" fg:x="232468" fg:w="5752"/><text x="51.6308%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (74 samples, 0.02%)</title><rect x="52.6522%" y="149" width="0.0164%" height="15" fill="rgb(230,116,27)" fg:x="238220" fg:w="74"/><text x="52.9022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (77 samples, 0.02%)</title><rect x="52.6685%" y="149" width="0.0170%" height="15" fill="rgb(228,99,48)" fg:x="238294" fg:w="77"/><text x="52.9185%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (62 samples, 0.01%)</title><rect x="52.6880%" y="133" width="0.0137%" height="15" fill="rgb(253,11,6)" fg:x="238382" fg:w="62"/><text x="52.9380%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20,481 samples, 4.53%)</title><rect x="48.1756%" y="165" width="4.5268%" height="15" fill="rgb(247,143,39)" fg:x="217966" fg:w="20481"/><text x="48.4256%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (76 samples, 0.02%)</title><rect x="52.6855%" y="149" width="0.0168%" height="15" fill="rgb(236,97,10)" fg:x="238371" fg:w="76"/><text x="52.9355%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25,925 samples, 5.73%)</title><rect x="46.9725%" y="181" width="5.7300%" height="15" fill="rgb(233,208,19)" fg:x="212523" fg:w="25925"/><text x="47.2225%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_size (116 samples, 0.03%)</title><rect x="52.7026%" y="181" width="0.0256%" height="15" fill="rgb(216,164,2)" fg:x="238448" fg:w="116"/><text x="52.9526%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34,675 samples, 7.66%)</title><rect x="45.0972%" y="197" width="7.6640%" height="15" fill="rgb(220,129,5)" fg:x="204038" fg:w="34675"/><text x="45.3472%" y="207.50">esp`&lt;hashb..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (149 samples, 0.03%)</title><rect x="52.7282%" y="181" width="0.0329%" height="15" fill="rgb(242,17,10)" fg:x="238564" fg:w="149"/><text x="52.9782%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (178 samples, 0.04%)</title><rect x="52.7614%" y="197" width="0.0393%" height="15" fill="rgb(242,107,0)" fg:x="238714" fg:w="178"/><text x="53.0114%" y="207.50"></text></g><g><title>esp`__rdl_realloc (63 samples, 0.01%)</title><rect x="52.8825%" y="165" width="0.0139%" height="15" fill="rgb(251,28,31)" fg:x="239262" fg:w="63"/><text x="53.1325%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (169 samples, 0.04%)</title><rect x="53.0074%" y="133" width="0.0374%" height="15" fill="rgb(233,223,10)" fg:x="239827" fg:w="169"/><text x="53.2574%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (734 samples, 0.16%)</title><rect x="53.4695%" y="85" width="0.1622%" height="15" fill="rgb(215,21,27)" fg:x="241918" fg:w="734"/><text x="53.7195%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,361 samples, 0.52%)</title><rect x="53.1336%" y="117" width="0.5218%" height="15" fill="rgb(232,23,21)" fg:x="240398" fg:w="2361"/><text x="53.3836%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,402 samples, 0.31%)</title><rect x="53.3455%" y="101" width="0.3099%" height="15" fill="rgb(244,5,23)" fg:x="241357" fg:w="1402"/><text x="53.5955%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (107 samples, 0.02%)</title><rect x="53.6317%" y="85" width="0.0236%" height="15" fill="rgb(226,81,46)" fg:x="242652" fg:w="107"/><text x="53.8817%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (160 samples, 0.04%)</title><rect x="53.7089%" y="69" width="0.0354%" height="15" fill="rgb(247,70,30)" fg:x="243001" fg:w="160"/><text x="53.9589%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (62 samples, 0.01%)</title><rect x="53.7442%" y="69" width="0.0137%" height="15" fill="rgb(212,68,19)" fg:x="243161" fg:w="62"/><text x="53.9942%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (372 samples, 0.08%)</title><rect x="53.6905%" y="101" width="0.0822%" height="15" fill="rgb(240,187,13)" fg:x="242918" fg:w="372"/><text x="53.9405%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (332 samples, 0.07%)</title><rect x="53.6994%" y="85" width="0.0734%" height="15" fill="rgb(223,113,26)" fg:x="242958" fg:w="332"/><text x="53.9494%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (67 samples, 0.01%)</title><rect x="53.7579%" y="69" width="0.0148%" height="15" fill="rgb(206,192,2)" fg:x="243223" fg:w="67"/><text x="54.0079%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (289 samples, 0.06%)</title><rect x="54.0917%" y="85" width="0.0639%" height="15" fill="rgb(241,108,4)" fg:x="244733" fg:w="289"/><text x="54.3417%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,217 samples, 0.71%)</title><rect x="53.6662%" y="117" width="0.7110%" height="15" fill="rgb(247,173,49)" fg:x="242808" fg:w="3217"/><text x="53.9162%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,725 samples, 0.60%)</title><rect x="53.7750%" y="101" width="0.6023%" height="15" fill="rgb(224,114,35)" fg:x="243300" fg:w="2725"/><text x="54.0250%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (969 samples, 0.21%)</title><rect x="54.1631%" y="85" width="0.2142%" height="15" fill="rgb(245,159,27)" fg:x="245056" fg:w="969"/><text x="54.4131%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (171 samples, 0.04%)</title><rect x="54.3395%" y="69" width="0.0378%" height="15" fill="rgb(245,172,44)" fg:x="245854" fg:w="171"/><text x="54.5895%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (412 samples, 0.09%)</title><rect x="54.3773%" y="117" width="0.0911%" height="15" fill="rgb(236,23,11)" fg:x="246025" fg:w="412"/><text x="54.6273%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (349 samples, 0.08%)</title><rect x="54.3912%" y="101" width="0.0771%" height="15" fill="rgb(205,117,38)" fg:x="246088" fg:w="349"/><text x="54.6412%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (899 samples, 0.20%)</title><rect x="54.4732%" y="117" width="0.1987%" height="15" fill="rgb(237,72,25)" fg:x="246459" fg:w="899"/><text x="54.7232%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8,302 samples, 1.83%)</title><rect x="53.0591%" y="133" width="1.8349%" height="15" fill="rgb(244,70,9)" fg:x="240061" fg:w="8302"/><text x="53.3091%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,005 samples, 0.22%)</title><rect x="54.6719%" y="117" width="0.2221%" height="15" fill="rgb(217,125,39)" fg:x="247358" fg:w="1005"/><text x="54.9219%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8,758 samples, 1.94%)</title><rect x="52.9740%" y="149" width="1.9357%" height="15" fill="rgb(235,36,10)" fg:x="239676" fg:w="8758"/><text x="53.2240%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (920 samples, 0.20%)</title><rect x="54.9170%" y="149" width="0.2033%" height="15" fill="rgb(251,123,47)" fg:x="248467" fg:w="920"/><text x="55.1670%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (871 samples, 0.19%)</title><rect x="54.9278%" y="133" width="0.1925%" height="15" fill="rgb(221,13,13)" fg:x="248516" fg:w="871"/><text x="55.1778%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10,070 samples, 2.23%)</title><rect x="52.8984%" y="165" width="2.2257%" height="15" fill="rgb(238,131,9)" fg:x="239334" fg:w="10070"/><text x="53.1484%" y="175.50">l..</text></g><g><title>esp`alloc::raw_vec::finish_grow (10,262 samples, 2.27%)</title><rect x="52.8604%" y="181" width="2.2681%" height="15" fill="rgb(211,50,8)" fg:x="239162" fg:w="10262"/><text x="53.1104%" y="191.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10,533 samples, 2.33%)</title><rect x="52.8029%" y="197" width="2.3280%" height="15" fill="rgb(245,182,24)" fg:x="238902" fg:w="10533"/><text x="53.0529%" y="207.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (839 samples, 0.19%)</title><rect x="55.1435%" y="197" width="0.1854%" height="15" fill="rgb(242,14,37)" fg:x="249492" fg:w="839"/><text x="55.3935%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (211 samples, 0.05%)</title><rect x="55.3290%" y="197" width="0.0466%" height="15" fill="rgb(246,228,12)" fg:x="250331" fg:w="211"/><text x="55.5790%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (187 samples, 0.04%)</title><rect x="58.7951%" y="133" width="0.0413%" height="15" fill="rgb(213,55,15)" fg:x="266013" fg:w="187"/><text x="59.0451%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (182 samples, 0.04%)</title><rect x="58.7962%" y="117" width="0.0402%" height="15" fill="rgb(209,9,3)" fg:x="266018" fg:w="182"/><text x="59.0462%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (68 samples, 0.02%)</title><rect x="58.8214%" y="101" width="0.0150%" height="15" fill="rgb(230,59,30)" fg:x="266132" fg:w="68"/><text x="59.0714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (208 samples, 0.05%)</title><rect x="58.7906%" y="149" width="0.0460%" height="15" fill="rgb(209,121,21)" fg:x="265993" fg:w="208"/><text x="59.0406%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (246 samples, 0.05%)</title><rect x="58.9080%" y="101" width="0.0544%" height="15" fill="rgb(220,109,13)" fg:x="266524" fg:w="246"/><text x="59.1580%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (679 samples, 0.15%)</title><rect x="59.0767%" y="69" width="0.1501%" height="15" fill="rgb(232,18,1)" fg:x="267287" fg:w="679"/><text x="59.3267%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (127 samples, 0.03%)</title><rect x="59.2267%" y="69" width="0.0281%" height="15" fill="rgb(215,41,42)" fg:x="267966" fg:w="127"/><text x="59.4767%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,123 samples, 0.25%)</title><rect x="59.0090%" y="85" width="0.2482%" height="15" fill="rgb(224,123,36)" fg:x="266981" fg:w="1123"/><text x="59.2590%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,335 samples, 0.30%)</title><rect x="58.9624%" y="101" width="0.2951%" height="15" fill="rgb(240,125,3)" fg:x="266770" fg:w="1335"/><text x="59.2124%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (55 samples, 0.01%)</title><rect x="59.2594%" y="101" width="0.0122%" height="15" fill="rgb(205,98,50)" fg:x="268114" fg:w="55"/><text x="59.5094%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (113 samples, 0.02%)</title><rect x="59.3414%" y="53" width="0.0250%" height="15" fill="rgb(205,185,37)" fg:x="268485" fg:w="113"/><text x="59.5914%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (525 samples, 0.12%)</title><rect x="59.2780%" y="85" width="0.1160%" height="15" fill="rgb(238,207,15)" fg:x="268198" fg:w="525"/><text x="59.5280%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (370 samples, 0.08%)</title><rect x="59.3123%" y="69" width="0.0818%" height="15" fill="rgb(213,199,42)" fg:x="268353" fg:w="370"/><text x="59.5623%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (125 samples, 0.03%)</title><rect x="59.3664%" y="53" width="0.0276%" height="15" fill="rgb(235,201,11)" fg:x="268598" fg:w="125"/><text x="59.6164%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (105 samples, 0.02%)</title><rect x="59.4413%" y="69" width="0.0232%" height="15" fill="rgb(207,46,11)" fg:x="268937" fg:w="105"/><text x="59.6913%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,137 samples, 0.25%)</title><rect x="59.2716%" y="101" width="0.2513%" height="15" fill="rgb(241,35,35)" fg:x="268169" fg:w="1137"/><text x="59.5216%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (581 samples, 0.13%)</title><rect x="59.3945%" y="85" width="0.1284%" height="15" fill="rgb(243,32,47)" fg:x="268725" fg:w="581"/><text x="59.6445%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (258 samples, 0.06%)</title><rect x="59.4659%" y="69" width="0.0570%" height="15" fill="rgb(247,202,23)" fg:x="269048" fg:w="258"/><text x="59.7159%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (76 samples, 0.02%)</title><rect x="59.5229%" y="101" width="0.0168%" height="15" fill="rgb(219,102,11)" fg:x="269306" fg:w="76"/><text x="59.7729%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (63 samples, 0.01%)</title><rect x="59.5258%" y="85" width="0.0139%" height="15" fill="rgb(243,110,44)" fg:x="269319" fg:w="63"/><text x="59.7758%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (324 samples, 0.07%)</title><rect x="59.5417%" y="101" width="0.0716%" height="15" fill="rgb(222,74,54)" fg:x="269391" fg:w="324"/><text x="59.7917%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (63 samples, 0.01%)</title><rect x="59.5994%" y="85" width="0.0139%" height="15" fill="rgb(216,99,12)" fg:x="269652" fg:w="63"/><text x="59.8494%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5,570 samples, 1.23%)</title><rect x="58.8939%" y="117" width="1.2311%" height="15" fill="rgb(226,22,26)" fg:x="266460" fg:w="5570"/><text x="59.1439%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,315 samples, 0.51%)</title><rect x="59.6133%" y="101" width="0.5117%" height="15" fill="rgb(217,163,10)" fg:x="269715" fg:w="2315"/><text x="59.8633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5,707 samples, 1.26%)</title><rect x="58.8680%" y="133" width="1.2614%" height="15" fill="rgb(213,25,53)" fg:x="266343" fg:w="5707"/><text x="59.1180%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (263 samples, 0.06%)</title><rect x="60.1294%" y="133" width="0.0581%" height="15" fill="rgb(252,105,26)" fg:x="272050" fg:w="263"/><text x="60.3794%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (651 samples, 0.14%)</title><rect x="60.1886%" y="133" width="0.1439%" height="15" fill="rgb(220,39,43)" fg:x="272318" fg:w="651"/><text x="60.4386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (637 samples, 0.14%)</title><rect x="60.1917%" y="117" width="0.1408%" height="15" fill="rgb(229,68,48)" fg:x="272332" fg:w="637"/><text x="60.4417%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6,764 samples, 1.50%)</title><rect x="58.8386%" y="149" width="1.4950%" height="15" fill="rgb(252,8,32)" fg:x="266210" fg:w="6764"/><text x="59.0886%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (7,084 samples, 1.57%)</title><rect x="58.7798%" y="165" width="1.5657%" height="15" fill="rgb(223,20,43)" fg:x="265944" fg:w="7084"/><text x="59.0298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (52 samples, 0.01%)</title><rect x="60.3341%" y="149" width="0.0115%" height="15" fill="rgb(229,81,49)" fg:x="272976" fg:w="52"/><text x="60.5841%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7,213 samples, 1.59%)</title><rect x="58.7586%" y="181" width="1.5942%" height="15" fill="rgb(236,28,36)" fg:x="265848" fg:w="7213"/><text x="59.0086%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (126 samples, 0.03%)</title><rect x="60.3537%" y="181" width="0.0278%" height="15" fill="rgb(249,185,26)" fg:x="273065" fg:w="126"/><text x="60.6037%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (51,440 samples, 11.37%)</title><rect x="55.3756%" y="197" width="11.3694%" height="15" fill="rgb(249,174,33)" fg:x="250542" fg:w="51440"/><text x="55.6256%" y="207.50">esp`esp::var::off..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (28,791 samples, 6.36%)</title><rect x="60.3816%" y="181" width="6.3635%" height="15" fill="rgb(233,201,37)" fg:x="273191" fg:w="28791"/><text x="60.6316%" y="191.50">esp`esp:..</text></g><g><title>esp`esp::ham::Ham::ham_doub (15,495 samples, 3.42%)</title><rect x="63.3203%" y="165" width="3.4248%" height="15" fill="rgb(221,78,26)" fg:x="286487" fg:w="15495"/><text x="63.5703%" y="175.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (81 samples, 0.02%)</title><rect x="68.3194%" y="181" width="0.0179%" height="15" fill="rgb(250,127,30)" fg:x="309105" fg:w="81"/><text x="68.5694%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (4,286 samples, 0.95%)</title><rect x="70.9239%" y="165" width="0.9473%" height="15" fill="rgb(230,49,44)" fg:x="320889" fg:w="4286"/><text x="71.1739%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,656 samples, 0.59%)</title><rect x="71.2842%" y="149" width="0.5870%" height="15" fill="rgb(229,67,23)" fg:x="322519" fg:w="2656"/><text x="71.5342%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (18,891 samples, 4.18%)</title><rect x="68.3422%" y="181" width="4.1754%" height="15" fill="rgb(249,83,47)" fg:x="309208" fg:w="18891"/><text x="68.5922%" y="191.50">esp`e..</text></g><g><title>esp`esp::ham::Ham::ham_sing (2,924 samples, 0.65%)</title><rect x="71.8712%" y="165" width="0.6463%" height="15" fill="rgb(215,43,3)" fg:x="325175" fg:w="2924"/><text x="72.1212%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,840 samples, 0.41%)</title><rect x="72.1108%" y="149" width="0.4067%" height="15" fill="rgb(238,154,13)" fg:x="326259" fg:w="1840"/><text x="72.3608%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (118 samples, 0.03%)</title><rect x="72.9649%" y="85" width="0.0261%" height="15" fill="rgb(219,56,2)" fg:x="330123" fg:w="118"/><text x="73.2149%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (94 samples, 0.02%)</title><rect x="73.0108%" y="53" width="0.0208%" height="15" fill="rgb(233,0,4)" fg:x="330331" fg:w="94"/><text x="73.2608%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (246 samples, 0.05%)</title><rect x="72.9910%" y="85" width="0.0544%" height="15" fill="rgb(235,30,7)" fg:x="330241" fg:w="246"/><text x="73.2410%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (218 samples, 0.05%)</title><rect x="72.9971%" y="69" width="0.0482%" height="15" fill="rgb(250,79,13)" fg:x="330269" fg:w="218"/><text x="73.2471%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (64 samples, 0.01%)</title><rect x="73.0772%" y="37" width="0.0141%" height="15" fill="rgb(211,146,34)" fg:x="330631" fg:w="64"/><text x="73.3272%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (190 samples, 0.04%)</title><rect x="73.0575%" y="69" width="0.0420%" height="15" fill="rgb(228,22,38)" fg:x="330542" fg:w="190"/><text x="73.3075%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (134 samples, 0.03%)</title><rect x="73.0699%" y="53" width="0.0296%" height="15" fill="rgb(235,168,5)" fg:x="330598" fg:w="134"/><text x="73.3199%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (280 samples, 0.06%)</title><rect x="73.0553%" y="85" width="0.0619%" height="15" fill="rgb(221,155,16)" fg:x="330532" fg:w="280"/><text x="73.3053%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (80 samples, 0.02%)</title><rect x="73.0995%" y="69" width="0.0177%" height="15" fill="rgb(215,215,53)" fg:x="330732" fg:w="80"/><text x="73.3495%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (46 samples, 0.01%)</title><rect x="73.1191%" y="85" width="0.0102%" height="15" fill="rgb(223,4,10)" fg:x="330821" fg:w="46"/><text x="73.3691%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,042 samples, 0.45%)</title><rect x="72.9620%" y="101" width="0.4513%" height="15" fill="rgb(234,103,6)" fg:x="330110" fg:w="2042"/><text x="73.2120%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,285 samples, 0.28%)</title><rect x="73.1293%" y="85" width="0.2840%" height="15" fill="rgb(227,97,0)" fg:x="330867" fg:w="1285"/><text x="73.3793%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,067 samples, 0.46%)</title><rect x="72.9569%" y="117" width="0.4569%" height="15" fill="rgb(234,150,53)" fg:x="330087" fg:w="2067"/><text x="73.2069%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (105 samples, 0.02%)</title><rect x="73.4138%" y="117" width="0.0232%" height="15" fill="rgb(228,201,54)" fg:x="332154" fg:w="105"/><text x="73.6638%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,317 samples, 0.51%)</title><rect x="72.9490%" y="133" width="0.5121%" height="15" fill="rgb(222,22,37)" fg:x="330051" fg:w="2317"/><text x="73.1990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (106 samples, 0.02%)</title><rect x="73.4376%" y="117" width="0.0234%" height="15" fill="rgb(237,53,32)" fg:x="332262" fg:w="106"/><text x="73.6876%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (101 samples, 0.02%)</title><rect x="73.4387%" y="101" width="0.0223%" height="15" fill="rgb(233,25,53)" fg:x="332267" fg:w="101"/><text x="73.6887%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,353 samples, 0.52%)</title><rect x="72.9450%" y="149" width="0.5201%" height="15" fill="rgb(210,40,34)" fg:x="330033" fg:w="2353"/><text x="73.1950%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,369 samples, 0.52%)</title><rect x="72.9437%" y="165" width="0.5236%" height="15" fill="rgb(241,220,44)" fg:x="330027" fg:w="2369"/><text x="73.1937%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el (4,294 samples, 0.95%)</title><rect x="72.5184%" y="181" width="0.9491%" height="15" fill="rgb(235,28,35)" fg:x="328103" fg:w="4294"/><text x="72.7684%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (32,325 samples, 7.14%)</title><rect x="66.7451%" y="197" width="7.1446%" height="15" fill="rgb(210,56,17)" fg:x="301982" fg:w="32325"/><text x="66.9951%" y="207.50">esp`esp::v..</text></g><g><title>esp`hashbrown::map::make_hash (1,910 samples, 0.42%)</title><rect x="73.4675%" y="181" width="0.4222%" height="15" fill="rgb(224,130,29)" fg:x="332397" fg:w="1910"/><text x="73.7175%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,176 samples, 0.26%)</title><rect x="73.6297%" y="165" width="0.2599%" height="15" fill="rgb(235,212,8)" fg:x="333131" fg:w="1176"/><text x="73.8797%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (154 samples, 0.03%)</title><rect x="77.0931%" y="133" width="0.0340%" height="15" fill="rgb(223,33,50)" fg:x="348801" fg:w="154"/><text x="77.3431%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (135 samples, 0.03%)</title><rect x="77.0973%" y="117" width="0.0298%" height="15" fill="rgb(219,149,13)" fg:x="348820" fg:w="135"/><text x="77.3473%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (123 samples, 0.03%)</title><rect x="77.1000%" y="101" width="0.0272%" height="15" fill="rgb(250,156,29)" fg:x="348832" fg:w="123"/><text x="77.3500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (54 samples, 0.01%)</title><rect x="77.1303%" y="101" width="0.0119%" height="15" fill="rgb(216,193,19)" fg:x="348969" fg:w="54"/><text x="77.3803%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (62 samples, 0.01%)</title><rect x="77.1290%" y="117" width="0.0137%" height="15" fill="rgb(216,135,14)" fg:x="348963" fg:w="62"/><text x="77.3790%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (74 samples, 0.02%)</title><rect x="77.1276%" y="133" width="0.0164%" height="15" fill="rgb(241,47,5)" fg:x="348957" fg:w="74"/><text x="77.3776%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (245 samples, 0.05%)</title><rect x="77.0905%" y="149" width="0.0542%" height="15" fill="rgb(233,42,35)" fg:x="348789" fg:w="245"/><text x="77.3405%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (276 samples, 0.06%)</title><rect x="77.0850%" y="165" width="0.0610%" height="15" fill="rgb(231,13,6)" fg:x="348764" fg:w="276"/><text x="77.3350%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (268 samples, 0.06%)</title><rect x="77.1462%" y="165" width="0.0592%" height="15" fill="rgb(207,181,40)" fg:x="349041" fg:w="268"/><text x="77.3962%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (250 samples, 0.06%)</title><rect x="77.1502%" y="149" width="0.0553%" height="15" fill="rgb(254,173,49)" fg:x="349059" fg:w="250"/><text x="77.4002%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (204 samples, 0.05%)</title><rect x="77.1603%" y="133" width="0.0451%" height="15" fill="rgb(221,1,38)" fg:x="349105" fg:w="204"/><text x="77.4103%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (95 samples, 0.02%)</title><rect x="77.1844%" y="117" width="0.0210%" height="15" fill="rgb(206,124,46)" fg:x="349214" fg:w="95"/><text x="77.4344%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (78 samples, 0.02%)</title><rect x="77.2187%" y="149" width="0.0172%" height="15" fill="rgb(249,21,11)" fg:x="349369" fg:w="78"/><text x="77.4687%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (68 samples, 0.02%)</title><rect x="77.2209%" y="133" width="0.0150%" height="15" fill="rgb(222,201,40)" fg:x="349379" fg:w="68"/><text x="77.4709%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (138 samples, 0.03%)</title><rect x="77.2068%" y="165" width="0.0305%" height="15" fill="rgb(235,61,29)" fg:x="349315" fg:w="138"/><text x="77.4568%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (97 samples, 0.02%)</title><rect x="77.2773%" y="133" width="0.0214%" height="15" fill="rgb(219,207,3)" fg:x="349634" fg:w="97"/><text x="77.5273%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (265 samples, 0.06%)</title><rect x="77.2428%" y="165" width="0.0586%" height="15" fill="rgb(222,56,46)" fg:x="349478" fg:w="265"/><text x="77.4928%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (185 samples, 0.04%)</title><rect x="77.2605%" y="149" width="0.0409%" height="15" fill="rgb(239,76,54)" fg:x="349558" fg:w="185"/><text x="77.5105%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (12,255 samples, 2.71%)</title><rect x="74.7057%" y="181" width="2.7086%" height="15" fill="rgb(231,124,27)" fg:x="337999" fg:w="12255"/><text x="74.9557%" y="191.50">es..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (500 samples, 0.11%)</title><rect x="77.3038%" y="165" width="0.1105%" height="15" fill="rgb(249,195,6)" fg:x="349754" fg:w="500"/><text x="77.5538%" y="175.50"></text></g><g><title>esp`esp::var::sparse::SparseMatUpperTri::sort_remove_duplicates (16,044 samples, 3.55%)</title><rect x="73.8896%" y="197" width="3.5461%" height="15" fill="rgb(237,174,47)" fg:x="334307" fg:w="16044"/><text x="74.1396%" y="207.50">esp`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (73 samples, 0.02%)</title><rect x="77.4196%" y="181" width="0.0161%" height="15" fill="rgb(206,201,31)" fg:x="350278" fg:w="73"/><text x="77.6696%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::expand_sparse_ham_rows (92 samples, 0.02%)</title><rect x="77.4357%" y="197" width="0.0203%" height="15" fill="rgb(231,57,52)" fg:x="350351" fg:w="92"/><text x="77.6857%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (14,609 samples, 3.23%)</title><rect x="77.4561%" y="197" width="3.2289%" height="15" fill="rgb(248,177,22)" fg:x="350443" fg:w="14609"/><text x="77.7061%" y="207.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,569 samples, 0.57%)</title><rect x="80.1172%" y="181" width="0.5678%" height="15" fill="rgb(215,211,37)" fg:x="362483" fg:w="2569"/><text x="80.3672%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,746 samples, 0.39%)</title><rect x="81.5912%" y="181" width="0.3859%" height="15" fill="rgb(241,128,51)" fg:x="369152" fg:w="1746"/><text x="81.8412%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (219 samples, 0.05%)</title><rect x="82.4320%" y="165" width="0.0484%" height="15" fill="rgb(227,165,31)" fg:x="372956" fg:w="219"/><text x="82.6820%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,374 samples, 0.52%)</title><rect x="84.2463%" y="149" width="0.5247%" height="15" fill="rgb(228,167,24)" fg:x="381165" fg:w="2374"/><text x="84.4963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (191 samples, 0.04%)</title><rect x="84.7883%" y="101" width="0.0422%" height="15" fill="rgb(228,143,12)" fg:x="383617" fg:w="191"/><text x="85.0383%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (139 samples, 0.03%)</title><rect x="84.7998%" y="85" width="0.0307%" height="15" fill="rgb(249,149,8)" fg:x="383669" fg:w="139"/><text x="85.0498%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (346 samples, 0.08%)</title><rect x="84.7757%" y="133" width="0.0765%" height="15" fill="rgb(243,35,44)" fg:x="383560" fg:w="346"/><text x="85.0257%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (339 samples, 0.07%)</title><rect x="84.7772%" y="117" width="0.0749%" height="15" fill="rgb(246,89,9)" fg:x="383567" fg:w="339"/><text x="85.0272%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (98 samples, 0.02%)</title><rect x="84.8305%" y="101" width="0.0217%" height="15" fill="rgb(233,213,13)" fg:x="383808" fg:w="98"/><text x="85.0805%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (58 samples, 0.01%)</title><rect x="84.8393%" y="85" width="0.0128%" height="15" fill="rgb(233,141,41)" fg:x="383848" fg:w="58"/><text x="85.0893%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (419 samples, 0.09%)</title><rect x="84.8524%" y="133" width="0.0926%" height="15" fill="rgb(239,167,4)" fg:x="383907" fg:w="419"/><text x="85.1024%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (793 samples, 0.18%)</title><rect x="84.7711%" y="149" width="0.1753%" height="15" fill="rgb(209,217,16)" fg:x="383539" fg:w="793"/><text x="85.0211%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (274 samples, 0.06%)</title><rect x="84.9463%" y="149" width="0.0606%" height="15" fill="rgb(219,88,35)" fg:x="384332" fg:w="274"/><text x="85.1963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (113 samples, 0.02%)</title><rect x="85.0073%" y="149" width="0.0250%" height="15" fill="rgb(220,193,23)" fg:x="384608" fg:w="113"/><text x="85.2573%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (69 samples, 0.02%)</title><rect x="85.0394%" y="149" width="0.0153%" height="15" fill="rgb(230,90,52)" fg:x="384753" fg:w="69"/><text x="85.2894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (67 samples, 0.01%)</title><rect x="85.0546%" y="149" width="0.0148%" height="15" fill="rgb(252,106,19)" fg:x="384822" fg:w="67"/><text x="85.3046%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (46 samples, 0.01%)</title><rect x="85.0593%" y="133" width="0.0102%" height="15" fill="rgb(206,74,20)" fg:x="384843" fg:w="46"/><text x="85.3093%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11,735 samples, 2.59%)</title><rect x="82.4804%" y="165" width="2.5937%" height="15" fill="rgb(230,138,44)" fg:x="373175" fg:w="11735"/><text x="82.7304%" y="175.50">es..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14,026 samples, 3.10%)</title><rect x="81.9771%" y="181" width="3.1001%" height="15" fill="rgb(235,182,43)" fg:x="370898" fg:w="14026"/><text x="82.2271%" y="191.50">esp..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19,879 samples, 4.39%)</title><rect x="80.6850%" y="197" width="4.3937%" height="15" fill="rgb(242,16,51)" fg:x="365052" fg:w="19879"/><text x="80.9350%" y="207.50">esp`h..</text></g><g><title>esp`hashbrown::map::make_hash (3,255 samples, 0.72%)</title><rect x="85.0787%" y="197" width="0.7194%" height="15" fill="rgb(248,9,4)" fg:x="384931" fg:w="3255"/><text x="85.3287%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,938 samples, 0.43%)</title><rect x="85.3698%" y="181" width="0.4283%" height="15" fill="rgb(210,31,22)" fg:x="386248" fg:w="1938"/><text x="85.6198%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (103 samples, 0.02%)</title><rect x="85.7981%" y="197" width="0.0228%" height="15" fill="rgb(239,54,39)" fg:x="388186" fg:w="103"/><text x="86.0481%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (34,006 samples, 7.52%)</title><rect x="85.8211%" y="197" width="7.5161%" height="15" fill="rgb(230,99,41)" fg:x="388290" fg:w="34006"/><text x="86.0711%" y="207.50">esp`std::c..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (6,118 samples, 1.35%)</title><rect x="91.9850%" y="181" width="1.3522%" height="15" fill="rgb(253,106,12)" fg:x="416178" fg:w="6118"/><text x="92.2350%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (255 samples, 0.06%)</title><rect x="93.3375%" y="197" width="0.0564%" height="15" fill="rgb(213,46,41)" fg:x="422297" fg:w="255"/><text x="93.5875%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (73 samples, 0.02%)</title><rect x="93.7921%" y="165" width="0.0161%" height="15" fill="rgb(215,133,35)" fg:x="424354" fg:w="73"/><text x="94.0421%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15,517 samples, 3.43%)</title><rect x="93.6451%" y="181" width="3.4296%" height="15" fill="rgb(213,28,5)" fg:x="423689" fg:w="15517"/><text x="93.8951%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14,779 samples, 3.27%)</title><rect x="93.8083%" y="165" width="3.2665%" height="15" fill="rgb(215,77,49)" fg:x="424427" fg:w="14779"/><text x="94.0583%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5,735 samples, 1.27%)</title><rect x="95.8072%" y="149" width="1.2676%" height="15" fill="rgb(248,100,22)" fg:x="433471" fg:w="5735"/><text x="96.0572%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,178 samples, 0.26%)</title><rect x="96.8144%" y="133" width="0.2604%" height="15" fill="rgb(208,67,9)" fg:x="438028" fg:w="1178"/><text x="97.0644%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16,719 samples, 3.70%)</title><rect x="93.3938%" y="197" width="3.6953%" height="15" fill="rgb(219,133,21)" fg:x="422552" fg:w="16719"/><text x="93.6438%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (65 samples, 0.01%)</title><rect x="97.0748%" y="181" width="0.0144%" height="15" fill="rgb(246,46,29)" fg:x="439206" fg:w="65"/><text x="97.3248%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (114 samples, 0.03%)</title><rect x="97.0891%" y="197" width="0.0252%" height="15" fill="rgb(246,185,52)" fg:x="439271" fg:w="114"/><text x="97.3391%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (176 samples, 0.04%)</title><rect x="97.1143%" y="197" width="0.0389%" height="15" fill="rgb(252,136,11)" fg:x="439385" fg:w="176"/><text x="97.3643%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (147 samples, 0.03%)</title><rect x="97.1532%" y="197" width="0.0325%" height="15" fill="rgb(219,138,53)" fg:x="439561" fg:w="147"/><text x="97.4032%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (108 samples, 0.02%)</title><rect x="97.1857%" y="197" width="0.0239%" height="15" fill="rgb(211,51,23)" fg:x="439708" fg:w="108"/><text x="97.4357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (90 samples, 0.02%)</title><rect x="97.1897%" y="181" width="0.0199%" height="15" fill="rgb(247,221,28)" fg:x="439726" fg:w="90"/><text x="97.4397%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (90 samples, 0.02%)</title><rect x="97.1897%" y="165" width="0.0199%" height="15" fill="rgb(251,222,45)" fg:x="439726" fg:w="90"/><text x="97.4397%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (85 samples, 0.02%)</title><rect x="97.2125%" y="197" width="0.0188%" height="15" fill="rgb(217,162,53)" fg:x="439829" fg:w="85"/><text x="97.4625%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (357 samples, 0.08%)</title><rect x="97.2312%" y="197" width="0.0789%" height="15" fill="rgb(229,93,14)" fg:x="439914" fg:w="357"/><text x="97.4812%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (185 samples, 0.04%)</title><rect x="97.3121%" y="197" width="0.0409%" height="15" fill="rgb(209,67,49)" fg:x="440280" fg:w="185"/><text x="97.5621%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (273,924 samples, 60.54%)</title><rect x="36.8097%" y="213" width="60.5436%" height="15" fill="rgb(213,87,29)" fg:x="166542" fg:w="273924"/><text x="37.0597%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el (99 samples, 0.02%)</title><rect x="97.3532%" y="213" width="0.0219%" height="15" fill="rgb(205,151,52)" fg:x="440466" fg:w="99"/><text x="97.6032%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (333 samples, 0.07%)</title><rect x="97.3751%" y="213" width="0.0736%" height="15" fill="rgb(253,215,39)" fg:x="440565" fg:w="333"/><text x="97.6251%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (109 samples, 0.02%)</title><rect x="97.4487%" y="213" width="0.0241%" height="15" fill="rgb(221,220,41)" fg:x="440898" fg:w="109"/><text x="97.6987%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (111 samples, 0.02%)</title><rect x="97.4728%" y="213" width="0.0245%" height="15" fill="rgb(218,133,21)" fg:x="441007" fg:w="111"/><text x="97.7228%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (306 samples, 0.07%)</title><rect x="97.4989%" y="213" width="0.0676%" height="15" fill="rgb(221,193,43)" fg:x="441125" fg:w="306"/><text x="97.7489%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (115 samples, 0.03%)</title><rect x="97.5683%" y="213" width="0.0254%" height="15" fill="rgb(240,128,52)" fg:x="441439" fg:w="115"/><text x="97.8183%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (103 samples, 0.02%)</title><rect x="97.5944%" y="213" width="0.0228%" height="15" fill="rgb(253,114,12)" fg:x="441557" fg:w="103"/><text x="97.8444%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (437,095 samples, 96.61%)</title><rect x="1.0096%" y="229" width="96.6082%" height="15" fill="rgb(215,223,47)" fg:x="4568" fg:w="437095"/><text x="1.2596%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>libsystem_malloc.dylib`free_large (120 samples, 0.03%)</title><rect x="97.8357%" y="133" width="0.0265%" height="15" fill="rgb(248,225,23)" fg:x="442649" fg:w="120"/><text x="98.0857%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (120 samples, 0.03%)</title><rect x="97.8357%" y="117" width="0.0265%" height="15" fill="rgb(250,108,0)" fg:x="442649" fg:w="120"/><text x="98.0857%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (120 samples, 0.03%)</title><rect x="97.8357%" y="101" width="0.0265%" height="15" fill="rgb(228,208,7)" fg:x="442649" fg:w="120"/><text x="98.0857%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (133 samples, 0.03%)</title><rect x="97.8353%" y="213" width="0.0294%" height="15" fill="rgb(244,45,10)" fg:x="442647" fg:w="133"/><text x="98.0853%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (133 samples, 0.03%)</title><rect x="97.8353%" y="197" width="0.0294%" height="15" fill="rgb(207,125,25)" fg:x="442647" fg:w="133"/><text x="98.0853%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (133 samples, 0.03%)</title><rect x="97.8353%" y="181" width="0.0294%" height="15" fill="rgb(210,195,18)" fg:x="442647" fg:w="133"/><text x="98.0853%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (133 samples, 0.03%)</title><rect x="97.8353%" y="165" width="0.0294%" height="15" fill="rgb(249,80,12)" fg:x="442647" fg:w="133"/><text x="98.0853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (133 samples, 0.03%)</title><rect x="97.8353%" y="149" width="0.0294%" height="15" fill="rgb(221,65,9)" fg:x="442647" fg:w="133"/><text x="98.0853%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (53 samples, 0.01%)</title><rect x="97.8738%" y="213" width="0.0117%" height="15" fill="rgb(235,49,36)" fg:x="442821" fg:w="53"/><text x="98.1238%" y="223.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (270 samples, 0.06%)</title><rect x="97.8855%" y="213" width="0.0597%" height="15" fill="rgb(225,32,20)" fg:x="442874" fg:w="270"/><text x="98.1355%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,676 samples, 0.37%)</title><rect x="97.9451%" y="213" width="0.3704%" height="15" fill="rgb(215,141,46)" fg:x="443144" fg:w="1676"/><text x="98.1951%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,245 samples, 0.28%)</title><rect x="98.0404%" y="197" width="0.2752%" height="15" fill="rgb(250,160,47)" fg:x="443575" fg:w="1245"/><text x="98.2904%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1,342 samples, 0.30%)</title><rect x="98.3156%" y="213" width="0.2966%" height="15" fill="rgb(216,222,40)" fg:x="444820" fg:w="1342"/><text x="98.5656%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (945 samples, 0.21%)</title><rect x="98.4033%" y="197" width="0.2089%" height="15" fill="rgb(234,217,39)" fg:x="445217" fg:w="945"/><text x="98.6533%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4,060 samples, 0.90%)</title><rect x="98.6122%" y="213" width="0.8974%" height="15" fill="rgb(207,178,40)" fg:x="446162" fg:w="4060"/><text x="98.8622%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (345 samples, 0.08%)</title><rect x="99.4333%" y="197" width="0.0763%" height="15" fill="rgb(221,136,13)" fg:x="449877" fg:w="345"/><text x="99.6833%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (60 samples, 0.01%)</title><rect x="99.5226%" y="197" width="0.0133%" height="15" fill="rgb(249,199,10)" fg:x="450281" fg:w="60"/><text x="99.7726%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (150 samples, 0.03%)</title><rect x="99.6391%" y="165" width="0.0332%" height="15" fill="rgb(249,222,13)" fg:x="450808" fg:w="150"/><text x="99.8891%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (83 samples, 0.02%)</title><rect x="99.6539%" y="149" width="0.0183%" height="15" fill="rgb(244,185,38)" fg:x="450875" fg:w="83"/><text x="99.9039%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (893 samples, 0.20%)</title><rect x="99.5095%" y="213" width="0.1974%" height="15" fill="rgb(236,202,9)" fg:x="450222" fg:w="893"/><text x="99.7595%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (774 samples, 0.17%)</title><rect x="99.5359%" y="197" width="0.1711%" height="15" fill="rgb(250,229,37)" fg:x="450341" fg:w="774"/><text x="99.7859%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (623 samples, 0.14%)</title><rect x="99.5692%" y="181" width="0.1377%" height="15" fill="rgb(206,174,23)" fg:x="450492" fg:w="623"/><text x="99.8192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (128 samples, 0.03%)</title><rect x="99.6786%" y="165" width="0.0283%" height="15" fill="rgb(211,33,43)" fg:x="450987" fg:w="128"/><text x="99.9286%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (128 samples, 0.03%)</title><rect x="99.6786%" y="149" width="0.0283%" height="15" fill="rgb(245,58,50)" fg:x="450987" fg:w="128"/><text x="99.9286%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (128 samples, 0.03%)</title><rect x="99.6786%" y="133" width="0.0283%" height="15" fill="rgb(244,68,36)" fg:x="450987" fg:w="128"/><text x="99.9286%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (346 samples, 0.08%)</title><rect x="99.7069%" y="213" width="0.0765%" height="15" fill="rgb(232,229,15)" fg:x="451115" fg:w="346"/><text x="99.9569%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (213 samples, 0.05%)</title><rect x="99.7363%" y="197" width="0.0471%" height="15" fill="rgb(254,30,23)" fg:x="451248" fg:w="213"/><text x="99.9863%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::find_new_dets (9,838 samples, 2.17%)</title><rect x="97.6178%" y="229" width="2.1744%" height="15" fill="rgb(235,160,14)" fg:x="441663" fg:w="9838"/><text x="97.8678%" y="239.50">e..</text></g><g><title>esp`esp::var::variational (446,959 samples, 98.79%)</title><rect x="1.0096%" y="245" width="98.7884%" height="15" fill="rgb(212,155,44)" fg:x="4568" fg:w="446959"/><text x="1.2596%" y="255.50">esp`esp::var::variational</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (64 samples, 0.01%)</title><rect x="99.8263%" y="197" width="0.0141%" height="15" fill="rgb(226,2,50)" fg:x="451655" fg:w="64"/><text x="100.0763%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (64 samples, 0.01%)</title><rect x="99.8263%" y="181" width="0.0141%" height="15" fill="rgb(234,177,6)" fg:x="451655" fg:w="64"/><text x="100.0763%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (63 samples, 0.01%)</title><rect x="99.8265%" y="165" width="0.0139%" height="15" fill="rgb(217,24,9)" fg:x="451656" fg:w="63"/><text x="100.0765%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (63 samples, 0.01%)</title><rect x="99.8265%" y="149" width="0.0139%" height="15" fill="rgb(220,13,46)" fg:x="451656" fg:w="63"/><text x="100.0765%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (63 samples, 0.01%)</title><rect x="99.8265%" y="133" width="0.0139%" height="15" fill="rgb(239,221,27)" fg:x="451656" fg:w="63"/><text x="100.0765%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (50 samples, 0.01%)</title><rect x="99.8294%" y="117" width="0.0111%" height="15" fill="rgb(222,198,25)" fg:x="451669" fg:w="50"/><text x="100.0794%" y="127.50"></text></g><g><title>esp`alloc::slice::merge_sort (143 samples, 0.03%)</title><rect x="99.8404%" y="197" width="0.0316%" height="15" fill="rgb(211,99,13)" fg:x="451719" fg:w="143"/><text x="100.0904%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (358 samples, 0.08%)</title><rect x="99.7980%" y="213" width="0.0791%" height="15" fill="rgb(232,111,31)" fg:x="451527" fg:w="358"/><text x="100.0480%" y="223.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (153 samples, 0.03%)</title><rect x="99.8771%" y="213" width="0.0338%" height="15" fill="rgb(245,82,37)" fg:x="451885" fg:w="153"/><text x="100.1271%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (512 samples, 0.11%)</title><rect x="99.7980%" y="245" width="0.1132%" height="15" fill="rgb(227,149,46)" fg:x="451527" fg:w="512"/><text x="100.0480%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (512 samples, 0.11%)</title><rect x="99.7980%" y="229" width="0.1132%" height="15" fill="rgb(218,36,50)" fg:x="451527" fg:w="512"/><text x="100.0480%" y="239.50"></text></g><g><title>esp`main (452,072 samples, 99.92%)</title><rect x="0.0000%" y="325" width="99.9184%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="452072"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (452,072 samples, 99.92%)</title><rect x="0.0000%" y="309" width="99.9184%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="452072"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (452,072 samples, 99.92%)</title><rect x="0.0000%" y="293" width="99.9184%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="452072"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (452,072 samples, 99.92%)</title><rect x="0.0000%" y="277" width="99.9184%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="452072"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (452,072 samples, 99.92%)</title><rect x="0.0000%" y="261" width="99.9184%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="452072"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>0x1 (452,440 samples, 100.00%)</title><rect x="0.0000%" y="357" width="99.9998%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="452440"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (452,440 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9998%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="452440"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (368 samples, 0.08%)</title><rect x="99.9184%" y="325" width="0.0813%" height="15" fill="rgb(206,64,50)" fg:x="452072" fg:w="368"/><text x="100.1684%" y="335.50"></text></g><g><title>all (452,441 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="452441"/><text x="0.2500%" y="383.50"></text></g></svg></svg>