<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="326508"><g><title>libsystem_malloc.dylib`small_size (217 samples, 0.07%)</title><rect x="0.0322%" y="213" width="0.0665%" height="15" fill="rgb(227,0,7)" fg:x="105" fg:w="217"/><text x="0.2822%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (353 samples, 0.11%)</title><rect x="0.0233%" y="229" width="0.1081%" height="15" fill="rgb(217,0,24)" fg:x="76" fg:w="353"/><text x="0.2733%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (107 samples, 0.03%)</title><rect x="0.0986%" y="213" width="0.0328%" height="15" fill="rgb(221,193,54)" fg:x="322" fg:w="107"/><text x="0.3486%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (107 samples, 0.03%)</title><rect x="0.0986%" y="197" width="0.0328%" height="15" fill="rgb(248,212,6)" fg:x="322" fg:w="107"/><text x="0.3486%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (75 samples, 0.02%)</title><rect x="0.1314%" y="229" width="0.0230%" height="15" fill="rgb(208,68,35)" fg:x="429" fg:w="75"/><text x="0.3814%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (75 samples, 0.02%)</title><rect x="0.1314%" y="213" width="0.0230%" height="15" fill="rgb(232,128,0)" fg:x="429" fg:w="75"/><text x="0.3814%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (75 samples, 0.02%)</title><rect x="0.1314%" y="197" width="0.0230%" height="15" fill="rgb(207,160,47)" fg:x="429" fg:w="75"/><text x="0.3814%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (66 samples, 0.02%)</title><rect x="0.1917%" y="213" width="0.0202%" height="15" fill="rgb(228,23,34)" fg:x="626" fg:w="66"/><text x="0.4417%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (59 samples, 0.02%)</title><rect x="0.1939%" y="197" width="0.0181%" height="15" fill="rgb(218,30,26)" fg:x="633" fg:w="59"/><text x="0.4439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (89 samples, 0.03%)</title><rect x="0.2119%" y="213" width="0.0273%" height="15" fill="rgb(220,122,19)" fg:x="692" fg:w="89"/><text x="0.4619%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (548 samples, 0.17%)</title><rect x="0.2465%" y="213" width="0.1678%" height="15" fill="rgb(250,228,42)" fg:x="805" fg:w="548"/><text x="0.4965%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (286 samples, 0.09%)</title><rect x="0.4227%" y="197" width="0.0876%" height="15" fill="rgb(240,193,28)" fg:x="1380" fg:w="286"/><text x="0.6727%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (314 samples, 0.10%)</title><rect x="0.4184%" y="213" width="0.0962%" height="15" fill="rgb(216,20,37)" fg:x="1366" fg:w="314"/><text x="0.6684%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,424 samples, 0.74%)</title><rect x="0.5458%" y="197" width="0.7424%" height="15" fill="rgb(206,188,39)" fg:x="1782" fg:w="2424"/><text x="0.7958%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (72 samples, 0.02%)</title><rect x="1.2882%" y="197" width="0.0221%" height="15" fill="rgb(217,207,13)" fg:x="4206" fg:w="72"/><text x="1.5382%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,793 samples, 1.16%)</title><rect x="0.1544%" y="229" width="1.1617%" height="15" fill="rgb(231,73,38)" fg:x="504" fg:w="3793"/><text x="0.4044%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2,617 samples, 0.80%)</title><rect x="0.5145%" y="213" width="0.8015%" height="15" fill="rgb(225,20,46)" fg:x="1680" fg:w="2617"/><text x="0.7645%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (37 samples, 0.01%)</title><rect x="1.3516%" y="197" width="0.0113%" height="15" fill="rgb(210,31,41)" fg:x="4413" fg:w="37"/><text x="1.6016%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (37 samples, 0.01%)</title><rect x="1.3516%" y="181" width="0.0113%" height="15" fill="rgb(221,200,47)" fg:x="4413" fg:w="37"/><text x="1.6016%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (34 samples, 0.01%)</title><rect x="1.3669%" y="197" width="0.0104%" height="15" fill="rgb(226,26,5)" fg:x="4463" fg:w="34"/><text x="1.6169%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (68 samples, 0.02%)</title><rect x="1.3773%" y="197" width="0.0208%" height="15" fill="rgb(249,33,26)" fg:x="4497" fg:w="68"/><text x="1.6273%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (171 samples, 0.05%)</title><rect x="1.4055%" y="181" width="0.0524%" height="15" fill="rgb(235,183,28)" fg:x="4589" fg:w="171"/><text x="1.6555%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (467 samples, 0.14%)</title><rect x="1.3160%" y="229" width="0.1430%" height="15" fill="rgb(221,5,38)" fg:x="4297" fg:w="467"/><text x="1.5660%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (451 samples, 0.14%)</title><rect x="1.3209%" y="213" width="0.1381%" height="15" fill="rgb(247,18,42)" fg:x="4313" fg:w="451"/><text x="1.5709%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (184 samples, 0.06%)</title><rect x="1.4027%" y="197" width="0.0564%" height="15" fill="rgb(241,131,45)" fg:x="4580" fg:w="184"/><text x="1.6527%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (107 samples, 0.03%)</title><rect x="1.4591%" y="229" width="0.0328%" height="15" fill="rgb(249,31,29)" fg:x="4764" fg:w="107"/><text x="1.7091%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (107 samples, 0.03%)</title><rect x="1.4591%" y="213" width="0.0328%" height="15" fill="rgb(225,111,53)" fg:x="4764" fg:w="107"/><text x="1.7091%" y="223.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::sparse::SparseMatUpperTri&gt; (4,871 samples, 1.49%)</title><rect x="0.0055%" y="245" width="1.4918%" height="15" fill="rgb(238,160,17)" fg:x="18" fg:w="4871"/><text x="0.2555%" y="255.50"></text></g><g><title>esp`__rdl_alloc (193 samples, 0.06%)</title><rect x="1.5611%" y="213" width="0.0591%" height="15" fill="rgb(214,148,48)" fg:x="5097" fg:w="193"/><text x="1.8111%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (40 samples, 0.01%)</title><rect x="1.6242%" y="213" width="0.0123%" height="15" fill="rgb(232,36,49)" fg:x="5303" fg:w="40"/><text x="1.8742%" y="223.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (302 samples, 0.09%)</title><rect x="2.2872%" y="197" width="0.0925%" height="15" fill="rgb(209,103,24)" fg:x="7468" fg:w="302"/><text x="2.5372%" y="207.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (154 samples, 0.05%)</title><rect x="14.8909%" y="181" width="0.0472%" height="15" fill="rgb(229,88,8)" fg:x="48620" fg:w="154"/><text x="15.1409%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (154 samples, 0.05%)</title><rect x="14.8909%" y="165" width="0.0472%" height="15" fill="rgb(213,181,19)" fg:x="48620" fg:w="154"/><text x="15.1409%" y="175.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMatUpperTri as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (41,048 samples, 12.57%)</title><rect x="2.3797%" y="197" width="12.5718%" height="15" fill="rgb(254,191,54)" fg:x="7770" fg:w="41048"/><text x="2.6297%" y="207.50">esp`&lt;esp::var::spar..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (48 samples, 0.01%)</title><rect x="14.9515%" y="197" width="0.0147%" height="15" fill="rgb(241,83,37)" fg:x="48818" fg:w="48"/><text x="15.2015%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (48 samples, 0.01%)</title><rect x="14.9515%" y="181" width="0.0147%" height="15" fill="rgb(233,36,39)" fg:x="48818" fg:w="48"/><text x="15.2015%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (45 samples, 0.01%)</title><rect x="14.9525%" y="165" width="0.0138%" height="15" fill="rgb(226,3,54)" fg:x="48821" fg:w="45"/><text x="15.2025%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.01%)</title><rect x="14.9525%" y="149" width="0.0138%" height="15" fill="rgb(245,192,40)" fg:x="48821" fg:w="45"/><text x="15.2025%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (45 samples, 0.01%)</title><rect x="14.9525%" y="133" width="0.0138%" height="15" fill="rgb(238,167,29)" fg:x="48821" fg:w="45"/><text x="15.2025%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (408 samples, 0.12%)</title><rect x="15.4232%" y="149" width="0.1250%" height="15" fill="rgb(232,182,51)" fg:x="50358" fg:w="408"/><text x="15.6732%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (623 samples, 0.19%)</title><rect x="15.5564%" y="133" width="0.1908%" height="15" fill="rgb(231,60,39)" fg:x="50793" fg:w="623"/><text x="15.8064%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (833 samples, 0.26%)</title><rect x="15.5482%" y="149" width="0.2551%" height="15" fill="rgb(208,69,12)" fg:x="50766" fg:w="833"/><text x="15.7982%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (183 samples, 0.06%)</title><rect x="15.7472%" y="133" width="0.0560%" height="15" fill="rgb(235,93,37)" fg:x="51416" fg:w="183"/><text x="15.9972%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (46 samples, 0.01%)</title><rect x="15.7892%" y="117" width="0.0141%" height="15" fill="rgb(213,116,39)" fg:x="51553" fg:w="46"/><text x="16.0392%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (1,253 samples, 0.38%)</title><rect x="15.4201%" y="165" width="0.3838%" height="15" fill="rgb(222,207,29)" fg:x="50348" fg:w="1253"/><text x="15.6701%" y="175.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (2,512 samples, 0.77%)</title><rect x="15.0352%" y="181" width="0.7694%" height="15" fill="rgb(206,96,30)" fg:x="49091" fg:w="2512"/><text x="15.2852%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (107 samples, 0.03%)</title><rect x="15.8045%" y="181" width="0.0328%" height="15" fill="rgb(218,138,4)" fg:x="51603" fg:w="107"/><text x="16.0545%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (2,845 samples, 0.87%)</title><rect x="14.9662%" y="197" width="0.8713%" height="15" fill="rgb(250,191,14)" fg:x="48866" fg:w="2845"/><text x="15.2162%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (277 samples, 0.08%)</title><rect x="15.8468%" y="181" width="0.0848%" height="15" fill="rgb(239,60,40)" fg:x="51741" fg:w="277"/><text x="16.0968%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (290 samples, 0.09%)</title><rect x="15.8468%" y="197" width="0.0888%" height="15" fill="rgb(206,27,48)" fg:x="51741" fg:w="290"/><text x="16.0968%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (35 samples, 0.01%)</title><rect x="15.9356%" y="197" width="0.0107%" height="15" fill="rgb(225,35,8)" fg:x="52031" fg:w="35"/><text x="16.1856%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,034 samples, 0.32%)</title><rect x="16.0814%" y="181" width="0.3167%" height="15" fill="rgb(250,213,24)" fg:x="52507" fg:w="1034"/><text x="16.3314%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (192 samples, 0.06%)</title><rect x="16.3981%" y="181" width="0.0588%" height="15" fill="rgb(247,123,22)" fg:x="53541" fg:w="192"/><text x="16.6481%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (112 samples, 0.03%)</title><rect x="16.4569%" y="181" width="0.0343%" height="15" fill="rgb(231,138,38)" fg:x="53733" fg:w="112"/><text x="16.7069%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (1,782 samples, 0.55%)</title><rect x="15.9463%" y="197" width="0.5458%" height="15" fill="rgb(231,145,46)" fg:x="52066" fg:w="1782"/><text x="16.1963%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (69 samples, 0.02%)</title><rect x="16.4936%" y="181" width="0.0211%" height="15" fill="rgb(251,118,11)" fg:x="53853" fg:w="69"/><text x="16.7436%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (84 samples, 0.03%)</title><rect x="16.5172%" y="165" width="0.0257%" height="15" fill="rgb(217,147,25)" fg:x="53930" fg:w="84"/><text x="16.7672%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (208 samples, 0.06%)</title><rect x="16.4921%" y="197" width="0.0637%" height="15" fill="rgb(247,81,37)" fg:x="53848" fg:w="208"/><text x="16.7421%" y="207.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (134 samples, 0.04%)</title><rect x="16.5148%" y="181" width="0.0410%" height="15" fill="rgb(209,12,38)" fg:x="53922" fg:w="134"/><text x="16.7648%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (42 samples, 0.01%)</title><rect x="16.5429%" y="165" width="0.0129%" height="15" fill="rgb(227,1,9)" fg:x="54014" fg:w="42"/><text x="16.7929%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (76 samples, 0.02%)</title><rect x="16.5558%" y="197" width="0.0233%" height="15" fill="rgb(248,47,43)" fg:x="54056" fg:w="76"/><text x="16.8058%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (475 samples, 0.15%)</title><rect x="16.5892%" y="197" width="0.1455%" height="15" fill="rgb(221,10,30)" fg:x="54165" fg:w="475"/><text x="16.8392%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (131 samples, 0.04%)</title><rect x="16.7347%" y="197" width="0.0401%" height="15" fill="rgb(210,229,1)" fg:x="54640" fg:w="131"/><text x="16.9847%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (131 samples, 0.04%)</title><rect x="16.7347%" y="181" width="0.0401%" height="15" fill="rgb(222,148,37)" fg:x="54640" fg:w="131"/><text x="16.9847%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (131 samples, 0.04%)</title><rect x="16.7347%" y="165" width="0.0401%" height="15" fill="rgb(234,67,33)" fg:x="54640" fg:w="131"/><text x="16.9847%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (49,532 samples, 15.17%)</title><rect x="1.6364%" y="213" width="15.1702%" height="15" fill="rgb(247,98,35)" fg:x="5343" fg:w="49532"/><text x="1.8864%" y="223.50">esp`eigenvalues::algori..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (104 samples, 0.03%)</title><rect x="16.7748%" y="197" width="0.0319%" height="15" fill="rgb(247,138,52)" fg:x="54771" fg:w="104"/><text x="17.0248%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (48 samples, 0.01%)</title><rect x="28.2168%" y="165" width="0.0147%" height="15" fill="rgb(213,79,30)" fg:x="92130" fg:w="48"/><text x="28.4668%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (4,251 samples, 1.30%)</title><rect x="28.2315%" y="165" width="1.3020%" height="15" fill="rgb(246,177,23)" fg:x="92178" fg:w="4251"/><text x="28.4815%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (4,009 samples, 1.23%)</title><rect x="28.3056%" y="149" width="1.2278%" height="15" fill="rgb(230,62,27)" fg:x="92420" fg:w="4009"/><text x="28.5556%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (5,788 samples, 1.77%)</title><rect x="27.7978%" y="181" width="1.7727%" height="15" fill="rgb(216,154,8)" fg:x="90762" fg:w="5788"/><text x="28.0478%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (121 samples, 0.04%)</title><rect x="29.5334%" y="165" width="0.0371%" height="15" fill="rgb(244,35,45)" fg:x="96429" fg:w="121"/><text x="29.7834%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (74 samples, 0.02%)</title><rect x="29.5705%" y="181" width="0.0227%" height="15" fill="rgb(251,115,12)" fg:x="96550" fg:w="74"/><text x="29.8205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (74 samples, 0.02%)</title><rect x="29.5705%" y="165" width="0.0227%" height="15" fill="rgb(240,54,50)" fg:x="96550" fg:w="74"/><text x="29.8205%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (74 samples, 0.02%)</title><rect x="29.5705%" y="149" width="0.0227%" height="15" fill="rgb(233,84,52)" fg:x="96550" fg:w="74"/><text x="29.8205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (392 samples, 0.12%)</title><rect x="29.5980%" y="165" width="0.1201%" height="15" fill="rgb(207,117,47)" fg:x="96640" fg:w="392"/><text x="29.8480%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (79 samples, 0.02%)</title><rect x="29.7187%" y="165" width="0.0242%" height="15" fill="rgb(249,43,39)" fg:x="97034" fg:w="79"/><text x="29.9687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (493 samples, 0.15%)</title><rect x="29.5931%" y="181" width="0.1510%" height="15" fill="rgb(209,38,44)" fg:x="96624" fg:w="493"/><text x="29.8431%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (60 samples, 0.02%)</title><rect x="31.2485%" y="165" width="0.0184%" height="15" fill="rgb(236,212,23)" fg:x="102029" fg:w="60"/><text x="31.4985%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (55 samples, 0.02%)</title><rect x="31.2669%" y="165" width="0.0168%" height="15" fill="rgb(242,79,21)" fg:x="102089" fg:w="55"/><text x="31.5169%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (112 samples, 0.03%)</title><rect x="33.5836%" y="149" width="0.0343%" height="15" fill="rgb(211,96,35)" fg:x="109653" fg:w="112"/><text x="33.8336%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (62 samples, 0.02%)</title><rect x="33.5989%" y="133" width="0.0190%" height="15" fill="rgb(253,215,40)" fg:x="109703" fg:w="62"/><text x="33.8489%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5,065 samples, 1.55%)</title><rect x="33.6179%" y="149" width="1.5513%" height="15" fill="rgb(211,81,21)" fg:x="109765" fg:w="5065"/><text x="33.8679%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4,403 samples, 1.35%)</title><rect x="35.1691%" y="149" width="1.3485%" height="15" fill="rgb(208,190,38)" fg:x="114830" fg:w="4403"/><text x="35.4191%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (67 samples, 0.02%)</title><rect x="36.5176%" y="149" width="0.0205%" height="15" fill="rgb(235,213,38)" fg:x="119233" fg:w="67"/><text x="36.7676%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (72 samples, 0.02%)</title><rect x="36.5382%" y="149" width="0.0221%" height="15" fill="rgb(237,122,38)" fg:x="119300" fg:w="72"/><text x="36.7882%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 0.01%)</title><rect x="36.5620%" y="133" width="0.0123%" height="15" fill="rgb(244,218,35)" fg:x="119378" fg:w="40"/><text x="36.8120%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22,306 samples, 6.83%)</title><rect x="29.7441%" y="181" width="6.8317%" height="15" fill="rgb(240,68,47)" fg:x="97117" fg:w="22306"/><text x="29.9941%" y="191.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17,279 samples, 5.29%)</title><rect x="31.2838%" y="165" width="5.2921%" height="15" fill="rgb(210,16,53)" fg:x="102144" fg:w="17279"/><text x="31.5338%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (51 samples, 0.02%)</title><rect x="36.5602%" y="149" width="0.0156%" height="15" fill="rgb(235,124,12)" fg:x="119372" fg:w="51"/><text x="36.8102%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (95 samples, 0.03%)</title><rect x="36.5758%" y="181" width="0.0291%" height="15" fill="rgb(224,169,11)" fg:x="119423" fg:w="95"/><text x="36.8258%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30,299 samples, 9.28%)</title><rect x="27.3614%" y="197" width="9.2797%" height="15" fill="rgb(250,166,2)" fg:x="89337" fg:w="30299"/><text x="27.6114%" y="207.50">esp`&lt;hashbrow..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (118 samples, 0.04%)</title><rect x="36.6049%" y="181" width="0.0361%" height="15" fill="rgb(242,216,29)" fg:x="119518" fg:w="118"/><text x="36.8549%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (158 samples, 0.05%)</title><rect x="36.6414%" y="197" width="0.0484%" height="15" fill="rgb(230,116,27)" fg:x="119637" fg:w="158"/><text x="36.8914%" y="207.50"></text></g><g><title>esp`__rdl_realloc (85 samples, 0.03%)</title><rect x="36.7927%" y="165" width="0.0260%" height="15" fill="rgb(228,99,48)" fg:x="120131" fg:w="85"/><text x="37.0427%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (39 samples, 0.01%)</title><rect x="36.9060%" y="149" width="0.0119%" height="15" fill="rgb(253,11,6)" fg:x="120501" fg:w="39"/><text x="37.1560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (148 samples, 0.05%)</title><rect x="36.9709%" y="133" width="0.0453%" height="15" fill="rgb(247,143,39)" fg:x="120713" fg:w="148"/><text x="37.2209%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (646 samples, 0.20%)</title><rect x="37.5449%" y="85" width="0.1979%" height="15" fill="rgb(236,97,10)" fg:x="122587" fg:w="646"/><text x="37.7949%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,086 samples, 0.64%)</title><rect x="37.1259%" y="117" width="0.6389%" height="15" fill="rgb(233,208,19)" fg:x="121219" fg:w="2086"/><text x="37.3759%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,219 samples, 0.37%)</title><rect x="37.3914%" y="101" width="0.3733%" height="15" fill="rgb(216,164,2)" fg:x="122086" fg:w="1219"/><text x="37.6414%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (72 samples, 0.02%)</title><rect x="37.7427%" y="85" width="0.0221%" height="15" fill="rgb(220,129,5)" fg:x="123233" fg:w="72"/><text x="37.9927%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (151 samples, 0.05%)</title><rect x="37.8012%" y="101" width="0.0462%" height="15" fill="rgb(242,17,10)" fg:x="123424" fg:w="151"/><text x="38.0512%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (109 samples, 0.03%)</title><rect x="37.8141%" y="85" width="0.0334%" height="15" fill="rgb(242,107,0)" fg:x="123466" fg:w="109"/><text x="38.0641%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (46 samples, 0.01%)</title><rect x="37.8334%" y="69" width="0.0141%" height="15" fill="rgb(251,28,31)" fg:x="123529" fg:w="46"/><text x="38.0834%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (301 samples, 0.09%)</title><rect x="38.2710%" y="85" width="0.0922%" height="15" fill="rgb(233,223,10)" fg:x="124958" fg:w="301"/><text x="38.5210%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,856 samples, 0.87%)</title><rect x="37.7700%" y="117" width="0.8747%" height="15" fill="rgb(215,21,27)" fg:x="123322" fg:w="2856"/><text x="38.0200%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,590 samples, 0.79%)</title><rect x="37.8514%" y="101" width="0.7932%" height="15" fill="rgb(232,23,21)" fg:x="123588" fg:w="2590"/><text x="38.1014%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (895 samples, 0.27%)</title><rect x="38.3706%" y="85" width="0.2741%" height="15" fill="rgb(244,5,23)" fg:x="125283" fg:w="895"/><text x="38.6206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (158 samples, 0.05%)</title><rect x="38.5963%" y="69" width="0.0484%" height="15" fill="rgb(226,81,46)" fg:x="126020" fg:w="158"/><text x="38.8463%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (352 samples, 0.11%)</title><rect x="38.6447%" y="117" width="0.1078%" height="15" fill="rgb(247,70,30)" fg:x="126178" fg:w="352"/><text x="38.8947%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (298 samples, 0.09%)</title><rect x="38.6612%" y="101" width="0.0913%" height="15" fill="rgb(212,68,19)" fg:x="126232" fg:w="298"/><text x="38.9112%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (919 samples, 0.28%)</title><rect x="38.7565%" y="117" width="0.2815%" height="15" fill="rgb(240,187,13)" fg:x="126543" fg:w="919"/><text x="39.0065%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7,358 samples, 2.25%)</title><rect x="37.0309%" y="133" width="2.2535%" height="15" fill="rgb(223,113,26)" fg:x="120909" fg:w="7358"/><text x="37.2809%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (805 samples, 0.25%)</title><rect x="39.0379%" y="117" width="0.2465%" height="15" fill="rgb(206,192,2)" fg:x="127462" fg:w="805"/><text x="39.2879%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7,796 samples, 2.39%)</title><rect x="36.9179%" y="149" width="2.3877%" height="15" fill="rgb(241,108,4)" fg:x="120540" fg:w="7796"/><text x="37.1679%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_size (796 samples, 0.24%)</title><rect x="39.3121%" y="149" width="0.2438%" height="15" fill="rgb(247,173,49)" fg:x="128357" fg:w="796"/><text x="39.5621%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (731 samples, 0.22%)</title><rect x="39.3320%" y="133" width="0.2239%" height="15" fill="rgb(224,114,35)" fg:x="128422" fg:w="731"/><text x="39.5820%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8,939 samples, 2.74%)</title><rect x="36.8227%" y="165" width="2.7378%" height="15" fill="rgb(245,159,27)" fg:x="120229" fg:w="8939"/><text x="37.0727%" y="175.50">li..</text></g><g><title>esp`alloc::raw_vec::finish_grow (9,179 samples, 2.81%)</title><rect x="36.7596%" y="181" width="2.8113%" height="15" fill="rgb(245,172,44)" fg:x="120023" fg:w="9179"/><text x="37.0096%" y="191.50">es..</text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 0.01%)</title><rect x="39.5604%" y="165" width="0.0104%" height="15" fill="rgb(236,23,11)" fg:x="129168" fg:w="34"/><text x="39.8104%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9,417 samples, 2.88%)</title><rect x="36.6934%" y="197" width="2.8842%" height="15" fill="rgb(205,117,38)" fg:x="119807" fg:w="9417"/><text x="36.9434%" y="207.50">es..</text></g><g><title>esp`alloc::slice::merge_sort (42 samples, 0.01%)</title><rect x="39.5816%" y="197" width="0.0129%" height="15" fill="rgb(237,72,25)" fg:x="129237" fg:w="42"/><text x="39.8316%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (804 samples, 0.25%)</title><rect x="39.5944%" y="197" width="0.2462%" height="15" fill="rgb(244,70,9)" fg:x="129279" fg:w="804"/><text x="39.8444%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (222 samples, 0.07%)</title><rect x="39.8407%" y="197" width="0.0680%" height="15" fill="rgb(217,125,39)" fg:x="130083" fg:w="222"/><text x="40.0907%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (148 samples, 0.05%)</title><rect x="44.3064%" y="133" width="0.0453%" height="15" fill="rgb(235,36,10)" fg:x="144664" fg:w="148"/><text x="44.5564%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (141 samples, 0.04%)</title><rect x="44.3086%" y="117" width="0.0432%" height="15" fill="rgb(251,123,47)" fg:x="144671" fg:w="141"/><text x="44.5586%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 0.01%)</title><rect x="44.3389%" y="101" width="0.0129%" height="15" fill="rgb(221,13,13)" fg:x="144770" fg:w="42"/><text x="44.5889%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (164 samples, 0.05%)</title><rect x="44.3018%" y="149" width="0.0502%" height="15" fill="rgb(238,131,9)" fg:x="144649" fg:w="164"/><text x="44.5518%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (50 samples, 0.02%)</title><rect x="44.4066%" y="117" width="0.0153%" height="15" fill="rgb(211,50,8)" fg:x="144991" fg:w="50"/><text x="44.6566%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (34 samples, 0.01%)</title><rect x="44.4831%" y="85" width="0.0104%" height="15" fill="rgb(245,182,24)" fg:x="145241" fg:w="34"/><text x="44.7331%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (178 samples, 0.05%)</title><rect x="44.4458%" y="101" width="0.0545%" height="15" fill="rgb(242,14,37)" fg:x="145119" fg:w="178"/><text x="44.6958%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (603 samples, 0.18%)</title><rect x="44.6620%" y="69" width="0.1847%" height="15" fill="rgb(246,228,12)" fg:x="145825" fg:w="603"/><text x="44.9120%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (122 samples, 0.04%)</title><rect x="44.8467%" y="69" width="0.0374%" height="15" fill="rgb(213,55,15)" fg:x="146428" fg:w="122"/><text x="45.0967%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,259 samples, 0.39%)</title><rect x="44.5003%" y="101" width="0.3856%" height="15" fill="rgb(209,9,3)" fg:x="145297" fg:w="1259"/><text x="44.7503%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,066 samples, 0.33%)</title><rect x="44.5594%" y="85" width="0.3265%" height="15" fill="rgb(230,59,30)" fg:x="145490" fg:w="1066"/><text x="44.8094%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (44 samples, 0.01%)</title><rect x="44.8908%" y="101" width="0.0135%" height="15" fill="rgb(209,121,21)" fg:x="146572" fg:w="44"/><text x="45.1408%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (121 samples, 0.04%)</title><rect x="44.9906%" y="53" width="0.0371%" height="15" fill="rgb(220,109,13)" fg:x="146898" fg:w="121"/><text x="45.2406%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (476 samples, 0.15%)</title><rect x="44.9141%" y="85" width="0.1458%" height="15" fill="rgb(232,18,1)" fg:x="146648" fg:w="476"/><text x="45.1641%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (335 samples, 0.10%)</title><rect x="44.9572%" y="69" width="0.1026%" height="15" fill="rgb(215,41,42)" fg:x="146789" fg:w="335"/><text x="45.2072%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (105 samples, 0.03%)</title><rect x="45.0277%" y="53" width="0.0322%" height="15" fill="rgb(224,123,36)" fg:x="147019" fg:w="105"/><text x="45.2777%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (100 samples, 0.03%)</title><rect x="45.1208%" y="69" width="0.0306%" height="15" fill="rgb(240,125,3)" fg:x="147323" fg:w="100"/><text x="45.3708%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,053 samples, 0.32%)</title><rect x="44.9043%" y="101" width="0.3225%" height="15" fill="rgb(205,98,50)" fg:x="146616" fg:w="1053"/><text x="45.1543%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (545 samples, 0.17%)</title><rect x="45.0598%" y="85" width="0.1669%" height="15" fill="rgb(205,185,37)" fg:x="147124" fg:w="545"/><text x="45.3098%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (241 samples, 0.07%)</title><rect x="45.1530%" y="69" width="0.0738%" height="15" fill="rgb(238,207,15)" fg:x="147428" fg:w="241"/><text x="45.4030%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (80 samples, 0.02%)</title><rect x="45.2268%" y="101" width="0.0245%" height="15" fill="rgb(213,199,42)" fg:x="147669" fg:w="80"/><text x="45.4768%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (63 samples, 0.02%)</title><rect x="45.2320%" y="85" width="0.0193%" height="15" fill="rgb(235,201,11)" fg:x="147686" fg:w="63"/><text x="45.4820%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (298 samples, 0.09%)</title><rect x="45.2528%" y="101" width="0.0913%" height="15" fill="rgb(207,46,11)" fg:x="147754" fg:w="298"/><text x="45.5028%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (78 samples, 0.02%)</title><rect x="45.3202%" y="85" width="0.0239%" height="15" fill="rgb(241,35,35)" fg:x="147974" fg:w="78"/><text x="45.5702%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5,154 samples, 1.58%)</title><rect x="44.4268%" y="117" width="1.5785%" height="15" fill="rgb(243,32,47)" fg:x="145057" fg:w="5154"/><text x="44.6768%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,159 samples, 0.66%)</title><rect x="45.3441%" y="101" width="0.6612%" height="15" fill="rgb(247,202,23)" fg:x="148052" fg:w="2159"/><text x="45.5941%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5,272 samples, 1.61%)</title><rect x="44.3937%" y="133" width="1.6147%" height="15" fill="rgb(219,102,11)" fg:x="144949" fg:w="5272"/><text x="44.6437%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (223 samples, 0.07%)</title><rect x="46.0084%" y="133" width="0.0683%" height="15" fill="rgb(243,110,44)" fg:x="150221" fg:w="223"/><text x="46.2584%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (577 samples, 0.18%)</title><rect x="46.0779%" y="133" width="0.1767%" height="15" fill="rgb(222,74,54)" fg:x="150448" fg:w="577"/><text x="46.3279%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (564 samples, 0.17%)</title><rect x="46.0819%" y="117" width="0.1727%" height="15" fill="rgb(216,99,12)" fg:x="150461" fg:w="564"/><text x="46.3319%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6,205 samples, 1.90%)</title><rect x="44.3554%" y="149" width="1.9004%" height="15" fill="rgb(226,22,26)" fg:x="144824" fg:w="6205"/><text x="44.6054%" y="159.50">l..</text></g><g><title>esp`alloc::raw_vec::finish_grow (6,476 samples, 1.98%)</title><rect x="44.2868%" y="165" width="1.9834%" height="15" fill="rgb(217,163,10)" fg:x="144600" fg:w="6476"/><text x="44.5368%" y="175.50">e..</text></g><g><title>libsystem_malloc.dylib`szone_size (44 samples, 0.01%)</title><rect x="46.2568%" y="149" width="0.0135%" height="15" fill="rgb(213,25,53)" fg:x="151032" fg:w="44"/><text x="46.5068%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6,598 samples, 2.02%)</title><rect x="44.2562%" y="181" width="2.0208%" height="15" fill="rgb(252,105,26)" fg:x="144500" fg:w="6598"/><text x="44.5062%" y="191.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (126 samples, 0.04%)</title><rect x="46.2794%" y="181" width="0.0386%" height="15" fill="rgb(220,39,43)" fg:x="151106" fg:w="126"/><text x="46.5294%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (48,199 samples, 14.76%)</title><rect x="39.9087%" y="197" width="14.7620%" height="15" fill="rgb(229,68,48)" fg:x="130305" fg:w="48199"/><text x="40.1587%" y="207.50">esp`esp::var::off_diag:..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (27,272 samples, 8.35%)</title><rect x="46.3180%" y="181" width="8.3526%" height="15" fill="rgb(252,8,32)" fg:x="151232" fg:w="27272"/><text x="46.5680%" y="191.50">esp`esp::ham..</text></g><g><title>esp`esp::ham::Ham::ham_doub (14,815 samples, 4.54%)</title><rect x="50.1332%" y="165" width="4.5374%" height="15" fill="rgb(223,20,43)" fg:x="163689" fg:w="14815"/><text x="50.3832%" y="175.50">esp`e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (70 samples, 0.02%)</title><rect x="56.8789%" y="181" width="0.0214%" height="15" fill="rgb(229,81,49)" fg:x="185714" fg:w="70"/><text x="57.1289%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (4,415 samples, 1.35%)</title><rect x="60.4555%" y="165" width="1.3522%" height="15" fill="rgb(236,28,36)" fg:x="197392" fg:w="4415"/><text x="60.7055%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,864 samples, 0.88%)</title><rect x="60.9305%" y="149" width="0.8772%" height="15" fill="rgb(249,185,26)" fg:x="198943" fg:w="2864"/><text x="61.1805%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (19,081 samples, 5.84%)</title><rect x="56.9089%" y="181" width="5.8440%" height="15" fill="rgb(249,174,33)" fg:x="185812" fg:w="19081"/><text x="57.1589%" y="191.50">esp`esp..</text></g><g><title>esp`esp::ham::Ham::ham_sing (3,086 samples, 0.95%)</title><rect x="61.8077%" y="165" width="0.9452%" height="15" fill="rgb(233,201,37)" fg:x="201807" fg:w="3086"/><text x="62.0577%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,992 samples, 0.61%)</title><rect x="62.1427%" y="149" width="0.6101%" height="15" fill="rgb(221,78,26)" fg:x="202901" fg:w="1992"/><text x="62.3927%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (49 samples, 0.02%)</title><rect x="64.6407%" y="69" width="0.0150%" height="15" fill="rgb(250,127,30)" fg:x="211057" fg:w="49"/><text x="64.8907%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (64 samples, 0.02%)</title><rect x="64.6563%" y="69" width="0.0196%" height="15" fill="rgb(230,49,44)" fg:x="211108" fg:w="64"/><text x="64.9063%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (205 samples, 0.06%)</title><rect x="64.6134%" y="85" width="0.0628%" height="15" fill="rgb(229,67,23)" fg:x="210968" fg:w="205"/><text x="64.8634%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (122 samples, 0.04%)</title><rect x="64.7093%" y="53" width="0.0374%" height="15" fill="rgb(249,83,47)" fg:x="211281" fg:w="122"/><text x="64.9593%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (77 samples, 0.02%)</title><rect x="64.7467%" y="53" width="0.0236%" height="15" fill="rgb(215,43,3)" fg:x="211403" fg:w="77"/><text x="64.9967%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (324 samples, 0.10%)</title><rect x="64.6762%" y="85" width="0.0992%" height="15" fill="rgb(238,154,13)" fg:x="211173" fg:w="324"/><text x="64.9262%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (291 samples, 0.09%)</title><rect x="64.6863%" y="69" width="0.0891%" height="15" fill="rgb(219,56,2)" fg:x="211206" fg:w="291"/><text x="64.9363%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (77 samples, 0.02%)</title><rect x="64.7785%" y="85" width="0.0236%" height="15" fill="rgb(233,0,4)" fg:x="211507" fg:w="77"/><text x="65.0285%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (51 samples, 0.02%)</title><rect x="64.7865%" y="69" width="0.0156%" height="15" fill="rgb(235,30,7)" fg:x="211533" fg:w="51"/><text x="65.0365%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (60 samples, 0.02%)</title><rect x="64.8486%" y="37" width="0.0184%" height="15" fill="rgb(250,79,13)" fg:x="211736" fg:w="60"/><text x="65.0986%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (253 samples, 0.08%)</title><rect x="64.8067%" y="69" width="0.0775%" height="15" fill="rgb(211,146,34)" fg:x="211599" fg:w="253"/><text x="65.0567%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (193 samples, 0.06%)</title><rect x="64.8251%" y="53" width="0.0591%" height="15" fill="rgb(228,22,38)" fg:x="211659" fg:w="193"/><text x="65.0751%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (56 samples, 0.02%)</title><rect x="64.8670%" y="37" width="0.0172%" height="15" fill="rgb(235,168,5)" fg:x="211796" fg:w="56"/><text x="65.1170%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (349 samples, 0.11%)</title><rect x="64.8021%" y="85" width="0.1069%" height="15" fill="rgb(221,155,16)" fg:x="211584" fg:w="349"/><text x="65.0521%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (81 samples, 0.02%)</title><rect x="64.8842%" y="69" width="0.0248%" height="15" fill="rgb(215,215,53)" fg:x="211852" fg:w="81"/><text x="65.1342%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (53 samples, 0.02%)</title><rect x="64.8927%" y="53" width="0.0162%" height="15" fill="rgb(223,4,10)" fg:x="211880" fg:w="53"/><text x="65.1427%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (52 samples, 0.02%)</title><rect x="64.9120%" y="85" width="0.0159%" height="15" fill="rgb(234,103,6)" fg:x="211943" fg:w="52"/><text x="65.1620%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,597 samples, 0.80%)</title><rect x="64.6079%" y="101" width="0.7954%" height="15" fill="rgb(227,97,0)" fg:x="210950" fg:w="2597"/><text x="64.8579%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,552 samples, 0.48%)</title><rect x="64.9280%" y="85" width="0.4753%" height="15" fill="rgb(234,150,53)" fg:x="211995" fg:w="1552"/><text x="65.1780%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,635 samples, 0.81%)</title><rect x="64.5981%" y="117" width="0.8070%" height="15" fill="rgb(228,201,54)" fg:x="210918" fg:w="2635"/><text x="64.8481%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (116 samples, 0.04%)</title><rect x="65.4051%" y="117" width="0.0355%" height="15" fill="rgb(222,22,37)" fg:x="213553" fg:w="116"/><text x="65.6551%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,901 samples, 0.89%)</title><rect x="64.5880%" y="133" width="0.8885%" height="15" fill="rgb(237,53,32)" fg:x="210885" fg:w="2901"/><text x="64.8380%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (116 samples, 0.04%)</title><rect x="65.4410%" y="117" width="0.0355%" height="15" fill="rgb(233,25,53)" fg:x="213670" fg:w="116"/><text x="65.6910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (112 samples, 0.03%)</title><rect x="65.4422%" y="101" width="0.0343%" height="15" fill="rgb(210,40,34)" fg:x="213674" fg:w="112"/><text x="65.6922%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,927 samples, 0.90%)</title><rect x="64.5849%" y="149" width="0.8965%" height="15" fill="rgb(241,220,44)" fg:x="210875" fg:w="2927"/><text x="64.8349%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,941 samples, 0.90%)</title><rect x="64.5831%" y="165" width="0.9007%" height="15" fill="rgb(235,28,35)" fg:x="210869" fg:w="2941"/><text x="64.8331%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el (8,911 samples, 2.73%)</title><rect x="62.7556%" y="181" width="2.7292%" height="15" fill="rgb(210,56,17)" fg:x="204902" fg:w="8911"/><text x="63.0056%" y="191.50">es..</text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (37,192 samples, 11.39%)</title><rect x="54.6706%" y="197" width="11.3908%" height="15" fill="rgb(224,130,29)" fg:x="178504" fg:w="37192"/><text x="54.9206%" y="207.50">esp`esp::var::off..</text></g><g><title>esp`hashbrown::map::make_hash (1,883 samples, 0.58%)</title><rect x="65.4848%" y="181" width="0.5767%" height="15" fill="rgb(235,212,8)" fg:x="213813" fg:w="1883"/><text x="65.7348%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,144 samples, 0.35%)</title><rect x="65.7111%" y="165" width="0.3504%" height="15" fill="rgb(223,33,50)" fg:x="214552" fg:w="1144"/><text x="65.9611%" y="175.50"></text></g><g><title>esp`DYLD-STUB$$memcpy (33 samples, 0.01%)</title><rect x="67.0532%" y="181" width="0.0101%" height="15" fill="rgb(219,149,13)" fg:x="218934" fg:w="33"/><text x="67.3032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (138 samples, 0.04%)</title><rect x="71.7214%" y="117" width="0.0423%" height="15" fill="rgb(250,156,29)" fg:x="234176" fg:w="138"/><text x="71.9714%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (126 samples, 0.04%)</title><rect x="71.7250%" y="101" width="0.0386%" height="15" fill="rgb(216,193,19)" fg:x="234188" fg:w="126"/><text x="71.9750%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (175 samples, 0.05%)</title><rect x="71.7103%" y="133" width="0.0536%" height="15" fill="rgb(216,135,14)" fg:x="234140" fg:w="175"/><text x="71.9603%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (43 samples, 0.01%)</title><rect x="71.7704%" y="101" width="0.0132%" height="15" fill="rgb(241,47,5)" fg:x="234336" fg:w="43"/><text x="72.0204%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (49 samples, 0.02%)</title><rect x="71.7691%" y="117" width="0.0150%" height="15" fill="rgb(233,42,35)" fg:x="234332" fg:w="49"/><text x="72.0191%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (62 samples, 0.02%)</title><rect x="71.7664%" y="133" width="0.0190%" height="15" fill="rgb(231,13,6)" fg:x="234323" fg:w="62"/><text x="72.0164%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (268 samples, 0.08%)</title><rect x="71.7054%" y="149" width="0.0821%" height="15" fill="rgb(207,181,40)" fg:x="234124" fg:w="268"/><text x="71.9554%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (308 samples, 0.09%)</title><rect x="71.6959%" y="165" width="0.0943%" height="15" fill="rgb(254,173,49)" fg:x="234093" fg:w="308"/><text x="71.9459%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (52 samples, 0.02%)</title><rect x="71.8059%" y="133" width="0.0159%" height="15" fill="rgb(221,1,38)" fg:x="234452" fg:w="52"/><text x="72.0559%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (302 samples, 0.09%)</title><rect x="71.7915%" y="165" width="0.0925%" height="15" fill="rgb(206,124,46)" fg:x="234405" fg:w="302"/><text x="72.0415%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (268 samples, 0.08%)</title><rect x="71.8019%" y="149" width="0.0821%" height="15" fill="rgb(249,21,11)" fg:x="234439" fg:w="268"/><text x="72.0519%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (202 samples, 0.06%)</title><rect x="71.8221%" y="133" width="0.0619%" height="15" fill="rgb(222,201,40)" fg:x="234505" fg:w="202"/><text x="72.0721%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (111 samples, 0.03%)</title><rect x="71.8500%" y="117" width="0.0340%" height="15" fill="rgb(235,61,29)" fg:x="234596" fg:w="111"/><text x="72.1000%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (88 samples, 0.03%)</title><rect x="71.9033%" y="149" width="0.0270%" height="15" fill="rgb(219,207,3)" fg:x="234770" fg:w="88"/><text x="72.1533%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (77 samples, 0.02%)</title><rect x="71.9067%" y="133" width="0.0236%" height="15" fill="rgb(222,56,46)" fg:x="234781" fg:w="77"/><text x="72.1567%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (150 samples, 0.05%)</title><rect x="71.8846%" y="165" width="0.0459%" height="15" fill="rgb(239,76,54)" fg:x="234709" fg:w="150"/><text x="72.1346%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (87 samples, 0.03%)</title><rect x="71.9863%" y="133" width="0.0266%" height="15" fill="rgb(231,124,27)" fg:x="235041" fg:w="87"/><text x="72.2363%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (258 samples, 0.08%)</title><rect x="71.9385%" y="165" width="0.0790%" height="15" fill="rgb(249,195,6)" fg:x="234885" fg:w="258"/><text x="72.1885%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (186 samples, 0.06%)</title><rect x="71.9606%" y="149" width="0.0570%" height="15" fill="rgb(237,174,47)" fg:x="234957" fg:w="186"/><text x="72.2106%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (16,642 samples, 5.10%)</title><rect x="67.0737%" y="181" width="5.0970%" height="15" fill="rgb(206,201,31)" fg:x="219001" fg:w="16642"/><text x="67.3237%" y="191.50">esp`al..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (490 samples, 0.15%)</title><rect x="72.0206%" y="165" width="0.1501%" height="15" fill="rgb(231,57,52)" fg:x="235153" fg:w="490"/><text x="72.2706%" y="175.50"></text></g><g><title>esp`esp::var::sparse::SparseMatUpperTri::sort_remove_duplicates (20,057 samples, 6.14%)</title><rect x="66.0615%" y="197" width="6.1429%" height="15" fill="rgb(248,177,22)" fg:x="215696" fg:w="20057"/><text x="66.3115%" y="207.50">esp`esp:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (81 samples, 0.02%)</title><rect x="72.1795%" y="181" width="0.0248%" height="15" fill="rgb(215,211,37)" fg:x="235672" fg:w="81"/><text x="72.4295%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::expand_sparse_ham_rows (78 samples, 0.02%)</title><rect x="72.2044%" y="197" width="0.0239%" height="15" fill="rgb(241,128,51)" fg:x="235753" fg:w="78"/><text x="72.4544%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (35 samples, 0.01%)</title><rect x="72.2175%" y="181" width="0.0107%" height="15" fill="rgb(227,165,31)" fg:x="235796" fg:w="35"/><text x="72.4675%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (12,558 samples, 3.85%)</title><rect x="72.2282%" y="197" width="3.8462%" height="15" fill="rgb(228,167,24)" fg:x="235831" fg:w="12558"/><text x="72.4782%" y="207.50">esp`..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,334 samples, 0.71%)</title><rect x="75.3596%" y="181" width="0.7148%" height="15" fill="rgb(228,143,12)" fg:x="246055" fg:w="2334"/><text x="75.6096%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,584 samples, 0.49%)</title><rect x="77.2465%" y="181" width="0.4851%" height="15" fill="rgb(249,149,8)" fg:x="252216" fg:w="1584"/><text x="77.4965%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (196 samples, 0.06%)</title><rect x="78.3163%" y="165" width="0.0600%" height="15" fill="rgb(243,35,44)" fg:x="255709" fg:w="196"/><text x="78.5663%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,254 samples, 0.69%)</title><rect x="80.5754%" y="149" width="0.6903%" height="15" fill="rgb(246,89,9)" fg:x="263085" fg:w="2254"/><text x="80.8254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (36 samples, 0.01%)</title><rect x="81.2810%" y="101" width="0.0110%" height="15" fill="rgb(233,213,13)" fg:x="265389" fg:w="36"/><text x="81.5310%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (147 samples, 0.05%)</title><rect x="81.2920%" y="101" width="0.0450%" height="15" fill="rgb(233,141,41)" fg:x="265425" fg:w="147"/><text x="81.5420%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (105 samples, 0.03%)</title><rect x="81.3049%" y="85" width="0.0322%" height="15" fill="rgb(239,167,4)" fg:x="265467" fg:w="105"/><text x="81.5549%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (305 samples, 0.09%)</title><rect x="81.2746%" y="133" width="0.0934%" height="15" fill="rgb(209,217,16)" fg:x="265368" fg:w="305"/><text x="81.5246%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (293 samples, 0.09%)</title><rect x="81.2783%" y="117" width="0.0897%" height="15" fill="rgb(219,88,35)" fg:x="265380" fg:w="293"/><text x="81.5283%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (101 samples, 0.03%)</title><rect x="81.3371%" y="101" width="0.0309%" height="15" fill="rgb(220,193,23)" fg:x="265572" fg:w="101"/><text x="81.5871%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (60 samples, 0.02%)</title><rect x="81.3496%" y="85" width="0.0184%" height="15" fill="rgb(230,90,52)" fg:x="265613" fg:w="60"/><text x="81.5996%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (390 samples, 0.12%)</title><rect x="81.3701%" y="133" width="0.1194%" height="15" fill="rgb(252,106,19)" fg:x="265680" fg:w="390"/><text x="81.6201%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (734 samples, 0.22%)</title><rect x="81.2657%" y="149" width="0.2248%" height="15" fill="rgb(206,74,20)" fg:x="265339" fg:w="734"/><text x="81.5157%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (201 samples, 0.06%)</title><rect x="81.4905%" y="149" width="0.0616%" height="15" fill="rgb(230,138,44)" fg:x="266073" fg:w="201"/><text x="81.7405%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (33 samples, 0.01%)</title><rect x="81.5658%" y="133" width="0.0101%" height="15" fill="rgb(235,182,43)" fg:x="266319" fg:w="33"/><text x="81.8158%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (82 samples, 0.03%)</title><rect x="81.5524%" y="149" width="0.0251%" height="15" fill="rgb(242,16,51)" fg:x="266275" fg:w="82"/><text x="81.8024%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (57 samples, 0.02%)</title><rect x="81.5824%" y="149" width="0.0175%" height="15" fill="rgb(248,9,4)" fg:x="266373" fg:w="57"/><text x="81.8324%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 0.01%)</title><rect x="81.5998%" y="149" width="0.0123%" height="15" fill="rgb(210,31,22)" fg:x="266430" fg:w="40"/><text x="81.8498%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10,581 samples, 3.24%)</title><rect x="78.3763%" y="165" width="3.2407%" height="15" fill="rgb(239,54,39)" fg:x="255905" fg:w="10581"/><text x="78.6263%" y="175.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (12,698 samples, 3.89%)</title><rect x="77.7316%" y="181" width="3.8890%" height="15" fill="rgb(230,99,41)" fg:x="253800" fg:w="12698"/><text x="77.9816%" y="191.50">esp`..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18,115 samples, 5.55%)</title><rect x="76.0744%" y="197" width="5.5481%" height="15" fill="rgb(253,106,12)" fg:x="248389" fg:w="18115"/><text x="76.3244%" y="207.50">esp`has..</text></g><g><title>esp`hashbrown::map::make_hash (3,133 samples, 0.96%)</title><rect x="81.6225%" y="197" width="0.9595%" height="15" fill="rgb(213,46,41)" fg:x="266504" fg:w="3133"/><text x="81.8725%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,803 samples, 0.55%)</title><rect x="82.0298%" y="181" width="0.5522%" height="15" fill="rgb(215,133,35)" fg:x="267834" fg:w="1803"/><text x="82.2798%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (101 samples, 0.03%)</title><rect x="82.5821%" y="197" width="0.0309%" height="15" fill="rgb(213,28,5)" fg:x="269637" fg:w="101"/><text x="82.8321%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (29,005 samples, 8.88%)</title><rect x="82.6130%" y="197" width="8.8834%" height="15" fill="rgb(215,77,49)" fg:x="269738" fg:w="29005"/><text x="82.8630%" y="207.50">esp`std::coll..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (5,123 samples, 1.57%)</title><rect x="89.9274%" y="181" width="1.5690%" height="15" fill="rgb(248,100,22)" fg:x="293620" fg:w="5123"/><text x="90.1774%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (245 samples, 0.08%)</title><rect x="91.4973%" y="197" width="0.0750%" height="15" fill="rgb(208,67,9)" fg:x="298746" fg:w="245"/><text x="91.7473%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (87 samples, 0.03%)</title><rect x="92.1331%" y="165" width="0.0266%" height="15" fill="rgb(219,133,21)" fg:x="300822" fg:w="87"/><text x="92.3831%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14,398 samples, 4.41%)</title><rect x="91.9478%" y="181" width="4.4097%" height="15" fill="rgb(246,46,29)" fg:x="300217" fg:w="14398"/><text x="92.1978%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13,706 samples, 4.20%)</title><rect x="92.1598%" y="165" width="4.1978%" height="15" fill="rgb(246,185,52)" fg:x="300909" fg:w="13706"/><text x="92.4098%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5,061 samples, 1.55%)</title><rect x="94.8075%" y="149" width="1.5500%" height="15" fill="rgb(252,136,11)" fg:x="309554" fg:w="5061"/><text x="95.0575%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,051 samples, 0.32%)</title><rect x="96.0356%" y="133" width="0.3219%" height="15" fill="rgb(219,138,53)" fg:x="313564" fg:w="1051"/><text x="96.2856%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15,683 samples, 4.80%)</title><rect x="91.5723%" y="197" width="4.8033%" height="15" fill="rgb(211,51,23)" fg:x="298991" fg:w="15683"/><text x="91.8223%" y="207.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (59 samples, 0.02%)</title><rect x="96.3575%" y="181" width="0.0181%" height="15" fill="rgb(247,221,28)" fg:x="314615" fg:w="59"/><text x="96.6075%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (128 samples, 0.04%)</title><rect x="96.3756%" y="197" width="0.0392%" height="15" fill="rgb(251,222,45)" fg:x="314674" fg:w="128"/><text x="96.6256%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (180 samples, 0.06%)</title><rect x="96.4148%" y="197" width="0.0551%" height="15" fill="rgb(217,162,53)" fg:x="314802" fg:w="180"/><text x="96.6648%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (125 samples, 0.04%)</title><rect x="96.4699%" y="197" width="0.0383%" height="15" fill="rgb(229,93,14)" fg:x="314982" fg:w="125"/><text x="96.7199%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (72 samples, 0.02%)</title><rect x="96.5082%" y="197" width="0.0221%" height="15" fill="rgb(209,67,49)" fg:x="315107" fg:w="72"/><text x="96.7582%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (61 samples, 0.02%)</title><rect x="96.5116%" y="181" width="0.0187%" height="15" fill="rgb(213,87,29)" fg:x="315118" fg:w="61"/><text x="96.7616%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (61 samples, 0.02%)</title><rect x="96.5116%" y="165" width="0.0187%" height="15" fill="rgb(205,151,52)" fg:x="315118" fg:w="61"/><text x="96.7616%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (85 samples, 0.03%)</title><rect x="96.5321%" y="197" width="0.0260%" height="15" fill="rgb(253,215,39)" fg:x="315185" fg:w="85"/><text x="96.7821%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (333 samples, 0.10%)</title><rect x="96.5581%" y="197" width="0.1020%" height="15" fill="rgb(221,220,41)" fg:x="315270" fg:w="333"/><text x="96.8081%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (133 samples, 0.04%)</title><rect x="96.6690%" y="197" width="0.0407%" height="15" fill="rgb(218,133,21)" fg:x="315632" fg:w="133"/><text x="96.9190%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (260,891 samples, 79.90%)</title><rect x="16.8066%" y="213" width="79.9034%" height="15" fill="rgb(221,193,43)" fg:x="54875" fg:w="260891"/><text x="17.0566%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el (113 samples, 0.03%)</title><rect x="96.7100%" y="213" width="0.0346%" height="15" fill="rgb(240,128,52)" fg:x="315766" fg:w="113"/><text x="96.9600%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (349 samples, 0.11%)</title><rect x="96.7446%" y="213" width="0.1069%" height="15" fill="rgb(253,114,12)" fg:x="315879" fg:w="349"/><text x="96.9946%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (109 samples, 0.03%)</title><rect x="96.8515%" y="213" width="0.0334%" height="15" fill="rgb(215,223,47)" fg:x="316228" fg:w="109"/><text x="97.1015%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (83 samples, 0.03%)</title><rect x="96.8849%" y="213" width="0.0254%" height="15" fill="rgb(248,225,23)" fg:x="316337" fg:w="83"/><text x="97.1349%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (271 samples, 0.08%)</title><rect x="96.9116%" y="213" width="0.0830%" height="15" fill="rgb(250,108,0)" fg:x="316424" fg:w="271"/><text x="97.1616%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (115 samples, 0.04%)</title><rect x="96.9982%" y="213" width="0.0352%" height="15" fill="rgb(228,208,7)" fg:x="316707" fg:w="115"/><text x="97.2482%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (312,013 samples, 95.56%)</title><rect x="1.5047%" y="229" width="95.5606%" height="15" fill="rgb(244,45,10)" fg:x="4913" fg:w="312013"/><text x="1.7547%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>libsystem_malloc.dylib`malloc (94 samples, 0.03%)</title><rect x="97.0365%" y="213" width="0.0288%" height="15" fill="rgb(207,125,25)" fg:x="316832" fg:w="94"/><text x="97.2865%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (98 samples, 0.03%)</title><rect x="97.3348%" y="133" width="0.0300%" height="15" fill="rgb(210,195,18)" fg:x="317806" fg:w="98"/><text x="97.5848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (98 samples, 0.03%)</title><rect x="97.3348%" y="117" width="0.0300%" height="15" fill="rgb(249,80,12)" fg:x="317806" fg:w="98"/><text x="97.5848%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (98 samples, 0.03%)</title><rect x="97.3348%" y="101" width="0.0300%" height="15" fill="rgb(221,65,9)" fg:x="317806" fg:w="98"/><text x="97.5848%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (113 samples, 0.03%)</title><rect x="97.3342%" y="213" width="0.0346%" height="15" fill="rgb(235,49,36)" fg:x="317804" fg:w="113"/><text x="97.5842%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (113 samples, 0.03%)</title><rect x="97.3342%" y="197" width="0.0346%" height="15" fill="rgb(225,32,20)" fg:x="317804" fg:w="113"/><text x="97.5842%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (113 samples, 0.03%)</title><rect x="97.3342%" y="181" width="0.0346%" height="15" fill="rgb(215,141,46)" fg:x="317804" fg:w="113"/><text x="97.5842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (113 samples, 0.03%)</title><rect x="97.3342%" y="165" width="0.0346%" height="15" fill="rgb(250,160,47)" fg:x="317804" fg:w="113"/><text x="97.5842%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (113 samples, 0.03%)</title><rect x="97.3342%" y="149" width="0.0346%" height="15" fill="rgb(216,222,40)" fg:x="317804" fg:w="113"/><text x="97.5842%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (33 samples, 0.01%)</title><rect x="97.3688%" y="213" width="0.0101%" height="15" fill="rgb(234,217,39)" fg:x="317917" fg:w="33"/><text x="97.6188%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (56 samples, 0.02%)</title><rect x="97.3789%" y="213" width="0.0172%" height="15" fill="rgb(207,178,40)" fg:x="317950" fg:w="56"/><text x="97.6289%" y="223.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (224 samples, 0.07%)</title><rect x="97.3961%" y="213" width="0.0686%" height="15" fill="rgb(221,136,13)" fg:x="318006" fg:w="224"/><text x="97.6461%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,645 samples, 0.50%)</title><rect x="97.4647%" y="213" width="0.5038%" height="15" fill="rgb(249,199,10)" fg:x="318230" fg:w="1645"/><text x="97.7147%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,221 samples, 0.37%)</title><rect x="97.5945%" y="197" width="0.3740%" height="15" fill="rgb(249,222,13)" fg:x="318654" fg:w="1221"/><text x="97.8445%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1,265 samples, 0.39%)</title><rect x="97.9685%" y="213" width="0.3874%" height="15" fill="rgb(244,185,38)" fg:x="319875" fg:w="1265"/><text x="98.2185%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (864 samples, 0.26%)</title><rect x="98.0913%" y="197" width="0.2646%" height="15" fill="rgb(236,202,9)" fg:x="320276" fg:w="864"/><text x="98.3413%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,226 samples, 0.99%)</title><rect x="98.3559%" y="213" width="0.9880%" height="15" fill="rgb(250,229,37)" fg:x="321140" fg:w="3226"/><text x="98.6059%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (313 samples, 0.10%)</title><rect x="99.2481%" y="197" width="0.0959%" height="15" fill="rgb(206,174,23)" fg:x="324053" fg:w="313"/><text x="99.4981%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (47 samples, 0.01%)</title><rect x="99.3639%" y="197" width="0.0144%" height="15" fill="rgb(211,33,43)" fg:x="324431" fg:w="47"/><text x="99.6139%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (170 samples, 0.05%)</title><rect x="99.5075%" y="165" width="0.0521%" height="15" fill="rgb(245,58,50)" fg:x="324900" fg:w="170"/><text x="99.7575%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (86 samples, 0.03%)</title><rect x="99.5332%" y="149" width="0.0263%" height="15" fill="rgb(244,68,36)" fg:x="324984" fg:w="86"/><text x="99.7832%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (832 samples, 0.25%)</title><rect x="99.3440%" y="213" width="0.2548%" height="15" fill="rgb(232,229,15)" fg:x="324366" fg:w="832"/><text x="99.5940%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (720 samples, 0.22%)</title><rect x="99.3783%" y="197" width="0.2205%" height="15" fill="rgb(254,30,23)" fg:x="324478" fg:w="720"/><text x="99.6283%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (597 samples, 0.18%)</title><rect x="99.4159%" y="181" width="0.1828%" height="15" fill="rgb(235,160,14)" fg:x="324601" fg:w="597"/><text x="99.6659%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (94 samples, 0.03%)</title><rect x="99.5700%" y="165" width="0.0288%" height="15" fill="rgb(212,155,44)" fg:x="325104" fg:w="94"/><text x="99.8200%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (94 samples, 0.03%)</title><rect x="99.5700%" y="149" width="0.0288%" height="15" fill="rgb(226,2,50)" fg:x="325104" fg:w="94"/><text x="99.8200%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (94 samples, 0.03%)</title><rect x="99.5700%" y="133" width="0.0288%" height="15" fill="rgb(234,177,6)" fg:x="325104" fg:w="94"/><text x="99.8200%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (279 samples, 0.09%)</title><rect x="99.5988%" y="213" width="0.0854%" height="15" fill="rgb(217,24,9)" fg:x="325198" fg:w="279"/><text x="99.8488%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (156 samples, 0.05%)</title><rect x="99.6365%" y="197" width="0.0478%" height="15" fill="rgb(220,13,46)" fg:x="325321" fg:w="156"/><text x="99.8865%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::find_new_dets (8,583 samples, 2.63%)</title><rect x="97.0653%" y="229" width="2.6287%" height="15" fill="rgb(239,221,27)" fg:x="316926" fg:w="8583"/><text x="97.3153%" y="239.50">es..</text></g><g><title>esp`esp::var::variational (320,630 samples, 98.20%)</title><rect x="1.5044%" y="245" width="98.1997%" height="15" fill="rgb(222,198,25)" fg:x="4912" fg:w="320630"/><text x="1.7544%" y="255.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (56 samples, 0.02%)</title><rect x="99.7458%" y="149" width="0.0172%" height="15" fill="rgb(211,99,13)" fg:x="325678" fg:w="56"/><text x="99.9958%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (56 samples, 0.02%)</title><rect x="99.7458%" y="133" width="0.0172%" height="15" fill="rgb(232,111,31)" fg:x="325678" fg:w="56"/><text x="99.9958%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (40 samples, 0.01%)</title><rect x="99.7507%" y="117" width="0.0123%" height="15" fill="rgb(245,82,37)" fg:x="325694" fg:w="40"/><text x="100.0007%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (59 samples, 0.02%)</title><rect x="99.7455%" y="197" width="0.0181%" height="15" fill="rgb(227,149,46)" fg:x="325677" fg:w="59"/><text x="99.9955%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (59 samples, 0.02%)</title><rect x="99.7455%" y="181" width="0.0181%" height="15" fill="rgb(218,36,50)" fg:x="325677" fg:w="59"/><text x="99.9955%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 0.02%)</title><rect x="99.7458%" y="165" width="0.0178%" height="15" fill="rgb(226,80,48)" fg:x="325678" fg:w="58"/><text x="99.9958%" y="175.50"></text></g><g><title>esp`alloc::slice::merge_sort (135 samples, 0.04%)</title><rect x="99.7636%" y="197" width="0.0413%" height="15" fill="rgb(238,224,15)" fg:x="325736" fg:w="135"/><text x="100.0136%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (353 samples, 0.11%)</title><rect x="99.7048%" y="213" width="0.1081%" height="15" fill="rgb(241,136,10)" fg:x="325544" fg:w="353"/><text x="99.9548%" y="223.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.01%)</title><rect x="99.8306%" y="197" width="0.0129%" height="15" fill="rgb(208,32,45)" fg:x="325955" fg:w="42"/><text x="100.0806%" y="207.50"></text></g><g><title>esp`std::io::append_to_string (41 samples, 0.01%)</title><rect x="99.8309%" y="181" width="0.0126%" height="15" fill="rgb(207,135,9)" fg:x="325956" fg:w="41"/><text x="100.0809%" y="191.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (34 samples, 0.01%)</title><rect x="99.8435%" y="197" width="0.0104%" height="15" fill="rgb(206,86,44)" fg:x="325997" fg:w="34"/><text x="100.0935%" y="207.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (144 samples, 0.04%)</title><rect x="99.8129%" y="213" width="0.0441%" height="15" fill="rgb(245,177,15)" fg:x="325897" fg:w="144"/><text x="100.0629%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (501 samples, 0.15%)</title><rect x="99.7041%" y="245" width="0.1534%" height="15" fill="rgb(206,64,50)" fg:x="325542" fg:w="501"/><text x="99.9541%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (501 samples, 0.15%)</title><rect x="99.7041%" y="229" width="0.1534%" height="15" fill="rgb(234,36,40)" fg:x="325542" fg:w="501"/><text x="99.9541%" y="239.50"></text></g><g><title>esp`main (326,072 samples, 99.87%)</title><rect x="0.0000%" y="325" width="99.8665%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="326072"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (326,071 samples, 99.87%)</title><rect x="0.0003%" y="309" width="99.8662%" height="15" fill="rgb(210,75,36)" fg:x="1" fg:w="326071"/><text x="0.2503%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (326,071 samples, 99.87%)</title><rect x="0.0003%" y="293" width="99.8662%" height="15" fill="rgb(229,88,21)" fg:x="1" fg:w="326071"/><text x="0.2503%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (326,071 samples, 99.87%)</title><rect x="0.0003%" y="277" width="99.8662%" height="15" fill="rgb(252,204,47)" fg:x="1" fg:w="326071"/><text x="0.2503%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (326,071 samples, 99.87%)</title><rect x="0.0003%" y="261" width="99.8662%" height="15" fill="rgb(208,77,27)" fg:x="1" fg:w="326071"/><text x="0.2503%" y="271.50">esp`esp::main</text></g><g><title>all (326,508 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="326508"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (326,508 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="326508"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (326,508 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="326508"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (435 samples, 0.13%)</title><rect x="99.8668%" y="325" width="0.1332%" height="15" fill="rgb(212,28,1)" fg:x="326073" fg:w="435"/><text x="100.1168%" y="335.50"></text></g></svg></svg>