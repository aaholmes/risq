<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="561421"><g><title>libsystem_malloc.dylib`small_size (197 samples, 0.04%)</title><rect x="0.0114%" y="213" width="0.0351%" height="15" fill="rgb(227,0,7)" fg:x="64" fg:w="197"/><text x="0.2614%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (86 samples, 0.02%)</title><rect x="0.0465%" y="213" width="0.0153%" height="15" fill="rgb(217,0,24)" fg:x="261" fg:w="86"/><text x="0.2965%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (84 samples, 0.01%)</title><rect x="0.0468%" y="197" width="0.0150%" height="15" fill="rgb(221,193,54)" fg:x="263" fg:w="84"/><text x="0.2968%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (295 samples, 0.05%)</title><rect x="0.0096%" y="229" width="0.0525%" height="15" fill="rgb(248,212,6)" fg:x="54" fg:w="295"/><text x="0.2596%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (91 samples, 0.02%)</title><rect x="0.0622%" y="229" width="0.0162%" height="15" fill="rgb(208,68,35)" fg:x="349" fg:w="91"/><text x="0.3122%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (91 samples, 0.02%)</title><rect x="0.0622%" y="213" width="0.0162%" height="15" fill="rgb(232,128,0)" fg:x="349" fg:w="91"/><text x="0.3122%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (91 samples, 0.02%)</title><rect x="0.0622%" y="197" width="0.0162%" height="15" fill="rgb(207,160,47)" fg:x="349" fg:w="91"/><text x="0.3122%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (114 samples, 0.02%)</title><rect x="0.1106%" y="213" width="0.0203%" height="15" fill="rgb(228,23,34)" fg:x="621" fg:w="114"/><text x="0.3606%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (564 samples, 0.10%)</title><rect x="0.1345%" y="213" width="0.1005%" height="15" fill="rgb(218,30,26)" fg:x="755" fg:w="564"/><text x="0.3845%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (313 samples, 0.06%)</title><rect x="0.2389%" y="197" width="0.0558%" height="15" fill="rgb(220,122,19)" fg:x="1341" fg:w="313"/><text x="0.4889%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (332 samples, 0.06%)</title><rect x="0.2369%" y="213" width="0.0591%" height="15" fill="rgb(250,228,42)" fg:x="1330" fg:w="332"/><text x="0.4869%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,156 samples, 0.38%)</title><rect x="0.3081%" y="197" width="0.3840%" height="15" fill="rgb(240,193,28)" fg:x="1730" fg:w="2156"/><text x="0.5581%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (58 samples, 0.01%)</title><rect x="0.6922%" y="197" width="0.0103%" height="15" fill="rgb(216,20,37)" fg:x="3886" fg:w="58"/><text x="0.9422%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,517 samples, 0.63%)</title><rect x="0.0784%" y="229" width="0.6264%" height="15" fill="rgb(206,188,39)" fg:x="440" fg:w="3517"/><text x="0.3284%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2,295 samples, 0.41%)</title><rect x="0.2960%" y="213" width="0.4088%" height="15" fill="rgb(217,207,13)" fg:x="1662" fg:w="2295"/><text x="0.5460%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (73 samples, 0.01%)</title><rect x="0.7337%" y="197" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="4119" fg:w="73"/><text x="0.9837%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (139 samples, 0.02%)</title><rect x="0.7497%" y="181" width="0.0248%" height="15" fill="rgb(225,20,46)" fg:x="4209" fg:w="139"/><text x="0.9997%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (395 samples, 0.07%)</title><rect x="0.7048%" y="229" width="0.0704%" height="15" fill="rgb(210,31,41)" fg:x="3957" fg:w="395"/><text x="0.9548%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (381 samples, 0.07%)</title><rect x="0.7073%" y="213" width="0.0679%" height="15" fill="rgb(221,200,47)" fg:x="3971" fg:w="381"/><text x="0.9573%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (151 samples, 0.03%)</title><rect x="0.7483%" y="197" width="0.0269%" height="15" fill="rgb(226,26,5)" fg:x="4201" fg:w="151"/><text x="0.9983%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (126 samples, 0.02%)</title><rect x="0.7752%" y="229" width="0.0224%" height="15" fill="rgb(249,33,26)" fg:x="4352" fg:w="126"/><text x="1.0252%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (126 samples, 0.02%)</title><rect x="0.7752%" y="213" width="0.0224%" height="15" fill="rgb(235,183,28)" fg:x="4352" fg:w="126"/><text x="1.0252%" y="223.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::sparse::SparseMatUpperTri&gt; (4,485 samples, 0.80%)</title><rect x="0.0016%" y="245" width="0.7989%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="4485"/><text x="0.2516%" y="255.50"></text></g><g><title>esp`__rdl_alloc (197 samples, 0.04%)</title><rect x="0.8430%" y="213" width="0.0351%" height="15" fill="rgb(247,18,42)" fg:x="4733" fg:w="197"/><text x="1.0930%" y="223.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (74 samples, 0.01%)</title><rect x="2.5598%" y="181" width="0.0132%" height="15" fill="rgb(241,131,45)" fg:x="14371" fg:w="74"/><text x="2.8098%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,436 samples, 0.26%)</title><rect x="2.3173%" y="197" width="0.2558%" height="15" fill="rgb(249,31,29)" fg:x="13010" fg:w="1436"/><text x="2.5673%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (583 samples, 0.10%)</title><rect x="26.0892%" y="165" width="0.1038%" height="15" fill="rgb(225,111,53)" fg:x="146470" fg:w="583"/><text x="26.3392%" y="175.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (584 samples, 0.10%)</title><rect x="26.0892%" y="181" width="0.1040%" height="15" fill="rgb(238,160,17)" fg:x="146470" fg:w="584"/><text x="26.3392%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (86 samples, 0.02%)</title><rect x="26.2030%" y="149" width="0.0153%" height="15" fill="rgb(214,148,48)" fg:x="147109" fg:w="86"/><text x="26.4530%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (86 samples, 0.02%)</title><rect x="26.2030%" y="133" width="0.0153%" height="15" fill="rgb(232,36,49)" fg:x="147109" fg:w="86"/><text x="26.4530%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (87 samples, 0.02%)</title><rect x="26.2030%" y="181" width="0.0155%" height="15" fill="rgb(209,103,24)" fg:x="147109" fg:w="87"/><text x="26.4530%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (87 samples, 0.02%)</title><rect x="26.2030%" y="165" width="0.0155%" height="15" fill="rgb(229,88,8)" fg:x="147109" fg:w="87"/><text x="26.4530%" y="175.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMatUpperTri as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (132,751 samples, 23.65%)</title><rect x="2.5731%" y="197" width="23.6455%" height="15" fill="rgb(213,181,19)" fg:x="14446" fg:w="132751"/><text x="2.8231%" y="207.50">esp`&lt;esp::var::sparse::SparseMatUpperT..</text></g><g><title>libsystem_malloc.dylib`free_large (97 samples, 0.02%)</title><rect x="26.2215%" y="117" width="0.0173%" height="15" fill="rgb(254,191,54)" fg:x="147213" fg:w="97"/><text x="26.4715%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (97 samples, 0.02%)</title><rect x="26.2215%" y="101" width="0.0173%" height="15" fill="rgb(241,83,37)" fg:x="147213" fg:w="97"/><text x="26.4715%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (97 samples, 0.02%)</title><rect x="26.2215%" y="85" width="0.0173%" height="15" fill="rgb(233,36,39)" fg:x="147213" fg:w="97"/><text x="26.4715%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (133 samples, 0.02%)</title><rect x="26.2188%" y="197" width="0.0237%" height="15" fill="rgb(226,3,54)" fg:x="147198" fg:w="133"/><text x="26.4688%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (133 samples, 0.02%)</title><rect x="26.2188%" y="181" width="0.0237%" height="15" fill="rgb(245,192,40)" fg:x="147198" fg:w="133"/><text x="26.4688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (129 samples, 0.02%)</title><rect x="26.2195%" y="165" width="0.0230%" height="15" fill="rgb(238,167,29)" fg:x="147202" fg:w="129"/><text x="26.4695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (129 samples, 0.02%)</title><rect x="26.2195%" y="149" width="0.0230%" height="15" fill="rgb(232,182,51)" fg:x="147202" fg:w="129"/><text x="26.4695%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (129 samples, 0.02%)</title><rect x="26.2195%" y="133" width="0.0230%" height="15" fill="rgb(231,60,39)" fg:x="147202" fg:w="129"/><text x="26.4695%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (1,981 samples, 0.35%)</title><rect x="27.0498%" y="149" width="0.3529%" height="15" fill="rgb(208,69,12)" fg:x="151863" fg:w="1981"/><text x="27.2998%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (3,506 samples, 0.62%)</title><rect x="27.4211%" y="133" width="0.6245%" height="15" fill="rgb(235,93,37)" fg:x="153948" fg:w="3506"/><text x="27.6711%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (4,766 samples, 0.85%)</title><rect x="27.4026%" y="149" width="0.8489%" height="15" fill="rgb(213,116,39)" fg:x="153844" fg:w="4766"/><text x="27.6526%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (1,156 samples, 0.21%)</title><rect x="28.0456%" y="133" width="0.2059%" height="15" fill="rgb(222,207,29)" fg:x="157454" fg:w="1156"/><text x="28.2956%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (256 samples, 0.05%)</title><rect x="28.2059%" y="117" width="0.0456%" height="15" fill="rgb(206,96,30)" fg:x="158354" fg:w="256"/><text x="28.4559%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (6,806 samples, 1.21%)</title><rect x="27.0419%" y="165" width="1.2123%" height="15" fill="rgb(218,138,4)" fg:x="151819" fg:w="6806"/><text x="27.2919%" y="175.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (10,273 samples, 1.83%)</title><rect x="26.4247%" y="181" width="1.8298%" height="15" fill="rgb(250,191,14)" fg:x="148354" fg:w="10273"/><text x="26.6747%" y="191.50">e..</text></g><g><title>libsystem_kernel.dylib`madvise (352 samples, 0.06%)</title><rect x="28.2546%" y="181" width="0.0627%" height="15" fill="rgb(239,60,40)" fg:x="158627" fg:w="352"/><text x="28.5046%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (11,761 samples, 2.09%)</title><rect x="26.2425%" y="197" width="2.0949%" height="15" fill="rgb(206,27,48)" fg:x="147331" fg:w="11761"/><text x="26.4925%" y="207.50">e..</text></g><g><title>libsystem_malloc.dylib`free_large (113 samples, 0.02%)</title><rect x="28.3173%" y="181" width="0.0201%" height="15" fill="rgb(225,35,8)" fg:x="158979" fg:w="113"/><text x="28.5673%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (112 samples, 0.02%)</title><rect x="28.3174%" y="165" width="0.0199%" height="15" fill="rgb(250,213,24)" fg:x="158980" fg:w="112"/><text x="28.5674%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (112 samples, 0.02%)</title><rect x="28.3174%" y="149" width="0.0199%" height="15" fill="rgb(247,123,22)" fg:x="158980" fg:w="112"/><text x="28.5674%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (383 samples, 0.07%)</title><rect x="28.3468%" y="181" width="0.0682%" height="15" fill="rgb(231,138,38)" fg:x="159145" fg:w="383"/><text x="28.5968%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (399 samples, 0.07%)</title><rect x="28.3468%" y="197" width="0.0711%" height="15" fill="rgb(231,145,46)" fg:x="159145" fg:w="399"/><text x="28.5968%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (205 samples, 0.04%)</title><rect x="28.4179%" y="197" width="0.0365%" height="15" fill="rgb(251,118,11)" fg:x="159544" fg:w="205"/><text x="28.6679%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,558 samples, 0.81%)</title><rect x="28.7866%" y="181" width="0.8119%" height="15" fill="rgb(217,147,25)" fg:x="161614" fg:w="4558"/><text x="29.0366%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (811 samples, 0.14%)</title><rect x="29.5986%" y="181" width="0.1445%" height="15" fill="rgb(247,81,37)" fg:x="166173" fg:w="811"/><text x="29.8486%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (480 samples, 0.09%)</title><rect x="29.7431%" y="181" width="0.0855%" height="15" fill="rgb(209,12,38)" fg:x="166984" fg:w="480"/><text x="29.9931%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (7,718 samples, 1.37%)</title><rect x="28.4544%" y="197" width="1.3747%" height="15" fill="rgb(227,1,9)" fg:x="159749" fg:w="7718"/><text x="28.7044%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (378 samples, 0.07%)</title><rect x="29.8325%" y="181" width="0.0673%" height="15" fill="rgb(248,47,43)" fg:x="167486" fg:w="378"/><text x="30.0825%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (928 samples, 0.17%)</title><rect x="29.9080%" y="165" width="0.1653%" height="15" fill="rgb(221,10,30)" fg:x="167910" fg:w="928"/><text x="30.1580%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,323 samples, 0.24%)</title><rect x="29.8998%" y="181" width="0.2357%" height="15" fill="rgb(210,229,1)" fg:x="167864" fg:w="1323"/><text x="30.1498%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (349 samples, 0.06%)</title><rect x="30.0733%" y="165" width="0.0622%" height="15" fill="rgb(222,148,37)" fg:x="168838" fg:w="349"/><text x="30.3233%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (137 samples, 0.02%)</title><rect x="30.1111%" y="149" width="0.0244%" height="15" fill="rgb(234,67,33)" fg:x="169050" fg:w="137"/><text x="30.3611%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (1,721 samples, 0.31%)</title><rect x="29.8293%" y="197" width="0.3065%" height="15" fill="rgb(247,98,35)" fg:x="167468" fg:w="1721"/><text x="30.0793%" y="207.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (383 samples, 0.07%)</title><rect x="30.1359%" y="197" width="0.0682%" height="15" fill="rgb(247,138,52)" fg:x="169189" fg:w="383"/><text x="30.3859%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,665 samples, 0.30%)</title><rect x="30.2144%" y="197" width="0.2966%" height="15" fill="rgb(213,79,30)" fg:x="169630" fg:w="1665"/><text x="30.4644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (991 samples, 0.18%)</title><rect x="30.5115%" y="197" width="0.1765%" height="15" fill="rgb(246,177,23)" fg:x="171298" fg:w="991"/><text x="30.7615%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (991 samples, 0.18%)</title><rect x="30.5115%" y="181" width="0.1765%" height="15" fill="rgb(230,62,27)" fg:x="171298" fg:w="991"/><text x="30.7615%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (991 samples, 0.18%)</title><rect x="30.5115%" y="165" width="0.1765%" height="15" fill="rgb(216,154,8)" fg:x="171298" fg:w="991"/><text x="30.7615%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (167,543 samples, 29.84%)</title><rect x="0.8858%" y="213" width="29.8427%" height="15" fill="rgb(244,35,45)" fg:x="4973" fg:w="167543"/><text x="1.1358%" y="223.50">esp`eigenvalues::algorithms::davidson::Davidson:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (224 samples, 0.04%)</title><rect x="30.6886%" y="197" width="0.0399%" height="15" fill="rgb(251,115,12)" fg:x="172292" fg:w="224"/><text x="30.9386%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5,626 samples, 1.00%)</title><rect x="38.5306%" y="165" width="1.0021%" height="15" fill="rgb(240,54,50)" fg:x="216319" fg:w="5626"/><text x="38.7806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5,341 samples, 0.95%)</title><rect x="38.5814%" y="149" width="0.9513%" height="15" fill="rgb(233,84,52)" fg:x="216604" fg:w="5341"/><text x="38.8314%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (7,363 samples, 1.31%)</title><rect x="38.2433%" y="181" width="1.3115%" height="15" fill="rgb(207,117,47)" fg:x="214706" fg:w="7363"/><text x="38.4933%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (124 samples, 0.02%)</title><rect x="39.5327%" y="165" width="0.0221%" height="15" fill="rgb(249,43,39)" fg:x="221945" fg:w="124"/><text x="39.7827%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (83 samples, 0.01%)</title><rect x="39.5548%" y="181" width="0.0148%" height="15" fill="rgb(209,38,44)" fg:x="222069" fg:w="83"/><text x="39.8048%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (83 samples, 0.01%)</title><rect x="39.5548%" y="165" width="0.0148%" height="15" fill="rgb(236,212,23)" fg:x="222069" fg:w="83"/><text x="39.8048%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (83 samples, 0.01%)</title><rect x="39.5548%" y="149" width="0.0148%" height="15" fill="rgb(242,79,21)" fg:x="222069" fg:w="83"/><text x="39.8048%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (148 samples, 0.03%)</title><rect x="39.5758%" y="165" width="0.0264%" height="15" fill="rgb(211,96,35)" fg:x="222187" fg:w="148"/><text x="39.8258%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (98 samples, 0.02%)</title><rect x="39.6027%" y="165" width="0.0175%" height="15" fill="rgb(253,215,40)" fg:x="222338" fg:w="98"/><text x="39.8527%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (288 samples, 0.05%)</title><rect x="39.5696%" y="181" width="0.0513%" height="15" fill="rgb(211,81,21)" fg:x="222152" fg:w="288"/><text x="39.8196%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (85 samples, 0.02%)</title><rect x="40.5601%" y="165" width="0.0151%" height="15" fill="rgb(208,190,38)" fg:x="227713" fg:w="85"/><text x="40.8101%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (63 samples, 0.01%)</title><rect x="40.5753%" y="165" width="0.0112%" height="15" fill="rgb(235,213,38)" fg:x="227798" fg:w="63"/><text x="40.8253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (99 samples, 0.02%)</title><rect x="42.4134%" y="149" width="0.0176%" height="15" fill="rgb(237,122,38)" fg:x="238118" fg:w="99"/><text x="42.6634%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (63 samples, 0.01%)</title><rect x="42.4199%" y="133" width="0.0112%" height="15" fill="rgb(244,218,35)" fg:x="238154" fg:w="63"/><text x="42.6699%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6,537 samples, 1.16%)</title><rect x="42.4311%" y="149" width="1.1644%" height="15" fill="rgb(240,68,47)" fg:x="238217" fg:w="6537"/><text x="42.6811%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6,639 samples, 1.18%)</title><rect x="43.5954%" y="149" width="1.1825%" height="15" fill="rgb(210,16,53)" fg:x="244754" fg:w="6639"/><text x="43.8454%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (66 samples, 0.01%)</title><rect x="44.7780%" y="149" width="0.0118%" height="15" fill="rgb(235,124,12)" fg:x="251393" fg:w="66"/><text x="45.0280%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (74 samples, 0.01%)</title><rect x="44.7897%" y="149" width="0.0132%" height="15" fill="rgb(224,169,11)" fg:x="251459" fg:w="74"/><text x="45.0397%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (29,146 samples, 5.19%)</title><rect x="39.6209%" y="181" width="5.1915%" height="15" fill="rgb(250,166,2)" fg:x="222440" fg:w="29146"/><text x="39.8709%" y="191.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23,725 samples, 4.23%)</title><rect x="40.5865%" y="165" width="4.2259%" height="15" fill="rgb(242,216,29)" fg:x="227861" fg:w="23725"/><text x="40.8365%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (98 samples, 0.02%)</title><rect x="44.8125%" y="181" width="0.0175%" height="15" fill="rgb(230,116,27)" fg:x="251587" fg:w="98"/><text x="45.0625%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,770 samples, 6.91%)</title><rect x="37.9462%" y="197" width="6.9057%" height="15" fill="rgb(228,99,48)" fg:x="213038" fg:w="38770"/><text x="38.1962%" y="207.50">esp`&lt;hash..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (123 samples, 0.02%)</title><rect x="44.8300%" y="181" width="0.0219%" height="15" fill="rgb(253,11,6)" fg:x="251685" fg:w="123"/><text x="45.0800%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (199 samples, 0.04%)</title><rect x="44.8531%" y="197" width="0.0354%" height="15" fill="rgb(247,143,39)" fg:x="251815" fg:w="199"/><text x="45.1031%" y="207.50"></text></g><g><title>esp`__rdl_realloc (71 samples, 0.01%)</title><rect x="44.9686%" y="165" width="0.0126%" height="15" fill="rgb(236,97,10)" fg:x="252463" fg:w="71"/><text x="45.2186%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (173 samples, 0.03%)</title><rect x="45.0742%" y="133" width="0.0308%" height="15" fill="rgb(233,208,19)" fg:x="253056" fg:w="173"/><text x="45.3242%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (816 samples, 0.15%)</title><rect x="45.4671%" y="85" width="0.1453%" height="15" fill="rgb(216,164,2)" fg:x="255262" fg:w="816"/><text x="45.7171%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (105 samples, 0.02%)</title><rect x="45.6125%" y="85" width="0.0187%" height="15" fill="rgb(220,129,5)" fg:x="256078" fg:w="105"/><text x="45.8625%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,532 samples, 0.45%)</title><rect x="45.1805%" y="117" width="0.4510%" height="15" fill="rgb(242,17,10)" fg:x="253653" fg:w="2532"/><text x="45.4305%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,579 samples, 0.28%)</title><rect x="45.3503%" y="101" width="0.2813%" height="15" fill="rgb(242,107,0)" fg:x="254606" fg:w="1579"/><text x="45.6003%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (106 samples, 0.02%)</title><rect x="45.6777%" y="69" width="0.0189%" height="15" fill="rgb(251,28,31)" fg:x="256444" fg:w="106"/><text x="45.9277%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (64 samples, 0.01%)</title><rect x="45.6965%" y="69" width="0.0114%" height="15" fill="rgb(233,223,10)" fg:x="256550" fg:w="64"/><text x="45.9465%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (358 samples, 0.06%)</title><rect x="45.6616%" y="101" width="0.0638%" height="15" fill="rgb(215,21,27)" fg:x="256354" fg:w="358"/><text x="45.9116%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (314 samples, 0.06%)</title><rect x="45.6695%" y="85" width="0.0559%" height="15" fill="rgb(232,23,21)" fg:x="256398" fg:w="314"/><text x="45.9195%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (98 samples, 0.02%)</title><rect x="45.7079%" y="69" width="0.0175%" height="15" fill="rgb(244,5,23)" fg:x="256614" fg:w="98"/><text x="45.9579%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (303 samples, 0.05%)</title><rect x="45.9876%" y="85" width="0.0540%" height="15" fill="rgb(226,81,46)" fg:x="258184" fg:w="303"/><text x="46.2376%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,374 samples, 0.60%)</title><rect x="45.6411%" y="117" width="0.6010%" height="15" fill="rgb(247,70,30)" fg:x="256239" fg:w="3374"/><text x="45.8911%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,887 samples, 0.51%)</title><rect x="45.7279%" y="101" width="0.5142%" height="15" fill="rgb(212,68,19)" fg:x="256726" fg:w="2887"/><text x="45.9779%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,104 samples, 0.20%)</title><rect x="46.0455%" y="85" width="0.1966%" height="15" fill="rgb(240,187,13)" fg:x="258509" fg:w="1104"/><text x="46.2955%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (233 samples, 0.04%)</title><rect x="46.2006%" y="69" width="0.0415%" height="15" fill="rgb(223,113,26)" fg:x="259380" fg:w="233"/><text x="46.4506%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (408 samples, 0.07%)</title><rect x="46.2421%" y="117" width="0.0727%" height="15" fill="rgb(206,192,2)" fg:x="259613" fg:w="408"/><text x="46.4921%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (347 samples, 0.06%)</title><rect x="46.2530%" y="101" width="0.0618%" height="15" fill="rgb(241,108,4)" fg:x="259674" fg:w="347"/><text x="46.5030%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (943 samples, 0.17%)</title><rect x="46.3182%" y="117" width="0.1680%" height="15" fill="rgb(247,173,49)" fg:x="260040" fg:w="943"/><text x="46.5682%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (61 samples, 0.01%)</title><rect x="46.4753%" y="101" width="0.0109%" height="15" fill="rgb(224,114,35)" fg:x="260922" fg:w="61"/><text x="46.7253%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8,786 samples, 1.56%)</title><rect x="45.1168%" y="133" width="1.5650%" height="15" fill="rgb(245,159,27)" fg:x="253295" fg:w="8786"/><text x="45.3668%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,098 samples, 0.20%)</title><rect x="46.4861%" y="117" width="0.1956%" height="15" fill="rgb(245,172,44)" fg:x="260983" fg:w="1098"/><text x="46.7361%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9,244 samples, 1.65%)</title><rect x="45.0450%" y="149" width="1.6465%" height="15" fill="rgb(236,23,11)" fg:x="252892" fg:w="9244"/><text x="45.2950%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1,019 samples, 0.18%)</title><rect x="46.6962%" y="149" width="0.1815%" height="15" fill="rgb(205,117,38)" fg:x="262162" fg:w="1019"/><text x="46.9462%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (971 samples, 0.17%)</title><rect x="46.7047%" y="133" width="0.1730%" height="15" fill="rgb(237,72,25)" fg:x="262210" fg:w="971"/><text x="46.9547%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10,646 samples, 1.90%)</title><rect x="44.9842%" y="165" width="1.8963%" height="15" fill="rgb(244,70,9)" fg:x="252551" fg:w="10646"/><text x="45.2342%" y="175.50">l..</text></g><g><title>esp`alloc::raw_vec::finish_grow (10,879 samples, 1.94%)</title><rect x="44.9463%" y="181" width="1.9378%" height="15" fill="rgb(217,125,39)" fg:x="252338" fg:w="10879"/><text x="45.1963%" y="191.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11,215 samples, 2.00%)</title><rect x="44.8904%" y="197" width="1.9976%" height="15" fill="rgb(235,36,10)" fg:x="252024" fg:w="11215"/><text x="45.1404%" y="207.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (843 samples, 0.15%)</title><rect x="46.8994%" y="197" width="0.1502%" height="15" fill="rgb(251,123,47)" fg:x="263303" fg:w="843"/><text x="47.1494%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (150 samples, 0.03%)</title><rect x="47.0495%" y="197" width="0.0267%" height="15" fill="rgb(221,13,13)" fg:x="264146" fg:w="150"/><text x="47.2995%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (156 samples, 0.03%)</title><rect x="50.0111%" y="133" width="0.0278%" height="15" fill="rgb(238,131,9)" fg:x="280773" fg:w="156"/><text x="50.2611%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (152 samples, 0.03%)</title><rect x="50.0118%" y="117" width="0.0271%" height="15" fill="rgb(211,50,8)" fg:x="280777" fg:w="152"/><text x="50.2618%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (62 samples, 0.01%)</title><rect x="50.0279%" y="101" width="0.0110%" height="15" fill="rgb(245,182,24)" fg:x="280867" fg:w="62"/><text x="50.2779%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (170 samples, 0.03%)</title><rect x="50.0088%" y="149" width="0.0303%" height="15" fill="rgb(242,14,37)" fg:x="280760" fg:w="170"/><text x="50.2588%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (217 samples, 0.04%)</title><rect x="50.0932%" y="101" width="0.0387%" height="15" fill="rgb(246,228,12)" fg:x="281234" fg:w="217"/><text x="50.3432%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (653 samples, 0.12%)</title><rect x="50.2347%" y="69" width="0.1163%" height="15" fill="rgb(213,55,15)" fg:x="282028" fg:w="653"/><text x="50.4847%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (152 samples, 0.03%)</title><rect x="50.3510%" y="69" width="0.0271%" height="15" fill="rgb(209,9,3)" fg:x="282681" fg:w="152"/><text x="50.6010%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,171 samples, 0.21%)</title><rect x="50.1711%" y="85" width="0.2086%" height="15" fill="rgb(230,59,30)" fg:x="281671" fg:w="1171"/><text x="50.4211%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,392 samples, 0.25%)</title><rect x="50.1319%" y="101" width="0.2479%" height="15" fill="rgb(209,121,21)" fg:x="281451" fg:w="1392"/><text x="50.3819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (64 samples, 0.01%)</title><rect x="50.3816%" y="101" width="0.0114%" height="15" fill="rgb(220,109,13)" fg:x="282853" fg:w="64"/><text x="50.6316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (146 samples, 0.03%)</title><rect x="50.4488%" y="53" width="0.0260%" height="15" fill="rgb(232,18,1)" fg:x="283230" fg:w="146"/><text x="50.6988%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (541 samples, 0.10%)</title><rect x="50.3973%" y="85" width="0.0964%" height="15" fill="rgb(215,41,42)" fg:x="282941" fg:w="541"/><text x="50.6473%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (374 samples, 0.07%)</title><rect x="50.4270%" y="69" width="0.0666%" height="15" fill="rgb(224,123,36)" fg:x="283108" fg:w="374"/><text x="50.6770%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (106 samples, 0.02%)</title><rect x="50.4748%" y="53" width="0.0189%" height="15" fill="rgb(240,125,3)" fg:x="283376" fg:w="106"/><text x="50.7248%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (108 samples, 0.02%)</title><rect x="50.5350%" y="69" width="0.0192%" height="15" fill="rgb(205,98,50)" fg:x="283714" fg:w="108"/><text x="50.7850%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,243 samples, 0.22%)</title><rect x="50.3930%" y="101" width="0.2214%" height="15" fill="rgb(205,185,37)" fg:x="282917" fg:w="1243"/><text x="50.6430%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (677 samples, 0.12%)</title><rect x="50.4938%" y="85" width="0.1206%" height="15" fill="rgb(238,207,15)" fg:x="283483" fg:w="677"/><text x="50.7438%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (332 samples, 0.06%)</title><rect x="50.5553%" y="69" width="0.0591%" height="15" fill="rgb(213,199,42)" fg:x="283828" fg:w="332"/><text x="50.8053%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (100 samples, 0.02%)</title><rect x="50.6144%" y="101" width="0.0178%" height="15" fill="rgb(235,201,11)" fg:x="284160" fg:w="100"/><text x="50.8644%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (83 samples, 0.01%)</title><rect x="50.6175%" y="85" width="0.0148%" height="15" fill="rgb(207,46,11)" fg:x="284177" fg:w="83"/><text x="50.8675%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (329 samples, 0.06%)</title><rect x="50.6333%" y="101" width="0.0586%" height="15" fill="rgb(241,35,35)" fg:x="284266" fg:w="329"/><text x="50.8833%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (72 samples, 0.01%)</title><rect x="50.6791%" y="85" width="0.0128%" height="15" fill="rgb(243,32,47)" fg:x="284523" fg:w="72"/><text x="50.9291%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6,023 samples, 1.07%)</title><rect x="50.0827%" y="117" width="1.0728%" height="15" fill="rgb(247,202,23)" fg:x="281175" fg:w="6023"/><text x="50.3327%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,603 samples, 0.46%)</title><rect x="50.6919%" y="101" width="0.4636%" height="15" fill="rgb(219,102,11)" fg:x="284595" fg:w="2603"/><text x="50.9419%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6,155 samples, 1.10%)</title><rect x="50.0631%" y="133" width="1.0963%" height="15" fill="rgb(243,110,44)" fg:x="281065" fg:w="6155"/><text x="50.3131%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (278 samples, 0.05%)</title><rect x="51.1595%" y="133" width="0.0495%" height="15" fill="rgb(222,74,54)" fg:x="287220" fg:w="278"/><text x="51.4095%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (694 samples, 0.12%)</title><rect x="51.2095%" y="133" width="0.1236%" height="15" fill="rgb(216,99,12)" fg:x="287501" fg:w="694"/><text x="51.4595%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (668 samples, 0.12%)</title><rect x="51.2142%" y="117" width="0.1190%" height="15" fill="rgb(226,22,26)" fg:x="287527" fg:w="668"/><text x="51.4642%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7,263 samples, 1.29%)</title><rect x="50.0412%" y="149" width="1.2937%" height="15" fill="rgb(217,163,10)" fg:x="280942" fg:w="7263"/><text x="50.2912%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (7,548 samples, 1.34%)</title><rect x="49.9994%" y="165" width="1.3444%" height="15" fill="rgb(213,25,53)" fg:x="280707" fg:w="7548"/><text x="50.2494%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7,688 samples, 1.37%)</title><rect x="49.9803%" y="181" width="1.3694%" height="15" fill="rgb(252,105,26)" fg:x="280600" fg:w="7688"/><text x="50.2303%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (136 samples, 0.02%)</title><rect x="51.3506%" y="181" width="0.0242%" height="15" fill="rgb(220,39,43)" fg:x="288293" fg:w="136"/><text x="51.6006%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (54,440 samples, 9.70%)</title><rect x="47.0771%" y="197" width="9.6968%" height="15" fill="rgb(229,68,48)" fg:x="264301" fg:w="54440"/><text x="47.3271%" y="207.50">esp`esp::var::..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (30,312 samples, 5.40%)</title><rect x="51.3748%" y="181" width="5.3992%" height="15" fill="rgb(252,8,32)" fg:x="288429" fg:w="30312"/><text x="51.6248%" y="191.50">esp`esp..</text></g><g><title>esp`esp::ham::Ham::ham_doub (16,378 samples, 2.92%)</title><rect x="53.8567%" y="165" width="2.9172%" height="15" fill="rgb(223,20,43)" fg:x="302363" fg:w="16378"/><text x="54.1067%" y="175.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (104 samples, 0.02%)</title><rect x="58.0986%" y="181" width="0.0185%" height="15" fill="rgb(229,81,49)" fg:x="326178" fg:w="104"/><text x="58.3486%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (60 samples, 0.01%)</title><rect x="58.1202%" y="181" width="0.0107%" height="15" fill="rgb(236,28,36)" fg:x="326299" fg:w="60"/><text x="58.3702%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (16,320 samples, 2.91%)</title><rect x="58.1309%" y="181" width="2.9069%" height="15" fill="rgb(249,185,26)" fg:x="326359" fg:w="16320"/><text x="58.3809%" y="191.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_doub (4,440 samples, 0.79%)</title><rect x="60.2469%" y="165" width="0.7909%" height="15" fill="rgb(249,174,33)" fg:x="338239" fg:w="4440"/><text x="60.4969%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,719 samples, 0.48%)</title><rect x="60.5535%" y="149" width="0.4843%" height="15" fill="rgb(233,201,37)" fg:x="339960" fg:w="2719"/><text x="60.8035%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (3,063 samples, 0.55%)</title><rect x="61.0378%" y="181" width="0.5456%" height="15" fill="rgb(221,78,26)" fg:x="342679" fg:w="3063"/><text x="61.2878%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,935 samples, 0.34%)</title><rect x="61.2387%" y="165" width="0.3447%" height="15" fill="rgb(250,127,30)" fg:x="343807" fg:w="1935"/><text x="61.4887%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (113 samples, 0.02%)</title><rect x="61.9298%" y="85" width="0.0201%" height="15" fill="rgb(230,49,44)" fg:x="347687" fg:w="113"/><text x="62.1798%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (88 samples, 0.02%)</title><rect x="61.9662%" y="53" width="0.0157%" height="15" fill="rgb(229,67,23)" fg:x="347891" fg:w="88"/><text x="62.2162%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (232 samples, 0.04%)</title><rect x="61.9499%" y="85" width="0.0413%" height="15" fill="rgb(249,83,47)" fg:x="347800" fg:w="232"/><text x="62.1999%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (200 samples, 0.04%)</title><rect x="61.9556%" y="69" width="0.0356%" height="15" fill="rgb(215,43,3)" fg:x="347832" fg:w="200"/><text x="62.2056%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (230 samples, 0.04%)</title><rect x="61.9996%" y="69" width="0.0410%" height="15" fill="rgb(238,154,13)" fg:x="348079" fg:w="230"/><text x="62.2496%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (188 samples, 0.03%)</title><rect x="62.0071%" y="53" width="0.0335%" height="15" fill="rgb(219,56,2)" fg:x="348121" fg:w="188"/><text x="62.2571%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (70 samples, 0.01%)</title><rect x="62.0281%" y="37" width="0.0125%" height="15" fill="rgb(233,0,4)" fg:x="348239" fg:w="70"/><text x="62.2781%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (308 samples, 0.05%)</title><rect x="61.9977%" y="85" width="0.0549%" height="15" fill="rgb(235,30,7)" fg:x="348068" fg:w="308"/><text x="62.2477%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (67 samples, 0.01%)</title><rect x="62.0406%" y="69" width="0.0119%" height="15" fill="rgb(250,79,13)" fg:x="348309" fg:w="67"/><text x="62.2906%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (57 samples, 0.01%)</title><rect x="62.0545%" y="85" width="0.0102%" height="15" fill="rgb(211,146,34)" fg:x="348387" fg:w="57"/><text x="62.3045%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,176 samples, 0.39%)</title><rect x="61.9271%" y="101" width="0.3876%" height="15" fill="rgb(228,22,38)" fg:x="347672" fg:w="2176"/><text x="62.1771%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,404 samples, 0.25%)</title><rect x="62.0647%" y="85" width="0.2501%" height="15" fill="rgb(235,168,5)" fg:x="348444" fg:w="1404"/><text x="62.3147%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,196 samples, 0.39%)</title><rect x="61.9239%" y="117" width="0.3912%" height="15" fill="rgb(221,155,16)" fg:x="347654" fg:w="2196"/><text x="62.1739%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (125 samples, 0.02%)</title><rect x="62.3151%" y="117" width="0.0223%" height="15" fill="rgb(215,215,53)" fg:x="349850" fg:w="125"/><text x="62.5651%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (128 samples, 0.02%)</title><rect x="62.3377%" y="117" width="0.0228%" height="15" fill="rgb(223,4,10)" fg:x="349977" fg:w="128"/><text x="62.5877%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (127 samples, 0.02%)</title><rect x="62.3379%" y="101" width="0.0226%" height="15" fill="rgb(234,103,6)" fg:x="349978" fg:w="127"/><text x="62.5879%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,481 samples, 0.44%)</title><rect x="61.9188%" y="133" width="0.4419%" height="15" fill="rgb(227,97,0)" fg:x="347625" fg:w="2481"/><text x="62.1688%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,504 samples, 0.45%)</title><rect x="61.9157%" y="149" width="0.4460%" height="15" fill="rgb(234,150,53)" fg:x="347608" fg:w="2504"/><text x="62.1657%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,530 samples, 0.45%)</title><rect x="61.9124%" y="165" width="0.4506%" height="15" fill="rgb(228,201,54)" fg:x="347589" fg:w="2530"/><text x="62.1624%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el (4,378 samples, 0.78%)</title><rect x="61.5834%" y="181" width="0.7798%" height="15" fill="rgb(222,22,37)" fg:x="345742" fg:w="4378"/><text x="61.8334%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (33,292 samples, 5.93%)</title><rect x="56.7740%" y="197" width="5.9300%" height="15" fill="rgb(237,53,32)" fg:x="318741" fg:w="33292"/><text x="57.0240%" y="207.50">esp`esp:..</text></g><g><title>esp`hashbrown::map::make_hash (1,913 samples, 0.34%)</title><rect x="62.3632%" y="181" width="0.3407%" height="15" fill="rgb(233,25,53)" fg:x="350120" fg:w="1913"/><text x="62.6132%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,173 samples, 0.21%)</title><rect x="62.4950%" y="165" width="0.2089%" height="15" fill="rgb(210,40,34)" fg:x="350860" fg:w="1173"/><text x="62.7450%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (152 samples, 0.03%)</title><rect x="65.3299%" y="133" width="0.0271%" height="15" fill="rgb(241,220,44)" fg:x="366776" fg:w="152"/><text x="65.5799%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (137 samples, 0.02%)</title><rect x="65.3326%" y="117" width="0.0244%" height="15" fill="rgb(235,28,35)" fg:x="366791" fg:w="137"/><text x="65.5826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (130 samples, 0.02%)</title><rect x="65.3339%" y="101" width="0.0232%" height="15" fill="rgb(210,56,17)" fg:x="366798" fg:w="130"/><text x="65.5839%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (57 samples, 0.01%)</title><rect x="65.3590%" y="101" width="0.0102%" height="15" fill="rgb(224,130,29)" fg:x="366939" fg:w="57"/><text x="65.6090%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (64 samples, 0.01%)</title><rect x="65.3583%" y="117" width="0.0114%" height="15" fill="rgb(235,212,8)" fg:x="366935" fg:w="64"/><text x="65.6083%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (73 samples, 0.01%)</title><rect x="65.3581%" y="133" width="0.0130%" height="15" fill="rgb(223,33,50)" fg:x="366934" fg:w="73"/><text x="65.6081%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (244 samples, 0.04%)</title><rect x="65.3282%" y="149" width="0.0435%" height="15" fill="rgb(219,149,13)" fg:x="366766" fg:w="244"/><text x="65.5782%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (285 samples, 0.05%)</title><rect x="65.3216%" y="165" width="0.0508%" height="15" fill="rgb(250,156,29)" fg:x="366729" fg:w="285"/><text x="65.5716%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (265 samples, 0.05%)</title><rect x="65.3723%" y="165" width="0.0472%" height="15" fill="rgb(216,193,19)" fg:x="367014" fg:w="265"/><text x="65.6223%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (239 samples, 0.04%)</title><rect x="65.3770%" y="149" width="0.0426%" height="15" fill="rgb(216,135,14)" fg:x="367040" fg:w="239"/><text x="65.6270%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (187 samples, 0.03%)</title><rect x="65.3862%" y="133" width="0.0333%" height="15" fill="rgb(241,47,5)" fg:x="367092" fg:w="187"/><text x="65.6362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (77 samples, 0.01%)</title><rect x="65.4058%" y="117" width="0.0137%" height="15" fill="rgb(233,42,35)" fg:x="367202" fg:w="77"/><text x="65.6558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (68 samples, 0.01%)</title><rect x="65.4347%" y="149" width="0.0121%" height="15" fill="rgb(231,13,6)" fg:x="367364" fg:w="68"/><text x="65.6847%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (60 samples, 0.01%)</title><rect x="65.4361%" y="133" width="0.0107%" height="15" fill="rgb(207,181,40)" fg:x="367372" fg:w="60"/><text x="65.6861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (150 samples, 0.03%)</title><rect x="65.4211%" y="165" width="0.0267%" height="15" fill="rgb(254,173,49)" fg:x="367288" fg:w="150"/><text x="65.6711%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (110 samples, 0.02%)</title><rect x="65.4799%" y="133" width="0.0196%" height="15" fill="rgb(221,1,38)" fg:x="367618" fg:w="110"/><text x="65.7299%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (275 samples, 0.05%)</title><rect x="65.4518%" y="165" width="0.0490%" height="15" fill="rgb(206,124,46)" fg:x="367460" fg:w="275"/><text x="65.7018%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (189 samples, 0.03%)</title><rect x="65.4671%" y="149" width="0.0337%" height="15" fill="rgb(249,21,11)" fg:x="367546" fg:w="189"/><text x="65.7171%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (12,545 samples, 2.23%)</title><rect x="63.3688%" y="181" width="2.2345%" height="15" fill="rgb(222,201,40)" fg:x="355766" fg:w="12545"/><text x="63.6188%" y="191.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (562 samples, 0.10%)</title><rect x="65.5032%" y="165" width="0.1001%" height="15" fill="rgb(235,61,29)" fg:x="367749" fg:w="562"/><text x="65.7532%" y="175.50"></text></g><g><title>esp`esp::var::sparse::SparseMatUpperTri::sort_remove_duplicates (16,388 samples, 2.92%)</title><rect x="62.7039%" y="197" width="2.9190%" height="15" fill="rgb(219,207,3)" fg:x="352033" fg:w="16388"/><text x="62.9539%" y="207.50">es..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (65 samples, 0.01%)</title><rect x="65.6114%" y="181" width="0.0116%" height="15" fill="rgb(222,56,46)" fg:x="368356" fg:w="65"/><text x="65.8614%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::expand_sparse_ham_rows (87 samples, 0.02%)</title><rect x="65.6229%" y="197" width="0.0155%" height="15" fill="rgb(239,76,54)" fg:x="368421" fg:w="87"/><text x="65.8729%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15,477 samples, 2.76%)</title><rect x="65.6384%" y="197" width="2.7568%" height="15" fill="rgb(231,124,27)" fg:x="368508" fg:w="15477"/><text x="65.8884%" y="207.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,648 samples, 0.47%)</title><rect x="67.9235%" y="181" width="0.4717%" height="15" fill="rgb(249,195,6)" fg:x="381337" fg:w="2648"/><text x="68.1735%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,755 samples, 0.31%)</title><rect x="69.1779%" y="181" width="0.3126%" height="15" fill="rgb(237,174,47)" fg:x="388379" fg:w="1755"/><text x="69.4279%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (255 samples, 0.05%)</title><rect x="69.9019%" y="165" width="0.0454%" height="15" fill="rgb(206,201,31)" fg:x="392444" fg:w="255"/><text x="70.1519%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,513 samples, 0.45%)</title><rect x="71.5490%" y="149" width="0.4476%" height="15" fill="rgb(231,57,52)" fg:x="401691" fg:w="2513"/><text x="71.7990%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (226 samples, 0.04%)</title><rect x="72.0155%" y="101" width="0.0403%" height="15" fill="rgb(248,177,22)" fg:x="404310" fg:w="226"/><text x="72.2655%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (173 samples, 0.03%)</title><rect x="72.0249%" y="85" width="0.0308%" height="15" fill="rgb(215,211,37)" fg:x="404363" fg:w="173"/><text x="72.2749%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (414 samples, 0.07%)</title><rect x="72.0019%" y="133" width="0.0737%" height="15" fill="rgb(241,128,51)" fg:x="404234" fg:w="414"/><text x="72.2519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (397 samples, 0.07%)</title><rect x="72.0050%" y="117" width="0.0707%" height="15" fill="rgb(227,165,31)" fg:x="404251" fg:w="397"/><text x="72.2550%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (110 samples, 0.02%)</title><rect x="72.0561%" y="101" width="0.0196%" height="15" fill="rgb(228,167,24)" fg:x="404538" fg:w="110"/><text x="72.3061%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (70 samples, 0.01%)</title><rect x="72.0632%" y="85" width="0.0125%" height="15" fill="rgb(228,143,12)" fg:x="404578" fg:w="70"/><text x="72.3132%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (502 samples, 0.09%)</title><rect x="72.0764%" y="133" width="0.0894%" height="15" fill="rgb(249,149,8)" fg:x="404652" fg:w="502"/><text x="72.3264%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (956 samples, 0.17%)</title><rect x="71.9966%" y="149" width="0.1703%" height="15" fill="rgb(243,35,44)" fg:x="404204" fg:w="956"/><text x="72.2466%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (282 samples, 0.05%)</title><rect x="72.1669%" y="149" width="0.0502%" height="15" fill="rgb(246,89,9)" fg:x="405160" fg:w="282"/><text x="72.4169%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (102 samples, 0.02%)</title><rect x="72.2173%" y="149" width="0.0182%" height="15" fill="rgb(233,213,13)" fg:x="405443" fg:w="102"/><text x="72.4673%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (75 samples, 0.01%)</title><rect x="72.2404%" y="149" width="0.0134%" height="15" fill="rgb(233,141,41)" fg:x="405573" fg:w="75"/><text x="72.4904%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (61 samples, 0.01%)</title><rect x="72.2538%" y="149" width="0.0109%" height="15" fill="rgb(239,167,4)" fg:x="405648" fg:w="61"/><text x="72.5038%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13,021 samples, 2.32%)</title><rect x="69.9473%" y="165" width="2.3193%" height="15" fill="rgb(209,217,16)" fg:x="392699" fg:w="13021"/><text x="70.1973%" y="175.50">e..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15,605 samples, 2.78%)</title><rect x="69.4905%" y="181" width="2.7796%" height="15" fill="rgb(219,88,35)" fg:x="390134" fg:w="15605"/><text x="69.7405%" y="191.50">es..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21,764 samples, 3.88%)</title><rect x="68.3952%" y="197" width="3.8766%" height="15" fill="rgb(220,193,23)" fg:x="383985" fg:w="21764"/><text x="68.6452%" y="207.50">esp`..</text></g><g><title>esp`hashbrown::map::make_hash (3,600 samples, 0.64%)</title><rect x="72.2718%" y="197" width="0.6412%" height="15" fill="rgb(230,90,52)" fg:x="405749" fg:w="3600"/><text x="72.5218%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,055 samples, 0.37%)</title><rect x="72.5470%" y="181" width="0.3660%" height="15" fill="rgb(252,106,19)" fg:x="407294" fg:w="2055"/><text x="72.7970%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (98 samples, 0.02%)</title><rect x="72.9130%" y="197" width="0.0175%" height="15" fill="rgb(206,74,20)" fg:x="409349" fg:w="98"/><text x="73.1630%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (36,701 samples, 6.54%)</title><rect x="72.9305%" y="197" width="6.5372%" height="15" fill="rgb(230,138,44)" fg:x="409447" fg:w="36701"/><text x="73.1805%" y="207.50">esp`std::..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (6,623 samples, 1.18%)</title><rect x="78.2880%" y="181" width="1.1797%" height="15" fill="rgb(235,182,43)" fg:x="439525" fg:w="6623"/><text x="78.5380%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (261 samples, 0.05%)</title><rect x="79.4680%" y="197" width="0.0465%" height="15" fill="rgb(242,16,51)" fg:x="446150" fg:w="261"/><text x="79.7180%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (85 samples, 0.02%)</title><rect x="79.8540%" y="165" width="0.0151%" height="15" fill="rgb(248,9,4)" fg:x="448317" fg:w="85"/><text x="80.1040%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16,814 samples, 2.99%)</title><rect x="79.7398%" y="181" width="2.9949%" height="15" fill="rgb(210,31,22)" fg:x="447676" fg:w="16814"/><text x="79.9898%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16,088 samples, 2.87%)</title><rect x="79.8691%" y="165" width="2.8656%" height="15" fill="rgb(239,54,39)" fg:x="448402" fg:w="16088"/><text x="80.1191%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6,798 samples, 1.21%)</title><rect x="81.5238%" y="149" width="1.2109%" height="15" fill="rgb(230,99,41)" fg:x="457692" fg:w="6798"/><text x="81.7738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,496 samples, 0.27%)</title><rect x="82.4682%" y="133" width="0.2665%" height="15" fill="rgb(253,106,12)" fg:x="462994" fg:w="1496"/><text x="82.7182%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18,135 samples, 3.23%)</title><rect x="79.5145%" y="197" width="3.2302%" height="15" fill="rgb(213,46,41)" fg:x="446411" fg:w="18135"/><text x="79.7645%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (148 samples, 0.03%)</title><rect x="82.7447%" y="197" width="0.0264%" height="15" fill="rgb(215,133,35)" fg:x="464546" fg:w="148"/><text x="82.9947%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (189 samples, 0.03%)</title><rect x="82.7710%" y="197" width="0.0337%" height="15" fill="rgb(213,28,5)" fg:x="464694" fg:w="189"/><text x="83.0210%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (138 samples, 0.02%)</title><rect x="82.8047%" y="197" width="0.0246%" height="15" fill="rgb(215,77,49)" fg:x="464883" fg:w="138"/><text x="83.0547%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (150 samples, 0.03%)</title><rect x="82.8293%" y="197" width="0.0267%" height="15" fill="rgb(248,100,22)" fg:x="465021" fg:w="150"/><text x="83.0793%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (131 samples, 0.02%)</title><rect x="82.8327%" y="181" width="0.0233%" height="15" fill="rgb(208,67,9)" fg:x="465040" fg:w="131"/><text x="83.0827%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (131 samples, 0.02%)</title><rect x="82.8327%" y="165" width="0.0233%" height="15" fill="rgb(219,133,21)" fg:x="465040" fg:w="131"/><text x="83.0827%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (117 samples, 0.02%)</title><rect x="82.8599%" y="197" width="0.0208%" height="15" fill="rgb(246,46,29)" fg:x="465193" fg:w="117"/><text x="83.1099%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (392 samples, 0.07%)</title><rect x="82.8817%" y="197" width="0.0698%" height="15" fill="rgb(246,185,52)" fg:x="465315" fg:w="392"/><text x="83.1317%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (161 samples, 0.03%)</title><rect x="82.9549%" y="197" width="0.0287%" height="15" fill="rgb(252,136,11)" fg:x="465726" fg:w="161"/><text x="83.2049%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (293,373 samples, 52.26%)</title><rect x="30.7285%" y="213" width="52.2554%" height="15" fill="rgb(219,138,53)" fg:x="172516" fg:w="293373"/><text x="30.9785%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el (84 samples, 0.01%)</title><rect x="82.9839%" y="213" width="0.0150%" height="15" fill="rgb(211,51,23)" fg:x="465889" fg:w="84"/><text x="83.2339%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (347 samples, 0.06%)</title><rect x="82.9989%" y="213" width="0.0618%" height="15" fill="rgb(247,221,28)" fg:x="465973" fg:w="347"/><text x="83.2489%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (88 samples, 0.02%)</title><rect x="83.0607%" y="213" width="0.0157%" height="15" fill="rgb(251,222,45)" fg:x="466320" fg:w="88"/><text x="83.3107%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (100 samples, 0.02%)</title><rect x="83.0763%" y="213" width="0.0178%" height="15" fill="rgb(217,162,53)" fg:x="466408" fg:w="100"/><text x="83.3263%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (338 samples, 0.06%)</title><rect x="83.0959%" y="213" width="0.0602%" height="15" fill="rgb(229,93,14)" fg:x="466518" fg:w="338"/><text x="83.3459%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (102 samples, 0.02%)</title><rect x="83.1568%" y="213" width="0.0182%" height="15" fill="rgb(209,67,49)" fg:x="466860" fg:w="102"/><text x="83.4068%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (91 samples, 0.02%)</title><rect x="83.1763%" y="213" width="0.0162%" height="15" fill="rgb(213,87,29)" fg:x="466969" fg:w="91"/><text x="83.4263%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (462,507 samples, 82.38%)</title><rect x="0.8115%" y="229" width="82.3815%" height="15" fill="rgb(205,151,52)" fg:x="4556" fg:w="462507"/><text x="1.0615%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (136 samples, 0.02%)</title><rect x="83.8902%" y="213" width="0.0242%" height="15" fill="rgb(253,215,39)" fg:x="470977" fg:w="136"/><text x="84.1402%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (131 samples, 0.02%)</title><rect x="83.9149%" y="133" width="0.0233%" height="15" fill="rgb(221,220,41)" fg:x="471116" fg:w="131"/><text x="84.1649%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (131 samples, 0.02%)</title><rect x="83.9149%" y="117" width="0.0233%" height="15" fill="rgb(218,133,21)" fg:x="471116" fg:w="131"/><text x="84.1649%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (131 samples, 0.02%)</title><rect x="83.9149%" y="101" width="0.0233%" height="15" fill="rgb(221,193,43)" fg:x="471116" fg:w="131"/><text x="84.1649%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (144 samples, 0.03%)</title><rect x="83.9144%" y="213" width="0.0256%" height="15" fill="rgb(240,128,52)" fg:x="471113" fg:w="144"/><text x="84.1644%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (144 samples, 0.03%)</title><rect x="83.9144%" y="197" width="0.0256%" height="15" fill="rgb(253,114,12)" fg:x="471113" fg:w="144"/><text x="84.1644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (144 samples, 0.03%)</title><rect x="83.9144%" y="181" width="0.0256%" height="15" fill="rgb(215,223,47)" fg:x="471113" fg:w="144"/><text x="84.1644%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (144 samples, 0.03%)</title><rect x="83.9144%" y="165" width="0.0256%" height="15" fill="rgb(248,225,23)" fg:x="471113" fg:w="144"/><text x="84.1644%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (144 samples, 0.03%)</title><rect x="83.9144%" y="149" width="0.0256%" height="15" fill="rgb(250,108,0)" fg:x="471113" fg:w="144"/><text x="84.1644%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (333 samples, 0.06%)</title><rect x="83.9400%" y="213" width="0.0593%" height="15" fill="rgb(228,208,7)" fg:x="471257" fg:w="333"/><text x="84.1900%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (270 samples, 0.05%)</title><rect x="83.9994%" y="213" width="0.0481%" height="15" fill="rgb(244,45,10)" fg:x="471590" fg:w="270"/><text x="84.2494%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (54,065 samples, 9.63%)</title><rect x="84.0474%" y="213" width="9.6300%" height="15" fill="rgb(207,125,25)" fg:x="471860" fg:w="54065"/><text x="84.2974%" y="223.50">esp`esp::ham::..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (27,579 samples, 4.91%)</title><rect x="88.7651%" y="197" width="4.9124%" height="15" fill="rgb(210,195,18)" fg:x="498346" fg:w="27579"/><text x="89.0151%" y="207.50">esp`es..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (1,387 samples, 0.25%)</title><rect x="93.6775%" y="213" width="0.2471%" height="15" fill="rgb(249,80,12)" fg:x="525925" fg:w="1387"/><text x="93.9275%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,978 samples, 0.35%)</title><rect x="93.9245%" y="213" width="0.3523%" height="15" fill="rgb(221,65,9)" fg:x="527312" fg:w="1978"/><text x="94.1745%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,504 samples, 0.27%)</title><rect x="94.0090%" y="197" width="0.2679%" height="15" fill="rgb(235,49,36)" fg:x="527786" fg:w="1504"/><text x="94.2590%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1,433 samples, 0.26%)</title><rect x="94.2768%" y="213" width="0.2552%" height="15" fill="rgb(225,32,20)" fg:x="529290" fg:w="1433"/><text x="94.5268%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,001 samples, 0.18%)</title><rect x="94.3538%" y="197" width="0.1783%" height="15" fill="rgb(215,141,46)" fg:x="529722" fg:w="1001"/><text x="94.6038%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (111 samples, 0.02%)</title><rect x="94.5321%" y="213" width="0.0198%" height="15" fill="rgb(250,160,47)" fg:x="530723" fg:w="111"/><text x="94.7821%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (80 samples, 0.01%)</title><rect x="94.5376%" y="197" width="0.0142%" height="15" fill="rgb(216,222,40)" fg:x="530754" fg:w="80"/><text x="94.7876%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (26,485 samples, 4.72%)</title><rect x="94.5519%" y="213" width="4.7175%" height="15" fill="rgb(234,217,39)" fg:x="530834" fg:w="26485"/><text x="94.8019%" y="223.50">esp`h..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (3,293 samples, 0.59%)</title><rect x="98.6828%" y="197" width="0.5865%" height="15" fill="rgb(207,178,40)" fg:x="554026" fg:w="3293"/><text x="98.9328%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (57 samples, 0.01%)</title><rect x="99.2863%" y="197" width="0.0102%" height="15" fill="rgb(221,136,13)" fg:x="557414" fg:w="57"/><text x="99.5363%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (186 samples, 0.03%)</title><rect x="99.3775%" y="165" width="0.0331%" height="15" fill="rgb(249,199,10)" fg:x="557926" fg:w="186"/><text x="99.6275%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (111 samples, 0.02%)</title><rect x="99.3908%" y="149" width="0.0198%" height="15" fill="rgb(249,222,13)" fg:x="558001" fg:w="111"/><text x="99.6408%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (143 samples, 0.03%)</title><rect x="99.4163%" y="165" width="0.0255%" height="15" fill="rgb(244,185,38)" fg:x="558144" fg:w="143"/><text x="99.6663%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (143 samples, 0.03%)</title><rect x="99.4163%" y="149" width="0.0255%" height="15" fill="rgb(236,202,9)" fg:x="558144" fg:w="143"/><text x="99.6663%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (143 samples, 0.03%)</title><rect x="99.4163%" y="133" width="0.0255%" height="15" fill="rgb(250,229,37)" fg:x="558144" fg:w="143"/><text x="99.6663%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (969 samples, 0.17%)</title><rect x="99.2694%" y="213" width="0.1726%" height="15" fill="rgb(206,174,23)" fg:x="557319" fg:w="969"/><text x="99.5194%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (817 samples, 0.15%)</title><rect x="99.2964%" y="197" width="0.1455%" height="15" fill="rgb(211,33,43)" fg:x="557471" fg:w="817"/><text x="99.5464%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (667 samples, 0.12%)</title><rect x="99.3231%" y="181" width="0.1188%" height="15" fill="rgb(245,58,50)" fg:x="557621" fg:w="667"/><text x="99.5731%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,001 samples, 0.36%)</title><rect x="99.4420%" y="213" width="0.3564%" height="15" fill="rgb(244,68,36)" fg:x="558288" fg:w="2001"/><text x="99.6920%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (716 samples, 0.13%)</title><rect x="99.6708%" y="197" width="0.1275%" height="15" fill="rgb(232,229,15)" fg:x="559573" fg:w="716"/><text x="99.9208%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (93,260 samples, 16.61%)</title><rect x="83.1930%" y="229" width="16.6114%" height="15" fill="rgb(254,30,23)" fg:x="467063" fg:w="93260"/><text x="83.4430%" y="239.50">esp`esp::wf::Wf::get_new_d..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (58 samples, 0.01%)</title><rect x="99.8044%" y="229" width="0.0103%" height="15" fill="rgb(235,160,14)" fg:x="560323" fg:w="58"/><text x="100.0544%" y="239.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (111 samples, 0.02%)</title><rect x="99.8151%" y="229" width="0.0198%" height="15" fill="rgb(212,155,44)" fg:x="560383" fg:w="111"/><text x="100.0651%" y="239.50"></text></g><g><title>esp`esp::var::variational (555,993 samples, 99.03%)</title><rect x="0.8044%" y="245" width="99.0332%" height="15" fill="rgb(226,2,50)" fg:x="4516" fg:w="555993"/><text x="1.0544%" y="255.50">esp`esp::var::variational</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (85 samples, 0.02%)</title><rect x="99.8616%" y="197" width="0.0151%" height="15" fill="rgb(234,177,6)" fg:x="560644" fg:w="85"/><text x="100.1116%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (85 samples, 0.02%)</title><rect x="99.8616%" y="181" width="0.0151%" height="15" fill="rgb(217,24,9)" fg:x="560644" fg:w="85"/><text x="100.1116%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (85 samples, 0.02%)</title><rect x="99.8616%" y="165" width="0.0151%" height="15" fill="rgb(220,13,46)" fg:x="560644" fg:w="85"/><text x="100.1116%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (84 samples, 0.01%)</title><rect x="99.8618%" y="149" width="0.0150%" height="15" fill="rgb(239,221,27)" fg:x="560645" fg:w="84"/><text x="100.1118%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (84 samples, 0.01%)</title><rect x="99.8618%" y="133" width="0.0150%" height="15" fill="rgb(222,198,25)" fg:x="560645" fg:w="84"/><text x="100.1118%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (69 samples, 0.01%)</title><rect x="99.8645%" y="117" width="0.0123%" height="15" fill="rgb(211,99,13)" fg:x="560660" fg:w="69"/><text x="100.1145%" y="127.50"></text></g><g><title>esp`alloc::slice::merge_sort (122 samples, 0.02%)</title><rect x="99.8767%" y="197" width="0.0217%" height="15" fill="rgb(232,111,31)" fg:x="560729" fg:w="122"/><text x="100.1267%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (367 samples, 0.07%)</title><rect x="99.8379%" y="213" width="0.0654%" height="15" fill="rgb(245,82,37)" fg:x="560511" fg:w="367"/><text x="100.0879%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (516 samples, 0.09%)</title><rect x="99.8376%" y="245" width="0.0919%" height="15" fill="rgb(227,149,46)" fg:x="560509" fg:w="516"/><text x="100.0876%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (515 samples, 0.09%)</title><rect x="99.8377%" y="229" width="0.0917%" height="15" fill="rgb(218,36,50)" fg:x="560510" fg:w="515"/><text x="100.0877%" y="239.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (147 samples, 0.03%)</title><rect x="99.9033%" y="213" width="0.0262%" height="15" fill="rgb(226,80,48)" fg:x="560878" fg:w="147"/><text x="100.1533%" y="223.50"></text></g><g><title>esp`main (561,051 samples, 99.93%)</title><rect x="0.0000%" y="325" width="99.9341%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="561051"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (561,051 samples, 99.93%)</title><rect x="0.0000%" y="309" width="99.9341%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="561051"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (561,051 samples, 99.93%)</title><rect x="0.0000%" y="293" width="99.9341%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="561051"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (561,051 samples, 99.93%)</title><rect x="0.0000%" y="277" width="99.9341%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="561051"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (561,051 samples, 99.93%)</title><rect x="0.0000%" y="261" width="99.9341%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="561051"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>0x1 (561,420 samples, 100.00%)</title><rect x="0.0000%" y="357" width="99.9998%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="561420"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (561,420 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9998%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="561420"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (369 samples, 0.07%)</title><rect x="99.9341%" y="325" width="0.0657%" height="15" fill="rgb(234,36,40)" fg:x="561051" fg:w="369"/><text x="100.1841%" y="335.50"></text></g><g><title>all (561,421 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="561421"/><text x="0.2500%" y="383.50"></text></g></svg></svg>