<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="133169"><g><title>esp`esp::stoch::alias::Alias::new (51 samples, 0.04%)</title><rect x="0.0728%" y="213" width="0.0383%" height="15" fill="rgb(227,0,7)" fg:x="97" fg:w="51"/><text x="0.3228%" y="223.50"></text></g><g><title>esp`esp::stoch::matmul_sample_remaining (20 samples, 0.02%)</title><rect x="0.1111%" y="213" width="0.0150%" height="15" fill="rgb(217,0,24)" fg:x="148" fg:w="20"/><text x="0.3611%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.03%)</title><rect x="1.3592%" y="197" width="0.0270%" height="15" fill="rgb(221,193,54)" fg:x="1810" fg:w="36"/><text x="1.6092%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.02%)</title><rect x="1.3862%" y="197" width="0.0180%" height="15" fill="rgb(248,212,6)" fg:x="1846" fg:w="24"/><text x="1.6362%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (24 samples, 0.02%)</title><rect x="1.3862%" y="181" width="0.0180%" height="15" fill="rgb(208,68,35)" fg:x="1846" fg:w="24"/><text x="1.6362%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.02%)</title><rect x="1.3862%" y="165" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="1846" fg:w="24"/><text x="1.6362%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.02%)</title><rect x="1.3862%" y="149" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="1846" fg:w="24"/><text x="1.6362%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (24 samples, 0.02%)</title><rect x="1.3862%" y="133" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="1846" fg:w="24"/><text x="1.6362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (19 samples, 0.01%)</title><rect x="1.3900%" y="117" width="0.0143%" height="15" fill="rgb(218,30,26)" fg:x="1851" fg:w="19"/><text x="1.6400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (19 samples, 0.01%)</title><rect x="1.3900%" y="101" width="0.0143%" height="15" fill="rgb(220,122,19)" fg:x="1851" fg:w="19"/><text x="1.6400%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (19 samples, 0.01%)</title><rect x="1.3900%" y="85" width="0.0143%" height="15" fill="rgb(250,228,42)" fg:x="1851" fg:w="19"/><text x="1.6400%" y="95.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (46 samples, 0.03%)</title><rect x="1.4042%" y="197" width="0.0345%" height="15" fill="rgb(240,193,28)" fg:x="1870" fg:w="46"/><text x="1.6542%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (115 samples, 0.09%)</title><rect x="1.4433%" y="197" width="0.0864%" height="15" fill="rgb(216,20,37)" fg:x="1922" fg:w="115"/><text x="1.6933%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (28 samples, 0.02%)</title><rect x="1.5086%" y="181" width="0.0210%" height="15" fill="rgb(206,188,39)" fg:x="2009" fg:w="28"/><text x="1.7586%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (3,154 samples, 2.37%)</title><rect x="1.5296%" y="197" width="2.3684%" height="15" fill="rgb(217,207,13)" fg:x="2037" fg:w="3154"/><text x="1.7796%" y="207.50">es..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,669 samples, 1.25%)</title><rect x="2.6448%" y="181" width="1.2533%" height="15" fill="rgb(231,73,38)" fg:x="3522" fg:w="1669"/><text x="2.8948%" y="191.50"></text></g><g><title>esp`esp::stoch::alias::Alias::new (2,100 samples, 1.58%)</title><rect x="5.0913%" y="181" width="1.5769%" height="15" fill="rgb(225,20,46)" fg:x="6780" fg:w="2100"/><text x="5.3413%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (69 samples, 0.05%)</title><rect x="6.6164%" y="165" width="0.0518%" height="15" fill="rgb(210,31,41)" fg:x="8811" fg:w="69"/><text x="6.8664%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (69 samples, 0.05%)</title><rect x="6.6164%" y="149" width="0.0518%" height="15" fill="rgb(221,200,47)" fg:x="8811" fg:w="69"/><text x="6.8664%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (69 samples, 0.05%)</title><rect x="6.6164%" y="133" width="0.0518%" height="15" fill="rgb(226,26,5)" fg:x="8811" fg:w="69"/><text x="6.8664%" y="143.50"></text></g><g><title>esp`esp::stoch::generate_screened_sampler (3,781 samples, 2.84%)</title><rect x="3.8981%" y="197" width="2.8392%" height="15" fill="rgb(249,33,26)" fg:x="5191" fg:w="3781"/><text x="4.1481%" y="207.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (92 samples, 0.07%)</title><rect x="6.6682%" y="181" width="0.0691%" height="15" fill="rgb(235,183,28)" fg:x="8880" fg:w="92"/><text x="6.9182%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (92 samples, 0.07%)</title><rect x="6.6682%" y="165" width="0.0691%" height="15" fill="rgb(221,5,38)" fg:x="8880" fg:w="92"/><text x="6.9182%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (92 samples, 0.07%)</title><rect x="6.6682%" y="149" width="0.0691%" height="15" fill="rgb(247,18,42)" fg:x="8880" fg:w="92"/><text x="6.9182%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (25 samples, 0.02%)</title><rect x="7.0242%" y="181" width="0.0188%" height="15" fill="rgb(241,131,45)" fg:x="9354" fg:w="25"/><text x="7.2742%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (649 samples, 0.49%)</title><rect x="7.0429%" y="181" width="0.4874%" height="15" fill="rgb(249,31,29)" fg:x="9379" fg:w="649"/><text x="7.2929%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (640 samples, 0.48%)</title><rect x="7.0497%" y="165" width="0.4806%" height="15" fill="rgb(225,111,53)" fg:x="9388" fg:w="640"/><text x="7.2997%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (441 samples, 0.33%)</title><rect x="7.1991%" y="149" width="0.3312%" height="15" fill="rgb(238,160,17)" fg:x="9587" fg:w="441"/><text x="7.4491%" y="159.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,021 samples, 0.77%)</title><rect x="7.5303%" y="181" width="0.7667%" height="15" fill="rgb(214,148,48)" fg:x="10028" fg:w="1021"/><text x="7.7803%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (787 samples, 0.59%)</title><rect x="7.7060%" y="165" width="0.5910%" height="15" fill="rgb(232,36,49)" fg:x="10262" fg:w="787"/><text x="7.9560%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (31 samples, 0.02%)</title><rect x="8.2970%" y="181" width="0.0233%" height="15" fill="rgb(209,103,24)" fg:x="11049" fg:w="31"/><text x="8.5470%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (21 samples, 0.02%)</title><rect x="8.3045%" y="165" width="0.0158%" height="15" fill="rgb(229,88,8)" fg:x="11059" fg:w="21"/><text x="8.5545%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (18 samples, 0.01%)</title><rect x="8.3338%" y="165" width="0.0135%" height="15" fill="rgb(213,181,19)" fg:x="11098" fg:w="18"/><text x="8.5838%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (41 samples, 0.03%)</title><rect x="8.4254%" y="133" width="0.0308%" height="15" fill="rgb(254,191,54)" fg:x="11220" fg:w="41"/><text x="8.6754%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (25 samples, 0.02%)</title><rect x="8.4374%" y="117" width="0.0188%" height="15" fill="rgb(241,83,37)" fg:x="11236" fg:w="25"/><text x="8.6874%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (199 samples, 0.15%)</title><rect x="8.3203%" y="181" width="0.1494%" height="15" fill="rgb(233,36,39)" fg:x="11080" fg:w="199"/><text x="8.5703%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (163 samples, 0.12%)</title><rect x="8.3473%" y="165" width="0.1224%" height="15" fill="rgb(226,3,54)" fg:x="11116" fg:w="163"/><text x="8.5973%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (126 samples, 0.09%)</title><rect x="8.3751%" y="149" width="0.0946%" height="15" fill="rgb(245,192,40)" fg:x="11153" fg:w="126"/><text x="8.6251%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (26 samples, 0.02%)</title><rect x="8.4697%" y="181" width="0.0195%" height="15" fill="rgb(238,167,29)" fg:x="11279" fg:w="26"/><text x="8.7197%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (17 samples, 0.01%)</title><rect x="8.4764%" y="165" width="0.0128%" height="15" fill="rgb(232,182,51)" fg:x="11288" fg:w="17"/><text x="8.7264%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (2,334 samples, 1.75%)</title><rect x="6.7373%" y="197" width="1.7527%" height="15" fill="rgb(231,60,39)" fg:x="8972" fg:w="2334"/><text x="6.9873%" y="207.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (357 samples, 0.27%)</title><rect x="8.4900%" y="197" width="0.2681%" height="15" fill="rgb(208,69,12)" fg:x="11306" fg:w="357"/><text x="8.7400%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,155 samples, 1.62%)</title><rect x="8.7588%" y="197" width="1.6182%" height="15" fill="rgb(235,93,37)" fg:x="11664" fg:w="2155"/><text x="9.0088%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (405 samples, 0.30%)</title><rect x="10.0729%" y="181" width="0.3041%" height="15" fill="rgb(213,116,39)" fg:x="13414" fg:w="405"/><text x="10.3229%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_semistoch_singles (13,995 samples, 10.51%)</title><rect x="0.1262%" y="213" width="10.5092%" height="15" fill="rgb(222,207,29)" fg:x="168" fg:w="13995"/><text x="0.3762%" y="223.50">esp`esp::wf::Wf..</text></g><g><title>esp`hashbrown::map::make_hash (343 samples, 0.26%)</title><rect x="10.3778%" y="197" width="0.2576%" height="15" fill="rgb(206,96,30)" fg:x="13820" fg:w="343"/><text x="10.6278%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (191 samples, 0.14%)</title><rect x="10.4919%" y="181" width="0.1434%" height="15" fill="rgb(218,138,4)" fg:x="13972" fg:w="191"/><text x="10.7419%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (24 samples, 0.02%)</title><rect x="10.6391%" y="213" width="0.0180%" height="15" fill="rgb(250,191,14)" fg:x="14168" fg:w="24"/><text x="10.8891%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.01%)</title><rect x="10.6631%" y="213" width="0.0105%" height="15" fill="rgb(239,60,40)" fg:x="14200" fg:w="14"/><text x="10.9131%" y="223.50"></text></g><g><title>esp`esp::semistoch::faster_semistoch_enpt2 (14,422 samples, 10.83%)</title><rect x="0.0083%" y="229" width="10.8298%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="14422"/><text x="0.2583%" y="239.50">esp`esp::semisto..</text></g><g><title>libsystem_malloc.dylib`free_large (219 samples, 0.16%)</title><rect x="10.6737%" y="213" width="0.1645%" height="15" fill="rgb(225,35,8)" fg:x="14214" fg:w="219"/><text x="10.9237%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (219 samples, 0.16%)</title><rect x="10.6737%" y="197" width="0.1645%" height="15" fill="rgb(250,213,24)" fg:x="14214" fg:w="219"/><text x="10.9237%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (219 samples, 0.16%)</title><rect x="10.6737%" y="181" width="0.1645%" height="15" fill="rgb(247,123,22)" fg:x="14214" fg:w="219"/><text x="10.9237%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1,752 samples, 1.32%)</title><rect x="11.6243%" y="181" width="1.3156%" height="15" fill="rgb(231,138,38)" fg:x="15480" fg:w="1752"/><text x="11.8743%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1,736 samples, 1.30%)</title><rect x="11.6363%" y="165" width="1.3036%" height="15" fill="rgb(231,145,46)" fg:x="15496" fg:w="1736"/><text x="11.8863%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1,870 samples, 1.40%)</title><rect x="11.5417%" y="197" width="1.4042%" height="15" fill="rgb(251,118,11)" fg:x="15370" fg:w="1870"/><text x="11.7917%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (225 samples, 0.17%)</title><rect x="15.2077%" y="165" width="0.1690%" height="15" fill="rgb(217,147,25)" fg:x="20252" fg:w="225"/><text x="15.4577%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (225 samples, 0.17%)</title><rect x="15.2077%" y="149" width="0.1690%" height="15" fill="rgb(247,81,37)" fg:x="20252" fg:w="225"/><text x="15.4577%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (16 samples, 0.01%)</title><rect x="15.3782%" y="165" width="0.0120%" height="15" fill="rgb(209,12,38)" fg:x="20479" fg:w="16"/><text x="15.6282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (351 samples, 0.26%)</title><rect x="15.3910%" y="165" width="0.2636%" height="15" fill="rgb(227,1,9)" fg:x="20496" fg:w="351"/><text x="15.6410%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (175 samples, 0.13%)</title><rect x="15.5231%" y="149" width="0.1314%" height="15" fill="rgb(248,47,43)" fg:x="20672" fg:w="175"/><text x="15.7731%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (698 samples, 0.52%)</title><rect x="15.6545%" y="165" width="0.5241%" height="15" fill="rgb(221,10,30)" fg:x="20847" fg:w="698"/><text x="15.9045%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1,552 samples, 1.17%)</title><rect x="16.1787%" y="165" width="1.1654%" height="15" fill="rgb(210,229,1)" fg:x="21545" fg:w="1552"/><text x="16.4287%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (226 samples, 0.17%)</title><rect x="17.3441%" y="165" width="0.1697%" height="15" fill="rgb(222,148,37)" fg:x="23097" fg:w="226"/><text x="17.5941%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (50 samples, 0.04%)</title><rect x="17.4763%" y="149" width="0.0375%" height="15" fill="rgb(234,67,33)" fg:x="23273" fg:w="50"/><text x="17.7263%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (188 samples, 0.14%)</title><rect x="17.5138%" y="165" width="0.1412%" height="15" fill="rgb(247,98,35)" fg:x="23323" fg:w="188"/><text x="17.7638%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,092 samples, 1.57%)</title><rect x="17.7436%" y="149" width="1.5709%" height="15" fill="rgb(247,138,52)" fg:x="23629" fg:w="2092"/><text x="17.9936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (63 samples, 0.05%)</title><rect x="19.3146%" y="149" width="0.0473%" height="15" fill="rgb(213,79,30)" fg:x="25721" fg:w="63"/><text x="19.5646%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8,107 samples, 6.09%)</title><rect x="13.2861%" y="181" width="6.0878%" height="15" fill="rgb(246,177,23)" fg:x="17693" fg:w="8107"/><text x="13.5361%" y="191.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2,289 samples, 1.72%)</title><rect x="17.6550%" y="165" width="1.7189%" height="15" fill="rgb(230,62,27)" fg:x="23511" fg:w="2289"/><text x="17.9050%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (16 samples, 0.01%)</title><rect x="19.3619%" y="149" width="0.0120%" height="15" fill="rgb(216,154,8)" fg:x="25784" fg:w="16"/><text x="19.6119%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8,566 samples, 6.43%)</title><rect x="12.9460%" y="197" width="6.4324%" height="15" fill="rgb(244,35,45)" fg:x="17240" fg:w="8566"/><text x="13.1960%" y="207.50">libsyste..</text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,295 samples, 8.48%)</title><rect x="10.9072%" y="213" width="8.4817%" height="15" fill="rgb(251,115,12)" fg:x="14525" fg:w="11295"/><text x="11.1572%" y="223.50">esp`&lt;hashbro..</text></g><g><title>esp`__rdl_dealloc (14 samples, 0.01%)</title><rect x="19.3919%" y="213" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="25824" fg:w="14"/><text x="19.6419%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (71 samples, 0.05%)</title><rect x="19.4895%" y="197" width="0.0533%" height="15" fill="rgb(233,84,52)" fg:x="25954" fg:w="71"/><text x="19.7395%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,792 samples, 1.35%)</title><rect x="19.5428%" y="197" width="1.3457%" height="15" fill="rgb(207,117,47)" fg:x="26025" fg:w="1792"/><text x="19.7928%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (234 samples, 0.18%)</title><rect x="20.7128%" y="181" width="0.1757%" height="15" fill="rgb(249,43,39)" fg:x="27583" fg:w="234"/><text x="20.9628%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (405 samples, 0.30%)</title><rect x="21.2392%" y="181" width="0.3041%" height="15" fill="rgb(209,38,44)" fg:x="28284" fg:w="405"/><text x="21.4892%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (610 samples, 0.46%)</title><rect x="23.8937%" y="149" width="0.4581%" height="15" fill="rgb(236,212,23)" fg:x="31819" fg:w="610"/><text x="24.1437%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (277 samples, 0.21%)</title><rect x="24.1438%" y="133" width="0.2080%" height="15" fill="rgb(242,79,21)" fg:x="32152" fg:w="277"/><text x="24.3938%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (22 samples, 0.02%)</title><rect x="24.8699%" y="69" width="0.0165%" height="15" fill="rgb(211,96,35)" fg:x="33119" fg:w="22"/><text x="25.1199%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (24 samples, 0.02%)</title><rect x="24.8692%" y="85" width="0.0180%" height="15" fill="rgb(253,215,40)" fg:x="33118" fg:w="24"/><text x="25.1192%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (112 samples, 0.08%)</title><rect x="24.8879%" y="85" width="0.0841%" height="15" fill="rgb(211,81,21)" fg:x="33143" fg:w="112"/><text x="25.1379%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (868 samples, 0.65%)</title><rect x="24.4606%" y="117" width="0.6518%" height="15" fill="rgb(208,190,38)" fg:x="32574" fg:w="868"/><text x="24.7106%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (812 samples, 0.61%)</title><rect x="24.5027%" y="101" width="0.6098%" height="15" fill="rgb(235,213,38)" fg:x="32630" fg:w="812"/><text x="24.7527%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (185 samples, 0.14%)</title><rect x="24.9735%" y="85" width="0.1389%" height="15" fill="rgb(237,122,38)" fg:x="33257" fg:w="185"/><text x="25.2235%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (922 samples, 0.69%)</title><rect x="24.4224%" y="133" width="0.6924%" height="15" fill="rgb(244,218,35)" fg:x="32523" fg:w="922"/><text x="24.6724%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1,547 samples, 1.16%)</title><rect x="25.1297%" y="133" width="1.1617%" height="15" fill="rgb(240,68,47)" fg:x="33465" fg:w="1547"/><text x="25.3797%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2,603 samples, 1.95%)</title><rect x="24.3518%" y="149" width="1.9547%" height="15" fill="rgb(210,16,53)" fg:x="32429" fg:w="2603"/><text x="24.6018%" y="159.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (20 samples, 0.02%)</title><rect x="26.2914%" y="133" width="0.0150%" height="15" fill="rgb(235,124,12)" fg:x="35012" fg:w="20"/><text x="26.5414%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (190 samples, 0.14%)</title><rect x="26.3064%" y="149" width="0.1427%" height="15" fill="rgb(224,169,11)" fg:x="35032" fg:w="190"/><text x="26.5564%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,415 samples, 4.07%)</title><rect x="22.3926%" y="165" width="4.0663%" height="15" fill="rgb(250,166,2)" fg:x="29820" fg:w="5415"/><text x="22.6426%" y="175.50">esp`..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (6,549 samples, 4.92%)</title><rect x="21.5433%" y="181" width="4.9178%" height="15" fill="rgb(242,216,29)" fg:x="28689" fg:w="6549"/><text x="21.7933%" y="191.50">esp`ha..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,424 samples, 5.57%)</title><rect x="20.8885%" y="197" width="5.5749%" height="15" fill="rgb(230,116,27)" fg:x="27817" fg:w="7424"/><text x="21.1385%" y="207.50">esp`has..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15 samples, 0.01%)</title><rect x="26.4634%" y="197" width="0.0113%" height="15" fill="rgb(228,99,48)" fg:x="35241" fg:w="15"/><text x="26.7134%" y="207.50"></text></g><g><title>esp`esp::pt::PtSamples::add_sample_diag_already_stored (9,416 samples, 7.07%)</title><rect x="19.4084%" y="213" width="7.0707%" height="15" fill="rgb(253,11,6)" fg:x="25846" fg:w="9416"/><text x="19.6584%" y="223.50">esp`esp::..</text></g><g><title>esp`esp::pt::PtSamples::pt_estimator (1,505 samples, 1.13%)</title><rect x="26.4791%" y="213" width="1.1301%" height="15" fill="rgb(247,143,39)" fg:x="35262" fg:w="1505"/><text x="26.7291%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (14 samples, 0.01%)</title><rect x="27.7895%" y="197" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="37007" fg:w="14"/><text x="28.0395%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (122 samples, 0.09%)</title><rect x="27.8000%" y="197" width="0.0916%" height="15" fill="rgb(233,208,19)" fg:x="37021" fg:w="122"/><text x="28.0500%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (20 samples, 0.02%)</title><rect x="27.8766%" y="181" width="0.0150%" height="15" fill="rgb(216,164,2)" fg:x="37123" fg:w="20"/><text x="28.1266%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (2,940 samples, 2.21%)</title><rect x="27.8916%" y="197" width="2.2077%" height="15" fill="rgb(220,129,5)" fg:x="37143" fg:w="2940"/><text x="28.1416%" y="207.50">e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,476 samples, 1.11%)</title><rect x="28.9910%" y="181" width="1.1084%" height="15" fill="rgb(242,17,10)" fg:x="38607" fg:w="1476"/><text x="29.2410%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (15 samples, 0.01%)</title><rect x="30.4042%" y="181" width="0.0113%" height="15" fill="rgb(242,107,0)" fg:x="40489" fg:w="15"/><text x="30.6542%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (662 samples, 0.50%)</title><rect x="30.4155%" y="181" width="0.4971%" height="15" fill="rgb(251,28,31)" fg:x="40504" fg:w="662"/><text x="30.6655%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (648 samples, 0.49%)</title><rect x="30.4260%" y="165" width="0.4866%" height="15" fill="rgb(233,223,10)" fg:x="40518" fg:w="648"/><text x="30.6760%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (458 samples, 0.34%)</title><rect x="30.5687%" y="149" width="0.3439%" height="15" fill="rgb(215,21,27)" fg:x="40708" fg:w="458"/><text x="30.8187%" y="159.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,051 samples, 0.79%)</title><rect x="30.9126%" y="181" width="0.7892%" height="15" fill="rgb(232,23,21)" fg:x="41166" fg:w="1051"/><text x="31.1626%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (756 samples, 0.57%)</title><rect x="31.1341%" y="165" width="0.5677%" height="15" fill="rgb(244,5,23)" fg:x="41461" fg:w="756"/><text x="31.3841%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (31 samples, 0.02%)</title><rect x="31.7018%" y="181" width="0.0233%" height="15" fill="rgb(226,81,46)" fg:x="42217" fg:w="31"/><text x="31.9518%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (21 samples, 0.02%)</title><rect x="31.7093%" y="165" width="0.0158%" height="15" fill="rgb(247,70,30)" fg:x="42227" fg:w="21"/><text x="31.9593%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (18 samples, 0.01%)</title><rect x="31.7379%" y="165" width="0.0135%" height="15" fill="rgb(212,68,19)" fg:x="42265" fg:w="18"/><text x="31.9879%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (49 samples, 0.04%)</title><rect x="31.8400%" y="133" width="0.0368%" height="15" fill="rgb(240,187,13)" fg:x="42401" fg:w="49"/><text x="32.0900%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (28 samples, 0.02%)</title><rect x="31.8558%" y="117" width="0.0210%" height="15" fill="rgb(223,113,26)" fg:x="42422" fg:w="28"/><text x="32.1058%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (214 samples, 0.16%)</title><rect x="31.7251%" y="181" width="0.1607%" height="15" fill="rgb(206,192,2)" fg:x="42248" fg:w="214"/><text x="31.9751%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (179 samples, 0.13%)</title><rect x="31.7514%" y="165" width="0.1344%" height="15" fill="rgb(241,108,4)" fg:x="42283" fg:w="179"/><text x="32.0014%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (141 samples, 0.11%)</title><rect x="31.7799%" y="149" width="0.1059%" height="15" fill="rgb(247,173,49)" fg:x="42321" fg:w="141"/><text x="32.0299%" y="159.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (2,428 samples, 1.82%)</title><rect x="30.0993%" y="197" width="1.8232%" height="15" fill="rgb(224,114,35)" fg:x="40083" fg:w="2428"/><text x="30.3493%" y="207.50">e..</text></g><g><title>esp`hashbrown::map::make_hash (49 samples, 0.04%)</title><rect x="31.8858%" y="181" width="0.0368%" height="15" fill="rgb(245,159,27)" fg:x="42462" fg:w="49"/><text x="32.1358%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (27 samples, 0.02%)</title><rect x="31.9023%" y="165" width="0.0203%" height="15" fill="rgb(245,172,44)" fg:x="42484" fg:w="27"/><text x="32.1523%" y="175.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (79 samples, 0.06%)</title><rect x="31.9226%" y="197" width="0.0593%" height="15" fill="rgb(236,23,11)" fg:x="42511" fg:w="79"/><text x="32.1726%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (735 samples, 0.55%)</title><rect x="31.9819%" y="197" width="0.5519%" height="15" fill="rgb(205,117,38)" fg:x="42590" fg:w="735"/><text x="32.2319%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (131 samples, 0.10%)</title><rect x="32.4355%" y="181" width="0.0984%" height="15" fill="rgb(237,72,25)" fg:x="43194" fg:w="131"/><text x="32.6855%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_dtm_only (6,615 samples, 4.97%)</title><rect x="27.6175%" y="213" width="4.9674%" height="15" fill="rgb(244,70,9)" fg:x="36778" fg:w="6615"/><text x="27.8675%" y="223.50">esp`es..</text></g><g><title>esp`hashbrown::map::make_hash (67 samples, 0.05%)</title><rect x="32.5346%" y="197" width="0.0503%" height="15" fill="rgb(217,125,39)" fg:x="43326" fg:w="67"/><text x="32.7846%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.02%)</title><rect x="32.5676%" y="181" width="0.0173%" height="15" fill="rgb(235,36,10)" fg:x="43370" fg:w="23"/><text x="32.8176%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (22 samples, 0.02%)</title><rect x="32.8335%" y="197" width="0.0165%" height="15" fill="rgb(251,123,47)" fg:x="43724" fg:w="22"/><text x="33.0835%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (1,521 samples, 1.14%)</title><rect x="32.8515%" y="197" width="1.1422%" height="15" fill="rgb(221,13,13)" fg:x="43748" fg:w="1521"/><text x="33.1015%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (265 samples, 0.20%)</title><rect x="33.7947%" y="181" width="0.1990%" height="15" fill="rgb(238,131,9)" fg:x="45004" fg:w="265"/><text x="34.0447%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (182 samples, 0.14%)</title><rect x="33.9936%" y="197" width="0.1367%" height="15" fill="rgb(211,50,8)" fg:x="45269" fg:w="182"/><text x="34.2436%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (153 samples, 0.11%)</title><rect x="34.0154%" y="181" width="0.1149%" height="15" fill="rgb(245,182,24)" fg:x="45298" fg:w="153"/><text x="34.2654%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (23 samples, 0.02%)</title><rect x="34.3563%" y="101" width="0.0173%" height="15" fill="rgb(242,14,37)" fg:x="45752" fg:w="23"/><text x="34.6063%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (23 samples, 0.02%)</title><rect x="34.3563%" y="85" width="0.0173%" height="15" fill="rgb(246,228,12)" fg:x="45752" fg:w="23"/><text x="34.6063%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (23 samples, 0.02%)</title><rect x="34.3563%" y="69" width="0.0173%" height="15" fill="rgb(213,55,15)" fg:x="45752" fg:w="23"/><text x="34.6063%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (103 samples, 0.08%)</title><rect x="34.3458%" y="117" width="0.0773%" height="15" fill="rgb(209,9,3)" fg:x="45738" fg:w="103"/><text x="34.5958%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (57 samples, 0.04%)</title><rect x="34.3804%" y="101" width="0.0428%" height="15" fill="rgb(230,59,30)" fg:x="45784" fg:w="57"/><text x="34.6304%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (106 samples, 0.08%)</title><rect x="34.3443%" y="133" width="0.0796%" height="15" fill="rgb(209,121,21)" fg:x="45736" fg:w="106"/><text x="34.5943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (112 samples, 0.08%)</title><rect x="34.3421%" y="149" width="0.0841%" height="15" fill="rgb(220,109,13)" fg:x="45733" fg:w="112"/><text x="34.5921%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (116 samples, 0.09%)</title><rect x="34.3398%" y="165" width="0.0871%" height="15" fill="rgb(232,18,1)" fg:x="45730" fg:w="116"/><text x="34.5898%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (117 samples, 0.09%)</title><rect x="34.3398%" y="181" width="0.0879%" height="15" fill="rgb(215,41,42)" fg:x="45730" fg:w="117"/><text x="34.5898%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (38 samples, 0.03%)</title><rect x="34.4292%" y="181" width="0.0285%" height="15" fill="rgb(224,123,36)" fg:x="45849" fg:w="38"/><text x="34.6792%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (328 samples, 0.25%)</title><rect x="34.4577%" y="181" width="0.2463%" height="15" fill="rgb(240,125,3)" fg:x="45887" fg:w="328"/><text x="34.7077%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (112 samples, 0.08%)</title><rect x="34.7250%" y="165" width="0.0841%" height="15" fill="rgb(205,98,50)" fg:x="46243" fg:w="112"/><text x="34.9750%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (5,947 samples, 4.47%)</title><rect x="34.7040%" y="181" width="4.4658%" height="15" fill="rgb(205,185,37)" fg:x="46215" fg:w="5947"/><text x="34.9540%" y="191.50">esp`e..</text></g><g><title>esp`esp::wf::det::Det::new_diag_same (5,807 samples, 4.36%)</title><rect x="34.8092%" y="165" width="4.3606%" height="15" fill="rgb(238,207,15)" fg:x="46355" fg:w="5807"/><text x="35.0592%" y="175.50">esp`e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (3,967 samples, 2.98%)</title><rect x="36.1909%" y="149" width="2.9789%" height="15" fill="rgb(213,199,42)" fg:x="48195" fg:w="3967"/><text x="36.4409%" y="159.50">esp..</text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (14,321 samples, 10.75%)</title><rect x="39.1698%" y="181" width="10.7540%" height="15" fill="rgb(235,201,11)" fg:x="52162" fg:w="14321"/><text x="39.4198%" y="191.50">esp`esp::wf::det..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (10,412 samples, 7.82%)</title><rect x="42.1051%" y="165" width="7.8186%" height="15" fill="rgb(207,46,11)" fg:x="56071" fg:w="10412"/><text x="42.3551%" y="175.50">esp`esp::ha..</text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (97 samples, 0.07%)</title><rect x="49.9253%" y="181" width="0.0728%" height="15" fill="rgb(241,35,35)" fg:x="66485" fg:w="97"/><text x="50.1753%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (68 samples, 0.05%)</title><rect x="49.9471%" y="165" width="0.0511%" height="15" fill="rgb(243,32,47)" fg:x="66514" fg:w="68"/><text x="50.1971%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (211 samples, 0.16%)</title><rect x="50.1588%" y="165" width="0.1584%" height="15" fill="rgb(247,202,23)" fg:x="66796" fg:w="211"/><text x="50.4088%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (24 samples, 0.02%)</title><rect x="50.5981%" y="133" width="0.0180%" height="15" fill="rgb(219,102,11)" fg:x="67381" fg:w="24"/><text x="50.8481%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (529 samples, 0.40%)</title><rect x="50.6161%" y="133" width="0.3972%" height="15" fill="rgb(243,110,44)" fg:x="67405" fg:w="529"/><text x="50.8661%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (317 samples, 0.24%)</title><rect x="50.7753%" y="117" width="0.2380%" height="15" fill="rgb(222,74,54)" fg:x="67617" fg:w="317"/><text x="51.0253%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (20 samples, 0.02%)</title><rect x="51.0134%" y="133" width="0.0150%" height="15" fill="rgb(216,99,12)" fg:x="67934" fg:w="20"/><text x="51.2634%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.01%)</title><rect x="51.0284%" y="133" width="0.0128%" height="15" fill="rgb(226,22,26)" fg:x="67954" fg:w="17"/><text x="51.2784%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (822 samples, 0.62%)</title><rect x="50.4322%" y="149" width="0.6173%" height="15" fill="rgb(217,163,10)" fg:x="67160" fg:w="822"/><text x="50.6822%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,401 samples, 1.05%)</title><rect x="49.9981%" y="181" width="1.0520%" height="15" fill="rgb(213,25,53)" fg:x="66582" fg:w="1401"/><text x="50.2481%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (976 samples, 0.73%)</title><rect x="50.3173%" y="165" width="0.7329%" height="15" fill="rgb(252,105,26)" fg:x="67007" fg:w="976"/><text x="50.5673%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (341 samples, 0.26%)</title><rect x="51.0502%" y="181" width="0.2561%" height="15" fill="rgb(220,39,43)" fg:x="67983" fg:w="341"/><text x="51.3002%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (218 samples, 0.16%)</title><rect x="51.1425%" y="165" width="0.1637%" height="15" fill="rgb(229,68,48)" fg:x="68106" fg:w="218"/><text x="51.3925%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (22,876 samples, 17.18%)</title><rect x="34.1303%" y="197" width="17.1782%" height="15" fill="rgb(252,8,32)" fg:x="45451" fg:w="22876"/><text x="34.3803%" y="207.50">esp`esp::wf::Wf::add_det_wi..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (268 samples, 0.20%)</title><rect x="51.3085%" y="197" width="0.2012%" height="15" fill="rgb(223,20,43)" fg:x="68327" fg:w="268"/><text x="51.5585%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,939 samples, 1.46%)</title><rect x="51.5172%" y="197" width="1.4560%" height="15" fill="rgb(229,81,49)" fg:x="68605" fg:w="1939"/><text x="51.7672%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (216 samples, 0.16%)</title><rect x="52.8111%" y="181" width="0.1622%" height="15" fill="rgb(236,28,36)" fg:x="70328" fg:w="216"/><text x="53.0611%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::approx_matmul_external_dtm_only_compute_diags (27,162 samples, 20.40%)</title><rect x="32.5902%" y="213" width="20.3966%" height="15" fill="rgb(249,185,26)" fg:x="43400" fg:w="27162"/><text x="32.8402%" y="223.50">esp`esp::wf::det::Det::approx_ma..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (14 samples, 0.01%)</title><rect x="52.9868%" y="213" width="0.0105%" height="15" fill="rgb(249,174,33)" fg:x="70562" fg:w="14"/><text x="53.2368%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.02%)</title><rect x="53.0018%" y="213" width="0.0150%" height="15" fill="rgb(233,201,37)" fg:x="70582" fg:w="20"/><text x="53.2518%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.01%)</title><rect x="53.0206%" y="213" width="0.0135%" height="15" fill="rgb(221,78,26)" fg:x="70607" fg:w="18"/><text x="53.2706%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (31 samples, 0.02%)</title><rect x="53.0341%" y="213" width="0.0233%" height="15" fill="rgb(250,127,30)" fg:x="70625" fg:w="31"/><text x="53.2841%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.01%)</title><rect x="53.0664%" y="213" width="0.0105%" height="15" fill="rgb(230,49,44)" fg:x="70668" fg:w="14"/><text x="53.3164%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (248 samples, 0.19%)</title><rect x="53.0769%" y="213" width="0.1862%" height="15" fill="rgb(229,67,23)" fg:x="70682" fg:w="248"/><text x="53.3269%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (247 samples, 0.19%)</title><rect x="53.0777%" y="197" width="0.1855%" height="15" fill="rgb(249,83,47)" fg:x="70683" fg:w="247"/><text x="53.3277%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (247 samples, 0.19%)</title><rect x="53.0777%" y="181" width="0.1855%" height="15" fill="rgb(215,43,3)" fg:x="70683" fg:w="247"/><text x="53.3277%" y="191.50"></text></g><g><title>esp`esp::semistoch::old_semistoch_enpt2 (56,535 samples, 42.45%)</title><rect x="10.8381%" y="229" width="42.4536%" height="15" fill="rgb(238,154,13)" fg:x="14433" fg:w="56535"/><text x="11.0881%" y="239.50">esp`esp::semistoch::old_semistoch_enpt2</text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (34 samples, 0.03%)</title><rect x="53.2662%" y="213" width="0.0255%" height="15" fill="rgb(219,56,2)" fg:x="70934" fg:w="34"/><text x="53.5162%" y="223.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.02%)</title><rect x="53.4531%" y="181" width="0.0248%" height="15" fill="rgb(233,0,4)" fg:x="71183" fg:w="33"/><text x="53.7031%" y="191.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="54.6869%" y="165" width="0.0113%" height="15" fill="rgb(235,30,7)" fg:x="72826" fg:w="15"/><text x="54.9369%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 0.01%)</title><rect x="54.6869%" y="149" width="0.0113%" height="15" fill="rgb(250,79,13)" fg:x="72826" fg:w="15"/><text x="54.9369%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (1,641 samples, 1.23%)</title><rect x="53.4779%" y="181" width="1.2323%" height="15" fill="rgb(211,146,34)" fg:x="71216" fg:w="1641"/><text x="53.7279%" y="191.50"></text></g><g><title>esp`nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::into_owned (16 samples, 0.01%)</title><rect x="54.6982%" y="165" width="0.0120%" height="15" fill="rgb(228,22,38)" fg:x="72841" fg:w="16"/><text x="54.9482%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="54.6982%" y="149" width="0.0120%" height="15" fill="rgb(235,168,5)" fg:x="72841" fg:w="16"/><text x="54.9482%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (30 samples, 0.02%)</title><rect x="54.8581%" y="133" width="0.0225%" height="15" fill="rgb(221,155,16)" fg:x="73054" fg:w="30"/><text x="55.1081%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (46 samples, 0.03%)</title><rect x="54.8814%" y="117" width="0.0345%" height="15" fill="rgb(215,215,53)" fg:x="73085" fg:w="46"/><text x="55.1314%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (257 samples, 0.19%)</title><rect x="54.7395%" y="165" width="0.1930%" height="15" fill="rgb(223,4,10)" fg:x="72896" fg:w="257"/><text x="54.9895%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (99 samples, 0.07%)</title><rect x="54.8581%" y="149" width="0.0743%" height="15" fill="rgb(234,103,6)" fg:x="73054" fg:w="99"/><text x="55.1081%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (69 samples, 0.05%)</title><rect x="54.8806%" y="133" width="0.0518%" height="15" fill="rgb(227,97,0)" fg:x="73084" fg:w="69"/><text x="55.1306%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (22 samples, 0.02%)</title><rect x="54.9159%" y="117" width="0.0165%" height="15" fill="rgb(234,150,53)" fg:x="73131" fg:w="22"/><text x="55.1659%" y="127.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (294 samples, 0.22%)</title><rect x="54.7192%" y="181" width="0.2208%" height="15" fill="rgb(228,201,54)" fg:x="72869" fg:w="294"/><text x="54.9692%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 0.02%)</title><rect x="54.9407%" y="165" width="0.0218%" height="15" fill="rgb(222,22,37)" fg:x="73164" fg:w="29"/><text x="55.1907%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (31 samples, 0.02%)</title><rect x="54.9407%" y="181" width="0.0233%" height="15" fill="rgb(237,53,32)" fg:x="73164" fg:w="31"/><text x="55.1907%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (66 samples, 0.05%)</title><rect x="54.9903%" y="165" width="0.0496%" height="15" fill="rgb(233,25,53)" fg:x="73230" fg:w="66"/><text x="55.2403%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (112 samples, 0.08%)</title><rect x="54.9670%" y="181" width="0.0841%" height="15" fill="rgb(210,40,34)" fg:x="73199" fg:w="112"/><text x="55.2170%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (14 samples, 0.01%)</title><rect x="55.0511%" y="181" width="0.0105%" height="15" fill="rgb(241,220,44)" fg:x="73311" fg:w="14"/><text x="55.3011%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.03%)</title><rect x="55.0721%" y="181" width="0.0315%" height="15" fill="rgb(235,28,35)" fg:x="73339" fg:w="42"/><text x="55.3221%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (143 samples, 0.11%)</title><rect x="55.1044%" y="149" width="0.1074%" height="15" fill="rgb(210,56,17)" fg:x="73382" fg:w="143"/><text x="55.3544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (144 samples, 0.11%)</title><rect x="55.1044%" y="181" width="0.1081%" height="15" fill="rgb(224,130,29)" fg:x="73382" fg:w="144"/><text x="55.3544%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (144 samples, 0.11%)</title><rect x="55.1044%" y="165" width="0.1081%" height="15" fill="rgb(235,212,8)" fg:x="73382" fg:w="144"/><text x="55.3544%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (2,543 samples, 1.91%)</title><rect x="53.3082%" y="197" width="1.9096%" height="15" fill="rgb(223,33,50)" fg:x="70990" fg:w="2543"/><text x="53.5582%" y="207.50">e..</text></g><g><title>libsystem_malloc.dylib`szone_size (115 samples, 0.09%)</title><rect x="59.3667%" y="149" width="0.0864%" height="15" fill="rgb(219,149,13)" fg:x="79058" fg:w="115"/><text x="59.6167%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (99 samples, 0.07%)</title><rect x="59.3787%" y="133" width="0.0743%" height="15" fill="rgb(250,156,29)" fg:x="79074" fg:w="99"/><text x="59.6287%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (158 samples, 0.12%)</title><rect x="59.3396%" y="165" width="0.1186%" height="15" fill="rgb(216,193,19)" fg:x="79022" fg:w="158"/><text x="59.5896%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (16 samples, 0.01%)</title><rect x="59.4583%" y="165" width="0.0120%" height="15" fill="rgb(216,135,14)" fg:x="79180" fg:w="16"/><text x="59.7083%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (16 samples, 0.01%)</title><rect x="59.4583%" y="149" width="0.0120%" height="15" fill="rgb(241,47,5)" fg:x="79180" fg:w="16"/><text x="59.7083%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (16 samples, 0.01%)</title><rect x="59.4583%" y="133" width="0.0120%" height="15" fill="rgb(233,42,35)" fg:x="79180" fg:w="16"/><text x="59.7083%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (15 samples, 0.01%)</title><rect x="59.7774%" y="133" width="0.0113%" height="15" fill="rgb(231,13,6)" fg:x="79605" fg:w="15"/><text x="60.0274%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (128 samples, 0.10%)</title><rect x="59.7887%" y="133" width="0.0961%" height="15" fill="rgb(207,181,40)" fg:x="79620" fg:w="128"/><text x="60.0387%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (194 samples, 0.15%)</title><rect x="59.8848%" y="133" width="0.1457%" height="15" fill="rgb(254,173,49)" fg:x="79748" fg:w="194"/><text x="60.1348%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (778 samples, 0.58%)</title><rect x="59.4756%" y="165" width="0.5842%" height="15" fill="rgb(221,1,38)" fg:x="79203" fg:w="778"/><text x="59.7256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (617 samples, 0.46%)</title><rect x="59.5965%" y="149" width="0.4633%" height="15" fill="rgb(206,124,46)" fg:x="79364" fg:w="617"/><text x="59.8465%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (20 samples, 0.02%)</title><rect x="60.0448%" y="133" width="0.0150%" height="15" fill="rgb(249,21,11)" fg:x="79961" fg:w="20"/><text x="60.2948%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.01%)</title><rect x="60.0463%" y="117" width="0.0135%" height="15" fill="rgb(222,201,40)" fg:x="79963" fg:w="18"/><text x="60.2963%" y="127.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,025 samples, 0.77%)</title><rect x="59.2946%" y="181" width="0.7697%" height="15" fill="rgb(235,61,29)" fg:x="78962" fg:w="1025"/><text x="59.5446%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (26 samples, 0.02%)</title><rect x="60.1003%" y="101" width="0.0195%" height="15" fill="rgb(219,207,3)" fg:x="80035" fg:w="26"/><text x="60.3503%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.01%)</title><rect x="60.1093%" y="85" width="0.0105%" height="15" fill="rgb(222,56,46)" fg:x="80047" fg:w="14"/><text x="60.3593%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (45 samples, 0.03%)</title><rect x="60.1206%" y="101" width="0.0338%" height="15" fill="rgb(239,76,54)" fg:x="80062" fg:w="45"/><text x="60.3706%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.03%)</title><rect x="60.1274%" y="85" width="0.0270%" height="15" fill="rgb(231,124,27)" fg:x="80071" fg:w="36"/><text x="60.3774%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.01%)</title><rect x="60.1424%" y="69" width="0.0120%" height="15" fill="rgb(249,195,6)" fg:x="80091" fg:w="16"/><text x="60.3924%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (22 samples, 0.02%)</title><rect x="60.1611%" y="101" width="0.0165%" height="15" fill="rgb(237,174,47)" fg:x="80116" fg:w="22"/><text x="60.4111%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (137 samples, 0.10%)</title><rect x="60.0943%" y="117" width="0.1029%" height="15" fill="rgb(206,201,31)" fg:x="80027" fg:w="137"/><text x="60.3443%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.02%)</title><rect x="60.1777%" y="101" width="0.0195%" height="15" fill="rgb(231,57,52)" fg:x="80138" fg:w="26"/><text x="60.4277%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (148 samples, 0.11%)</title><rect x="60.0868%" y="133" width="0.1111%" height="15" fill="rgb(248,177,22)" fg:x="80017" fg:w="148"/><text x="60.3368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (164 samples, 0.12%)</title><rect x="60.0831%" y="149" width="0.1232%" height="15" fill="rgb(215,211,37)" fg:x="80012" fg:w="164"/><text x="60.3331%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (183 samples, 0.14%)</title><rect x="60.0703%" y="181" width="0.1374%" height="15" fill="rgb(241,128,51)" fg:x="79995" fg:w="183"/><text x="60.3203%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (169 samples, 0.13%)</title><rect x="60.0808%" y="165" width="0.1269%" height="15" fill="rgb(227,165,31)" fg:x="80009" fg:w="169"/><text x="60.3308%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (746 samples, 0.56%)</title><rect x="60.2122%" y="181" width="0.5602%" height="15" fill="rgb(228,167,24)" fg:x="80184" fg:w="746"/><text x="60.4622%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (22 samples, 0.02%)</title><rect x="60.7747%" y="181" width="0.0165%" height="15" fill="rgb(228,143,12)" fg:x="80933" fg:w="22"/><text x="61.0247%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.02%)</title><rect x="61.6149%" y="133" width="0.0173%" height="15" fill="rgb(249,149,8)" fg:x="82052" fg:w="23"/><text x="61.8649%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.02%)</title><rect x="61.6172%" y="117" width="0.0150%" height="15" fill="rgb(243,35,44)" fg:x="82055" fg:w="20"/><text x="61.8672%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.01%)</title><rect x="61.6179%" y="101" width="0.0143%" height="15" fill="rgb(246,89,9)" fg:x="82056" fg:w="19"/><text x="61.8679%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (37 samples, 0.03%)</title><rect x="61.6660%" y="85" width="0.0278%" height="15" fill="rgb(233,213,13)" fg:x="82120" fg:w="37"/><text x="61.9160%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (30 samples, 0.02%)</title><rect x="61.7388%" y="53" width="0.0225%" height="15" fill="rgb(233,141,41)" fg:x="82217" fg:w="30"/><text x="61.9888%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (14 samples, 0.01%)</title><rect x="61.7614%" y="53" width="0.0105%" height="15" fill="rgb(239,167,4)" fg:x="82247" fg:w="14"/><text x="62.0114%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (113 samples, 0.08%)</title><rect x="61.6938%" y="85" width="0.0849%" height="15" fill="rgb(209,217,16)" fg:x="82157" fg:w="113"/><text x="61.9438%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (92 samples, 0.07%)</title><rect x="61.7096%" y="69" width="0.0691%" height="15" fill="rgb(219,88,35)" fg:x="82178" fg:w="92"/><text x="61.9596%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (18 samples, 0.01%)</title><rect x="61.8252%" y="37" width="0.0135%" height="15" fill="rgb(220,193,23)" fg:x="82332" fg:w="18"/><text x="62.0752%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (79 samples, 0.06%)</title><rect x="61.7899%" y="69" width="0.0593%" height="15" fill="rgb(230,90,52)" fg:x="82285" fg:w="79"/><text x="62.0399%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (45 samples, 0.03%)</title><rect x="61.8154%" y="53" width="0.0338%" height="15" fill="rgb(252,106,19)" fg:x="82319" fg:w="45"/><text x="62.0654%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (14 samples, 0.01%)</title><rect x="61.8387%" y="37" width="0.0105%" height="15" fill="rgb(206,74,20)" fg:x="82350" fg:w="14"/><text x="62.0887%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (138 samples, 0.10%)</title><rect x="61.7869%" y="85" width="0.1036%" height="15" fill="rgb(230,138,44)" fg:x="82281" fg:w="138"/><text x="62.0369%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (54 samples, 0.04%)</title><rect x="61.8500%" y="69" width="0.0405%" height="15" fill="rgb(235,182,43)" fg:x="82365" fg:w="54"/><text x="62.1000%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (21 samples, 0.02%)</title><rect x="61.8748%" y="53" width="0.0158%" height="15" fill="rgb(242,16,51)" fg:x="82398" fg:w="21"/><text x="62.1248%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (30 samples, 0.02%)</title><rect x="61.8988%" y="85" width="0.0225%" height="15" fill="rgb(248,9,4)" fg:x="82430" fg:w="30"/><text x="62.1488%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (836 samples, 0.63%)</title><rect x="61.6562%" y="101" width="0.6278%" height="15" fill="rgb(210,31,22)" fg:x="82107" fg:w="836"/><text x="61.9062%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (483 samples, 0.36%)</title><rect x="61.9213%" y="85" width="0.3627%" height="15" fill="rgb(239,54,39)" fg:x="82460" fg:w="483"/><text x="62.1713%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (853 samples, 0.64%)</title><rect x="61.6465%" y="117" width="0.6405%" height="15" fill="rgb(230,99,41)" fg:x="82094" fg:w="853"/><text x="61.8965%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (34 samples, 0.03%)</title><rect x="62.2870%" y="117" width="0.0255%" height="15" fill="rgb(253,106,12)" fg:x="82947" fg:w="34"/><text x="62.5370%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (939 samples, 0.71%)</title><rect x="61.6337%" y="133" width="0.7051%" height="15" fill="rgb(213,46,41)" fg:x="82077" fg:w="939"/><text x="61.8837%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (34 samples, 0.03%)</title><rect x="62.3133%" y="117" width="0.0255%" height="15" fill="rgb(215,133,35)" fg:x="82982" fg:w="34"/><text x="62.5633%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (32 samples, 0.02%)</title><rect x="62.3148%" y="101" width="0.0240%" height="15" fill="rgb(213,28,5)" fg:x="82984" fg:w="32"/><text x="62.5648%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (983 samples, 0.74%)</title><rect x="61.6059%" y="149" width="0.7382%" height="15" fill="rgb(215,77,49)" fg:x="82040" fg:w="983"/><text x="61.8559%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,006 samples, 0.76%)</title><rect x="61.5947%" y="165" width="0.7554%" height="15" fill="rgb(248,100,22)" fg:x="82025" fg:w="1006"/><text x="61.8447%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (14 samples, 0.01%)</title><rect x="62.3508%" y="165" width="0.0105%" height="15" fill="rgb(208,67,9)" fg:x="83032" fg:w="14"/><text x="62.6008%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (2,462 samples, 1.85%)</title><rect x="62.3666%" y="165" width="1.8488%" height="15" fill="rgb(219,133,21)" fg:x="83053" fg:w="2462"/><text x="62.6166%" y="175.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (1,448 samples, 1.09%)</title><rect x="63.1281%" y="149" width="1.0873%" height="15" fill="rgb(246,46,29)" fg:x="84067" fg:w="1448"/><text x="63.3781%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el (9,643 samples, 7.24%)</title><rect x="60.7949%" y="181" width="7.2412%" height="15" fill="rgb(246,185,52)" fg:x="80960" fg:w="9643"/><text x="61.0449%" y="191.50">esp`esp::v..</text></g><g><title>esp`esp::ham::Ham::ham_sing (5,088 samples, 3.82%)</title><rect x="64.2154%" y="165" width="3.8207%" height="15" fill="rgb(252,136,11)" fg:x="85515" fg:w="5088"/><text x="64.4654%" y="175.50">esp`..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,380 samples, 1.79%)</title><rect x="66.2489%" y="149" width="1.7872%" height="15" fill="rgb(219,138,53)" fg:x="88223" fg:w="2380"/><text x="66.4989%" y="159.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (392 samples, 0.29%)</title><rect x="68.3943%" y="165" width="0.2944%" height="15" fill="rgb(211,51,23)" fg:x="91080" fg:w="392"/><text x="68.6443%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (228 samples, 0.17%)</title><rect x="68.5174%" y="149" width="0.1712%" height="15" fill="rgb(247,221,28)" fg:x="91244" fg:w="228"/><text x="68.7674%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (716 samples, 0.54%)</title><rect x="68.6887%" y="165" width="0.5377%" height="15" fill="rgb(251,222,45)" fg:x="91472" fg:w="716"/><text x="68.9387%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (291 samples, 0.22%)</title><rect x="69.2263%" y="165" width="0.2185%" height="15" fill="rgb(217,162,53)" fg:x="92188" fg:w="291"/><text x="69.4763%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (164 samples, 0.12%)</title><rect x="69.3217%" y="149" width="0.1232%" height="15" fill="rgb(229,93,14)" fg:x="92315" fg:w="164"/><text x="69.5717%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.01%)</title><rect x="69.6513%" y="69" width="0.0135%" height="15" fill="rgb(209,67,49)" fg:x="92754" fg:w="18"/><text x="69.9013%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.01%)</title><rect x="69.6513%" y="53" width="0.0135%" height="15" fill="rgb(213,87,29)" fg:x="92754" fg:w="18"/><text x="69.9013%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (267 samples, 0.20%)</title><rect x="69.6333%" y="85" width="0.2005%" height="15" fill="rgb(205,151,52)" fg:x="92730" fg:w="267"/><text x="69.8833%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (225 samples, 0.17%)</title><rect x="69.6649%" y="69" width="0.1690%" height="15" fill="rgb(253,215,39)" fg:x="92772" fg:w="225"/><text x="69.9149%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (273 samples, 0.21%)</title><rect x="69.6296%" y="101" width="0.2050%" height="15" fill="rgb(221,220,41)" fg:x="92725" fg:w="273"/><text x="69.8796%" y="111.50"></text></g><g><title>esp`esp::var::off_diag::add_el (533 samples, 0.40%)</title><rect x="69.4448%" y="165" width="0.4002%" height="15" fill="rgb(218,133,21)" fg:x="92479" fg:w="533"/><text x="69.6948%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (291 samples, 0.22%)</title><rect x="69.6266%" y="149" width="0.2185%" height="15" fill="rgb(221,193,43)" fg:x="92721" fg:w="291"/><text x="69.8766%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (288 samples, 0.22%)</title><rect x="69.6288%" y="133" width="0.2163%" height="15" fill="rgb(240,128,52)" fg:x="92724" fg:w="288"/><text x="69.8788%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (288 samples, 0.22%)</title><rect x="69.6288%" y="117" width="0.2163%" height="15" fill="rgb(253,114,12)" fg:x="92724" fg:w="288"/><text x="69.8788%" y="127.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (2,583 samples, 1.94%)</title><rect x="68.0361%" y="181" width="1.9396%" height="15" fill="rgb(215,223,47)" fg:x="90603" fg:w="2583"/><text x="68.2861%" y="191.50">e..</text></g><g><title>esp`hashbrown::map::make_hash (174 samples, 0.13%)</title><rect x="69.8451%" y="165" width="0.1307%" height="15" fill="rgb(248,225,23)" fg:x="93012" fg:w="174"/><text x="70.0951%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (111 samples, 0.08%)</title><rect x="69.8924%" y="149" width="0.0834%" height="15" fill="rgb(250,108,0)" fg:x="93075" fg:w="111"/><text x="70.1424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (19 samples, 0.01%)</title><rect x="71.4566%" y="69" width="0.0143%" height="15" fill="rgb(228,208,7)" fg:x="95158" fg:w="19"/><text x="71.7066%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (19 samples, 0.01%)</title><rect x="71.4566%" y="53" width="0.0143%" height="15" fill="rgb(244,45,10)" fg:x="95158" fg:w="19"/><text x="71.7066%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (19 samples, 0.01%)</title><rect x="71.4566%" y="37" width="0.0143%" height="15" fill="rgb(207,125,25)" fg:x="95158" fg:w="19"/><text x="71.7066%" y="47.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,646 samples, 1.24%)</title><rect x="70.2468%" y="165" width="1.2360%" height="15" fill="rgb(210,195,18)" fg:x="93547" fg:w="1646"/><text x="70.4968%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (42 samples, 0.03%)</title><rect x="71.4513%" y="149" width="0.0315%" height="15" fill="rgb(249,80,12)" fg:x="95151" fg:w="42"/><text x="71.7013%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (42 samples, 0.03%)</title><rect x="71.4513%" y="133" width="0.0315%" height="15" fill="rgb(221,65,9)" fg:x="95151" fg:w="42"/><text x="71.7013%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (42 samples, 0.03%)</title><rect x="71.4513%" y="117" width="0.0315%" height="15" fill="rgb(235,49,36)" fg:x="95151" fg:w="42"/><text x="71.7013%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (42 samples, 0.03%)</title><rect x="71.4513%" y="101" width="0.0315%" height="15" fill="rgb(225,32,20)" fg:x="95151" fg:w="42"/><text x="71.7013%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (42 samples, 0.03%)</title><rect x="71.4513%" y="85" width="0.0315%" height="15" fill="rgb(215,141,46)" fg:x="95151" fg:w="42"/><text x="71.7013%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.02%)</title><rect x="72.9652%" y="117" width="0.0180%" height="15" fill="rgb(250,160,47)" fg:x="97167" fg:w="24"/><text x="73.2152%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.02%)</title><rect x="72.9667%" y="101" width="0.0165%" height="15" fill="rgb(216,222,40)" fg:x="97169" fg:w="22"/><text x="73.2167%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.02%)</title><rect x="72.9682%" y="85" width="0.0150%" height="15" fill="rgb(234,217,39)" fg:x="97171" fg:w="20"/><text x="73.2182%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.01%)</title><rect x="72.9847%" y="101" width="0.0113%" height="15" fill="rgb(207,178,40)" fg:x="97193" fg:w="15"/><text x="73.2347%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.01%)</title><rect x="72.9847%" y="85" width="0.0113%" height="15" fill="rgb(221,136,13)" fg:x="97193" fg:w="15"/><text x="73.2347%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (51 samples, 0.04%)</title><rect x="72.9592%" y="149" width="0.0383%" height="15" fill="rgb(249,199,10)" fg:x="97159" fg:w="51"/><text x="73.2092%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (43 samples, 0.03%)</title><rect x="72.9652%" y="133" width="0.0323%" height="15" fill="rgb(249,222,13)" fg:x="97167" fg:w="43"/><text x="73.2152%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.01%)</title><rect x="72.9840%" y="117" width="0.0135%" height="15" fill="rgb(244,185,38)" fg:x="97192" fg:w="18"/><text x="73.2340%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (38 samples, 0.03%)</title><rect x="72.9975%" y="149" width="0.0285%" height="15" fill="rgb(236,202,9)" fg:x="97210" fg:w="38"/><text x="73.2475%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.03%)</title><rect x="72.9997%" y="133" width="0.0263%" height="15" fill="rgb(250,229,37)" fg:x="97213" fg:w="35"/><text x="73.2497%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.02%)</title><rect x="73.0102%" y="117" width="0.0158%" height="15" fill="rgb(206,174,23)" fg:x="97227" fg:w="21"/><text x="73.2602%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.02%)</title><rect x="73.0260%" y="149" width="0.0165%" height="15" fill="rgb(211,33,43)" fg:x="97248" fg:w="22"/><text x="73.2760%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.02%)</title><rect x="73.0478%" y="149" width="0.0225%" height="15" fill="rgb(245,58,50)" fg:x="97277" fg:w="30"/><text x="73.2978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.01%)</title><rect x="73.0568%" y="133" width="0.0135%" height="15" fill="rgb(244,68,36)" fg:x="97289" fg:w="18"/><text x="73.3068%" y="143.50"></text></g><g><title>esp`alloc::slice::merge_sort (2,217 samples, 1.66%)</title><rect x="71.4949%" y="165" width="1.6648%" height="15" fill="rgb(232,229,15)" fg:x="95209" fg:w="2217"/><text x="71.7449%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (116 samples, 0.09%)</title><rect x="73.0726%" y="149" width="0.0871%" height="15" fill="rgb(254,30,23)" fg:x="97310" fg:w="116"/><text x="73.3226%" y="159.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new (373 samples, 0.28%)</title><rect x="73.1597%" y="165" width="0.2801%" height="15" fill="rgb(235,160,14)" fg:x="97426" fg:w="373"/><text x="73.4097%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (373 samples, 0.28%)</title><rect x="73.1597%" y="149" width="0.2801%" height="15" fill="rgb(212,155,44)" fg:x="97426" fg:w="373"/><text x="73.4097%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::create_sparse (4,630 samples, 3.48%)</title><rect x="69.9757%" y="181" width="3.4768%" height="15" fill="rgb(226,2,50)" fg:x="93186" fg:w="4630"/><text x="70.2257%" y="191.50">esp..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (480 samples, 0.36%)</title><rect x="73.4525%" y="181" width="0.3604%" height="15" fill="rgb(234,177,6)" fg:x="97816" fg:w="480"/><text x="73.7025%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (104 samples, 0.08%)</title><rect x="73.7349%" y="165" width="0.0781%" height="15" fill="rgb(217,24,9)" fg:x="98192" fg:w="104"/><text x="73.9849%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (59 samples, 0.04%)</title><rect x="73.9098%" y="165" width="0.0443%" height="15" fill="rgb(220,13,46)" fg:x="98425" fg:w="59"/><text x="74.1598%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (67 samples, 0.05%)</title><rect x="74.2891%" y="133" width="0.0503%" height="15" fill="rgb(239,221,27)" fg:x="98930" fg:w="67"/><text x="74.5391%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.01%)</title><rect x="74.3409%" y="117" width="0.0143%" height="15" fill="rgb(222,198,25)" fg:x="98999" fg:w="19"/><text x="74.5909%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.01%)</title><rect x="74.3416%" y="101" width="0.0135%" height="15" fill="rgb(211,99,13)" fg:x="99000" fg:w="18"/><text x="74.5916%" y="111.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (67 samples, 0.05%)</title><rect x="74.3394%" y="133" width="0.0503%" height="15" fill="rgb(232,111,31)" fg:x="98997" fg:w="67"/><text x="74.5894%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (46 samples, 0.03%)</title><rect x="74.3551%" y="117" width="0.0345%" height="15" fill="rgb(245,82,37)" fg:x="99018" fg:w="46"/><text x="74.6051%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (597 samples, 0.45%)</title><rect x="73.9541%" y="165" width="0.4483%" height="15" fill="rgb(227,149,46)" fg:x="98484" fg:w="597"/><text x="74.2041%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (514 samples, 0.39%)</title><rect x="74.0165%" y="149" width="0.3860%" height="15" fill="rgb(218,36,50)" fg:x="98567" fg:w="514"/><text x="74.2665%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (786 samples, 0.59%)</title><rect x="73.8130%" y="181" width="0.5902%" height="15" fill="rgb(226,80,48)" fg:x="98296" fg:w="786"/><text x="74.0630%" y="191.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (26,256 samples, 19.72%)</title><rect x="74.4092%" y="181" width="19.7163%" height="15" fill="rgb(238,224,15)" fg:x="99090" fg:w="26256"/><text x="74.6592%" y="191.50">esp`std::collections::hash::map..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (7,136 samples, 5.36%)</title><rect x="88.7669%" y="165" width="5.3586%" height="15" fill="rgb(241,136,10)" fg:x="118210" fg:w="7136"/><text x="89.0169%" y="175.50">esp`cor..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (418 samples, 0.31%)</title><rect x="94.1570%" y="165" width="0.3139%" height="15" fill="rgb(208,32,45)" fg:x="125388" fg:w="418"/><text x="94.4070%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (394 samples, 0.30%)</title><rect x="94.1751%" y="149" width="0.2959%" height="15" fill="rgb(207,135,9)" fg:x="125412" fg:w="394"/><text x="94.4251%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (162 samples, 0.12%)</title><rect x="94.3493%" y="133" width="0.1216%" height="15" fill="rgb(206,86,44)" fg:x="125644" fg:w="162"/><text x="94.5993%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (32 samples, 0.02%)</title><rect x="94.4469%" y="117" width="0.0240%" height="15" fill="rgb(245,177,15)" fg:x="125774" fg:w="32"/><text x="94.6969%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (447 samples, 0.34%)</title><rect x="94.1360%" y="181" width="0.3357%" height="15" fill="rgb(206,64,50)" fg:x="125360" fg:w="447"/><text x="94.3860%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (52,324 samples, 39.29%)</title><rect x="55.2178%" y="197" width="39.2914%" height="15" fill="rgb(234,36,40)" fg:x="73533" fg:w="52324"/><text x="55.4678%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (30 samples, 0.02%)</title><rect x="94.5130%" y="197" width="0.0225%" height="15" fill="rgb(213,64,8)" fg:x="125862" fg:w="30"/><text x="94.7630%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (378 samples, 0.28%)</title><rect x="94.5408%" y="197" width="0.2838%" height="15" fill="rgb(210,75,36)" fg:x="125899" fg:w="378"/><text x="94.7908%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (55,315 samples, 41.54%)</title><rect x="53.2939%" y="213" width="41.5374%" height="15" fill="rgb(229,88,21)" fg:x="70971" fg:w="55315"/><text x="53.5439%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (22 samples, 0.02%)</title><rect x="95.0251%" y="197" width="0.0165%" height="15" fill="rgb(252,204,47)" fg:x="126544" fg:w="22"/><text x="95.2751%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (3,425 samples, 2.57%)</title><rect x="95.0506%" y="197" width="2.5719%" height="15" fill="rgb(208,77,27)" fg:x="126578" fg:w="3425"/><text x="95.3006%" y="207.50">es..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,746 samples, 1.31%)</title><rect x="96.3115%" y="181" width="1.3111%" height="15" fill="rgb(221,76,26)" fg:x="128257" fg:w="1746"/><text x="96.5615%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (84 samples, 0.06%)</title><rect x="97.6226%" y="197" width="0.0631%" height="15" fill="rgb(225,139,18)" fg:x="130003" fg:w="84"/><text x="97.8726%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (192 samples, 0.14%)</title><rect x="97.6856%" y="197" width="0.1442%" height="15" fill="rgb(230,137,11)" fg:x="130087" fg:w="192"/><text x="97.9356%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (138 samples, 0.10%)</title><rect x="97.7262%" y="181" width="0.1036%" height="15" fill="rgb(212,28,1)" fg:x="130141" fg:w="138"/><text x="97.9762%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (119 samples, 0.09%)</title><rect x="97.8298%" y="197" width="0.0894%" height="15" fill="rgb(248,164,17)" fg:x="130279" fg:w="119"/><text x="98.0798%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (87 samples, 0.07%)</title><rect x="97.8539%" y="181" width="0.0653%" height="15" fill="rgb(222,171,42)" fg:x="130311" fg:w="87"/><text x="98.1039%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,079 samples, 0.81%)</title><rect x="97.9252%" y="197" width="0.8102%" height="15" fill="rgb(243,84,45)" fg:x="130406" fg:w="1079"/><text x="98.1752%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (208 samples, 0.16%)</title><rect x="98.5792%" y="181" width="0.1562%" height="15" fill="rgb(252,49,23)" fg:x="131277" fg:w="208"/><text x="98.8292%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (20 samples, 0.02%)</title><rect x="98.7745%" y="149" width="0.0150%" height="15" fill="rgb(215,19,7)" fg:x="131537" fg:w="20"/><text x="99.0245%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (14 samples, 0.01%)</title><rect x="98.7790%" y="133" width="0.0105%" height="15" fill="rgb(238,81,41)" fg:x="131543" fg:w="14"/><text x="99.0290%" y="143.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (83 samples, 0.06%)</title><rect x="98.7354%" y="197" width="0.0623%" height="15" fill="rgb(210,199,37)" fg:x="131485" fg:w="83"/><text x="98.9854%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (74 samples, 0.06%)</title><rect x="98.7422%" y="181" width="0.0556%" height="15" fill="rgb(244,192,49)" fg:x="131494" fg:w="74"/><text x="98.9922%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (61 samples, 0.05%)</title><rect x="98.7520%" y="165" width="0.0458%" height="15" fill="rgb(226,211,11)" fg:x="131507" fg:w="61"/><text x="99.0020%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (121 samples, 0.09%)</title><rect x="98.7978%" y="197" width="0.0909%" height="15" fill="rgb(236,162,54)" fg:x="131568" fg:w="121"/><text x="99.0478%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.03%)</title><rect x="98.8571%" y="181" width="0.0315%" height="15" fill="rgb(220,229,9)" fg:x="131647" fg:w="42"/><text x="99.1071%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (5,413 samples, 4.06%)</title><rect x="94.8314%" y="213" width="4.0648%" height="15" fill="rgb(250,87,22)" fg:x="126286" fg:w="5413"/><text x="95.0814%" y="223.50">esp`..</text></g><g><title>esp`esp::var::variational (60,749 samples, 45.62%)</title><rect x="53.2917%" y="229" width="45.6180%" height="15" fill="rgb(239,43,17)" fg:x="70968" fg:w="60749"/><text x="53.5417%" y="239.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (72 samples, 0.05%)</title><rect x="99.0140%" y="133" width="0.0541%" height="15" fill="rgb(231,177,25)" fg:x="131856" fg:w="72"/><text x="99.2640%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (71 samples, 0.05%)</title><rect x="99.0148%" y="117" width="0.0533%" height="15" fill="rgb(219,179,1)" fg:x="131857" fg:w="71"/><text x="99.2648%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (59 samples, 0.04%)</title><rect x="99.0238%" y="101" width="0.0443%" height="15" fill="rgb(238,219,53)" fg:x="131869" fg:w="59"/><text x="99.2738%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (76 samples, 0.06%)</title><rect x="99.0125%" y="181" width="0.0571%" height="15" fill="rgb(232,167,36)" fg:x="131854" fg:w="76"/><text x="99.2625%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (76 samples, 0.06%)</title><rect x="99.0125%" y="165" width="0.0571%" height="15" fill="rgb(244,19,51)" fg:x="131854" fg:w="76"/><text x="99.2625%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (75 samples, 0.06%)</title><rect x="99.0133%" y="149" width="0.0563%" height="15" fill="rgb(224,6,22)" fg:x="131855" fg:w="75"/><text x="99.2633%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (140 samples, 0.11%)</title><rect x="99.0696%" y="181" width="0.1051%" height="15" fill="rgb(224,145,5)" fg:x="131930" fg:w="140"/><text x="99.3196%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.01%)</title><rect x="99.1642%" y="165" width="0.0105%" height="15" fill="rgb(234,130,49)" fg:x="132056" fg:w="14"/><text x="99.4142%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (23 samples, 0.02%)</title><rect x="99.1747%" y="181" width="0.0173%" height="15" fill="rgb(254,6,2)" fg:x="132070" fg:w="23"/><text x="99.4247%" y="191.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (375 samples, 0.28%)</title><rect x="98.9119%" y="197" width="0.2816%" height="15" fill="rgb(208,96,46)" fg:x="131720" fg:w="375"/><text x="99.1619%" y="207.50"></text></g><g><title>esp`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="99.2130%" y="181" width="0.0240%" height="15" fill="rgb(239,3,39)" fg:x="132121" fg:w="32"/><text x="99.4630%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.01%)</title><rect x="99.2483%" y="117" width="0.0120%" height="15" fill="rgb(233,210,1)" fg:x="132168" fg:w="16"/><text x="99.4983%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.01%)</title><rect x="99.2483%" y="101" width="0.0120%" height="15" fill="rgb(244,137,37)" fg:x="132168" fg:w="16"/><text x="99.4983%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.01%)</title><rect x="99.2498%" y="85" width="0.0105%" height="15" fill="rgb(240,136,2)" fg:x="132170" fg:w="14"/><text x="99.4998%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.02%)</title><rect x="99.2461%" y="149" width="0.0173%" height="15" fill="rgb(239,18,37)" fg:x="132165" fg:w="23"/><text x="99.4961%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (22 samples, 0.02%)</title><rect x="99.2468%" y="133" width="0.0165%" height="15" fill="rgb(218,185,22)" fg:x="132166" fg:w="22"/><text x="99.4968%" y="143.50"></text></g><g><title>esp`std::io::append_to_string (44 samples, 0.03%)</title><rect x="99.2393%" y="165" width="0.0330%" height="15" fill="rgb(225,218,4)" fg:x="132156" fg:w="44"/><text x="99.4893%" y="175.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="99.2371%" y="181" width="0.0360%" height="15" fill="rgb(230,182,32)" fg:x="132153" fg:w="48"/><text x="99.4871%" y="191.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (18 samples, 0.01%)</title><rect x="99.2731%" y="181" width="0.0135%" height="15" fill="rgb(242,56,43)" fg:x="132201" fg:w="18"/><text x="99.5231%" y="191.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (140 samples, 0.11%)</title><rect x="99.1935%" y="197" width="0.1051%" height="15" fill="rgb(233,99,24)" fg:x="132095" fg:w="140"/><text x="99.4435%" y="207.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (517 samples, 0.39%)</title><rect x="98.9112%" y="229" width="0.3882%" height="15" fill="rgb(234,209,42)" fg:x="131719" fg:w="517"/><text x="99.1612%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (517 samples, 0.39%)</title><rect x="98.9112%" y="213" width="0.3882%" height="15" fill="rgb(227,7,12)" fg:x="131719" fg:w="517"/><text x="99.1612%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.02%)</title><rect x="99.3024%" y="229" width="0.0180%" height="15" fill="rgb(245,203,43)" fg:x="132240" fg:w="24"/><text x="99.5524%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.01%)</title><rect x="99.3204%" y="197" width="0.0105%" height="15" fill="rgb(238,205,33)" fg:x="132264" fg:w="14"/><text x="99.5704%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (15 samples, 0.01%)</title><rect x="99.3204%" y="229" width="0.0113%" height="15" fill="rgb(231,56,7)" fg:x="132264" fg:w="15"/><text x="99.5704%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (15 samples, 0.01%)</title><rect x="99.3204%" y="213" width="0.0113%" height="15" fill="rgb(244,186,29)" fg:x="132264" fg:w="15"/><text x="99.5704%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (27 samples, 0.02%)</title><rect x="99.3444%" y="213" width="0.0203%" height="15" fill="rgb(234,111,31)" fg:x="132296" fg:w="27"/><text x="99.5944%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (26 samples, 0.02%)</title><rect x="99.3452%" y="197" width="0.0195%" height="15" fill="rgb(241,149,10)" fg:x="132297" fg:w="26"/><text x="99.5952%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (263 samples, 0.20%)</title><rect x="99.3647%" y="213" width="0.1975%" height="15" fill="rgb(249,206,44)" fg:x="132323" fg:w="263"/><text x="99.6147%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (90 samples, 0.07%)</title><rect x="99.5645%" y="213" width="0.0676%" height="15" fill="rgb(251,153,30)" fg:x="132589" fg:w="90"/><text x="99.8145%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (87 samples, 0.07%)</title><rect x="99.6351%" y="213" width="0.0653%" height="15" fill="rgb(239,152,38)" fg:x="132683" fg:w="87"/><text x="99.8851%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (86 samples, 0.06%)</title><rect x="99.6358%" y="197" width="0.0646%" height="15" fill="rgb(249,139,47)" fg:x="132684" fg:w="86"/><text x="99.8858%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (296 samples, 0.22%)</title><rect x="99.7071%" y="197" width="0.2223%" height="15" fill="rgb(244,64,35)" fg:x="132779" fg:w="296"/><text x="99.9571%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (806 samples, 0.61%)</title><rect x="99.3317%" y="229" width="0.6052%" height="15" fill="rgb(216,46,15)" fg:x="132279" fg:w="806"/><text x="99.5817%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (315 samples, 0.24%)</title><rect x="99.7004%" y="213" width="0.2365%" height="15" fill="rgb(250,74,19)" fg:x="132770" fg:w="315"/><text x="99.9504%" y="223.50"></text></g><g><title>esp`esp::main (133,097 samples, 99.95%)</title><rect x="0.0008%" y="245" width="99.9459%" height="15" fill="rgb(249,42,33)" fg:x="1" fg:w="133097"/><text x="0.2508%" y="255.50">esp`esp::main</text></g><g><title>esp`main (133,100 samples, 99.95%)</title><rect x="0.0000%" y="309" width="99.9482%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="133100"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (133,100 samples, 99.95%)</title><rect x="0.0000%" y="293" width="99.9482%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="133100"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (133,100 samples, 99.95%)</title><rect x="0.0000%" y="277" width="99.9482%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="133100"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (133,100 samples, 99.95%)</title><rect x="0.0000%" y="261" width="99.9482%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="133100"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (133,169 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="133169"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (133,169 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="133169"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (133,169 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="133169"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (69 samples, 0.05%)</title><rect x="99.9482%" y="309" width="0.0518%" height="15" fill="rgb(242,119,39)" fg:x="133100" fg:w="69"/><text x="100.1982%" y="319.50"></text></g></svg></svg>