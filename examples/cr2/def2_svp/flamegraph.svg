<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="486176"><g><title>libsystem_malloc.dylib`small_size (219 samples, 0.05%)</title><rect x="0.0243%" y="213" width="0.0450%" height="15" fill="rgb(227,0,7)" fg:x="118" fg:w="219"/><text x="0.2743%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (98 samples, 0.02%)</title><rect x="0.0693%" y="213" width="0.0202%" height="15" fill="rgb(217,0,24)" fg:x="337" fg:w="98"/><text x="0.3193%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (95 samples, 0.02%)</title><rect x="0.0699%" y="197" width="0.0195%" height="15" fill="rgb(221,193,54)" fg:x="340" fg:w="95"/><text x="0.3199%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (343 samples, 0.07%)</title><rect x="0.0193%" y="229" width="0.0706%" height="15" fill="rgb(248,212,6)" fg:x="94" fg:w="343"/><text x="0.2693%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (82 samples, 0.02%)</title><rect x="0.0899%" y="229" width="0.0169%" height="15" fill="rgb(208,68,35)" fg:x="437" fg:w="82"/><text x="0.3399%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (82 samples, 0.02%)</title><rect x="0.0899%" y="213" width="0.0169%" height="15" fill="rgb(232,128,0)" fg:x="437" fg:w="82"/><text x="0.3399%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (82 samples, 0.02%)</title><rect x="0.0899%" y="197" width="0.0169%" height="15" fill="rgb(207,160,47)" fg:x="437" fg:w="82"/><text x="0.3399%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (77 samples, 0.02%)</title><rect x="0.1388%" y="213" width="0.0158%" height="15" fill="rgb(228,23,34)" fg:x="675" fg:w="77"/><text x="0.3888%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (63 samples, 0.01%)</title><rect x="0.1417%" y="197" width="0.0130%" height="15" fill="rgb(218,30,26)" fg:x="689" fg:w="63"/><text x="0.3917%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (104 samples, 0.02%)</title><rect x="0.1547%" y="213" width="0.0214%" height="15" fill="rgb(220,122,19)" fg:x="752" fg:w="104"/><text x="0.4047%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (519 samples, 0.11%)</title><rect x="0.1800%" y="213" width="0.1068%" height="15" fill="rgb(250,228,42)" fg:x="875" fg:w="519"/><text x="0.4300%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (302 samples, 0.06%)</title><rect x="0.2935%" y="197" width="0.0621%" height="15" fill="rgb(240,193,28)" fg:x="1427" fg:w="302"/><text x="0.5435%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (322 samples, 0.07%)</title><rect x="0.2906%" y="213" width="0.0662%" height="15" fill="rgb(216,20,37)" fg:x="1413" fg:w="322"/><text x="0.5406%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,362 samples, 0.49%)</title><rect x="0.3748%" y="197" width="0.4858%" height="15" fill="rgb(206,188,39)" fg:x="1822" fg:w="2362"/><text x="0.6248%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (58 samples, 0.01%)</title><rect x="0.8608%" y="197" width="0.0119%" height="15" fill="rgb(217,207,13)" fg:x="4185" fg:w="58"/><text x="1.1108%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3,733 samples, 0.77%)</title><rect x="0.1068%" y="229" width="0.7678%" height="15" fill="rgb(231,73,38)" fg:x="519" fg:w="3733"/><text x="0.3568%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (2,517 samples, 0.52%)</title><rect x="0.3569%" y="213" width="0.5177%" height="15" fill="rgb(225,20,46)" fg:x="1735" fg:w="2517"/><text x="0.6069%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (148 samples, 0.03%)</title><rect x="0.9305%" y="181" width="0.0304%" height="15" fill="rgb(210,31,41)" fg:x="4524" fg:w="148"/><text x="1.1805%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (423 samples, 0.09%)</title><rect x="0.8746%" y="229" width="0.0870%" height="15" fill="rgb(221,200,47)" fg:x="4252" fg:w="423"/><text x="1.1246%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (407 samples, 0.08%)</title><rect x="0.8779%" y="213" width="0.0837%" height="15" fill="rgb(226,26,5)" fg:x="4268" fg:w="407"/><text x="1.1279%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (168 samples, 0.03%)</title><rect x="0.9270%" y="197" width="0.0346%" height="15" fill="rgb(249,33,26)" fg:x="4507" fg:w="168"/><text x="1.1770%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (125 samples, 0.03%)</title><rect x="0.9616%" y="213" width="0.0257%" height="15" fill="rgb(235,183,28)" fg:x="4675" fg:w="125"/><text x="1.2116%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (126 samples, 0.03%)</title><rect x="0.9616%" y="229" width="0.0259%" height="15" fill="rgb(221,5,38)" fg:x="4675" fg:w="126"/><text x="1.2116%" y="239.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::var::sparse::SparseMatUpperTri&gt; (4,795 samples, 0.99%)</title><rect x="0.0033%" y="245" width="0.9863%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="4795"/><text x="0.2533%" y="255.50"></text></g><g><title>esp`__rdl_alloc (203 samples, 0.04%)</title><rect x="1.0725%" y="213" width="0.0418%" height="15" fill="rgb(241,131,45)" fg:x="5214" fg:w="203"/><text x="1.3225%" y="223.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,475 samples, 0.30%)</title><rect x="2.8957%" y="197" width="0.3034%" height="15" fill="rgb(249,31,29)" fg:x="14078" fg:w="1475"/><text x="3.1457%" y="207.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (86 samples, 0.02%)</title><rect x="3.1814%" y="181" width="0.0177%" height="15" fill="rgb(225,111,53)" fg:x="15467" fg:w="86"/><text x="3.4314%" y="191.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (524 samples, 0.11%)</title><rect x="31.4104%" y="181" width="0.1078%" height="15" fill="rgb(238,160,17)" fg:x="152710" fg:w="524"/><text x="31.6604%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (524 samples, 0.11%)</title><rect x="31.4104%" y="165" width="0.1078%" height="15" fill="rgb(214,148,48)" fg:x="152710" fg:w="524"/><text x="31.6604%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (53 samples, 0.01%)</title><rect x="31.5182%" y="181" width="0.0109%" height="15" fill="rgb(232,36,49)" fg:x="153234" fg:w="53"/><text x="31.7682%" y="191.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMatUpperTri as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (137,813 samples, 28.35%)</title><rect x="3.1990%" y="197" width="28.3463%" height="15" fill="rgb(209,103,24)" fg:x="15553" fg:w="137813"/><text x="3.4490%" y="207.50">esp`&lt;esp::var::sparse::SparseMatUpperTri as ei..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (79 samples, 0.02%)</title><rect x="31.5291%" y="181" width="0.0162%" height="15" fill="rgb(229,88,8)" fg:x="153287" fg:w="79"/><text x="31.7791%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (79 samples, 0.02%)</title><rect x="31.5291%" y="165" width="0.0162%" height="15" fill="rgb(213,181,19)" fg:x="153287" fg:w="79"/><text x="31.7791%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (79 samples, 0.02%)</title><rect x="31.5291%" y="149" width="0.0162%" height="15" fill="rgb(254,191,54)" fg:x="153287" fg:w="79"/><text x="31.7791%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (79 samples, 0.02%)</title><rect x="31.5291%" y="133" width="0.0162%" height="15" fill="rgb(241,83,37)" fg:x="153287" fg:w="79"/><text x="31.7791%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (109 samples, 0.02%)</title><rect x="31.5476%" y="117" width="0.0224%" height="15" fill="rgb(233,36,39)" fg:x="153377" fg:w="109"/><text x="31.7976%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (109 samples, 0.02%)</title><rect x="31.5476%" y="101" width="0.0224%" height="15" fill="rgb(226,3,54)" fg:x="153377" fg:w="109"/><text x="31.7976%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (109 samples, 0.02%)</title><rect x="31.5476%" y="85" width="0.0224%" height="15" fill="rgb(245,192,40)" fg:x="153377" fg:w="109"/><text x="31.7976%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (145 samples, 0.03%)</title><rect x="31.5456%" y="197" width="0.0298%" height="15" fill="rgb(238,167,29)" fg:x="153367" fg:w="145"/><text x="31.7956%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (144 samples, 0.03%)</title><rect x="31.5458%" y="181" width="0.0296%" height="15" fill="rgb(232,182,51)" fg:x="153368" fg:w="144"/><text x="31.7958%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (139 samples, 0.03%)</title><rect x="31.5468%" y="165" width="0.0286%" height="15" fill="rgb(231,60,39)" fg:x="153373" fg:w="139"/><text x="31.7968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (139 samples, 0.03%)</title><rect x="31.5468%" y="149" width="0.0286%" height="15" fill="rgb(208,69,12)" fg:x="153373" fg:w="139"/><text x="31.7968%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (139 samples, 0.03%)</title><rect x="31.5468%" y="133" width="0.0286%" height="15" fill="rgb(235,93,37)" fg:x="153373" fg:w="139"/><text x="31.7968%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (2,142 samples, 0.44%)</title><rect x="32.5456%" y="149" width="0.4406%" height="15" fill="rgb(213,116,39)" fg:x="158229" fg:w="2142"/><text x="32.7956%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (3,794 samples, 0.78%)</title><rect x="33.0107%" y="133" width="0.7804%" height="15" fill="rgb(222,207,29)" fg:x="160490" fg:w="3794"/><text x="33.2607%" y="143.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (5,163 samples, 1.06%)</title><rect x="32.9862%" y="149" width="1.0620%" height="15" fill="rgb(206,96,30)" fg:x="160371" fg:w="5163"/><text x="33.2362%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (1,250 samples, 0.26%)</title><rect x="33.7911%" y="133" width="0.2571%" height="15" fill="rgb(218,138,4)" fg:x="164284" fg:w="1250"/><text x="34.0411%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (290 samples, 0.06%)</title><rect x="33.9885%" y="117" width="0.0596%" height="15" fill="rgb(250,191,14)" fg:x="165244" fg:w="290"/><text x="34.2385%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (7,382 samples, 1.52%)</title><rect x="32.5353%" y="165" width="1.5184%" height="15" fill="rgb(239,60,40)" fg:x="158179" fg:w="7382"/><text x="32.7853%" y="175.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (10,893 samples, 2.24%)</title><rect x="31.8136%" y="181" width="2.2405%" height="15" fill="rgb(206,27,48)" fg:x="154670" fg:w="10893"/><text x="32.0636%" y="191.50">e..</text></g><g><title>libsystem_kernel.dylib`madvise (381 samples, 0.08%)</title><rect x="34.0541%" y="181" width="0.0784%" height="15" fill="rgb(225,35,8)" fg:x="165563" fg:w="381"/><text x="34.3041%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (12,597 samples, 2.59%)</title><rect x="31.5754%" y="197" width="2.5910%" height="15" fill="rgb(250,213,24)" fg:x="153512" fg:w="12597"/><text x="31.8254%" y="207.50">es..</text></g><g><title>libsystem_malloc.dylib`free_large (165 samples, 0.03%)</title><rect x="34.1325%" y="181" width="0.0339%" height="15" fill="rgb(247,123,22)" fg:x="165944" fg:w="165"/><text x="34.3825%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (165 samples, 0.03%)</title><rect x="34.1325%" y="165" width="0.0339%" height="15" fill="rgb(231,138,38)" fg:x="165944" fg:w="165"/><text x="34.3825%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (165 samples, 0.03%)</title><rect x="34.1325%" y="149" width="0.0339%" height="15" fill="rgb(231,145,46)" fg:x="165944" fg:w="165"/><text x="34.3825%" y="159.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (373 samples, 0.08%)</title><rect x="34.1753%" y="181" width="0.0767%" height="15" fill="rgb(251,118,11)" fg:x="166152" fg:w="373"/><text x="34.4253%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (389 samples, 0.08%)</title><rect x="34.1753%" y="197" width="0.0800%" height="15" fill="rgb(217,147,25)" fg:x="166152" fg:w="389"/><text x="34.4253%" y="207.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (216 samples, 0.04%)</title><rect x="34.2553%" y="197" width="0.0444%" height="15" fill="rgb(247,81,37)" fg:x="166541" fg:w="216"/><text x="34.5053%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,601 samples, 0.95%)</title><rect x="34.7008%" y="181" width="0.9464%" height="15" fill="rgb(209,12,38)" fg:x="168707" fg:w="4601"/><text x="34.9508%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (880 samples, 0.18%)</title><rect x="35.6472%" y="181" width="0.1810%" height="15" fill="rgb(227,1,9)" fg:x="173308" fg:w="880"/><text x="35.8972%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (522 samples, 0.11%)</title><rect x="35.8282%" y="181" width="0.1074%" height="15" fill="rgb(248,47,43)" fg:x="174188" fg:w="522"/><text x="36.0782%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (7,957 samples, 1.64%)</title><rect x="34.2997%" y="197" width="1.6367%" height="15" fill="rgb(221,10,30)" fg:x="166757" fg:w="7957"/><text x="34.5497%" y="207.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (400 samples, 0.08%)</title><rect x="35.9386%" y="181" width="0.0823%" height="15" fill="rgb(210,229,1)" fg:x="174725" fg:w="400"/><text x="36.1886%" y="191.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (1,015 samples, 0.21%)</title><rect x="36.0339%" y="165" width="0.2088%" height="15" fill="rgb(222,148,37)" fg:x="175188" fg:w="1015"/><text x="36.2839%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,439 samples, 0.30%)</title><rect x="36.0209%" y="181" width="0.2960%" height="15" fill="rgb(234,67,33)" fg:x="175125" fg:w="1439"/><text x="36.2709%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (361 samples, 0.07%)</title><rect x="36.2426%" y="165" width="0.0743%" height="15" fill="rgb(247,98,35)" fg:x="176203" fg:w="361"/><text x="36.4926%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (131 samples, 0.03%)</title><rect x="36.2899%" y="149" width="0.0269%" height="15" fill="rgb(247,138,52)" fg:x="176433" fg:w="131"/><text x="36.5399%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (1,858 samples, 0.38%)</title><rect x="35.9364%" y="197" width="0.3822%" height="15" fill="rgb(213,79,30)" fg:x="174714" fg:w="1858"/><text x="36.1864%" y="207.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (365 samples, 0.08%)</title><rect x="36.3187%" y="197" width="0.0751%" height="15" fill="rgb(246,177,23)" fg:x="176573" fg:w="365"/><text x="36.5687%" y="207.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (56 samples, 0.01%)</title><rect x="36.3938%" y="197" width="0.0115%" height="15" fill="rgb(230,62,27)" fg:x="176938" fg:w="56"/><text x="36.6438%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,720 samples, 0.35%)</title><rect x="36.4072%" y="197" width="0.3538%" height="15" fill="rgb(216,154,8)" fg:x="177003" fg:w="1720"/><text x="36.6572%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (893 samples, 0.18%)</title><rect x="36.7614%" y="165" width="0.1837%" height="15" fill="rgb(244,35,45)" fg:x="178725" fg:w="893"/><text x="37.0114%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (894 samples, 0.18%)</title><rect x="36.7614%" y="197" width="0.1839%" height="15" fill="rgb(251,115,12)" fg:x="178725" fg:w="894"/><text x="37.0114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (894 samples, 0.18%)</title><rect x="36.7614%" y="181" width="0.1839%" height="15" fill="rgb(240,54,50)" fg:x="178725" fg:w="894"/><text x="37.0114%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (174,387 samples, 35.87%)</title><rect x="1.1235%" y="213" width="35.8691%" height="15" fill="rgb(233,84,52)" fg:x="5462" fg:w="174387"/><text x="1.3735%" y="223.50">esp`eigenvalues::algorithms::davidson::Davidson::new</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (229 samples, 0.05%)</title><rect x="36.9455%" y="197" width="0.0471%" height="15" fill="rgb(207,117,47)" fg:x="179620" fg:w="229"/><text x="37.1955%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (56 samples, 0.01%)</title><rect x="45.9965%" y="165" width="0.0115%" height="15" fill="rgb(249,43,39)" fg:x="223624" fg:w="56"/><text x="46.2465%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6,120 samples, 1.26%)</title><rect x="46.0080%" y="165" width="1.2588%" height="15" fill="rgb(209,38,44)" fg:x="223680" fg:w="6120"/><text x="46.2580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5,852 samples, 1.20%)</title><rect x="46.0632%" y="149" width="1.2037%" height="15" fill="rgb(236,212,23)" fg:x="223948" fg:w="5852"/><text x="46.3132%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (7,796 samples, 1.60%)</title><rect x="45.6937%" y="181" width="1.6035%" height="15" fill="rgb(242,79,21)" fg:x="222152" fg:w="7796"/><text x="45.9437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (148 samples, 0.03%)</title><rect x="47.2668%" y="165" width="0.0304%" height="15" fill="rgb(211,96,35)" fg:x="229800" fg:w="148"/><text x="47.5168%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (83 samples, 0.02%)</title><rect x="47.2973%" y="181" width="0.0171%" height="15" fill="rgb(253,215,40)" fg:x="229948" fg:w="83"/><text x="47.5473%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (83 samples, 0.02%)</title><rect x="47.2973%" y="165" width="0.0171%" height="15" fill="rgb(211,81,21)" fg:x="229948" fg:w="83"/><text x="47.5473%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (82 samples, 0.02%)</title><rect x="47.2975%" y="149" width="0.0169%" height="15" fill="rgb(208,190,38)" fg:x="229949" fg:w="82"/><text x="47.5475%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (182 samples, 0.04%)</title><rect x="47.3195%" y="165" width="0.0374%" height="15" fill="rgb(235,213,38)" fg:x="230056" fg:w="182"/><text x="47.5695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (299 samples, 0.06%)</title><rect x="47.3143%" y="181" width="0.0615%" height="15" fill="rgb(237,122,38)" fg:x="230031" fg:w="299"/><text x="47.5643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (88 samples, 0.02%)</title><rect x="47.3577%" y="165" width="0.0181%" height="15" fill="rgb(244,218,35)" fg:x="230242" fg:w="88"/><text x="47.6077%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (77 samples, 0.02%)</title><rect x="48.4613%" y="165" width="0.0158%" height="15" fill="rgb(240,68,47)" fg:x="235607" fg:w="77"/><text x="48.7113%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (57 samples, 0.01%)</title><rect x="48.4771%" y="165" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="235684" fg:w="57"/><text x="48.7271%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (121 samples, 0.02%)</title><rect x="50.5447%" y="149" width="0.0249%" height="15" fill="rgb(235,124,12)" fg:x="245736" fg:w="121"/><text x="50.7947%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (77 samples, 0.02%)</title><rect x="50.5537%" y="133" width="0.0158%" height="15" fill="rgb(224,169,11)" fg:x="245780" fg:w="77"/><text x="50.8037%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6,356 samples, 1.31%)</title><rect x="50.5695%" y="149" width="1.3073%" height="15" fill="rgb(250,166,2)" fg:x="245857" fg:w="6356"/><text x="50.8195%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6,163 samples, 1.27%)</title><rect x="51.8769%" y="149" width="1.2676%" height="15" fill="rgb(242,216,29)" fg:x="252213" fg:w="6163"/><text x="52.1269%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (64 samples, 0.01%)</title><rect x="53.1445%" y="149" width="0.0132%" height="15" fill="rgb(230,116,27)" fg:x="258376" fg:w="64"/><text x="53.3945%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (58 samples, 0.01%)</title><rect x="53.1577%" y="149" width="0.0119%" height="15" fill="rgb(228,99,48)" fg:x="258440" fg:w="58"/><text x="53.4077%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22,808 samples, 4.69%)</title><rect x="48.4888%" y="165" width="4.6913%" height="15" fill="rgb(253,11,6)" fg:x="235741" fg:w="22808"/><text x="48.7388%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (51 samples, 0.01%)</title><rect x="53.1696%" y="149" width="0.0105%" height="15" fill="rgb(247,143,39)" fg:x="258498" fg:w="51"/><text x="53.4196%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28,220 samples, 5.80%)</title><rect x="47.3758%" y="181" width="5.8045%" height="15" fill="rgb(236,97,10)" fg:x="230330" fg:w="28220"/><text x="47.6258%" y="191.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`szone_size (114 samples, 0.02%)</title><rect x="53.1803%" y="181" width="0.0234%" height="15" fill="rgb(233,208,19)" fg:x="258550" fg:w="114"/><text x="53.4303%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,479 samples, 7.91%)</title><rect x="45.3190%" y="197" width="7.9146%" height="15" fill="rgb(216,164,2)" fg:x="220330" fg:w="38479"/><text x="45.5690%" y="207.50">esp`&lt;hashbr..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (145 samples, 0.03%)</title><rect x="53.2038%" y="181" width="0.0298%" height="15" fill="rgb(220,129,5)" fg:x="258664" fg:w="145"/><text x="53.4538%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (179 samples, 0.04%)</title><rect x="53.2359%" y="197" width="0.0368%" height="15" fill="rgb(242,17,10)" fg:x="258820" fg:w="179"/><text x="53.4859%" y="207.50"></text></g><g><title>esp`__rdl_realloc (66 samples, 0.01%)</title><rect x="53.3490%" y="165" width="0.0136%" height="15" fill="rgb(242,107,0)" fg:x="259370" fg:w="66"/><text x="53.5990%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (148 samples, 0.03%)</title><rect x="53.4658%" y="133" width="0.0304%" height="15" fill="rgb(251,28,31)" fg:x="259938" fg:w="148"/><text x="53.7158%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (824 samples, 0.17%)</title><rect x="53.9033%" y="85" width="0.1695%" height="15" fill="rgb(233,223,10)" fg:x="262065" fg:w="824"/><text x="54.1533%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,492 samples, 0.51%)</title><rect x="53.5806%" y="117" width="0.5126%" height="15" fill="rgb(215,21,27)" fg:x="260496" fg:w="2492"/><text x="53.8306%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,540 samples, 0.32%)</title><rect x="53.7764%" y="101" width="0.3168%" height="15" fill="rgb(232,23,21)" fg:x="261448" fg:w="1540"/><text x="54.0264%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (99 samples, 0.02%)</title><rect x="54.0728%" y="85" width="0.0204%" height="15" fill="rgb(244,5,23)" fg:x="262889" fg:w="99"/><text x="54.3228%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (83 samples, 0.02%)</title><rect x="54.0944%" y="117" width="0.0171%" height="15" fill="rgb(226,81,46)" fg:x="262994" fg:w="83"/><text x="54.3444%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (73 samples, 0.02%)</title><rect x="54.0965%" y="101" width="0.0150%" height="15" fill="rgb(247,70,30)" fg:x="263004" fg:w="73"/><text x="54.3465%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (448 samples, 0.09%)</title><rect x="54.1545%" y="69" width="0.0921%" height="15" fill="rgb(212,68,19)" fg:x="263286" fg:w="448"/><text x="54.4045%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (129 samples, 0.03%)</title><rect x="54.2466%" y="69" width="0.0265%" height="15" fill="rgb(240,187,13)" fg:x="263734" fg:w="129"/><text x="54.4966%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (755 samples, 0.16%)</title><rect x="54.1368%" y="101" width="0.1553%" height="15" fill="rgb(223,113,26)" fg:x="263200" fg:w="755"/><text x="54.3868%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (710 samples, 0.15%)</title><rect x="54.1460%" y="85" width="0.1460%" height="15" fill="rgb(206,192,2)" fg:x="263245" fg:w="710"/><text x="54.3960%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (92 samples, 0.02%)</title><rect x="54.2731%" y="69" width="0.0189%" height="15" fill="rgb(241,108,4)" fg:x="263863" fg:w="92"/><text x="54.5231%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (359 samples, 0.07%)</title><rect x="54.5798%" y="85" width="0.0738%" height="15" fill="rgb(247,173,49)" fg:x="265354" fg:w="359"/><text x="54.8298%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,829 samples, 0.79%)</title><rect x="54.1115%" y="117" width="0.7876%" height="15" fill="rgb(224,114,35)" fg:x="263077" fg:w="3829"/><text x="54.3615%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,940 samples, 0.60%)</title><rect x="54.2943%" y="101" width="0.6047%" height="15" fill="rgb(245,159,27)" fg:x="263966" fg:w="2940"/><text x="54.5443%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,162 samples, 0.24%)</title><rect x="54.6600%" y="85" width="0.2390%" height="15" fill="rgb(245,172,44)" fg:x="265744" fg:w="1162"/><text x="54.9100%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (176 samples, 0.04%)</title><rect x="54.8628%" y="69" width="0.0362%" height="15" fill="rgb(236,23,11)" fg:x="266730" fg:w="176"/><text x="55.1128%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (373 samples, 0.08%)</title><rect x="54.8990%" y="117" width="0.0767%" height="15" fill="rgb(205,117,38)" fg:x="266906" fg:w="373"/><text x="55.1490%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (325 samples, 0.07%)</title><rect x="54.9089%" y="101" width="0.0668%" height="15" fill="rgb(237,72,25)" fg:x="266954" fg:w="325"/><text x="55.1589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (901 samples, 0.19%)</title><rect x="54.9793%" y="117" width="0.1853%" height="15" fill="rgb(244,70,9)" fg:x="267296" fg:w="901"/><text x="55.2293%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9,172 samples, 1.89%)</title><rect x="53.5131%" y="133" width="1.8866%" height="15" fill="rgb(217,125,39)" fg:x="260168" fg:w="9172"/><text x="53.7631%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,143 samples, 0.24%)</title><rect x="55.1646%" y="117" width="0.2351%" height="15" fill="rgb(235,36,10)" fg:x="268197" fg:w="1143"/><text x="55.4146%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9,673 samples, 1.99%)</title><rect x="53.4269%" y="149" width="1.9896%" height="15" fill="rgb(251,123,47)" fg:x="259749" fg:w="9673"/><text x="53.6769%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (1,054 samples, 0.22%)</title><rect x="55.4244%" y="149" width="0.2168%" height="15" fill="rgb(221,13,13)" fg:x="269460" fg:w="1054"/><text x="55.6744%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (995 samples, 0.20%)</title><rect x="55.4365%" y="133" width="0.2047%" height="15" fill="rgb(238,131,9)" fg:x="269519" fg:w="995"/><text x="55.6865%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11,088 samples, 2.28%)</title><rect x="53.3646%" y="165" width="2.2807%" height="15" fill="rgb(211,50,8)" fg:x="259446" fg:w="11088"/><text x="53.6146%" y="175.50">l..</text></g><g><title>esp`alloc::raw_vec::finish_grow (11,307 samples, 2.33%)</title><rect x="53.3290%" y="181" width="2.3257%" height="15" fill="rgb(245,182,24)" fg:x="259273" fg:w="11307"/><text x="53.5790%" y="191.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11,616 samples, 2.39%)</title><rect x="53.2743%" y="197" width="2.3893%" height="15" fill="rgb(242,14,37)" fg:x="259007" fg:w="11616"/><text x="53.5243%" y="207.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (839 samples, 0.17%)</title><rect x="55.6751%" y="197" width="0.1726%" height="15" fill="rgb(246,228,12)" fg:x="270679" fg:w="839"/><text x="55.9251%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (230 samples, 0.05%)</title><rect x="55.8477%" y="197" width="0.0473%" height="15" fill="rgb(213,55,15)" fg:x="271518" fg:w="230"/><text x="56.0977%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (217 samples, 0.04%)</title><rect x="59.3310%" y="149" width="0.0446%" height="15" fill="rgb(209,9,3)" fg:x="288453" fg:w="217"/><text x="59.5810%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (197 samples, 0.04%)</title><rect x="59.3351%" y="133" width="0.0405%" height="15" fill="rgb(230,59,30)" fg:x="288473" fg:w="197"/><text x="59.5851%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (192 samples, 0.04%)</title><rect x="59.3361%" y="117" width="0.0395%" height="15" fill="rgb(209,121,21)" fg:x="288478" fg:w="192"/><text x="59.5861%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (77 samples, 0.02%)</title><rect x="59.3598%" y="101" width="0.0158%" height="15" fill="rgb(220,109,13)" fg:x="288593" fg:w="77"/><text x="59.6098%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (256 samples, 0.05%)</title><rect x="59.4460%" y="101" width="0.0527%" height="15" fill="rgb(232,18,1)" fg:x="289012" fg:w="256"/><text x="59.6960%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (740 samples, 0.15%)</title><rect x="59.6150%" y="69" width="0.1522%" height="15" fill="rgb(215,41,42)" fg:x="289834" fg:w="740"/><text x="59.8650%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (130 samples, 0.03%)</title><rect x="59.7672%" y="69" width="0.0267%" height="15" fill="rgb(224,123,36)" fg:x="290574" fg:w="130"/><text x="60.0172%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,449 samples, 0.30%)</title><rect x="59.4986%" y="101" width="0.2980%" height="15" fill="rgb(240,125,3)" fg:x="289268" fg:w="1449"/><text x="59.7486%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,232 samples, 0.25%)</title><rect x="59.5433%" y="85" width="0.2534%" height="15" fill="rgb(205,98,50)" fg:x="289485" fg:w="1232"/><text x="59.7933%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (49 samples, 0.01%)</title><rect x="59.7989%" y="101" width="0.0101%" height="15" fill="rgb(205,185,37)" fg:x="290728" fg:w="49"/><text x="60.0489%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (75 samples, 0.02%)</title><rect x="59.8682%" y="53" width="0.0154%" height="15" fill="rgb(238,207,15)" fg:x="291065" fg:w="75"/><text x="60.1182%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (140 samples, 0.03%)</title><rect x="59.8837%" y="53" width="0.0288%" height="15" fill="rgb(213,199,42)" fg:x="291140" fg:w="140"/><text x="60.1337%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (619 samples, 0.13%)</title><rect x="59.8143%" y="85" width="0.1273%" height="15" fill="rgb(235,201,11)" fg:x="290803" fg:w="619"/><text x="60.0643%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (463 samples, 0.10%)</title><rect x="59.8464%" y="69" width="0.0952%" height="15" fill="rgb(207,46,11)" fg:x="290959" fg:w="463"/><text x="60.0964%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (142 samples, 0.03%)</title><rect x="59.9125%" y="53" width="0.0292%" height="15" fill="rgb(241,35,35)" fg:x="291280" fg:w="142"/><text x="60.1625%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (104 samples, 0.02%)</title><rect x="59.9861%" y="69" width="0.0214%" height="15" fill="rgb(243,32,47)" fg:x="291638" fg:w="104"/><text x="60.2361%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,300 samples, 0.27%)</title><rect x="59.8090%" y="101" width="0.2674%" height="15" fill="rgb(247,202,23)" fg:x="290777" fg:w="1300"/><text x="60.0590%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (654 samples, 0.13%)</title><rect x="59.9419%" y="85" width="0.1345%" height="15" fill="rgb(219,102,11)" fg:x="291423" fg:w="654"/><text x="60.1919%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (332 samples, 0.07%)</title><rect x="60.0081%" y="69" width="0.0683%" height="15" fill="rgb(243,110,44)" fg:x="291745" fg:w="332"/><text x="60.2581%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (102 samples, 0.02%)</title><rect x="60.0764%" y="101" width="0.0210%" height="15" fill="rgb(222,74,54)" fg:x="292077" fg:w="102"/><text x="60.3264%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (82 samples, 0.02%)</title><rect x="60.0805%" y="85" width="0.0169%" height="15" fill="rgb(216,99,12)" fg:x="292097" fg:w="82"/><text x="60.3305%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (321 samples, 0.07%)</title><rect x="60.0988%" y="101" width="0.0660%" height="15" fill="rgb(226,22,26)" fg:x="292186" fg:w="321"/><text x="60.3488%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (79 samples, 0.02%)</title><rect x="60.1486%" y="85" width="0.0162%" height="15" fill="rgb(217,163,10)" fg:x="292428" fg:w="79"/><text x="60.3986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6,131 samples, 1.26%)</title><rect x="59.4307%" y="117" width="1.2611%" height="15" fill="rgb(213,25,53)" fg:x="288938" fg:w="6131"/><text x="59.6807%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,562 samples, 0.53%)</title><rect x="60.1648%" y="101" width="0.5270%" height="15" fill="rgb(252,105,26)" fg:x="292507" fg:w="2562"/><text x="60.4148%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6,280 samples, 1.29%)</title><rect x="59.4050%" y="133" width="1.2917%" height="15" fill="rgb(220,39,43)" fg:x="288813" fg:w="6280"/><text x="59.6550%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_size (248 samples, 0.05%)</title><rect x="60.6967%" y="133" width="0.0510%" height="15" fill="rgb(229,68,48)" fg:x="295093" fg:w="248"/><text x="60.9467%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (672 samples, 0.14%)</title><rect x="60.7490%" y="133" width="0.1382%" height="15" fill="rgb(252,8,32)" fg:x="295347" fg:w="672"/><text x="60.9990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (654 samples, 0.13%)</title><rect x="60.7527%" y="117" width="0.1345%" height="15" fill="rgb(223,20,43)" fg:x="295365" fg:w="654"/><text x="61.0027%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7,350 samples, 1.51%)</title><rect x="59.3764%" y="149" width="1.5118%" height="15" fill="rgb(229,81,49)" fg:x="288674" fg:w="7350"/><text x="59.6264%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (7,680 samples, 1.58%)</title><rect x="59.3203%" y="165" width="1.5797%" height="15" fill="rgb(236,28,36)" fg:x="288401" fg:w="7680"/><text x="59.5703%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (54 samples, 0.01%)</title><rect x="60.8889%" y="149" width="0.0111%" height="15" fill="rgb(249,185,26)" fg:x="296027" fg:w="54"/><text x="61.1389%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7,813 samples, 1.61%)</title><rect x="59.3005%" y="181" width="1.6070%" height="15" fill="rgb(249,174,33)" fg:x="288305" fg:w="7813"/><text x="59.5505%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (147 samples, 0.03%)</title><rect x="60.9102%" y="181" width="0.0302%" height="15" fill="rgb(233,201,37)" fg:x="296131" fg:w="147"/><text x="61.1602%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (54,681 samples, 11.25%)</title><rect x="55.8950%" y="197" width="11.2472%" height="15" fill="rgb(221,78,26)" fg:x="271748" fg:w="54681"/><text x="56.1450%" y="207.50">esp`esp::var::off..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (30,151 samples, 6.20%)</title><rect x="60.9405%" y="181" width="6.2017%" height="15" fill="rgb(250,127,30)" fg:x="296278" fg:w="30151"/><text x="61.1905%" y="191.50">esp`esp:..</text></g><g><title>esp`esp::ham::Ham::ham_doub (16,264 samples, 3.35%)</title><rect x="63.7969%" y="165" width="3.3453%" height="15" fill="rgb(230,49,44)" fg:x="310165" fg:w="16264"/><text x="64.0469%" y="175.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (72 samples, 0.01%)</title><rect x="68.6272%" y="181" width="0.0148%" height="15" fill="rgb(229,67,23)" fg:x="333649" fg:w="72"/><text x="68.8772%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (4,648 samples, 0.96%)</title><rect x="71.0595%" y="165" width="0.9560%" height="15" fill="rgb(249,83,47)" fg:x="345474" fg:w="4648"/><text x="71.3095%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,924 samples, 0.60%)</title><rect x="71.4141%" y="149" width="0.6014%" height="15" fill="rgb(215,43,3)" fg:x="347198" fg:w="2924"/><text x="71.6641%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (19,345 samples, 3.98%)</title><rect x="68.6492%" y="181" width="3.9790%" height="15" fill="rgb(238,154,13)" fg:x="333756" fg:w="19345"/><text x="68.8992%" y="191.50">esp`..</text></g><g><title>esp`esp::ham::Ham::ham_sing (2,979 samples, 0.61%)</title><rect x="72.0155%" y="165" width="0.6127%" height="15" fill="rgb(219,56,2)" fg:x="350122" fg:w="2979"/><text x="72.2655%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,956 samples, 0.40%)</title><rect x="72.2259%" y="149" width="0.4023%" height="15" fill="rgb(233,0,4)" fg:x="351145" fg:w="1956"/><text x="72.4759%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (103 samples, 0.02%)</title><rect x="73.0637%" y="85" width="0.0212%" height="15" fill="rgb(235,30,7)" fg:x="355218" fg:w="103"/><text x="73.3137%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (103 samples, 0.02%)</title><rect x="73.1011%" y="53" width="0.0212%" height="15" fill="rgb(250,79,13)" fg:x="355400" fg:w="103"/><text x="73.3511%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (239 samples, 0.05%)</title><rect x="73.0848%" y="85" width="0.0492%" height="15" fill="rgb(211,146,34)" fg:x="355321" fg:w="239"/><text x="73.3348%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (215 samples, 0.04%)</title><rect x="73.0898%" y="69" width="0.0442%" height="15" fill="rgb(228,22,38)" fg:x="355345" fg:w="215"/><text x="73.3398%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (59 samples, 0.01%)</title><rect x="73.1640%" y="37" width="0.0121%" height="15" fill="rgb(235,168,5)" fg:x="355706" fg:w="59"/><text x="73.4140%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (207 samples, 0.04%)</title><rect x="73.1455%" y="69" width="0.0426%" height="15" fill="rgb(221,155,16)" fg:x="355616" fg:w="207"/><text x="73.3955%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (166 samples, 0.03%)</title><rect x="73.1540%" y="53" width="0.0341%" height="15" fill="rgb(215,215,53)" fg:x="355657" fg:w="166"/><text x="73.4040%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (58 samples, 0.01%)</title><rect x="73.1762%" y="37" width="0.0119%" height="15" fill="rgb(223,4,10)" fg:x="355765" fg:w="58"/><text x="73.4262%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (278 samples, 0.06%)</title><rect x="73.1439%" y="85" width="0.0572%" height="15" fill="rgb(234,103,6)" fg:x="355608" fg:w="278"/><text x="73.3939%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 0.01%)</title><rect x="73.1881%" y="69" width="0.0130%" height="15" fill="rgb(227,97,0)" fg:x="355823" fg:w="63"/><text x="73.4381%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (56 samples, 0.01%)</title><rect x="73.2037%" y="85" width="0.0115%" height="15" fill="rgb(234,150,53)" fg:x="355899" fg:w="56"/><text x="73.4537%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2,046 samples, 0.42%)</title><rect x="73.0614%" y="101" width="0.4208%" height="15" fill="rgb(228,201,54)" fg:x="355207" fg:w="2046"/><text x="73.3114%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,298 samples, 0.27%)</title><rect x="73.2153%" y="85" width="0.2670%" height="15" fill="rgb(222,22,37)" fg:x="355955" fg:w="1298"/><text x="73.4653%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2,082 samples, 0.43%)</title><rect x="73.0558%" y="117" width="0.4282%" height="15" fill="rgb(237,53,32)" fg:x="355180" fg:w="2082"/><text x="73.3058%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (92 samples, 0.02%)</title><rect x="73.4841%" y="117" width="0.0189%" height="15" fill="rgb(233,25,53)" fg:x="357262" fg:w="92"/><text x="73.7341%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,332 samples, 0.48%)</title><rect x="73.0486%" y="133" width="0.4797%" height="15" fill="rgb(210,40,34)" fg:x="355145" fg:w="2332"/><text x="73.2986%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (122 samples, 0.03%)</title><rect x="73.5032%" y="117" width="0.0251%" height="15" fill="rgb(241,220,44)" fg:x="357355" fg:w="122"/><text x="73.7532%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (119 samples, 0.02%)</title><rect x="73.5038%" y="101" width="0.0245%" height="15" fill="rgb(235,28,35)" fg:x="357358" fg:w="119"/><text x="73.7538%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,359 samples, 0.49%)</title><rect x="73.0447%" y="149" width="0.4852%" height="15" fill="rgb(210,56,17)" fg:x="355126" fg:w="2359"/><text x="73.2947%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el (4,391 samples, 0.90%)</title><rect x="72.6286%" y="181" width="0.9032%" height="15" fill="rgb(224,130,29)" fg:x="353103" fg:w="4391"/><text x="72.8786%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,384 samples, 0.49%)</title><rect x="73.0415%" y="165" width="0.4904%" height="15" fill="rgb(235,212,8)" fg:x="355110" fg:w="2384"/><text x="73.2915%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (32,954 samples, 6.78%)</title><rect x="67.1421%" y="197" width="6.7782%" height="15" fill="rgb(223,33,50)" fg:x="326429" fg:w="32954"/><text x="67.3921%" y="207.50">esp`esp::..</text></g><g><title>esp`hashbrown::map::make_hash (1,889 samples, 0.39%)</title><rect x="73.5318%" y="181" width="0.3885%" height="15" fill="rgb(219,149,13)" fg:x="357494" fg:w="1889"/><text x="73.7818%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,156 samples, 0.24%)</title><rect x="73.6826%" y="165" width="0.2378%" height="15" fill="rgb(250,156,29)" fg:x="358227" fg:w="1156"/><text x="73.9326%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (156 samples, 0.03%)</title><rect x="76.9989%" y="133" width="0.0321%" height="15" fill="rgb(216,193,19)" fg:x="374350" fg:w="156"/><text x="77.2489%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (131 samples, 0.03%)</title><rect x="77.0040%" y="117" width="0.0269%" height="15" fill="rgb(216,135,14)" fg:x="374375" fg:w="131"/><text x="77.2540%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (113 samples, 0.02%)</title><rect x="77.0077%" y="101" width="0.0232%" height="15" fill="rgb(241,47,5)" fg:x="374393" fg:w="113"/><text x="77.2577%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (56 samples, 0.01%)</title><rect x="77.0342%" y="101" width="0.0115%" height="15" fill="rgb(233,42,35)" fg:x="374522" fg:w="56"/><text x="77.2842%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (67 samples, 0.01%)</title><rect x="77.0326%" y="117" width="0.0138%" height="15" fill="rgb(231,13,6)" fg:x="374514" fg:w="67"/><text x="77.2826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (82 samples, 0.02%)</title><rect x="77.0312%" y="133" width="0.0169%" height="15" fill="rgb(207,181,40)" fg:x="374507" fg:w="82"/><text x="77.2812%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (257 samples, 0.05%)</title><rect x="76.9960%" y="149" width="0.0529%" height="15" fill="rgb(254,173,49)" fg:x="374336" fg:w="257"/><text x="77.2460%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (301 samples, 0.06%)</title><rect x="76.9886%" y="165" width="0.0619%" height="15" fill="rgb(221,1,38)" fg:x="374300" fg:w="301"/><text x="77.2386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (294 samples, 0.06%)</title><rect x="77.0550%" y="149" width="0.0605%" height="15" fill="rgb(206,124,46)" fg:x="374623" fg:w="294"/><text x="77.3050%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (241 samples, 0.05%)</title><rect x="77.0659%" y="133" width="0.0496%" height="15" fill="rgb(249,21,11)" fg:x="374676" fg:w="241"/><text x="77.3159%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (127 samples, 0.03%)</title><rect x="77.0894%" y="117" width="0.0261%" height="15" fill="rgb(222,201,40)" fg:x="374790" fg:w="127"/><text x="77.3394%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (315 samples, 0.06%)</title><rect x="77.0509%" y="165" width="0.0648%" height="15" fill="rgb(235,61,29)" fg:x="374603" fg:w="315"/><text x="77.3009%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (148 samples, 0.03%)</title><rect x="77.1165%" y="165" width="0.0304%" height="15" fill="rgb(219,207,3)" fg:x="374922" fg:w="148"/><text x="77.3665%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (85 samples, 0.02%)</title><rect x="77.1295%" y="149" width="0.0175%" height="15" fill="rgb(222,56,46)" fg:x="374985" fg:w="85"/><text x="77.3795%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (80 samples, 0.02%)</title><rect x="77.1305%" y="133" width="0.0165%" height="15" fill="rgb(239,76,54)" fg:x="374990" fg:w="80"/><text x="77.3805%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (127 samples, 0.03%)</title><rect x="77.1867%" y="133" width="0.0261%" height="15" fill="rgb(231,124,27)" fg:x="375263" fg:w="127"/><text x="77.4367%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (303 samples, 0.06%)</title><rect x="77.1515%" y="165" width="0.0623%" height="15" fill="rgb(249,195,6)" fg:x="375092" fg:w="303"/><text x="77.4015%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (205 samples, 0.04%)</title><rect x="77.1716%" y="149" width="0.0422%" height="15" fill="rgb(237,174,47)" fg:x="375190" fg:w="205"/><text x="77.4216%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (12,457 samples, 2.56%)</title><rect x="74.7630%" y="181" width="2.5622%" height="15" fill="rgb(206,201,31)" fg:x="363480" fg:w="12457"/><text x="75.0130%" y="191.50">es..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (528 samples, 0.11%)</title><rect x="77.2167%" y="165" width="0.1086%" height="15" fill="rgb(231,57,52)" fg:x="375409" fg:w="528"/><text x="77.4667%" y="175.50"></text></g><g><title>esp`esp::var::sparse::SparseMatUpperTri::sort_remove_duplicates (16,665 samples, 3.43%)</title><rect x="73.9203%" y="197" width="3.4278%" height="15" fill="rgb(248,177,22)" fg:x="359383" fg:w="16665"/><text x="74.1703%" y="207.50">esp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (81 samples, 0.02%)</title><rect x="77.3315%" y="181" width="0.0167%" height="15" fill="rgb(215,211,37)" fg:x="375967" fg:w="81"/><text x="77.5815%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::expand_sparse_ham_rows (91 samples, 0.02%)</title><rect x="77.3481%" y="197" width="0.0187%" height="15" fill="rgb(241,128,51)" fg:x="376048" fg:w="91"/><text x="77.5981%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (15,392 samples, 3.17%)</title><rect x="77.3668%" y="197" width="3.1659%" height="15" fill="rgb(227,165,31)" fg:x="376139" fg:w="15392"/><text x="77.6168%" y="207.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,561 samples, 0.53%)</title><rect x="80.0060%" y="181" width="0.5268%" height="15" fill="rgb(228,167,24)" fg:x="388970" fg:w="2561"/><text x="80.2560%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,795 samples, 0.37%)</title><rect x="81.3870%" y="181" width="0.3692%" height="15" fill="rgb(228,143,12)" fg:x="395684" fg:w="1795"/><text x="81.6370%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (240 samples, 0.05%)</title><rect x="82.2095%" y="165" width="0.0494%" height="15" fill="rgb(249,149,8)" fg:x="399683" fg:w="240"/><text x="82.4595%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,393 samples, 0.49%)</title><rect x="84.0039%" y="149" width="0.4922%" height="15" fill="rgb(243,35,44)" fg:x="408407" fg:w="2393"/><text x="84.2539%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (82 samples, 0.02%)</title><rect x="84.5412%" y="69" width="0.0169%" height="15" fill="rgb(246,89,9)" fg:x="411019" fg:w="82"/><text x="84.7912%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (264 samples, 0.05%)</title><rect x="84.5177%" y="101" width="0.0543%" height="15" fill="rgb(233,213,13)" fg:x="410905" fg:w="264"/><text x="84.7677%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (210 samples, 0.04%)</title><rect x="84.5289%" y="85" width="0.0432%" height="15" fill="rgb(233,141,41)" fg:x="410959" fg:w="210"/><text x="84.7789%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (467 samples, 0.10%)</title><rect x="84.5031%" y="133" width="0.0961%" height="15" fill="rgb(239,167,4)" fg:x="410834" fg:w="467"/><text x="84.7531%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (451 samples, 0.09%)</title><rect x="84.5064%" y="117" width="0.0928%" height="15" fill="rgb(209,217,16)" fg:x="410850" fg:w="451"/><text x="84.7564%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (132 samples, 0.03%)</title><rect x="84.5720%" y="101" width="0.0272%" height="15" fill="rgb(219,88,35)" fg:x="411169" fg:w="132"/><text x="84.8220%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (92 samples, 0.02%)</title><rect x="84.5803%" y="85" width="0.0189%" height="15" fill="rgb(220,193,23)" fg:x="411209" fg:w="92"/><text x="84.8303%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (499 samples, 0.10%)</title><rect x="84.5996%" y="133" width="0.1026%" height="15" fill="rgb(230,90,52)" fg:x="411303" fg:w="499"/><text x="84.8496%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1,011 samples, 0.21%)</title><rect x="84.4961%" y="149" width="0.2079%" height="15" fill="rgb(252,106,19)" fg:x="410800" fg:w="1011"/><text x="84.7461%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (334 samples, 0.07%)</title><rect x="84.7041%" y="149" width="0.0687%" height="15" fill="rgb(206,74,20)" fg:x="411811" fg:w="334"/><text x="84.9541%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (67 samples, 0.01%)</title><rect x="84.7868%" y="133" width="0.0138%" height="15" fill="rgb(230,138,44)" fg:x="412213" fg:w="67"/><text x="85.0368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (58 samples, 0.01%)</title><rect x="84.7886%" y="117" width="0.0119%" height="15" fill="rgb(235,182,43)" fg:x="412222" fg:w="58"/><text x="85.0386%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (137 samples, 0.03%)</title><rect x="84.7730%" y="149" width="0.0282%" height="15" fill="rgb(242,16,51)" fg:x="412146" fg:w="137"/><text x="85.0230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (93 samples, 0.02%)</title><rect x="84.8082%" y="149" width="0.0191%" height="15" fill="rgb(248,9,4)" fg:x="412317" fg:w="93"/><text x="85.0582%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (68 samples, 0.01%)</title><rect x="84.8273%" y="149" width="0.0140%" height="15" fill="rgb(210,31,22)" fg:x="412410" fg:w="68"/><text x="85.0773%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (52 samples, 0.01%)</title><rect x="84.8306%" y="133" width="0.0107%" height="15" fill="rgb(239,54,39)" fg:x="412426" fg:w="52"/><text x="85.0806%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (12,580 samples, 2.59%)</title><rect x="82.2589%" y="165" width="2.5875%" height="15" fill="rgb(230,99,41)" fg:x="399923" fg:w="12580"/><text x="82.5089%" y="175.50">es..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (15,056 samples, 3.10%)</title><rect x="81.7562%" y="181" width="3.0968%" height="15" fill="rgb(253,106,12)" fg:x="397479" fg:w="15056"/><text x="82.0062%" y="191.50">esp..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21,008 samples, 4.32%)</title><rect x="80.5328%" y="197" width="4.3211%" height="15" fill="rgb(213,46,41)" fg:x="391531" fg:w="21008"/><text x="80.7828%" y="207.50">esp`h..</text></g><g><title>esp`hashbrown::map::make_hash (3,569 samples, 0.73%)</title><rect x="84.8538%" y="197" width="0.7341%" height="15" fill="rgb(215,133,35)" fg:x="412539" fg:w="3569"/><text x="85.1038%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (2,083 samples, 0.43%)</title><rect x="85.1595%" y="181" width="0.4284%" height="15" fill="rgb(213,28,5)" fg:x="414025" fg:w="2083"/><text x="85.4095%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (98 samples, 0.02%)</title><rect x="85.5879%" y="197" width="0.0202%" height="15" fill="rgb(215,77,49)" fg:x="416108" fg:w="98"/><text x="85.8379%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (36,241 samples, 7.45%)</title><rect x="85.6081%" y="197" width="7.4543%" height="15" fill="rgb(248,100,22)" fg:x="416206" fg:w="36241"/><text x="85.8581%" y="207.50">esp`std::c..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (6,146 samples, 1.26%)</title><rect x="91.7982%" y="181" width="1.2642%" height="15" fill="rgb(208,67,9)" fg:x="446301" fg:w="6146"/><text x="92.0482%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (260 samples, 0.05%)</title><rect x="93.0630%" y="197" width="0.0535%" height="15" fill="rgb(219,133,21)" fg:x="452450" fg:w="260"/><text x="93.3130%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (80 samples, 0.02%)</title><rect x="93.5733%" y="165" width="0.0165%" height="15" fill="rgb(246,46,29)" fg:x="454931" fg:w="80"/><text x="93.8233%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17,159 samples, 3.53%)</title><rect x="93.4230%" y="181" width="3.5294%" height="15" fill="rgb(246,185,52)" fg:x="454200" fg:w="17159"/><text x="93.6730%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16,348 samples, 3.36%)</title><rect x="93.5898%" y="165" width="3.3626%" height="15" fill="rgb(252,136,11)" fg:x="455011" fg:w="16348"/><text x="93.8398%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6,980 samples, 1.44%)</title><rect x="95.5166%" y="149" width="1.4357%" height="15" fill="rgb(219,138,53)" fg:x="464379" fg:w="6980"/><text x="95.7666%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,219 samples, 0.25%)</title><rect x="96.7016%" y="133" width="0.2507%" height="15" fill="rgb(211,51,23)" fg:x="470140" fg:w="1219"/><text x="96.9516%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18,693 samples, 3.84%)</title><rect x="93.1165%" y="197" width="3.8449%" height="15" fill="rgb(247,221,28)" fg:x="452710" fg:w="18693"/><text x="93.3665%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (121 samples, 0.02%)</title><rect x="96.9614%" y="197" width="0.0249%" height="15" fill="rgb(251,222,45)" fg:x="471403" fg:w="121"/><text x="97.2114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (213 samples, 0.04%)</title><rect x="96.9863%" y="197" width="0.0438%" height="15" fill="rgb(217,162,53)" fg:x="471524" fg:w="213"/><text x="97.2363%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (177 samples, 0.04%)</title><rect x="97.0301%" y="197" width="0.0364%" height="15" fill="rgb(229,93,14)" fg:x="471737" fg:w="177"/><text x="97.2801%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (128 samples, 0.03%)</title><rect x="97.0665%" y="197" width="0.0263%" height="15" fill="rgb(209,67,49)" fg:x="471914" fg:w="128"/><text x="97.3165%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (105 samples, 0.02%)</title><rect x="97.0712%" y="181" width="0.0216%" height="15" fill="rgb(213,87,29)" fg:x="471937" fg:w="105"/><text x="97.3212%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (105 samples, 0.02%)</title><rect x="97.0712%" y="165" width="0.0216%" height="15" fill="rgb(205,151,52)" fg:x="471937" fg:w="105"/><text x="97.3212%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (89 samples, 0.02%)</title><rect x="97.0967%" y="197" width="0.0183%" height="15" fill="rgb(253,215,39)" fg:x="472061" fg:w="89"/><text x="97.3467%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (384 samples, 0.08%)</title><rect x="97.1161%" y="197" width="0.0790%" height="15" fill="rgb(221,220,41)" fg:x="472155" fg:w="384"/><text x="97.3661%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (51 samples, 0.01%)</title><rect x="97.1950%" y="197" width="0.0105%" height="15" fill="rgb(218,133,21)" fg:x="472539" fg:w="51"/><text x="97.4450%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (292,885 samples, 60.24%)</title><rect x="36.9926%" y="213" width="60.2426%" height="15" fill="rgb(221,193,43)" fg:x="179849" fg:w="292885"/><text x="37.2426%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (144 samples, 0.03%)</title><rect x="97.2055%" y="197" width="0.0296%" height="15" fill="rgb(240,128,52)" fg:x="472590" fg:w="144"/><text x="97.4555%" y="207.50"></text></g><g><title>esp`esp::var::off_diag::add_el (112 samples, 0.02%)</title><rect x="97.2352%" y="213" width="0.0230%" height="15" fill="rgb(253,114,12)" fg:x="472734" fg:w="112"/><text x="97.4852%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (307 samples, 0.06%)</title><rect x="97.2582%" y="213" width="0.0631%" height="15" fill="rgb(215,223,47)" fg:x="472846" fg:w="307"/><text x="97.5082%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (132 samples, 0.03%)</title><rect x="97.3213%" y="213" width="0.0272%" height="15" fill="rgb(248,225,23)" fg:x="473153" fg:w="132"/><text x="97.5713%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (119 samples, 0.02%)</title><rect x="97.3485%" y="213" width="0.0245%" height="15" fill="rgb(250,108,0)" fg:x="473285" fg:w="119"/><text x="97.5985%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (345 samples, 0.07%)</title><rect x="97.3746%" y="213" width="0.0710%" height="15" fill="rgb(228,208,7)" fg:x="473412" fg:w="345"/><text x="97.6246%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (108 samples, 0.02%)</title><rect x="97.4470%" y="213" width="0.0222%" height="15" fill="rgb(244,45,10)" fg:x="473764" fg:w="108"/><text x="97.6970%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (134 samples, 0.03%)</title><rect x="97.4721%" y="213" width="0.0276%" height="15" fill="rgb(207,125,25)" fg:x="473886" fg:w="134"/><text x="97.7221%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (469,185 samples, 96.51%)</title><rect x="0.9953%" y="229" width="96.5052%" height="15" fill="rgb(210,195,18)" fg:x="4839" fg:w="469185"/><text x="1.2453%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (59 samples, 0.01%)</title><rect x="97.7545%" y="213" width="0.0121%" height="15" fill="rgb(249,80,12)" fg:x="475259" fg:w="59"/><text x="98.0045%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (58 samples, 0.01%)</title><rect x="97.7547%" y="197" width="0.0119%" height="15" fill="rgb(221,65,9)" fg:x="475260" fg:w="58"/><text x="98.0047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 0.01%)</title><rect x="97.7547%" y="181" width="0.0119%" height="15" fill="rgb(235,49,36)" fg:x="475260" fg:w="58"/><text x="98.0047%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (58 samples, 0.01%)</title><rect x="97.7547%" y="165" width="0.0119%" height="15" fill="rgb(225,32,20)" fg:x="475260" fg:w="58"/><text x="98.0047%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (58 samples, 0.01%)</title><rect x="97.7547%" y="149" width="0.0119%" height="15" fill="rgb(215,141,46)" fg:x="475260" fg:w="58"/><text x="98.0047%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (52 samples, 0.01%)</title><rect x="97.7761%" y="213" width="0.0107%" height="15" fill="rgb(250,160,47)" fg:x="475364" fg:w="52"/><text x="98.0261%" y="223.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (306 samples, 0.06%)</title><rect x="97.7868%" y="213" width="0.0629%" height="15" fill="rgb(216,222,40)" fg:x="475416" fg:w="306"/><text x="98.0368%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (1,823 samples, 0.37%)</title><rect x="97.8497%" y="213" width="0.3750%" height="15" fill="rgb(234,217,39)" fg:x="475722" fg:w="1823"/><text x="98.0997%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,373 samples, 0.28%)</title><rect x="97.9423%" y="197" width="0.2824%" height="15" fill="rgb(207,178,40)" fg:x="476172" fg:w="1373"/><text x="98.1923%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (1,319 samples, 0.27%)</title><rect x="98.2247%" y="213" width="0.2713%" height="15" fill="rgb(221,136,13)" fg:x="477545" fg:w="1319"/><text x="98.4747%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (912 samples, 0.19%)</title><rect x="98.3084%" y="197" width="0.1876%" height="15" fill="rgb(249,199,10)" fg:x="477952" fg:w="912"/><text x="98.5584%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5,081 samples, 1.05%)</title><rect x="98.4960%" y="213" width="1.0451%" height="15" fill="rgb(249,222,13)" fg:x="478864" fg:w="5081"/><text x="98.7460%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (381 samples, 0.08%)</title><rect x="99.4627%" y="197" width="0.0784%" height="15" fill="rgb(244,185,38)" fg:x="483564" fg:w="381"/><text x="99.7127%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (59 samples, 0.01%)</title><rect x="99.5549%" y="197" width="0.0121%" height="15" fill="rgb(236,202,9)" fg:x="484012" fg:w="59"/><text x="99.8049%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (162 samples, 0.03%)</title><rect x="99.6795%" y="165" width="0.0333%" height="15" fill="rgb(250,229,37)" fg:x="484618" fg:w="162"/><text x="99.9295%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (91 samples, 0.02%)</title><rect x="99.6941%" y="149" width="0.0187%" height="15" fill="rgb(206,174,23)" fg:x="484689" fg:w="91"/><text x="99.9441%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (987 samples, 0.20%)</title><rect x="99.5411%" y="213" width="0.2030%" height="15" fill="rgb(211,33,43)" fg:x="483945" fg:w="987"/><text x="99.7911%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (861 samples, 0.18%)</title><rect x="99.5670%" y="197" width="0.1771%" height="15" fill="rgb(245,58,50)" fg:x="484071" fg:w="861"/><text x="99.8170%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (652 samples, 0.13%)</title><rect x="99.6100%" y="181" width="0.1341%" height="15" fill="rgb(244,68,36)" fg:x="484280" fg:w="652"/><text x="99.8600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (115 samples, 0.02%)</title><rect x="99.7205%" y="165" width="0.0237%" height="15" fill="rgb(232,229,15)" fg:x="484817" fg:w="115"/><text x="99.9705%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (115 samples, 0.02%)</title><rect x="99.7205%" y="149" width="0.0237%" height="15" fill="rgb(254,30,23)" fg:x="484817" fg:w="115"/><text x="99.9705%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (115 samples, 0.02%)</title><rect x="99.7205%" y="133" width="0.0237%" height="15" fill="rgb(235,160,14)" fg:x="484817" fg:w="115"/><text x="99.9705%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (354 samples, 0.07%)</title><rect x="99.7441%" y="213" width="0.0728%" height="15" fill="rgb(212,155,44)" fg:x="484932" fg:w="354"/><text x="99.9941%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (193 samples, 0.04%)</title><rect x="99.7772%" y="197" width="0.0397%" height="15" fill="rgb(226,2,50)" fg:x="485093" fg:w="193"/><text x="100.0272%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::find_new_dets (11,292 samples, 2.32%)</title><rect x="97.5005%" y="229" width="2.3226%" height="15" fill="rgb(234,177,6)" fg:x="474024" fg:w="11292"/><text x="97.7505%" y="239.50">e..</text></g><g><title>esp`esp::var::variational (480,512 samples, 98.83%)</title><rect x="0.9953%" y="245" width="98.8350%" height="15" fill="rgb(217,24,9)" fg:x="4839" fg:w="480512"/><text x="1.2453%" y="255.50">esp`esp::var::variational</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (60 samples, 0.01%)</title><rect x="99.8573%" y="197" width="0.0123%" height="15" fill="rgb(220,13,46)" fg:x="485482" fg:w="60"/><text x="100.1073%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (59 samples, 0.01%)</title><rect x="99.8575%" y="181" width="0.0121%" height="15" fill="rgb(239,221,27)" fg:x="485483" fg:w="59"/><text x="100.1075%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (58 samples, 0.01%)</title><rect x="99.8577%" y="165" width="0.0119%" height="15" fill="rgb(222,198,25)" fg:x="485484" fg:w="58"/><text x="100.1077%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (58 samples, 0.01%)</title><rect x="99.8577%" y="149" width="0.0119%" height="15" fill="rgb(211,99,13)" fg:x="485484" fg:w="58"/><text x="100.1077%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (58 samples, 0.01%)</title><rect x="99.8577%" y="133" width="0.0119%" height="15" fill="rgb(232,111,31)" fg:x="485484" fg:w="58"/><text x="100.1077%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (52 samples, 0.01%)</title><rect x="99.8589%" y="117" width="0.0107%" height="15" fill="rgb(245,82,37)" fg:x="485490" fg:w="52"/><text x="100.1089%" y="127.50"></text></g><g><title>esp`alloc::slice::merge_sort (115 samples, 0.02%)</title><rect x="99.8696%" y="197" width="0.0237%" height="15" fill="rgb(227,149,46)" fg:x="485542" fg:w="115"/><text x="100.1196%" y="207.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (327 samples, 0.07%)</title><rect x="99.8309%" y="213" width="0.0673%" height="15" fill="rgb(218,36,50)" fg:x="485354" fg:w="327"/><text x="100.0809%" y="223.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (468 samples, 0.10%)</title><rect x="99.8303%" y="245" width="0.0963%" height="15" fill="rgb(226,80,48)" fg:x="485351" fg:w="468"/><text x="100.0803%" y="255.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (468 samples, 0.10%)</title><rect x="99.8303%" y="229" width="0.0963%" height="15" fill="rgb(238,224,15)" fg:x="485351" fg:w="468"/><text x="100.0803%" y="239.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (138 samples, 0.03%)</title><rect x="99.8982%" y="213" width="0.0284%" height="15" fill="rgb(241,136,10)" fg:x="485681" fg:w="138"/><text x="100.1482%" y="223.50"></text></g><g><title>esp`std::rt::lang_start::_{{closure}} (485,848 samples, 99.93%)</title><rect x="0.0002%" y="293" width="99.9325%" height="15" fill="rgb(208,32,45)" fg:x="1" fg:w="485848"/><text x="0.2502%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (485,848 samples, 99.93%)</title><rect x="0.0002%" y="277" width="99.9325%" height="15" fill="rgb(207,135,9)" fg:x="1" fg:w="485848"/><text x="0.2502%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (485,848 samples, 99.93%)</title><rect x="0.0002%" y="261" width="99.9325%" height="15" fill="rgb(206,86,44)" fg:x="1" fg:w="485848"/><text x="0.2502%" y="271.50">esp`esp::main</text></g><g><title>esp`main (485,850 samples, 99.93%)</title><rect x="0.0000%" y="325" width="99.9329%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="485850"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (485,849 samples, 99.93%)</title><rect x="0.0002%" y="309" width="99.9327%" height="15" fill="rgb(206,64,50)" fg:x="1" fg:w="485849"/><text x="0.2502%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>all (486,176 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="486176"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (486,176 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="486176"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (486,176 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(210,75,36)" fg:x="0" fg:w="486176"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (326 samples, 0.07%)</title><rect x="99.9329%" y="325" width="0.0671%" height="15" fill="rgb(229,88,21)" fg:x="485850" fg:w="326"/><text x="100.1829%" y="335.50"></text></g></svg></svg>