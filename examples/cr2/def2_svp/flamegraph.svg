<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="450289"><g><title>esp`esp::stoch::alias::Alias::new (192 samples, 0.04%)</title><rect x="0.0975%" y="213" width="0.0426%" height="15" fill="rgb(227,0,7)" fg:x="439" fg:w="192"/><text x="0.3475%" y="223.50"></text></g><g><title>esp`esp::stoch::matmul_sample_remaining (59 samples, 0.01%)</title><rect x="0.1401%" y="213" width="0.0131%" height="15" fill="rgb(217,0,24)" fg:x="631" fg:w="59"/><text x="0.3901%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (120 samples, 0.03%)</title><rect x="1.4682%" y="197" width="0.0266%" height="15" fill="rgb(221,193,54)" fg:x="6611" fg:w="120"/><text x="1.7182%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.01%)</title><rect x="1.4948%" y="197" width="0.0102%" height="15" fill="rgb(248,212,6)" fg:x="6731" fg:w="46"/><text x="1.7448%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (46 samples, 0.01%)</title><rect x="1.4948%" y="181" width="0.0102%" height="15" fill="rgb(208,68,35)" fg:x="6731" fg:w="46"/><text x="1.7448%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (46 samples, 0.01%)</title><rect x="1.4948%" y="165" width="0.0102%" height="15" fill="rgb(232,128,0)" fg:x="6731" fg:w="46"/><text x="1.7448%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (46 samples, 0.01%)</title><rect x="1.4948%" y="149" width="0.0102%" height="15" fill="rgb(207,160,47)" fg:x="6731" fg:w="46"/><text x="1.7448%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (46 samples, 0.01%)</title><rect x="1.4948%" y="133" width="0.0102%" height="15" fill="rgb(228,23,34)" fg:x="6731" fg:w="46"/><text x="1.7448%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (134 samples, 0.03%)</title><rect x="1.5050%" y="197" width="0.0298%" height="15" fill="rgb(218,30,26)" fg:x="6777" fg:w="134"/><text x="1.7550%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (47 samples, 0.01%)</title><rect x="1.5348%" y="197" width="0.0104%" height="15" fill="rgb(220,122,19)" fg:x="6911" fg:w="47"/><text x="1.7848%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (451 samples, 0.10%)</title><rect x="1.5452%" y="197" width="0.1002%" height="15" fill="rgb(250,228,42)" fg:x="6958" fg:w="451"/><text x="1.7952%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (107 samples, 0.02%)</title><rect x="1.6216%" y="181" width="0.0238%" height="15" fill="rgb(240,193,28)" fg:x="7302" fg:w="107"/><text x="1.8716%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (11,112 samples, 2.47%)</title><rect x="1.6454%" y="197" width="2.4677%" height="15" fill="rgb(216,20,37)" fg:x="7409" fg:w="11112"/><text x="1.8954%" y="207.50">es..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (6,209 samples, 1.38%)</title><rect x="2.7342%" y="181" width="1.3789%" height="15" fill="rgb(206,188,39)" fg:x="12312" fg:w="6209"/><text x="2.9842%" y="191.50"></text></g><g><title>esp`esp::stoch::alias::Alias::new (7,806 samples, 1.73%)</title><rect x="5.6724%" y="181" width="1.7336%" height="15" fill="rgb(217,207,13)" fg:x="25542" fg:w="7806"/><text x="5.9224%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (234 samples, 0.05%)</title><rect x="7.3539%" y="165" width="0.0520%" height="15" fill="rgb(231,73,38)" fg:x="33114" fg:w="234"/><text x="7.6039%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (234 samples, 0.05%)</title><rect x="7.3539%" y="149" width="0.0520%" height="15" fill="rgb(225,20,46)" fg:x="33114" fg:w="234"/><text x="7.6039%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (234 samples, 0.05%)</title><rect x="7.3539%" y="133" width="0.0520%" height="15" fill="rgb(210,31,41)" fg:x="33114" fg:w="234"/><text x="7.6039%" y="143.50"></text></g><g><title>esp`esp::stoch::generate_screened_sampler (15,167 samples, 3.37%)</title><rect x="4.1131%" y="197" width="3.3683%" height="15" fill="rgb(221,200,47)" fg:x="18521" fg:w="15167"/><text x="4.3631%" y="207.50">esp..</text></g><g><title>libsystem_malloc.dylib`free_large (339 samples, 0.08%)</title><rect x="7.4061%" y="181" width="0.0753%" height="15" fill="rgb(226,26,5)" fg:x="33349" fg:w="339"/><text x="7.6561%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (339 samples, 0.08%)</title><rect x="7.4061%" y="165" width="0.0753%" height="15" fill="rgb(249,33,26)" fg:x="33349" fg:w="339"/><text x="7.6561%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (339 samples, 0.08%)</title><rect x="7.4061%" y="149" width="0.0753%" height="15" fill="rgb(235,183,28)" fg:x="33349" fg:w="339"/><text x="7.6561%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (65 samples, 0.01%)</title><rect x="7.8749%" y="181" width="0.0144%" height="15" fill="rgb(221,5,38)" fg:x="35460" fg:w="65"/><text x="8.1249%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (2,336 samples, 0.52%)</title><rect x="7.8894%" y="181" width="0.5188%" height="15" fill="rgb(247,18,42)" fg:x="35525" fg:w="2336"/><text x="8.1394%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (2,290 samples, 0.51%)</title><rect x="7.8996%" y="165" width="0.5086%" height="15" fill="rgb(241,131,45)" fg:x="35571" fg:w="2290"/><text x="8.1496%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,589 samples, 0.35%)</title><rect x="8.0553%" y="149" width="0.3529%" height="15" fill="rgb(249,31,29)" fg:x="36272" fg:w="1589"/><text x="8.3053%" y="159.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (3,222 samples, 0.72%)</title><rect x="8.4082%" y="181" width="0.7155%" height="15" fill="rgb(225,111,53)" fg:x="37861" fg:w="3222"/><text x="8.6582%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,373 samples, 0.53%)</title><rect x="8.5967%" y="165" width="0.5270%" height="15" fill="rgb(238,160,17)" fg:x="38710" fg:w="2373"/><text x="8.8467%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (161 samples, 0.04%)</title><rect x="9.1241%" y="181" width="0.0358%" height="15" fill="rgb(214,148,48)" fg:x="41085" fg:w="161"/><text x="9.3741%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (118 samples, 0.03%)</title><rect x="9.1337%" y="165" width="0.0262%" height="15" fill="rgb(232,36,49)" fg:x="41128" fg:w="118"/><text x="9.3837%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (51 samples, 0.01%)</title><rect x="9.1728%" y="165" width="0.0113%" height="15" fill="rgb(209,103,24)" fg:x="41304" fg:w="51"/><text x="9.4228%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (167 samples, 0.04%)</title><rect x="9.3198%" y="133" width="0.0371%" height="15" fill="rgb(229,88,8)" fg:x="41966" fg:w="167"/><text x="9.5698%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (102 samples, 0.02%)</title><rect x="9.3342%" y="117" width="0.0227%" height="15" fill="rgb(213,181,19)" fg:x="42031" fg:w="102"/><text x="9.5842%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (933 samples, 0.21%)</title><rect x="9.1599%" y="181" width="0.2072%" height="15" fill="rgb(254,191,54)" fg:x="41246" fg:w="933"/><text x="9.4099%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (824 samples, 0.18%)</title><rect x="9.1841%" y="165" width="0.1830%" height="15" fill="rgb(241,83,37)" fg:x="41355" fg:w="824"/><text x="9.4341%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (559 samples, 0.12%)</title><rect x="9.2430%" y="149" width="0.1241%" height="15" fill="rgb(233,36,39)" fg:x="41620" fg:w="559"/><text x="9.4930%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (141 samples, 0.03%)</title><rect x="9.3671%" y="181" width="0.0313%" height="15" fill="rgb(226,3,54)" fg:x="42179" fg:w="141"/><text x="9.6171%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (89 samples, 0.02%)</title><rect x="9.3786%" y="165" width="0.0198%" height="15" fill="rgb(245,192,40)" fg:x="42231" fg:w="89"/><text x="9.6286%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (8,635 samples, 1.92%)</title><rect x="7.4814%" y="197" width="1.9177%" height="15" fill="rgb(238,167,29)" fg:x="33688" fg:w="8635"/><text x="7.7314%" y="207.50">e..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (1,403 samples, 0.31%)</title><rect x="9.3991%" y="197" width="0.3116%" height="15" fill="rgb(232,182,51)" fg:x="42323" fg:w="1403"/><text x="9.6491%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (11,331 samples, 2.52%)</title><rect x="9.7115%" y="197" width="2.5164%" height="15" fill="rgb(231,60,39)" fg:x="43730" fg:w="11331"/><text x="9.9615%" y="207.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,361 samples, 0.30%)</title><rect x="11.9257%" y="181" width="0.3023%" height="15" fill="rgb(208,69,12)" fg:x="53700" fg:w="1361"/><text x="12.1757%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_semistoch_singles (55,622 samples, 12.35%)</title><rect x="0.1535%" y="213" width="12.3525%" height="15" fill="rgb(235,93,37)" fg:x="691" fg:w="55622"/><text x="0.4035%" y="223.50">esp`esp::wf::Wf::a..</text></g><g><title>esp`hashbrown::map::make_hash (1,247 samples, 0.28%)</title><rect x="12.2290%" y="197" width="0.2769%" height="15" fill="rgb(213,116,39)" fg:x="55066" fg:w="1247"/><text x="12.4790%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (691 samples, 0.15%)</title><rect x="12.3525%" y="181" width="0.1535%" height="15" fill="rgb(222,207,29)" fg:x="55622" fg:w="691"/><text x="12.6025%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (52 samples, 0.01%)</title><rect x="12.5126%" y="213" width="0.0115%" height="15" fill="rgb(206,96,30)" fg:x="56343" fg:w="52"/><text x="12.7626%" y="223.50"></text></g><g><title>esp`esp::semistoch::faster_semistoch_enpt2 (57,096 samples, 12.68%)</title><rect x="0.0142%" y="229" width="12.6799%" height="15" fill="rgb(218,138,4)" fg:x="64" fg:w="57096"/><text x="0.2642%" y="239.50">esp`esp::semistoch:..</text></g><g><title>libsystem_malloc.dylib`free_large (738 samples, 0.16%)</title><rect x="12.5302%" y="213" width="0.1639%" height="15" fill="rgb(250,191,14)" fg:x="56422" fg:w="738"/><text x="12.7802%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (738 samples, 0.16%)</title><rect x="12.5302%" y="197" width="0.1639%" height="15" fill="rgb(239,60,40)" fg:x="56422" fg:w="738"/><text x="12.7802%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (738 samples, 0.16%)</title><rect x="12.5302%" y="181" width="0.1639%" height="15" fill="rgb(206,27,48)" fg:x="56422" fg:w="738"/><text x="12.7802%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1,960 samples, 0.44%)</title><rect x="12.8913%" y="181" width="0.4353%" height="15" fill="rgb(225,35,8)" fg:x="58048" fg:w="1960"/><text x="13.1413%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1,935 samples, 0.43%)</title><rect x="12.8968%" y="165" width="0.4297%" height="15" fill="rgb(250,213,24)" fg:x="58073" fg:w="1935"/><text x="13.1468%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2,099 samples, 0.47%)</title><rect x="12.8624%" y="197" width="0.4661%" height="15" fill="rgb(247,123,22)" fg:x="57918" fg:w="2099"/><text x="13.1124%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (240 samples, 0.05%)</title><rect x="14.0474%" y="149" width="0.0533%" height="15" fill="rgb(231,138,38)" fg:x="63254" fg:w="240"/><text x="14.2974%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (241 samples, 0.05%)</title><rect x="14.0474%" y="165" width="0.0535%" height="15" fill="rgb(231,145,46)" fg:x="63254" fg:w="241"/><text x="14.2974%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (347 samples, 0.08%)</title><rect x="14.1058%" y="165" width="0.0771%" height="15" fill="rgb(251,118,11)" fg:x="63517" fg:w="347"/><text x="14.3558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (165 samples, 0.04%)</title><rect x="14.1462%" y="149" width="0.0366%" height="15" fill="rgb(217,147,25)" fg:x="63699" fg:w="165"/><text x="14.3962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (719 samples, 0.16%)</title><rect x="14.1829%" y="165" width="0.1597%" height="15" fill="rgb(247,81,37)" fg:x="63864" fg:w="719"/><text x="14.4329%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1,659 samples, 0.37%)</title><rect x="14.3426%" y="165" width="0.3684%" height="15" fill="rgb(209,12,38)" fg:x="64583" fg:w="1659"/><text x="14.5926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (227 samples, 0.05%)</title><rect x="14.7110%" y="165" width="0.0504%" height="15" fill="rgb(227,1,9)" fg:x="66242" fg:w="227"/><text x="14.9610%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (201 samples, 0.04%)</title><rect x="14.7614%" y="165" width="0.0446%" height="15" fill="rgb(248,47,43)" fg:x="66469" fg:w="201"/><text x="15.0114%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2,238 samples, 0.50%)</title><rect x="14.8380%" y="149" width="0.4970%" height="15" fill="rgb(221,10,30)" fg:x="66814" fg:w="2238"/><text x="15.0880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (67 samples, 0.01%)</title><rect x="15.3353%" y="149" width="0.0149%" height="15" fill="rgb(210,229,1)" fg:x="69053" fg:w="67"/><text x="15.5853%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8,605 samples, 1.91%)</title><rect x="13.4423%" y="181" width="1.9110%" height="15" fill="rgb(222,148,37)" fg:x="60529" fg:w="8605"/><text x="13.6923%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (2,464 samples, 0.55%)</title><rect x="14.8060%" y="165" width="0.5472%" height="15" fill="rgb(234,67,33)" fg:x="66670" fg:w="2464"/><text x="15.0560%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9,120 samples, 2.03%)</title><rect x="13.3286%" y="197" width="2.0254%" height="15" fill="rgb(247,98,35)" fg:x="60017" fg:w="9120"/><text x="13.5786%" y="207.50">l..</text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,874 samples, 2.64%)</title><rect x="12.7223%" y="213" width="2.6370%" height="15" fill="rgb(247,138,52)" fg:x="57287" fg:w="11874"/><text x="12.9723%" y="223.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (51 samples, 0.01%)</title><rect x="15.3937%" y="197" width="0.0113%" height="15" fill="rgb(213,79,30)" fg:x="69316" fg:w="51"/><text x="15.6437%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,793 samples, 0.40%)</title><rect x="15.4050%" y="197" width="0.3982%" height="15" fill="rgb(246,177,23)" fg:x="69367" fg:w="1793"/><text x="15.6550%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (224 samples, 0.05%)</title><rect x="15.7534%" y="181" width="0.0497%" height="15" fill="rgb(230,62,27)" fg:x="70936" fg:w="224"/><text x="16.0034%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (436 samples, 0.10%)</title><rect x="15.9109%" y="181" width="0.0968%" height="15" fill="rgb(216,154,8)" fg:x="71645" fg:w="436"/><text x="16.1609%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (633 samples, 0.14%)</title><rect x="16.8154%" y="149" width="0.1406%" height="15" fill="rgb(244,35,45)" fg:x="75718" fg:w="633"/><text x="17.0654%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (272 samples, 0.06%)</title><rect x="16.8956%" y="133" width="0.0604%" height="15" fill="rgb(251,115,12)" fg:x="76079" fg:w="272"/><text x="17.1456%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (157 samples, 0.03%)</title><rect x="17.1272%" y="85" width="0.0349%" height="15" fill="rgb(240,54,50)" fg:x="77122" fg:w="157"/><text x="17.3772%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (992 samples, 0.22%)</title><rect x="16.9933%" y="117" width="0.2203%" height="15" fill="rgb(233,84,52)" fg:x="76519" fg:w="992"/><text x="17.2433%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (959 samples, 0.21%)</title><rect x="17.0006%" y="101" width="0.2130%" height="15" fill="rgb(207,117,47)" fg:x="76552" fg:w="959"/><text x="17.2506%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (229 samples, 0.05%)</title><rect x="17.1628%" y="85" width="0.0509%" height="15" fill="rgb(249,43,39)" fg:x="77282" fg:w="229"/><text x="17.4128%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,044 samples, 0.23%)</title><rect x="16.9824%" y="133" width="0.2319%" height="15" fill="rgb(209,38,44)" fg:x="76470" fg:w="1044"/><text x="17.2324%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1,561 samples, 0.35%)</title><rect x="17.2207%" y="133" width="0.3467%" height="15" fill="rgb(236,212,23)" fg:x="77543" fg:w="1561"/><text x="17.4707%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2,762 samples, 0.61%)</title><rect x="16.9560%" y="149" width="0.6134%" height="15" fill="rgb(242,79,21)" fg:x="76351" fg:w="2762"/><text x="17.2060%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (170 samples, 0.04%)</title><rect x="17.5694%" y="149" width="0.0378%" height="15" fill="rgb(211,96,35)" fg:x="79113" fg:w="170"/><text x="17.8194%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,964 samples, 1.32%)</title><rect x="16.2871%" y="165" width="1.3245%" height="15" fill="rgb(253,215,40)" fg:x="73339" fg:w="5964"/><text x="16.5371%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (7,226 samples, 1.60%)</title><rect x="16.0077%" y="181" width="1.6047%" height="15" fill="rgb(211,81,21)" fg:x="72081" fg:w="7226"/><text x="16.2577%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8,154 samples, 1.81%)</title><rect x="15.8032%" y="197" width="1.8108%" height="15" fill="rgb(208,190,38)" fg:x="71160" fg:w="8154"/><text x="16.0532%" y="207.50">e..</text></g><g><title>esp`esp::pt::PtSamples::add_sample_diag_already_stored (10,136 samples, 2.25%)</title><rect x="15.3686%" y="213" width="2.2510%" height="15" fill="rgb(235,213,38)" fg:x="69203" fg:w="10136"/><text x="15.6186%" y="223.50">e..</text></g><g><title>esp`esp::pt::PtSamples::pt_estimator (1,470 samples, 0.33%)</title><rect x="17.6196%" y="213" width="0.3265%" height="15" fill="rgb(237,122,38)" fg:x="79339" fg:w="1470"/><text x="17.8696%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (424 samples, 0.09%)</title><rect x="18.2447%" y="197" width="0.0942%" height="15" fill="rgb(244,218,35)" fg:x="82154" fg:w="424"/><text x="18.4947%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (95 samples, 0.02%)</title><rect x="18.3178%" y="181" width="0.0211%" height="15" fill="rgb(240,68,47)" fg:x="82483" fg:w="95"/><text x="18.5678%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (10,334 samples, 2.29%)</title><rect x="18.3389%" y="197" width="2.2950%" height="15" fill="rgb(210,16,53)" fg:x="82578" fg:w="10334"/><text x="18.5889%" y="207.50">e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (5,265 samples, 1.17%)</title><rect x="19.4646%" y="181" width="1.1692%" height="15" fill="rgb(235,124,12)" fg:x="87647" fg:w="5265"/><text x="19.7146%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (69 samples, 0.02%)</title><rect x="21.0090%" y="181" width="0.0153%" height="15" fill="rgb(224,169,11)" fg:x="94601" fg:w="69"/><text x="21.2590%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (2,289 samples, 0.51%)</title><rect x="21.0243%" y="181" width="0.5083%" height="15" fill="rgb(250,166,2)" fg:x="94670" fg:w="2289"/><text x="21.2743%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (2,250 samples, 0.50%)</title><rect x="21.0329%" y="165" width="0.4997%" height="15" fill="rgb(242,216,29)" fg:x="94709" fg:w="2250"/><text x="21.2829%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (1,551 samples, 0.34%)</title><rect x="21.1882%" y="149" width="0.3444%" height="15" fill="rgb(230,116,27)" fg:x="95408" fg:w="1551"/><text x="21.4382%" y="159.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (3,056 samples, 0.68%)</title><rect x="21.5326%" y="181" width="0.6787%" height="15" fill="rgb(228,99,48)" fg:x="96959" fg:w="3056"/><text x="21.7826%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (2,278 samples, 0.51%)</title><rect x="21.7054%" y="165" width="0.5059%" height="15" fill="rgb(253,11,6)" fg:x="97737" fg:w="2278"/><text x="21.9554%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (121 samples, 0.03%)</title><rect x="22.2117%" y="181" width="0.0269%" height="15" fill="rgb(247,143,39)" fg:x="100017" fg:w="121"/><text x="22.4617%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (79 samples, 0.02%)</title><rect x="22.2211%" y="165" width="0.0175%" height="15" fill="rgb(236,97,10)" fg:x="100059" fg:w="79"/><text x="22.4711%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (178 samples, 0.04%)</title><rect x="22.3950%" y="133" width="0.0395%" height="15" fill="rgb(233,208,19)" fg:x="100842" fg:w="178"/><text x="22.6450%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (94 samples, 0.02%)</title><rect x="22.4136%" y="117" width="0.0209%" height="15" fill="rgb(216,164,2)" fg:x="100926" fg:w="94"/><text x="22.6636%" y="127.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (938 samples, 0.21%)</title><rect x="22.2386%" y="181" width="0.2083%" height="15" fill="rgb(220,129,5)" fg:x="100138" fg:w="938"/><text x="22.4886%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (837 samples, 0.19%)</title><rect x="22.2610%" y="165" width="0.1859%" height="15" fill="rgb(242,17,10)" fg:x="100239" fg:w="837"/><text x="22.5110%" y="175.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (622 samples, 0.14%)</title><rect x="22.3088%" y="149" width="0.1381%" height="15" fill="rgb(242,107,0)" fg:x="100454" fg:w="622"/><text x="22.5588%" y="159.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (8,317 samples, 1.85%)</title><rect x="20.6339%" y="197" width="1.8470%" height="15" fill="rgb(251,28,31)" fg:x="92912" fg:w="8317"/><text x="20.8839%" y="207.50">e..</text></g><g><title>esp`hashbrown::map::make_hash (153 samples, 0.03%)</title><rect x="22.4469%" y="181" width="0.0340%" height="15" fill="rgb(233,223,10)" fg:x="101076" fg:w="153"/><text x="22.6969%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (86 samples, 0.02%)</title><rect x="22.4618%" y="165" width="0.0191%" height="15" fill="rgb(215,21,27)" fg:x="101143" fg:w="86"/><text x="22.7118%" y="175.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (317 samples, 0.07%)</title><rect x="22.4809%" y="197" width="0.0704%" height="15" fill="rgb(232,23,21)" fg:x="101229" fg:w="317"/><text x="22.7309%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,799 samples, 0.84%)</title><rect x="22.5522%" y="197" width="0.8437%" height="15" fill="rgb(244,5,23)" fg:x="101550" fg:w="3799"/><text x="22.8022%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (438 samples, 0.10%)</title><rect x="23.2986%" y="181" width="0.0973%" height="15" fill="rgb(226,81,46)" fg:x="104911" fg:w="438"/><text x="23.5486%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_dtm_only (24,855 samples, 5.52%)</title><rect x="17.9549%" y="213" width="5.5198%" height="15" fill="rgb(247,70,30)" fg:x="80849" fg:w="24855"/><text x="18.2049%" y="223.50">esp`esp..</text></g><g><title>esp`hashbrown::map::make_hash (352 samples, 0.08%)</title><rect x="23.3965%" y="197" width="0.0782%" height="15" fill="rgb(212,68,19)" fg:x="105352" fg:w="352"/><text x="23.6465%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (169 samples, 0.04%)</title><rect x="23.4372%" y="181" width="0.0375%" height="15" fill="rgb(240,187,13)" fg:x="105535" fg:w="169"/><text x="23.6872%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (1,710 samples, 0.38%)</title><rect x="23.5722%" y="197" width="0.3798%" height="15" fill="rgb(223,113,26)" fg:x="106143" fg:w="1710"/><text x="23.8222%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (347 samples, 0.08%)</title><rect x="23.8749%" y="181" width="0.0771%" height="15" fill="rgb(206,192,2)" fg:x="107506" fg:w="347"/><text x="24.1249%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (220 samples, 0.05%)</title><rect x="23.9520%" y="197" width="0.0489%" height="15" fill="rgb(241,108,4)" fg:x="107853" fg:w="220"/><text x="24.2020%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (175 samples, 0.04%)</title><rect x="23.9619%" y="181" width="0.0389%" height="15" fill="rgb(247,173,49)" fg:x="107898" fg:w="175"/><text x="24.2119%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (115 samples, 0.03%)</title><rect x="24.0759%" y="117" width="0.0255%" height="15" fill="rgb(224,114,35)" fg:x="108411" fg:w="115"/><text x="24.3259%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (56 samples, 0.01%)</title><rect x="24.0890%" y="101" width="0.0124%" height="15" fill="rgb(245,159,27)" fg:x="108470" fg:w="56"/><text x="24.3390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (118 samples, 0.03%)</title><rect x="24.0754%" y="133" width="0.0262%" height="15" fill="rgb(245,172,44)" fg:x="108409" fg:w="118"/><text x="24.3254%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (124 samples, 0.03%)</title><rect x="24.0750%" y="149" width="0.0275%" height="15" fill="rgb(236,23,11)" fg:x="108407" fg:w="124"/><text x="24.3250%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (131 samples, 0.03%)</title><rect x="24.0741%" y="165" width="0.0291%" height="15" fill="rgb(205,117,38)" fg:x="108403" fg:w="131"/><text x="24.3241%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (135 samples, 0.03%)</title><rect x="24.0737%" y="181" width="0.0300%" height="15" fill="rgb(237,72,25)" fg:x="108401" fg:w="135"/><text x="24.3237%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (46 samples, 0.01%)</title><rect x="24.1039%" y="181" width="0.0102%" height="15" fill="rgb(244,70,9)" fg:x="108537" fg:w="46"/><text x="24.3539%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (335 samples, 0.07%)</title><rect x="24.1141%" y="181" width="0.0744%" height="15" fill="rgb(217,125,39)" fg:x="108583" fg:w="335"/><text x="24.3641%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (122 samples, 0.03%)</title><rect x="24.1936%" y="165" width="0.0271%" height="15" fill="rgb(235,36,10)" fg:x="108941" fg:w="122"/><text x="24.4436%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (6,475 samples, 1.44%)</title><rect x="24.1885%" y="181" width="1.4380%" height="15" fill="rgb(251,123,47)" fg:x="108918" fg:w="6475"/><text x="24.4385%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (6,330 samples, 1.41%)</title><rect x="24.2207%" y="165" width="1.4058%" height="15" fill="rgb(221,13,13)" fg:x="109063" fg:w="6330"/><text x="24.4707%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4,350 samples, 0.97%)</title><rect x="24.6604%" y="149" width="0.9660%" height="15" fill="rgb(238,131,9)" fg:x="111043" fg:w="4350"/><text x="24.9104%" y="159.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (15,075 samples, 3.35%)</title><rect x="25.6264%" y="181" width="3.3478%" height="15" fill="rgb(211,50,8)" fg:x="115393" fg:w="15075"/><text x="25.8764%" y="191.50">esp..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (10,966 samples, 2.44%)</title><rect x="26.5390%" y="165" width="2.4353%" height="15" fill="rgb(245,182,24)" fg:x="119502" fg:w="10966"/><text x="26.7890%" y="175.50">es..</text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (76 samples, 0.02%)</title><rect x="28.9754%" y="181" width="0.0169%" height="15" fill="rgb(242,14,37)" fg:x="130473" fg:w="76"/><text x="29.2254%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (57 samples, 0.01%)</title><rect x="28.9796%" y="165" width="0.0127%" height="15" fill="rgb(246,228,12)" fg:x="130492" fg:w="57"/><text x="29.2296%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (213 samples, 0.05%)</title><rect x="29.0418%" y="165" width="0.0473%" height="15" fill="rgb(213,55,15)" fg:x="130772" fg:w="213"/><text x="29.2918%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (569 samples, 0.13%)</title><rect x="29.1835%" y="133" width="0.1264%" height="15" fill="rgb(209,9,3)" fg:x="131410" fg:w="569"/><text x="29.4335%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (328 samples, 0.07%)</title><rect x="29.2370%" y="117" width="0.0728%" height="15" fill="rgb(230,59,30)" fg:x="131651" fg:w="328"/><text x="29.4870%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (889 samples, 0.20%)</title><rect x="29.1242%" y="149" width="0.1974%" height="15" fill="rgb(209,121,21)" fg:x="131143" fg:w="889"/><text x="29.3742%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,486 samples, 0.33%)</title><rect x="28.9923%" y="181" width="0.3300%" height="15" fill="rgb(220,109,13)" fg:x="130549" fg:w="1486"/><text x="29.2423%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,050 samples, 0.23%)</title><rect x="29.0891%" y="165" width="0.2332%" height="15" fill="rgb(232,18,1)" fg:x="130985" fg:w="1050"/><text x="29.3391%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (328 samples, 0.07%)</title><rect x="29.3223%" y="181" width="0.0728%" height="15" fill="rgb(215,41,42)" fg:x="132035" fg:w="328"/><text x="29.5723%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (206 samples, 0.05%)</title><rect x="29.3494%" y="165" width="0.0457%" height="15" fill="rgb(224,123,36)" fg:x="132157" fg:w="206"/><text x="29.5994%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (24,296 samples, 5.40%)</title><rect x="24.0008%" y="197" width="5.3956%" height="15" fill="rgb(240,125,3)" fg:x="108073" fg:w="24296"/><text x="24.2508%" y="207.50">esp`esp..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (254 samples, 0.06%)</title><rect x="29.3965%" y="197" width="0.0564%" height="15" fill="rgb(205,98,50)" fg:x="132369" fg:w="254"/><text x="29.6465%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,421 samples, 0.54%)</title><rect x="29.4549%" y="197" width="0.5377%" height="15" fill="rgb(205,185,37)" fg:x="132632" fg:w="2421"/><text x="29.7049%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (253 samples, 0.06%)</title><rect x="29.9363%" y="181" width="0.0562%" height="15" fill="rgb(238,207,15)" fg:x="134800" fg:w="253"/><text x="30.1863%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::approx_matmul_external_dtm_only_compute_diags (29,354 samples, 6.52%)</title><rect x="23.4783%" y="213" width="6.5189%" height="15" fill="rgb(213,199,42)" fg:x="105720" fg:w="29354"/><text x="23.7283%" y="223.50">esp`esp::..</text></g><g><title>libsystem_malloc.dylib`free_large (320 samples, 0.07%)</title><rect x="30.0243%" y="213" width="0.0711%" height="15" fill="rgb(235,201,11)" fg:x="135196" fg:w="320"/><text x="30.2743%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (318 samples, 0.07%)</title><rect x="30.0247%" y="197" width="0.0706%" height="15" fill="rgb(207,46,11)" fg:x="135198" fg:w="318"/><text x="30.2747%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (318 samples, 0.07%)</title><rect x="30.0247%" y="181" width="0.0706%" height="15" fill="rgb(241,35,35)" fg:x="135198" fg:w="318"/><text x="30.2747%" y="191.50"></text></g><g><title>esp`esp::semistoch::old_semistoch_enpt2 (78,385 samples, 17.41%)</title><rect x="12.6941%" y="229" width="17.4077%" height="15" fill="rgb(243,32,47)" fg:x="57160" fg:w="78385"/><text x="12.9441%" y="239.50">esp`esp::semistoch::old_sem..</text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (372 samples, 0.08%)</title><rect x="30.7420%" y="181" width="0.0826%" height="15" fill="rgb(247,202,23)" fg:x="138428" fg:w="372"/><text x="30.9920%" y="191.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (327 samples, 0.07%)</title><rect x="35.8394%" y="165" width="0.0726%" height="15" fill="rgb(219,102,11)" fg:x="161381" fg:w="327"/><text x="36.0894%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (327 samples, 0.07%)</title><rect x="35.8394%" y="149" width="0.0726%" height="15" fill="rgb(243,110,44)" fg:x="161381" fg:w="327"/><text x="36.0894%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (22,916 samples, 5.09%)</title><rect x="30.8246%" y="181" width="5.0892%" height="15" fill="rgb(222,74,54)" fg:x="138800" fg:w="22916"/><text x="31.0746%" y="191.50">esp`&lt;e..</text></g><g><title>libsystem_malloc.dylib`free_large (52 samples, 0.01%)</title><rect x="35.9154%" y="101" width="0.0115%" height="15" fill="rgb(216,99,12)" fg:x="161723" fg:w="52"/><text x="36.1654%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (52 samples, 0.01%)</title><rect x="35.9154%" y="85" width="0.0115%" height="15" fill="rgb(226,22,26)" fg:x="161723" fg:w="52"/><text x="36.1654%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (52 samples, 0.01%)</title><rect x="35.9154%" y="69" width="0.0115%" height="15" fill="rgb(217,163,10)" fg:x="161723" fg:w="52"/><text x="36.1654%" y="79.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (68 samples, 0.02%)</title><rect x="35.9138%" y="181" width="0.0151%" height="15" fill="rgb(213,25,53)" fg:x="161716" fg:w="68"/><text x="36.1638%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (68 samples, 0.02%)</title><rect x="35.9138%" y="165" width="0.0151%" height="15" fill="rgb(252,105,26)" fg:x="161716" fg:w="68"/><text x="36.1638%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (66 samples, 0.01%)</title><rect x="35.9143%" y="149" width="0.0147%" height="15" fill="rgb(220,39,43)" fg:x="161718" fg:w="66"/><text x="36.1643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (66 samples, 0.01%)</title><rect x="35.9143%" y="133" width="0.0147%" height="15" fill="rgb(229,68,48)" fg:x="161718" fg:w="66"/><text x="36.1643%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (66 samples, 0.01%)</title><rect x="35.9143%" y="117" width="0.0147%" height="15" fill="rgb(252,8,32)" fg:x="161718" fg:w="66"/><text x="36.1643%" y="127.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (592 samples, 0.13%)</title><rect x="36.2991%" y="133" width="0.1315%" height="15" fill="rgb(223,20,43)" fg:x="163451" fg:w="592"/><text x="36.5491%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (1,151 samples, 0.26%)</title><rect x="36.4397%" y="117" width="0.2556%" height="15" fill="rgb(229,81,49)" fg:x="164084" fg:w="1151"/><text x="36.6897%" y="127.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (1,612 samples, 0.36%)</title><rect x="36.4306%" y="133" width="0.3580%" height="15" fill="rgb(236,28,36)" fg:x="164043" fg:w="1612"/><text x="36.6806%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (420 samples, 0.09%)</title><rect x="36.6953%" y="117" width="0.0933%" height="15" fill="rgb(249,185,26)" fg:x="165235" fg:w="420"/><text x="36.9453%" y="127.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (99 samples, 0.02%)</title><rect x="36.7666%" y="101" width="0.0220%" height="15" fill="rgb(249,174,33)" fg:x="165556" fg:w="99"/><text x="37.0166%" y="111.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (2,228 samples, 0.49%)</title><rect x="36.2947%" y="149" width="0.4948%" height="15" fill="rgb(233,201,37)" fg:x="163431" fg:w="2228"/><text x="36.5447%" y="159.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (3,528 samples, 0.78%)</title><rect x="36.0062%" y="165" width="0.7835%" height="15" fill="rgb(221,78,26)" fg:x="162132" fg:w="3528"/><text x="36.2562%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (4,035 samples, 0.90%)</title><rect x="35.9289%" y="181" width="0.8961%" height="15" fill="rgb(250,127,30)" fg:x="161784" fg:w="4035"/><text x="36.1789%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (159 samples, 0.04%)</title><rect x="36.7897%" y="165" width="0.0353%" height="15" fill="rgb(230,49,44)" fg:x="165660" fg:w="159"/><text x="37.0397%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (131 samples, 0.03%)</title><rect x="36.8281%" y="165" width="0.0291%" height="15" fill="rgb(229,67,23)" fg:x="165833" fg:w="131"/><text x="37.0781%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (135 samples, 0.03%)</title><rect x="36.8281%" y="181" width="0.0300%" height="15" fill="rgb(249,83,47)" fg:x="165833" fg:w="135"/><text x="37.0781%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::update_subspace (51 samples, 0.01%)</title><rect x="36.8581%" y="181" width="0.0113%" height="15" fill="rgb(215,43,3)" fg:x="165968" fg:w="51"/><text x="37.1081%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,549 samples, 0.34%)</title><rect x="37.0002%" y="165" width="0.3440%" height="15" fill="rgb(238,154,13)" fg:x="166608" fg:w="1549"/><text x="37.2502%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (284 samples, 0.06%)</title><rect x="37.3442%" y="165" width="0.0631%" height="15" fill="rgb(219,56,2)" fg:x="168157" fg:w="284"/><text x="37.5942%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (2,486 samples, 0.55%)</title><rect x="36.8694%" y="181" width="0.5521%" height="15" fill="rgb(233,0,4)" fg:x="166019" fg:w="2486"/><text x="37.1194%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (64 samples, 0.01%)</title><rect x="37.4073%" y="165" width="0.0142%" height="15" fill="rgb(235,30,7)" fg:x="168441" fg:w="64"/><text x="37.6573%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (116 samples, 0.03%)</title><rect x="37.4226%" y="165" width="0.0258%" height="15" fill="rgb(250,79,13)" fg:x="168510" fg:w="116"/><text x="37.6726%" y="175.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (181 samples, 0.04%)</title><rect x="37.4517%" y="149" width="0.0402%" height="15" fill="rgb(211,146,34)" fg:x="168641" fg:w="181"/><text x="37.7017%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (282 samples, 0.06%)</title><rect x="37.4484%" y="165" width="0.0626%" height="15" fill="rgb(228,22,38)" fg:x="168626" fg:w="282"/><text x="37.6984%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (86 samples, 0.02%)</title><rect x="37.4919%" y="149" width="0.0191%" height="15" fill="rgb(235,168,5)" fg:x="168822" fg:w="86"/><text x="37.7419%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (50 samples, 0.01%)</title><rect x="37.4999%" y="133" width="0.0111%" height="15" fill="rgb(221,155,16)" fg:x="168858" fg:w="50"/><text x="37.7499%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (407 samples, 0.09%)</title><rect x="37.4215%" y="181" width="0.0904%" height="15" fill="rgb(215,215,53)" fg:x="168505" fg:w="407"/><text x="37.6715%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (127 samples, 0.03%)</title><rect x="37.5119%" y="181" width="0.0282%" height="15" fill="rgb(223,4,10)" fg:x="168912" fg:w="127"/><text x="37.7619%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (626 samples, 0.14%)</title><rect x="37.5459%" y="181" width="0.1390%" height="15" fill="rgb(234,103,6)" fg:x="169065" fg:w="626"/><text x="37.7959%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (952 samples, 0.21%)</title><rect x="37.6849%" y="181" width="0.2114%" height="15" fill="rgb(227,97,0)" fg:x="169691" fg:w="952"/><text x="37.9349%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (952 samples, 0.21%)</title><rect x="37.6849%" y="165" width="0.2114%" height="15" fill="rgb(234,150,53)" fg:x="169691" fg:w="952"/><text x="37.9349%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (952 samples, 0.21%)</title><rect x="37.6849%" y="149" width="0.2114%" height="15" fill="rgb(228,201,54)" fg:x="169691" fg:w="952"/><text x="37.9349%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (35,067 samples, 7.79%)</title><rect x="30.1238%" y="197" width="7.7877%" height="15" fill="rgb(222,22,37)" fg:x="135644" fg:w="35067"/><text x="30.3738%" y="207.50">esp`eigenva..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (68 samples, 0.02%)</title><rect x="37.8963%" y="181" width="0.0151%" height="15" fill="rgb(237,53,32)" fg:x="170643" fg:w="68"/><text x="38.1463%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (517 samples, 0.11%)</title><rect x="44.1037%" y="149" width="0.1148%" height="15" fill="rgb(233,25,53)" fg:x="198594" fg:w="517"/><text x="44.3537%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (491 samples, 0.11%)</title><rect x="44.1094%" y="133" width="0.1090%" height="15" fill="rgb(210,40,34)" fg:x="198620" fg:w="491"/><text x="44.3594%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (693 samples, 0.15%)</title><rect x="44.0668%" y="165" width="0.1539%" height="15" fill="rgb(241,220,44)" fg:x="198428" fg:w="693"/><text x="44.3168%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (46 samples, 0.01%)</title><rect x="44.2207%" y="165" width="0.0102%" height="15" fill="rgb(235,28,35)" fg:x="199121" fg:w="46"/><text x="44.4707%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (46 samples, 0.01%)</title><rect x="44.2207%" y="149" width="0.0102%" height="15" fill="rgb(210,56,17)" fg:x="199121" fg:w="46"/><text x="44.4707%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (46 samples, 0.01%)</title><rect x="44.2207%" y="133" width="0.0102%" height="15" fill="rgb(224,130,29)" fg:x="199121" fg:w="46"/><text x="44.4707%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (72 samples, 0.02%)</title><rect x="44.2309%" y="165" width="0.0160%" height="15" fill="rgb(235,212,8)" fg:x="199167" fg:w="72"/><text x="44.4809%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (58 samples, 0.01%)</title><rect x="44.5660%" y="133" width="0.0129%" height="15" fill="rgb(223,33,50)" fg:x="200676" fg:w="58"/><text x="44.8160%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (490 samples, 0.11%)</title><rect x="44.5789%" y="133" width="0.1088%" height="15" fill="rgb(219,149,13)" fg:x="200734" fg:w="490"/><text x="44.8289%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (909 samples, 0.20%)</title><rect x="44.6877%" y="133" width="0.2019%" height="15" fill="rgb(250,156,29)" fg:x="201224" fg:w="909"/><text x="44.9377%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (55 samples, 0.01%)</title><rect x="44.9083%" y="117" width="0.0122%" height="15" fill="rgb(216,193,19)" fg:x="202217" fg:w="55"/><text x="45.1583%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,517 samples, 0.56%)</title><rect x="44.3620%" y="149" width="0.5590%" height="15" fill="rgb(216,135,14)" fg:x="199757" fg:w="2517"/><text x="44.6120%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (64 samples, 0.01%)</title><rect x="44.9067%" y="133" width="0.0142%" height="15" fill="rgb(241,47,5)" fg:x="202210" fg:w="64"/><text x="45.1567%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,036 samples, 0.67%)</title><rect x="44.2469%" y="165" width="0.6742%" height="15" fill="rgb(233,42,35)" fg:x="199239" fg:w="3036"/><text x="44.4969%" y="175.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,041 samples, 0.90%)</title><rect x="44.0306%" y="181" width="0.8974%" height="15" fill="rgb(231,13,6)" fg:x="198265" fg:w="4041"/><text x="44.2806%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (113 samples, 0.03%)</title><rect x="44.9567%" y="101" width="0.0251%" height="15" fill="rgb(207,181,40)" fg:x="202435" fg:w="113"/><text x="45.2067%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (72 samples, 0.02%)</title><rect x="44.9658%" y="85" width="0.0160%" height="15" fill="rgb(254,173,49)" fg:x="202476" fg:w="72"/><text x="45.2158%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (174 samples, 0.04%)</title><rect x="44.9833%" y="101" width="0.0386%" height="15" fill="rgb(221,1,38)" fg:x="202555" fg:w="174"/><text x="45.2333%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (119 samples, 0.03%)</title><rect x="44.9955%" y="85" width="0.0264%" height="15" fill="rgb(206,124,46)" fg:x="202610" fg:w="119"/><text x="45.2455%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (77 samples, 0.02%)</title><rect x="45.0282%" y="101" width="0.0171%" height="15" fill="rgb(249,21,11)" fg:x="202757" fg:w="77"/><text x="45.2782%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (560 samples, 0.12%)</title><rect x="44.9500%" y="117" width="0.1244%" height="15" fill="rgb(222,201,40)" fg:x="202405" fg:w="560"/><text x="45.2000%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (131 samples, 0.03%)</title><rect x="45.0453%" y="101" width="0.0291%" height="15" fill="rgb(235,61,29)" fg:x="202834" fg:w="131"/><text x="45.2953%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (596 samples, 0.13%)</title><rect x="44.9438%" y="133" width="0.1324%" height="15" fill="rgb(219,207,3)" fg:x="202377" fg:w="596"/><text x="45.1938%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (63 samples, 0.01%)</title><rect x="45.0779%" y="133" width="0.0140%" height="15" fill="rgb(222,56,46)" fg:x="202981" fg:w="63"/><text x="45.3279%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (61 samples, 0.01%)</title><rect x="45.0784%" y="117" width="0.0135%" height="15" fill="rgb(239,76,54)" fg:x="202983" fg:w="61"/><text x="45.3284%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (688 samples, 0.15%)</title><rect x="44.9394%" y="149" width="0.1528%" height="15" fill="rgb(231,124,27)" fg:x="202357" fg:w="688"/><text x="45.1894%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (705 samples, 0.16%)</title><rect x="44.9374%" y="165" width="0.1566%" height="15" fill="rgb(249,195,6)" fg:x="202348" fg:w="705"/><text x="45.1874%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (735 samples, 0.16%)</title><rect x="44.9314%" y="181" width="0.1632%" height="15" fill="rgb(237,174,47)" fg:x="202321" fg:w="735"/><text x="45.1814%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (3,616 samples, 0.80%)</title><rect x="45.0995%" y="181" width="0.8030%" height="15" fill="rgb(206,201,31)" fg:x="203078" fg:w="3616"/><text x="45.3495%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (105 samples, 0.02%)</title><rect x="45.9054%" y="181" width="0.0233%" height="15" fill="rgb(231,57,52)" fg:x="206707" fg:w="105"/><text x="46.1554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (82 samples, 0.02%)</title><rect x="47.1035%" y="133" width="0.0182%" height="15" fill="rgb(248,177,22)" fg:x="212102" fg:w="82"/><text x="47.3535%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (77 samples, 0.02%)</title><rect x="47.1046%" y="117" width="0.0171%" height="15" fill="rgb(215,211,37)" fg:x="212107" fg:w="77"/><text x="47.3546%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (75 samples, 0.02%)</title><rect x="47.1051%" y="101" width="0.0167%" height="15" fill="rgb(241,128,51)" fg:x="212109" fg:w="75"/><text x="47.3551%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (150 samples, 0.03%)</title><rect x="47.1599%" y="85" width="0.0333%" height="15" fill="rgb(227,165,31)" fg:x="212356" fg:w="150"/><text x="47.4099%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (171 samples, 0.04%)</title><rect x="47.2379%" y="53" width="0.0380%" height="15" fill="rgb(228,167,24)" fg:x="212707" fg:w="171"/><text x="47.4879%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (78 samples, 0.02%)</title><rect x="47.2759%" y="53" width="0.0173%" height="15" fill="rgb(228,143,12)" fg:x="212878" fg:w="78"/><text x="47.5259%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (61 samples, 0.01%)</title><rect x="47.2945%" y="37" width="0.0135%" height="15" fill="rgb(249,149,8)" fg:x="212962" fg:w="61"/><text x="47.5445%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (519 samples, 0.12%)</title><rect x="47.1932%" y="85" width="0.1153%" height="15" fill="rgb(243,35,44)" fg:x="212506" fg:w="519"/><text x="47.4432%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (443 samples, 0.10%)</title><rect x="47.2101%" y="69" width="0.0984%" height="15" fill="rgb(246,89,9)" fg:x="212582" fg:w="443"/><text x="47.4601%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (65 samples, 0.01%)</title><rect x="47.2941%" y="53" width="0.0144%" height="15" fill="rgb(233,213,13)" fg:x="212960" fg:w="65"/><text x="47.5441%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (48 samples, 0.01%)</title><rect x="47.3101%" y="85" width="0.0107%" height="15" fill="rgb(233,141,41)" fg:x="213032" fg:w="48"/><text x="47.5601%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (88 samples, 0.02%)</title><rect x="47.3656%" y="37" width="0.0195%" height="15" fill="rgb(239,167,4)" fg:x="213282" fg:w="88"/><text x="47.6156%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (353 samples, 0.08%)</title><rect x="47.3234%" y="69" width="0.0784%" height="15" fill="rgb(209,217,16)" fg:x="213092" fg:w="353"/><text x="47.5734%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (236 samples, 0.05%)</title><rect x="47.3494%" y="53" width="0.0524%" height="15" fill="rgb(219,88,35)" fg:x="213209" fg:w="236"/><text x="47.5994%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (75 samples, 0.02%)</title><rect x="47.3851%" y="37" width="0.0167%" height="15" fill="rgb(220,193,23)" fg:x="213370" fg:w="75"/><text x="47.6351%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (593 samples, 0.13%)</title><rect x="47.3207%" y="85" width="0.1317%" height="15" fill="rgb(230,90,52)" fg:x="213080" fg:w="593"/><text x="47.5707%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (228 samples, 0.05%)</title><rect x="47.4018%" y="69" width="0.0506%" height="15" fill="rgb(252,106,19)" fg:x="213445" fg:w="228"/><text x="47.6518%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (95 samples, 0.02%)</title><rect x="47.4313%" y="53" width="0.0211%" height="15" fill="rgb(206,74,20)" fg:x="213578" fg:w="95"/><text x="47.6813%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (116 samples, 0.03%)</title><rect x="47.4597%" y="85" width="0.0258%" height="15" fill="rgb(230,138,44)" fg:x="213706" fg:w="116"/><text x="47.7097%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3,392 samples, 0.75%)</title><rect x="47.1519%" y="101" width="0.7533%" height="15" fill="rgb(235,182,43)" fg:x="212320" fg:w="3392"/><text x="47.4019%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,890 samples, 0.42%)</title><rect x="47.4855%" y="85" width="0.4197%" height="15" fill="rgb(242,16,51)" fg:x="213822" fg:w="1890"/><text x="47.7355%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3,475 samples, 0.77%)</title><rect x="47.1362%" y="117" width="0.7717%" height="15" fill="rgb(248,9,4)" fg:x="212249" fg:w="3475"/><text x="47.3862%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (147 samples, 0.03%)</title><rect x="47.9079%" y="117" width="0.0326%" height="15" fill="rgb(210,31,22)" fg:x="215724" fg:w="147"/><text x="48.1579%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (189 samples, 0.04%)</title><rect x="47.9412%" y="117" width="0.0420%" height="15" fill="rgb(239,54,39)" fg:x="215874" fg:w="189"/><text x="48.1912%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (180 samples, 0.04%)</title><rect x="47.9432%" y="101" width="0.0400%" height="15" fill="rgb(230,99,41)" fg:x="215883" fg:w="180"/><text x="48.1932%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3,880 samples, 0.86%)</title><rect x="47.1226%" y="133" width="0.8617%" height="15" fill="rgb(253,106,12)" fg:x="212188" fg:w="3880"/><text x="47.3726%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (4,025 samples, 0.89%)</title><rect x="47.0980%" y="149" width="0.8939%" height="15" fill="rgb(213,46,41)" fg:x="212077" fg:w="4025"/><text x="47.3480%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4,099 samples, 0.91%)</title><rect x="47.0858%" y="165" width="0.9103%" height="15" fill="rgb(215,133,35)" fg:x="212022" fg:w="4099"/><text x="47.3358%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (50 samples, 0.01%)</title><rect x="47.9967%" y="165" width="0.0111%" height="15" fill="rgb(213,28,5)" fg:x="216124" fg:w="50"/><text x="48.2467%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (9,636 samples, 2.14%)</title><rect x="48.0172%" y="165" width="2.1400%" height="15" fill="rgb(215,77,49)" fg:x="216216" fg:w="9636"/><text x="48.2672%" y="175.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (5,359 samples, 1.19%)</title><rect x="48.9670%" y="149" width="1.1901%" height="15" fill="rgb(248,100,22)" fg:x="220493" fg:w="5359"/><text x="49.2170%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el (35,921 samples, 7.98%)</title><rect x="45.9363%" y="181" width="7.9773%" height="15" fill="rgb(208,67,9)" fg:x="206846" fg:w="35921"/><text x="46.1863%" y="191.50">esp`esp::va..</text></g><g><title>esp`esp::ham::Ham::ham_sing (16,915 samples, 3.76%)</title><rect x="50.1571%" y="165" width="3.7565%" height="15" fill="rgb(219,133,21)" fg:x="225852" fg:w="16915"/><text x="50.4071%" y="175.50">esp`..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (7,988 samples, 1.77%)</title><rect x="52.1396%" y="149" width="1.7740%" height="15" fill="rgb(246,46,29)" fg:x="234779" fg:w="7988"/><text x="52.3896%" y="159.50">e..</text></g><g><title>esp`esp::ham::Ham::ham_doub (1,439 samples, 0.32%)</title><rect x="54.3435%" y="165" width="0.3196%" height="15" fill="rgb(246,185,52)" fg:x="244703" fg:w="1439"/><text x="54.5935%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (876 samples, 0.19%)</title><rect x="54.4686%" y="149" width="0.1945%" height="15" fill="rgb(252,136,11)" fg:x="245266" fg:w="876"/><text x="54.7186%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (2,509 samples, 0.56%)</title><rect x="54.6631%" y="165" width="0.5572%" height="15" fill="rgb(219,138,53)" fg:x="246142" fg:w="2509"/><text x="54.9131%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (1,028 samples, 0.23%)</title><rect x="55.2203%" y="165" width="0.2283%" height="15" fill="rgb(211,51,23)" fg:x="248651" fg:w="1028"/><text x="55.4703%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (671 samples, 0.15%)</title><rect x="55.2996%" y="149" width="0.1490%" height="15" fill="rgb(247,221,28)" fg:x="249008" fg:w="671"/><text x="55.5496%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (51 samples, 0.01%)</title><rect x="55.6867%" y="69" width="0.0113%" height="15" fill="rgb(251,222,45)" fg:x="250751" fg:w="51"/><text x="55.9367%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (67 samples, 0.01%)</title><rect x="55.7078%" y="53" width="0.0149%" height="15" fill="rgb(217,162,53)" fg:x="250846" fg:w="67"/><text x="55.9578%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (48 samples, 0.01%)</title><rect x="55.7120%" y="37" width="0.0107%" height="15" fill="rgb(229,93,14)" fg:x="250865" fg:w="48"/><text x="55.9620%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.02%)</title><rect x="55.7078%" y="69" width="0.0151%" height="15" fill="rgb(209,67,49)" fg:x="250846" fg:w="68"/><text x="55.9578%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (874 samples, 0.19%)</title><rect x="55.6853%" y="85" width="0.1941%" height="15" fill="rgb(213,87,29)" fg:x="250745" fg:w="874"/><text x="55.9353%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (703 samples, 0.16%)</title><rect x="55.7233%" y="69" width="0.1561%" height="15" fill="rgb(205,151,52)" fg:x="250916" fg:w="703"/><text x="55.9733%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (892 samples, 0.20%)</title><rect x="55.6818%" y="101" width="0.1981%" height="15" fill="rgb(253,215,39)" fg:x="250729" fg:w="892"/><text x="55.9318%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (954 samples, 0.21%)</title><rect x="55.6798%" y="117" width="0.2119%" height="15" fill="rgb(221,220,41)" fg:x="250720" fg:w="954"/><text x="55.9298%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (961 samples, 0.21%)</title><rect x="55.6796%" y="133" width="0.2134%" height="15" fill="rgb(218,133,21)" fg:x="250719" fg:w="961"/><text x="55.9296%" y="143.50"></text></g><g><title>esp`esp::var::off_diag::add_el (2,003 samples, 0.44%)</title><rect x="55.4486%" y="165" width="0.4448%" height="15" fill="rgb(221,193,43)" fg:x="249679" fg:w="2003"/><text x="55.6986%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (970 samples, 0.22%)</title><rect x="55.6780%" y="149" width="0.2154%" height="15" fill="rgb(240,128,52)" fg:x="250712" fg:w="970"/><text x="55.9280%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (9,555 samples, 2.12%)</title><rect x="53.9136%" y="181" width="2.1220%" height="15" fill="rgb(253,114,12)" fg:x="242767" fg:w="9555"/><text x="54.1636%" y="191.50">e..</text></g><g><title>esp`hashbrown::map::make_hash (640 samples, 0.14%)</title><rect x="55.8934%" y="165" width="0.1421%" height="15" fill="rgb(215,223,47)" fg:x="251682" fg:w="640"/><text x="56.1434%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (393 samples, 0.09%)</title><rect x="55.9483%" y="149" width="0.0873%" height="15" fill="rgb(248,225,23)" fg:x="251929" fg:w="393"/><text x="56.1983%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (88 samples, 0.02%)</title><rect x="58.3885%" y="69" width="0.0195%" height="15" fill="rgb(250,108,0)" fg:x="262917" fg:w="88"/><text x="58.6385%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (88 samples, 0.02%)</title><rect x="58.3885%" y="53" width="0.0195%" height="15" fill="rgb(228,208,7)" fg:x="262917" fg:w="88"/><text x="58.6385%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (88 samples, 0.02%)</title><rect x="58.3885%" y="37" width="0.0195%" height="15" fill="rgb(244,45,10)" fg:x="262917" fg:w="88"/><text x="58.6385%" y="47.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,648 samples, 1.92%)</title><rect x="56.4937%" y="165" width="1.9205%" height="15" fill="rgb(207,125,25)" fg:x="254385" fg:w="8648"/><text x="56.7437%" y="175.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (134 samples, 0.03%)</title><rect x="58.3845%" y="149" width="0.0298%" height="15" fill="rgb(210,195,18)" fg:x="262899" fg:w="134"/><text x="58.6345%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (134 samples, 0.03%)</title><rect x="58.3845%" y="133" width="0.0298%" height="15" fill="rgb(249,80,12)" fg:x="262899" fg:w="134"/><text x="58.6345%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (134 samples, 0.03%)</title><rect x="58.3845%" y="117" width="0.0298%" height="15" fill="rgb(221,65,9)" fg:x="262899" fg:w="134"/><text x="58.6345%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (134 samples, 0.03%)</title><rect x="58.3845%" y="101" width="0.0298%" height="15" fill="rgb(235,49,36)" fg:x="262899" fg:w="134"/><text x="58.6345%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (134 samples, 0.03%)</title><rect x="58.3845%" y="85" width="0.0298%" height="15" fill="rgb(225,32,20)" fg:x="262899" fg:w="134"/><text x="58.6345%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 0.02%)</title><rect x="60.0541%" y="101" width="0.0155%" height="15" fill="rgb(215,141,46)" fg:x="270417" fg:w="70"/><text x="60.3041%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (68 samples, 0.02%)</title><rect x="60.0545%" y="85" width="0.0151%" height="15" fill="rgb(250,160,47)" fg:x="270419" fg:w="68"/><text x="60.3045%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.02%)</title><rect x="60.0514%" y="117" width="0.0184%" height="15" fill="rgb(216,222,40)" fg:x="270405" fg:w="83"/><text x="60.3014%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (49 samples, 0.01%)</title><rect x="60.0741%" y="85" width="0.0109%" height="15" fill="rgb(234,217,39)" fg:x="270507" fg:w="49"/><text x="60.3241%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (59 samples, 0.01%)</title><rect x="60.0725%" y="101" width="0.0131%" height="15" fill="rgb(207,178,40)" fg:x="270500" fg:w="59"/><text x="60.3225%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (76 samples, 0.02%)</title><rect x="60.0710%" y="117" width="0.0169%" height="15" fill="rgb(221,136,13)" fg:x="270493" fg:w="76"/><text x="60.3210%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (174 samples, 0.04%)</title><rect x="60.0497%" y="133" width="0.0386%" height="15" fill="rgb(249,199,10)" fg:x="270397" fg:w="174"/><text x="60.2997%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (191 samples, 0.04%)</title><rect x="60.0463%" y="149" width="0.0424%" height="15" fill="rgb(249,222,13)" fg:x="270382" fg:w="191"/><text x="60.2963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (58 samples, 0.01%)</title><rect x="60.0916%" y="117" width="0.0129%" height="15" fill="rgb(244,185,38)" fg:x="270586" fg:w="58"/><text x="60.3416%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (112 samples, 0.02%)</title><rect x="60.0901%" y="133" width="0.0249%" height="15" fill="rgb(236,202,9)" fg:x="270579" fg:w="112"/><text x="60.3401%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (47 samples, 0.01%)</title><rect x="60.1045%" y="117" width="0.0104%" height="15" fill="rgb(250,229,37)" fg:x="270644" fg:w="47"/><text x="60.3545%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (119 samples, 0.03%)</title><rect x="60.0890%" y="149" width="0.0264%" height="15" fill="rgb(206,174,23)" fg:x="270574" fg:w="119"/><text x="60.3390%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (71 samples, 0.02%)</title><rect x="60.1165%" y="149" width="0.0158%" height="15" fill="rgb(211,33,43)" fg:x="270698" fg:w="71"/><text x="60.3665%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (99 samples, 0.02%)</title><rect x="60.1380%" y="149" width="0.0220%" height="15" fill="rgb(245,58,50)" fg:x="270795" fg:w="99"/><text x="60.3880%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (68 samples, 0.02%)</title><rect x="60.1449%" y="133" width="0.0151%" height="15" fill="rgb(244,68,36)" fg:x="270826" fg:w="68"/><text x="60.3949%" y="143.50"></text></g><g><title>esp`alloc::slice::merge_sort (8,273 samples, 1.84%)</title><rect x="58.4238%" y="165" width="1.8373%" height="15" fill="rgb(232,229,15)" fg:x="263076" fg:w="8273"/><text x="58.6738%" y="175.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (450 samples, 0.10%)</title><rect x="60.1611%" y="149" width="0.0999%" height="15" fill="rgb(254,30,23)" fg:x="270899" fg:w="450"/><text x="60.4111%" y="159.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new (1,720 samples, 0.38%)</title><rect x="60.2611%" y="165" width="0.3820%" height="15" fill="rgb(235,160,14)" fg:x="271349" fg:w="1720"/><text x="60.5111%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (1,720 samples, 0.38%)</title><rect x="60.2611%" y="149" width="0.3820%" height="15" fill="rgb(212,155,44)" fg:x="271349" fg:w="1720"/><text x="60.5111%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::create_sparse (20,854 samples, 4.63%)</title><rect x="56.0356%" y="181" width="4.6312%" height="15" fill="rgb(226,2,50)" fg:x="252322" fg:w="20854"/><text x="56.2856%" y="191.50">esp`e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (91 samples, 0.02%)</title><rect x="60.6466%" y="165" width="0.0202%" height="15" fill="rgb(234,177,6)" fg:x="273085" fg:w="91"/><text x="60.8966%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,023 samples, 0.45%)</title><rect x="60.6668%" y="181" width="0.4493%" height="15" fill="rgb(217,24,9)" fg:x="273176" fg:w="2023"/><text x="60.9168%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (357 samples, 0.08%)</title><rect x="61.0368%" y="165" width="0.0793%" height="15" fill="rgb(220,13,46)" fg:x="274842" fg:w="357"/><text x="61.2868%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (195 samples, 0.04%)</title><rect x="61.2182%" y="165" width="0.0433%" height="15" fill="rgb(239,221,27)" fg:x="275659" fg:w="195"/><text x="61.4682%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (249 samples, 0.06%)</title><rect x="61.5756%" y="133" width="0.0553%" height="15" fill="rgb(222,198,25)" fg:x="277268" fg:w="249"/><text x="61.8256%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (47 samples, 0.01%)</title><rect x="61.6360%" y="85" width="0.0104%" height="15" fill="rgb(211,99,13)" fg:x="277540" fg:w="47"/><text x="61.8860%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (129 samples, 0.03%)</title><rect x="61.6329%" y="117" width="0.0286%" height="15" fill="rgb(232,111,31)" fg:x="277526" fg:w="129"/><text x="61.8829%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (122 samples, 0.03%)</title><rect x="61.6344%" y="101" width="0.0271%" height="15" fill="rgb(245,82,37)" fg:x="277533" fg:w="122"/><text x="61.8844%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (68 samples, 0.02%)</title><rect x="61.6464%" y="85" width="0.0151%" height="15" fill="rgb(227,149,46)" fg:x="277587" fg:w="68"/><text x="61.8964%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (47 samples, 0.01%)</title><rect x="61.6511%" y="69" width="0.0104%" height="15" fill="rgb(218,36,50)" fg:x="277608" fg:w="47"/><text x="61.9011%" y="79.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (258 samples, 0.06%)</title><rect x="61.6309%" y="133" width="0.0573%" height="15" fill="rgb(226,80,48)" fg:x="277517" fg:w="258"/><text x="61.8809%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (118 samples, 0.03%)</title><rect x="61.6620%" y="117" width="0.0262%" height="15" fill="rgb(238,224,15)" fg:x="277657" fg:w="118"/><text x="61.9120%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,756 samples, 0.39%)</title><rect x="61.3228%" y="149" width="0.3900%" height="15" fill="rgb(241,136,10)" fg:x="276130" fg:w="1756"/><text x="61.5728%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,033 samples, 0.45%)</title><rect x="61.2615%" y="165" width="0.4515%" height="15" fill="rgb(208,32,45)" fg:x="275854" fg:w="2033"/><text x="61.5115%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,695 samples, 0.60%)</title><rect x="61.1161%" y="181" width="0.5985%" height="15" fill="rgb(207,135,9)" fg:x="275199" fg:w="2695"/><text x="61.3661%" y="191.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (131,564 samples, 29.22%)</title><rect x="61.7195%" y="181" width="29.2177%" height="15" fill="rgb(206,86,44)" fg:x="277916" fg:w="131564"/><text x="61.9695%" y="191.50">esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (35,946 samples, 7.98%)</title><rect x="82.9543%" y="165" width="7.9829%" height="15" fill="rgb(245,177,15)" fg:x="373534" fg:w="35946"/><text x="83.2043%" y="175.50">esp`core::h..</text></g><g><title>libsystem_kernel.dylib`madvise (53 samples, 0.01%)</title><rect x="90.9376%" y="181" width="0.0118%" height="15" fill="rgb(206,64,50)" fg:x="409482" fg:w="53"/><text x="91.1876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,530 samples, 0.34%)</title><rect x="90.9682%" y="165" width="0.3398%" height="15" fill="rgb(234,36,40)" fg:x="409620" fg:w="1530"/><text x="91.2182%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,462 samples, 0.32%)</title><rect x="90.9833%" y="149" width="0.3247%" height="15" fill="rgb(213,64,8)" fg:x="409688" fg:w="1462"/><text x="91.2333%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (593 samples, 0.13%)</title><rect x="91.1763%" y="133" width="0.1317%" height="15" fill="rgb(210,75,36)" fg:x="410557" fg:w="593"/><text x="91.4263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (95 samples, 0.02%)</title><rect x="91.2869%" y="117" width="0.0211%" height="15" fill="rgb(229,88,21)" fg:x="411055" fg:w="95"/><text x="91.5369%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,622 samples, 0.36%)</title><rect x="90.9494%" y="181" width="0.3602%" height="15" fill="rgb(252,204,47)" fg:x="409535" fg:w="1622"/><text x="91.1994%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (240,614 samples, 53.44%)</title><rect x="37.9114%" y="197" width="53.4355%" height="15" fill="rgb(208,77,27)" fg:x="170711" fg:w="240614"/><text x="38.1614%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (119 samples, 0.03%)</title><rect x="91.3500%" y="197" width="0.0264%" height="15" fill="rgb(221,76,26)" fg:x="411339" fg:w="119"/><text x="91.6000%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,787 samples, 0.40%)</title><rect x="91.3818%" y="197" width="0.3969%" height="15" fill="rgb(225,139,18)" fg:x="411482" fg:w="1787"/><text x="91.6318%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (277,747 samples, 61.68%)</title><rect x="30.1056%" y="213" width="61.6819%" height="15" fill="rgb(230,137,11)" fg:x="135562" fg:w="277747"/><text x="30.3556%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (131 samples, 0.03%)</title><rect x="92.1102%" y="197" width="0.0291%" height="15" fill="rgb(212,28,1)" fg:x="414762" fg:w="131"/><text x="92.3602%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (85 samples, 0.02%)</title><rect x="92.1393%" y="197" width="0.0189%" height="15" fill="rgb(248,164,17)" fg:x="414893" fg:w="85"/><text x="92.3893%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (18,797 samples, 4.17%)</title><rect x="92.1581%" y="197" width="4.1744%" height="15" fill="rgb(222,171,42)" fg:x="414978" fg:w="18797"/><text x="92.4081%" y="207.50">esp`e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (9,408 samples, 2.09%)</title><rect x="94.2433%" y="181" width="2.0893%" height="15" fill="rgb(243,84,45)" fg:x="424367" fg:w="9408"/><text x="94.4933%" y="191.50">e..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (487 samples, 0.11%)</title><rect x="96.3326%" y="197" width="0.1082%" height="15" fill="rgb(252,49,23)" fg:x="433775" fg:w="487"/><text x="96.5826%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (659 samples, 0.15%)</title><rect x="96.4407%" y="197" width="0.1464%" height="15" fill="rgb(215,19,7)" fg:x="434262" fg:w="659"/><text x="96.6907%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (482 samples, 0.11%)</title><rect x="96.4800%" y="181" width="0.1070%" height="15" fill="rgb(238,81,41)" fg:x="434439" fg:w="482"/><text x="96.7300%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (494 samples, 0.11%)</title><rect x="96.5871%" y="197" width="0.1097%" height="15" fill="rgb(210,199,37)" fg:x="434921" fg:w="494"/><text x="96.8371%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (346 samples, 0.08%)</title><rect x="96.6199%" y="181" width="0.0768%" height="15" fill="rgb(244,192,49)" fg:x="435069" fg:w="346"/><text x="96.8699%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (7,094 samples, 1.58%)</title><rect x="96.7030%" y="197" width="1.5754%" height="15" fill="rgb(226,211,11)" fg:x="435443" fg:w="7094"/><text x="96.9530%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,110 samples, 0.25%)</title><rect x="98.0319%" y="181" width="0.2465%" height="15" fill="rgb(236,162,54)" fg:x="441427" fg:w="1110"/><text x="98.2819%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (46 samples, 0.01%)</title><rect x="98.3157%" y="149" width="0.0102%" height="15" fill="rgb(220,229,9)" fg:x="442705" fg:w="46"/><text x="98.5657%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (251 samples, 0.06%)</title><rect x="98.2784%" y="197" width="0.0557%" height="15" fill="rgb(250,87,22)" fg:x="442537" fg:w="251"/><text x="98.5284%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (199 samples, 0.04%)</title><rect x="98.2900%" y="181" width="0.0442%" height="15" fill="rgb(239,43,17)" fg:x="442589" fg:w="199"/><text x="98.5400%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (163 samples, 0.04%)</title><rect x="98.2980%" y="165" width="0.0362%" height="15" fill="rgb(231,177,25)" fg:x="442625" fg:w="163"/><text x="98.5480%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (596 samples, 0.13%)</title><rect x="98.3342%" y="197" width="0.1324%" height="15" fill="rgb(219,179,1)" fg:x="442788" fg:w="596"/><text x="98.5842%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (261 samples, 0.06%)</title><rect x="98.4086%" y="181" width="0.0580%" height="15" fill="rgb(238,219,53)" fg:x="443123" fg:w="261"/><text x="98.6586%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (30,099 samples, 6.68%)</title><rect x="91.7875%" y="213" width="6.6844%" height="15" fill="rgb(232,167,36)" fg:x="413309" fg:w="30099"/><text x="92.0375%" y="223.50">esp`esp::..</text></g><g><title>esp`esp::var::variational (307,924 samples, 68.38%)</title><rect x="30.1018%" y="229" width="68.3836%" height="15" fill="rgb(244,19,51)" fg:x="135545" fg:w="307924"/><text x="30.3518%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (74 samples, 0.02%)</title><rect x="98.5158%" y="181" width="0.0164%" height="15" fill="rgb(224,6,22)" fg:x="443606" fg:w="74"/><text x="98.7658%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (74 samples, 0.02%)</title><rect x="98.5158%" y="165" width="0.0164%" height="15" fill="rgb(224,145,5)" fg:x="443606" fg:w="74"/><text x="98.7658%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (73 samples, 0.02%)</title><rect x="98.5161%" y="149" width="0.0162%" height="15" fill="rgb(234,130,49)" fg:x="443607" fg:w="73"/><text x="98.7661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (73 samples, 0.02%)</title><rect x="98.5161%" y="133" width="0.0162%" height="15" fill="rgb(254,6,2)" fg:x="443607" fg:w="73"/><text x="98.7661%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (72 samples, 0.02%)</title><rect x="98.5163%" y="117" width="0.0160%" height="15" fill="rgb(208,96,46)" fg:x="443608" fg:w="72"/><text x="98.7663%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (52 samples, 0.01%)</title><rect x="98.5207%" y="101" width="0.0115%" height="15" fill="rgb(239,3,39)" fg:x="443628" fg:w="52"/><text x="98.7707%" y="111.50"></text></g><g><title>esp`alloc::slice::merge_sort (141 samples, 0.03%)</title><rect x="98.5323%" y="181" width="0.0313%" height="15" fill="rgb(233,210,1)" fg:x="443680" fg:w="141"/><text x="98.7823%" y="191.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (390 samples, 0.09%)</title><rect x="98.4856%" y="197" width="0.0866%" height="15" fill="rgb(244,137,37)" fg:x="443470" fg:w="390"/><text x="98.7356%" y="207.50"></text></g><g><title>esp`std::io::append_to_string (53 samples, 0.01%)</title><rect x="98.5838%" y="165" width="0.0118%" height="15" fill="rgb(240,136,2)" fg:x="443912" fg:w="53"/><text x="98.8338%" y="175.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.01%)</title><rect x="98.5831%" y="181" width="0.0127%" height="15" fill="rgb(239,18,37)" fg:x="443909" fg:w="57"/><text x="98.8331%" y="191.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (533 samples, 0.12%)</title><rect x="98.4854%" y="229" width="0.1184%" height="15" fill="rgb(218,185,22)" fg:x="443469" fg:w="533"/><text x="98.7354%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (533 samples, 0.12%)</title><rect x="98.4854%" y="213" width="0.1184%" height="15" fill="rgb(225,218,4)" fg:x="443469" fg:w="533"/><text x="98.7354%" y="223.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (142 samples, 0.03%)</title><rect x="98.5723%" y="197" width="0.0315%" height="15" fill="rgb(230,182,32)" fg:x="443860" fg:w="142"/><text x="98.8223%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (454 samples, 0.10%)</title><rect x="98.6116%" y="213" width="0.1008%" height="15" fill="rgb(242,56,43)" fg:x="444037" fg:w="454"/><text x="98.8616%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (524 samples, 0.12%)</title><rect x="98.6069%" y="229" width="0.1164%" height="15" fill="rgb(233,99,24)" fg:x="444016" fg:w="524"/><text x="98.8569%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.01%)</title><rect x="98.7124%" y="213" width="0.0109%" height="15" fill="rgb(234,209,42)" fg:x="444491" fg:w="49"/><text x="98.9624%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (49 samples, 0.01%)</title><rect x="98.7124%" y="197" width="0.0109%" height="15" fill="rgb(227,7,12)" fg:x="444491" fg:w="49"/><text x="98.9624%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (175 samples, 0.04%)</title><rect x="98.7506%" y="213" width="0.0389%" height="15" fill="rgb(245,203,43)" fg:x="444663" fg:w="175"/><text x="99.0006%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (175 samples, 0.04%)</title><rect x="98.7506%" y="197" width="0.0389%" height="15" fill="rgb(238,205,33)" fg:x="444663" fg:w="175"/><text x="99.0006%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2,883 samples, 0.64%)</title><rect x="98.7894%" y="213" width="0.6403%" height="15" fill="rgb(231,56,7)" fg:x="444838" fg:w="2883"/><text x="99.0394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (754 samples, 0.17%)</title><rect x="99.4313%" y="213" width="0.1674%" height="15" fill="rgb(244,186,29)" fg:x="447728" fg:w="754"/><text x="99.6813%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (191 samples, 0.04%)</title><rect x="99.6047%" y="197" width="0.0424%" height="15" fill="rgb(234,111,31)" fg:x="448509" fg:w="191"/><text x="99.8547%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (204 samples, 0.05%)</title><rect x="99.6031%" y="213" width="0.0453%" height="15" fill="rgb(241,149,10)" fg:x="448502" fg:w="204"/><text x="99.8531%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,306 samples, 0.29%)</title><rect x="99.6584%" y="197" width="0.2900%" height="15" fill="rgb(249,206,44)" fg:x="448751" fg:w="1306"/><text x="99.9084%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5,521 samples, 1.23%)</title><rect x="98.7306%" y="229" width="1.2261%" height="15" fill="rgb(251,153,30)" fg:x="444573" fg:w="5521"/><text x="98.9806%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (1,388 samples, 0.31%)</title><rect x="99.6484%" y="213" width="0.3082%" height="15" fill="rgb(239,152,38)" fg:x="448706" fg:w="1388"/><text x="99.8984%" y="223.50"></text></g><g><title>esp`esp::main (450,126 samples, 99.96%)</title><rect x="0.0009%" y="245" width="99.9638%" height="15" fill="rgb(249,139,47)" fg:x="4" fg:w="450126"/><text x="0.2509%" y="255.50">esp`esp::main</text></g><g><title>esp`main (450,138 samples, 99.97%)</title><rect x="0.0000%" y="309" width="99.9665%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="450138"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (450,138 samples, 99.97%)</title><rect x="0.0000%" y="293" width="99.9665%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="450138"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (450,138 samples, 99.97%)</title><rect x="0.0000%" y="277" width="99.9665%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="450138"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (450,138 samples, 99.97%)</title><rect x="0.0000%" y="261" width="99.9665%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="450138"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (450,289 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="450289"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (450,289 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="450289"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (450,289 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="450289"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (151 samples, 0.03%)</title><rect x="99.9665%" y="309" width="0.0335%" height="15" fill="rgb(211,67,2)" fg:x="450138" fg:w="151"/><text x="100.2165%" y="319.50"></text></g></svg></svg>