<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="64351"><g><title>libsystem_malloc.dylib`small_size (35 samples, 0.05%)</title><rect x="0.0497%" y="213" width="0.0544%" height="15" fill="rgb(227,0,7)" fg:x="32" fg:w="35"/><text x="0.2997%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.07%)</title><rect x="0.0388%" y="229" width="0.0730%" height="15" fill="rgb(217,0,24)" fg:x="25" fg:w="47"/><text x="0.2888%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (21 samples, 0.03%)</title><rect x="0.1119%" y="229" width="0.0326%" height="15" fill="rgb(221,193,54)" fg:x="72" fg:w="21"/><text x="0.3619%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (21 samples, 0.03%)</title><rect x="0.1119%" y="213" width="0.0326%" height="15" fill="rgb(248,212,6)" fg:x="72" fg:w="21"/><text x="0.3619%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 0.03%)</title><rect x="0.1119%" y="197" width="0.0326%" height="15" fill="rgb(208,68,35)" fg:x="72" fg:w="21"/><text x="0.3619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (13 samples, 0.02%)</title><rect x="0.1803%" y="213" width="0.0202%" height="15" fill="rgb(232,128,0)" fg:x="116" fg:w="13"/><text x="0.4303%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="0.1865%" y="197" width="0.0140%" height="15" fill="rgb(207,160,47)" fg:x="120" fg:w="9"/><text x="0.4365%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (27 samples, 0.04%)</title><rect x="0.2005%" y="213" width="0.0420%" height="15" fill="rgb(228,23,34)" fg:x="129" fg:w="27"/><text x="0.4505%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (104 samples, 0.16%)</title><rect x="0.2517%" y="213" width="0.1616%" height="15" fill="rgb(218,30,26)" fg:x="162" fg:w="104"/><text x="0.5017%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_reattach_region (9 samples, 0.01%)</title><rect x="0.4134%" y="213" width="0.0140%" height="15" fill="rgb(220,122,19)" fg:x="266" fg:w="9"/><text x="0.6634%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (106 samples, 0.16%)</title><rect x="0.4273%" y="197" width="0.1647%" height="15" fill="rgb(250,228,42)" fg:x="275" fg:w="106"/><text x="0.6773%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (108 samples, 0.17%)</title><rect x="0.4273%" y="213" width="0.1678%" height="15" fill="rgb(240,193,28)" fg:x="275" fg:w="108"/><text x="0.6773%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (681 samples, 1.06%)</title><rect x="0.6325%" y="197" width="1.0583%" height="15" fill="rgb(216,20,37)" fg:x="407" fg:w="681"/><text x="0.8825%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (21 samples, 0.03%)</title><rect x="1.6907%" y="197" width="0.0326%" height="15" fill="rgb(206,188,39)" fg:x="1088" fg:w="21"/><text x="1.9407%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1,018 samples, 1.58%)</title><rect x="0.1445%" y="229" width="1.5819%" height="15" fill="rgb(217,207,13)" fg:x="93" fg:w="1018"/><text x="0.3945%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (728 samples, 1.13%)</title><rect x="0.5952%" y="213" width="1.1313%" height="15" fill="rgb(231,73,38)" fg:x="383" fg:w="728"/><text x="0.8452%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (31 samples, 0.05%)</title><rect x="1.7280%" y="229" width="0.0482%" height="15" fill="rgb(225,20,46)" fg:x="1112" fg:w="31"/><text x="1.9780%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (31 samples, 0.05%)</title><rect x="1.7280%" y="213" width="0.0482%" height="15" fill="rgb(210,31,41)" fg:x="1112" fg:w="31"/><text x="1.9780%" y="223.50"></text></g><g><title>esp`core::ptr::drop_in_place&lt;esp::wf::Wf&gt; (1,143 samples, 1.78%)</title><rect x="0.0078%" y="245" width="1.7762%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1143"/><text x="0.2578%" y="255.50">e..</text></g><g><title>esp`DYLD-STUB$$malloc (8 samples, 0.01%)</title><rect x="1.8213%" y="213" width="0.0124%" height="15" fill="rgb(226,26,5)" fg:x="1172" fg:w="8"/><text x="2.0713%" y="223.50"></text></g><g><title>esp`__rdl_alloc (34 samples, 0.05%)</title><rect x="1.8337%" y="213" width="0.0528%" height="15" fill="rgb(249,33,26)" fg:x="1180" fg:w="34"/><text x="2.0837%" y="223.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 0.05%)</title><rect x="2.3123%" y="197" width="0.0497%" height="15" fill="rgb(235,183,28)" fg:x="1488" fg:w="32"/><text x="2.5623%" y="207.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (27 samples, 0.04%)</title><rect x="9.8040%" y="181" width="0.0420%" height="15" fill="rgb(221,5,38)" fg:x="6309" fg:w="27"/><text x="10.0540%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 0.04%)</title><rect x="9.8040%" y="165" width="0.0420%" height="15" fill="rgb(247,18,42)" fg:x="6309" fg:w="27"/><text x="10.0540%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.02%)</title><rect x="9.8460%" y="181" width="0.0249%" height="15" fill="rgb(241,131,45)" fg:x="6336" fg:w="16"/><text x="10.0960%" y="191.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (4,834 samples, 7.51%)</title><rect x="2.3620%" y="197" width="7.5119%" height="15" fill="rgb(249,31,29)" fg:x="1520" fg:w="4834"/><text x="2.6120%" y="207.50">esp`&lt;esp::..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (12 samples, 0.02%)</title><rect x="9.8740%" y="197" width="0.0186%" height="15" fill="rgb(225,111,53)" fg:x="6354" fg:w="12"/><text x="10.1240%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="9.8740%" y="181" width="0.0186%" height="15" fill="rgb(238,160,17)" fg:x="6354" fg:w="12"/><text x="10.1240%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="9.8740%" y="165" width="0.0186%" height="15" fill="rgb(214,148,48)" fg:x="6354" fg:w="12"/><text x="10.1240%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.02%)</title><rect x="9.8740%" y="149" width="0.0186%" height="15" fill="rgb(232,36,49)" fg:x="6354" fg:w="12"/><text x="10.1240%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.02%)</title><rect x="9.8740%" y="133" width="0.0186%" height="15" fill="rgb(209,103,24)" fg:x="6354" fg:w="12"/><text x="10.1240%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::pack (28 samples, 0.04%)</title><rect x="10.2718%" y="149" width="0.0435%" height="15" fill="rgb(229,88,8)" fg:x="6610" fg:w="28"/><text x="10.5218%" y="159.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (57 samples, 0.09%)</title><rect x="10.3184%" y="133" width="0.0886%" height="15" fill="rgb(213,181,19)" fg:x="6640" fg:w="57"/><text x="10.5684%" y="143.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (335 samples, 0.52%)</title><rect x="9.9361%" y="181" width="0.5206%" height="15" fill="rgb(254,191,54)" fg:x="6394" fg:w="335"/><text x="10.1861%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (119 samples, 0.18%)</title><rect x="10.2718%" y="165" width="0.1849%" height="15" fill="rgb(241,83,37)" fg:x="6610" fg:w="119"/><text x="10.5218%" y="175.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (91 samples, 0.14%)</title><rect x="10.3153%" y="149" width="0.1414%" height="15" fill="rgb(233,36,39)" fg:x="6638" fg:w="91"/><text x="10.5653%" y="159.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (32 samples, 0.05%)</title><rect x="10.4070%" y="133" width="0.0497%" height="15" fill="rgb(226,3,54)" fg:x="6697" fg:w="32"/><text x="10.6570%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.02%)</title><rect x="10.4567%" y="181" width="0.0155%" height="15" fill="rgb(245,192,40)" fg:x="6729" fg:w="10"/><text x="10.7067%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (374 samples, 0.58%)</title><rect x="9.8926%" y="197" width="0.5812%" height="15" fill="rgb(238,167,29)" fg:x="6366" fg:w="374"/><text x="10.1426%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 0.07%)</title><rect x="10.4769%" y="181" width="0.0730%" height="15" fill="rgb(232,182,51)" fg:x="6742" fg:w="47"/><text x="10.7269%" y="191.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (49 samples, 0.08%)</title><rect x="10.4769%" y="197" width="0.0761%" height="15" fill="rgb(231,60,39)" fg:x="6742" fg:w="49"/><text x="10.7269%" y="207.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (88 samples, 0.14%)</title><rect x="10.6416%" y="181" width="0.1368%" height="15" fill="rgb(208,69,12)" fg:x="6848" fg:w="88"/><text x="10.8916%" y="191.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (22 samples, 0.03%)</title><rect x="10.7784%" y="181" width="0.0342%" height="15" fill="rgb(235,93,37)" fg:x="6936" fg:w="22"/><text x="11.0284%" y="191.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (165 samples, 0.26%)</title><rect x="10.5608%" y="197" width="0.2564%" height="15" fill="rgb(213,116,39)" fg:x="6796" fg:w="165"/><text x="10.8108%" y="207.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (9 samples, 0.01%)</title><rect x="10.8219%" y="165" width="0.0140%" height="15" fill="rgb(222,207,29)" fg:x="6964" fg:w="9"/><text x="11.0719%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (19 samples, 0.03%)</title><rect x="10.8172%" y="197" width="0.0295%" height="15" fill="rgb(206,96,30)" fg:x="6961" fg:w="19"/><text x="11.0672%" y="207.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (16 samples, 0.02%)</title><rect x="10.8219%" y="181" width="0.0249%" height="15" fill="rgb(218,138,4)" fg:x="6964" fg:w="16"/><text x="11.0719%" y="191.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (7 samples, 0.01%)</title><rect x="10.8359%" y="165" width="0.0109%" height="15" fill="rgb(250,191,14)" fg:x="6973" fg:w="7"/><text x="11.0859%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dotc (9 samples, 0.01%)</title><rect x="10.8468%" y="197" width="0.0140%" height="15" fill="rgb(239,60,40)" fg:x="6980" fg:w="9"/><text x="11.0968%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (61 samples, 0.09%)</title><rect x="10.8732%" y="197" width="0.0948%" height="15" fill="rgb(206,27,48)" fg:x="6997" fg:w="61"/><text x="11.1232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (284 samples, 0.44%)</title><rect x="10.9695%" y="197" width="0.4413%" height="15" fill="rgb(225,35,8)" fg:x="7059" fg:w="284"/><text x="11.2195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (284 samples, 0.44%)</title><rect x="10.9695%" y="181" width="0.4413%" height="15" fill="rgb(250,213,24)" fg:x="7059" fg:w="284"/><text x="11.2195%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (284 samples, 0.44%)</title><rect x="10.9695%" y="165" width="0.4413%" height="15" fill="rgb(247,123,22)" fg:x="7059" fg:w="284"/><text x="11.2195%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (6,129 samples, 9.52%)</title><rect x="1.8974%" y="213" width="9.5243%" height="15" fill="rgb(231,138,38)" fg:x="1221" fg:w="6129"/><text x="2.1474%" y="223.50">esp`eigenvalue..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="11.4109%" y="197" width="0.0109%" height="15" fill="rgb(231,145,46)" fg:x="7343" fg:w="7"/><text x="11.6609%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (9 samples, 0.01%)</title><rect x="20.1815%" y="165" width="0.0140%" height="15" fill="rgb(251,118,11)" fg:x="12987" fg:w="9"/><text x="20.4315%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (583 samples, 0.91%)</title><rect x="20.1955%" y="165" width="0.9060%" height="15" fill="rgb(217,147,25)" fg:x="12996" fg:w="583"/><text x="20.4455%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (530 samples, 0.82%)</title><rect x="20.2779%" y="149" width="0.8236%" height="15" fill="rgb(247,81,37)" fg:x="13049" fg:w="530"/><text x="20.5279%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (847 samples, 1.32%)</title><rect x="19.8225%" y="181" width="1.3162%" height="15" fill="rgb(209,12,38)" fg:x="12756" fg:w="847"/><text x="20.0725%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.04%)</title><rect x="21.1015%" y="165" width="0.0373%" height="15" fill="rgb(227,1,9)" fg:x="13579" fg:w="24"/><text x="21.3515%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (10 samples, 0.02%)</title><rect x="21.1388%" y="181" width="0.0155%" height="15" fill="rgb(248,47,43)" fg:x="13603" fg:w="10"/><text x="21.3888%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (10 samples, 0.02%)</title><rect x="21.1388%" y="165" width="0.0155%" height="15" fill="rgb(221,10,30)" fg:x="13603" fg:w="10"/><text x="21.3888%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.02%)</title><rect x="21.1388%" y="149" width="0.0155%" height="15" fill="rgb(210,229,1)" fg:x="13603" fg:w="10"/><text x="21.3888%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.02%)</title><rect x="21.1543%" y="181" width="0.0202%" height="15" fill="rgb(222,148,37)" fg:x="13613" fg:w="13"/><text x="21.4043%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="21.1605%" y="165" width="0.0140%" height="15" fill="rgb(234,67,33)" fg:x="13617" fg:w="9"/><text x="21.4105%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (25 samples, 0.04%)</title><rect x="22.6088%" y="165" width="0.0388%" height="15" fill="rgb(247,98,35)" fg:x="14549" fg:w="25"/><text x="22.8588%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (12 samples, 0.02%)</title><rect x="22.6477%" y="165" width="0.0186%" height="15" fill="rgb(247,138,52)" fg:x="14574" fg:w="12"/><text x="22.8977%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (764 samples, 1.19%)</title><rect x="24.5031%" y="149" width="1.1872%" height="15" fill="rgb(213,79,30)" fg:x="15768" fg:w="764"/><text x="24.7531%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (454 samples, 0.71%)</title><rect x="25.6904%" y="149" width="0.7055%" height="15" fill="rgb(246,177,23)" fg:x="16532" fg:w="454"/><text x="25.9404%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,381 samples, 5.25%)</title><rect x="21.1745%" y="181" width="5.2540%" height="15" fill="rgb(230,62,27)" fg:x="13626" fg:w="3381"/><text x="21.4245%" y="191.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,421 samples, 3.76%)</title><rect x="22.6663%" y="165" width="3.7622%" height="15" fill="rgb(216,154,8)" fg:x="14586" fg:w="2421"/><text x="22.9163%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (15 samples, 0.02%)</title><rect x="26.4052%" y="149" width="0.0233%" height="15" fill="rgb(244,35,45)" fg:x="16992" fg:w="15"/><text x="26.6552%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.02%)</title><rect x="26.4083%" y="133" width="0.0202%" height="15" fill="rgb(251,115,12)" fg:x="16994" fg:w="13"/><text x="26.6583%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (23 samples, 0.04%)</title><rect x="26.4300%" y="181" width="0.0357%" height="15" fill="rgb(240,54,50)" fg:x="17008" fg:w="23"/><text x="26.6800%" y="191.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,444 samples, 6.91%)</title><rect x="19.5848%" y="197" width="6.9059%" height="15" fill="rgb(233,84,52)" fg:x="12603" fg:w="4444"/><text x="19.8348%" y="207.50">esp`&lt;hash..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.02%)</title><rect x="26.4658%" y="181" width="0.0249%" height="15" fill="rgb(207,117,47)" fg:x="17031" fg:w="16"/><text x="26.7158%" y="191.50"></text></g><g><title>esp`__rdl_dealloc (31 samples, 0.05%)</title><rect x="26.4969%" y="197" width="0.0482%" height="15" fill="rgb(249,43,39)" fg:x="17051" fg:w="31"/><text x="26.7469%" y="207.50"></text></g><g><title>esp`__rdl_realloc (12 samples, 0.02%)</title><rect x="26.6538%" y="165" width="0.0186%" height="15" fill="rgb(209,38,44)" fg:x="17152" fg:w="12"/><text x="26.9038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (10 samples, 0.02%)</title><rect x="26.7642%" y="149" width="0.0155%" height="15" fill="rgb(236,212,23)" fg:x="17223" fg:w="10"/><text x="27.0142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (33 samples, 0.05%)</title><rect x="26.8341%" y="133" width="0.0513%" height="15" fill="rgb(242,79,21)" fg:x="17268" fg:w="33"/><text x="27.0841%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (8 samples, 0.01%)</title><rect x="26.8854%" y="133" width="0.0124%" height="15" fill="rgb(211,96,35)" fg:x="17301" fg:w="8"/><text x="27.1354%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.01%)</title><rect x="26.8978%" y="133" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="17309" fg:w="9"/><text x="27.1478%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (95 samples, 0.15%)</title><rect x="27.4199%" y="85" width="0.1476%" height="15" fill="rgb(211,81,21)" fg:x="17645" fg:w="95"/><text x="27.6699%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (384 samples, 0.60%)</title><rect x="27.0019%" y="117" width="0.5967%" height="15" fill="rgb(208,190,38)" fg:x="17376" fg:w="384"/><text x="27.2519%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (221 samples, 0.34%)</title><rect x="27.2552%" y="101" width="0.3434%" height="15" fill="rgb(235,213,38)" fg:x="17539" fg:w="221"/><text x="27.5052%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (20 samples, 0.03%)</title><rect x="27.5676%" y="85" width="0.0311%" height="15" fill="rgb(237,122,38)" fg:x="17740" fg:w="20"/><text x="27.8176%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="27.6390%" y="69" width="0.0109%" height="15" fill="rgb(244,218,35)" fg:x="17786" fg:w="7"/><text x="27.8890%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (24 samples, 0.04%)</title><rect x="27.6266%" y="101" width="0.0373%" height="15" fill="rgb(240,68,47)" fg:x="17778" fg:w="24"/><text x="27.8766%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (21 samples, 0.03%)</title><rect x="27.6313%" y="85" width="0.0326%" height="15" fill="rgb(210,16,53)" fg:x="17781" fg:w="21"/><text x="27.8813%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.01%)</title><rect x="27.6499%" y="69" width="0.0140%" height="15" fill="rgb(235,124,12)" fg:x="17793" fg:w="9"/><text x="27.8999%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (48 samples, 0.07%)</title><rect x="28.0742%" y="85" width="0.0746%" height="15" fill="rgb(224,169,11)" fg:x="18066" fg:w="48"/><text x="28.3242%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (500 samples, 0.78%)</title><rect x="27.6064%" y="117" width="0.7770%" height="15" fill="rgb(250,166,2)" fg:x="17765" fg:w="500"/><text x="27.8564%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (462 samples, 0.72%)</title><rect x="27.6655%" y="101" width="0.7179%" height="15" fill="rgb(242,216,29)" fg:x="17803" fg:w="462"/><text x="27.9155%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (150 samples, 0.23%)</title><rect x="28.1503%" y="85" width="0.2331%" height="15" fill="rgb(230,116,27)" fg:x="18115" fg:w="150"/><text x="28.4003%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (35 samples, 0.05%)</title><rect x="28.3290%" y="69" width="0.0544%" height="15" fill="rgb(228,99,48)" fg:x="18230" fg:w="35"/><text x="28.5790%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (72 samples, 0.11%)</title><rect x="28.3834%" y="117" width="0.1119%" height="15" fill="rgb(253,11,6)" fg:x="18265" fg:w="72"/><text x="28.6334%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (58 samples, 0.09%)</title><rect x="28.4052%" y="101" width="0.0901%" height="15" fill="rgb(247,143,39)" fg:x="18279" fg:w="58"/><text x="28.6552%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (190 samples, 0.30%)</title><rect x="28.5046%" y="117" width="0.2953%" height="15" fill="rgb(236,97,10)" fg:x="18343" fg:w="190"/><text x="28.7546%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.01%)</title><rect x="28.7890%" y="101" width="0.0109%" height="15" fill="rgb(233,208,19)" fg:x="18526" fg:w="7"/><text x="29.0390%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1,300 samples, 2.02%)</title><rect x="26.9118%" y="133" width="2.0202%" height="15" fill="rgb(216,164,2)" fg:x="17318" fg:w="1300"/><text x="27.1618%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (85 samples, 0.13%)</title><rect x="28.7999%" y="117" width="0.1321%" height="15" fill="rgb(220,129,5)" fg:x="18533" fg:w="85"/><text x="29.0499%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,395 samples, 2.17%)</title><rect x="26.7797%" y="149" width="2.1678%" height="15" fill="rgb(242,17,10)" fg:x="17233" fg:w="1395"/><text x="27.0297%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (116 samples, 0.18%)</title><rect x="28.9522%" y="149" width="0.1803%" height="15" fill="rgb(242,107,0)" fg:x="18631" fg:w="116"/><text x="29.2022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (111 samples, 0.17%)</title><rect x="28.9599%" y="133" width="0.1725%" height="15" fill="rgb(251,28,31)" fg:x="18636" fg:w="111"/><text x="29.2099%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,583 samples, 2.46%)</title><rect x="26.6771%" y="165" width="2.4599%" height="15" fill="rgb(233,223,10)" fg:x="17167" fg:w="1583"/><text x="26.9271%" y="175.50">li..</text></g><g><title>esp`alloc::raw_vec::finish_grow (1,617 samples, 2.51%)</title><rect x="26.6336%" y="181" width="2.5128%" height="15" fill="rgb(215,21,27)" fg:x="17139" fg:w="1617"/><text x="26.8836%" y="191.50">es..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,681 samples, 2.61%)</title><rect x="26.5528%" y="197" width="2.6122%" height="15" fill="rgb(232,23,21)" fg:x="17087" fg:w="1681"/><text x="26.8028%" y="207.50">es..</text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.02%)</title><rect x="29.1464%" y="181" width="0.0186%" height="15" fill="rgb(244,5,23)" fg:x="18756" fg:w="12"/><text x="29.3964%" y="191.50"></text></g><g><title>esp`alloc::slice::merge_sort (7 samples, 0.01%)</title><rect x="29.1697%" y="197" width="0.0109%" height="15" fill="rgb(226,81,46)" fg:x="18771" fg:w="7"/><text x="29.4197%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (145 samples, 0.23%)</title><rect x="29.1806%" y="197" width="0.2253%" height="15" fill="rgb(247,70,30)" fg:x="18778" fg:w="145"/><text x="29.4306%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (54 samples, 0.08%)</title><rect x="29.4059%" y="197" width="0.0839%" height="15" fill="rgb(212,68,19)" fg:x="18923" fg:w="54"/><text x="29.6559%" y="207.50"></text></g><g><title>esp`esp::var::off_diag::OffDiagElemsNoHash::expand_rows (20 samples, 0.03%)</title><rect x="29.4929%" y="197" width="0.0311%" height="15" fill="rgb(240,187,13)" fg:x="18979" fg:w="20"/><text x="29.7429%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.02%)</title><rect x="29.5069%" y="181" width="0.0171%" height="15" fill="rgb(223,113,26)" fg:x="18988" fg:w="11"/><text x="29.7569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.03%)</title><rect x="34.1455%" y="149" width="0.0326%" height="15" fill="rgb(206,192,2)" fg:x="21973" fg:w="21"/><text x="34.3955%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.03%)</title><rect x="34.1518%" y="133" width="0.0264%" height="15" fill="rgb(241,108,4)" fg:x="21977" fg:w="17"/><text x="34.4018%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.02%)</title><rect x="34.1533%" y="117" width="0.0249%" height="15" fill="rgb(247,173,49)" fg:x="21978" fg:w="16"/><text x="34.4033%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="34.1626%" y="101" width="0.0155%" height="15" fill="rgb(224,114,35)" fg:x="21984" fg:w="10"/><text x="34.4126%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (15 samples, 0.02%)</title><rect x="34.2699%" y="117" width="0.0233%" height="15" fill="rgb(245,159,27)" fg:x="22053" fg:w="15"/><text x="34.5199%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (15 samples, 0.02%)</title><rect x="34.4051%" y="85" width="0.0233%" height="15" fill="rgb(245,172,44)" fg:x="22140" fg:w="15"/><text x="34.6551%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (75 samples, 0.12%)</title><rect x="34.3289%" y="101" width="0.1165%" height="15" fill="rgb(236,23,11)" fg:x="22091" fg:w="75"/><text x="34.5789%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (11 samples, 0.02%)</title><rect x="34.4284%" y="85" width="0.0171%" height="15" fill="rgb(205,117,38)" fg:x="22155" fg:w="11"/><text x="34.6784%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (9 samples, 0.01%)</title><rect x="34.6475%" y="69" width="0.0140%" height="15" fill="rgb(237,72,25)" fg:x="22296" fg:w="9"/><text x="34.8975%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (61 samples, 0.09%)</title><rect x="34.6615%" y="69" width="0.0948%" height="15" fill="rgb(244,70,9)" fg:x="22305" fg:w="61"/><text x="34.9115%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (55 samples, 0.09%)</title><rect x="34.7563%" y="69" width="0.0855%" height="15" fill="rgb(217,125,39)" fg:x="22366" fg:w="55"/><text x="35.0063%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (7 samples, 0.01%)</title><rect x="34.8464%" y="69" width="0.0109%" height="15" fill="rgb(235,36,10)" fg:x="22424" fg:w="7"/><text x="35.0964%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (318 samples, 0.49%)</title><rect x="34.4455%" y="101" width="0.4942%" height="15" fill="rgb(251,123,47)" fg:x="22166" fg:w="318"/><text x="34.6955%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (260 samples, 0.40%)</title><rect x="34.5356%" y="85" width="0.4040%" height="15" fill="rgb(221,13,13)" fg:x="22224" fg:w="260"/><text x="34.7856%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (53 samples, 0.08%)</title><rect x="34.8573%" y="69" width="0.0824%" height="15" fill="rgb(238,131,9)" fg:x="22431" fg:w="53"/><text x="35.1073%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (52 samples, 0.08%)</title><rect x="34.8588%" y="53" width="0.0808%" height="15" fill="rgb(211,50,8)" fg:x="22432" fg:w="52"/><text x="35.1088%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (27 samples, 0.04%)</title><rect x="34.9490%" y="101" width="0.0420%" height="15" fill="rgb(245,182,24)" fg:x="22490" fg:w="27"/><text x="35.1990%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.01%)</title><rect x="35.1385%" y="53" width="0.0124%" height="15" fill="rgb(242,14,37)" fg:x="22612" fg:w="8"/><text x="35.3885%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (28 samples, 0.04%)</title><rect x="35.1510%" y="53" width="0.0435%" height="15" fill="rgb(246,228,12)" fg:x="22620" fg:w="28"/><text x="35.4010%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (159 samples, 0.25%)</title><rect x="35.0033%" y="85" width="0.2471%" height="15" fill="rgb(213,55,15)" fg:x="22525" fg:w="159"/><text x="35.2533%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (104 samples, 0.16%)</title><rect x="35.0888%" y="69" width="0.1616%" height="15" fill="rgb(209,9,3)" fg:x="22580" fg:w="104"/><text x="35.3388%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (36 samples, 0.06%)</title><rect x="35.1945%" y="53" width="0.0559%" height="15" fill="rgb(230,59,30)" fg:x="22648" fg:w="36"/><text x="35.4445%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (10 samples, 0.02%)</title><rect x="35.3141%" y="69" width="0.0155%" height="15" fill="rgb(209,121,21)" fg:x="22725" fg:w="10"/><text x="35.5641%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (258 samples, 0.40%)</title><rect x="34.9909%" y="101" width="0.4009%" height="15" fill="rgb(220,109,13)" fg:x="22517" fg:w="258"/><text x="35.2409%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (91 samples, 0.14%)</title><rect x="35.2504%" y="85" width="0.1414%" height="15" fill="rgb(232,18,1)" fg:x="22684" fg:w="91"/><text x="35.5004%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (37 samples, 0.06%)</title><rect x="35.3343%" y="69" width="0.0575%" height="15" fill="rgb(215,41,42)" fg:x="22738" fg:w="37"/><text x="35.5843%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.04%)</title><rect x="35.3918%" y="101" width="0.0420%" height="15" fill="rgb(224,123,36)" fg:x="22775" fg:w="27"/><text x="35.6418%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (20 samples, 0.03%)</title><rect x="35.4027%" y="85" width="0.0311%" height="15" fill="rgb(240,125,3)" fg:x="22782" fg:w="20"/><text x="35.6527%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (72 samples, 0.11%)</title><rect x="35.4400%" y="101" width="0.1119%" height="15" fill="rgb(205,98,50)" fg:x="22806" fg:w="72"/><text x="35.6900%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.03%)</title><rect x="35.5255%" y="85" width="0.0264%" height="15" fill="rgb(205,185,37)" fg:x="22861" fg:w="17"/><text x="35.7755%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1,629 samples, 2.53%)</title><rect x="34.3025%" y="117" width="2.5314%" height="15" fill="rgb(238,207,15)" fg:x="22074" fg:w="1629"/><text x="34.5525%" y="127.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (825 samples, 1.28%)</title><rect x="35.5519%" y="101" width="1.2820%" height="15" fill="rgb(213,199,42)" fg:x="22878" fg:w="825"/><text x="35.8019%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,666 samples, 2.59%)</title><rect x="34.2528%" y="133" width="2.5889%" height="15" fill="rgb(235,201,11)" fg:x="22042" fg:w="1666"/><text x="34.5028%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`small_size (54 samples, 0.08%)</title><rect x="36.8417%" y="133" width="0.0839%" height="15" fill="rgb(207,46,11)" fg:x="23708" fg:w="54"/><text x="37.0917%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (88 samples, 0.14%)</title><rect x="36.9303%" y="133" width="0.1368%" height="15" fill="rgb(241,35,35)" fg:x="23765" fg:w="88"/><text x="37.1803%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (84 samples, 0.13%)</title><rect x="36.9365%" y="117" width="0.1305%" height="15" fill="rgb(243,32,47)" fg:x="23769" fg:w="84"/><text x="37.1865%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,859 samples, 2.89%)</title><rect x="34.1797%" y="149" width="2.8888%" height="15" fill="rgb(247,202,23)" fg:x="21995" fg:w="1859"/><text x="34.4297%" y="159.50">li..</text></g><g><title>esp`alloc::raw_vec::finish_grow (1,894 samples, 2.94%)</title><rect x="34.1362%" y="165" width="2.9432%" height="15" fill="rgb(219,102,11)" fg:x="21967" fg:w="1894"/><text x="34.3862%" y="175.50">es..</text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="37.0686%" y="149" width="0.0109%" height="15" fill="rgb(243,110,44)" fg:x="23854" fg:w="7"/><text x="37.3186%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,921 samples, 2.99%)</title><rect x="34.1020%" y="181" width="2.9852%" height="15" fill="rgb(222,74,54)" fg:x="21945" fg:w="1921"/><text x="34.3520%" y="191.50">esp..</text></g><g><title>esp`esp::ham::Ham::ham_doub (43 samples, 0.07%)</title><rect x="37.0919%" y="181" width="0.0668%" height="15" fill="rgb(216,99,12)" fg:x="23869" fg:w="43"/><text x="37.3419%" y="191.50"></text></g><g><title>esp`esp::var::off_diag::add_el (11,166 samples, 17.35%)</title><rect x="29.5240%" y="197" width="17.3517%" height="15" fill="rgb(226,22,26)" fg:x="18999" fg:w="11166"/><text x="29.7740%" y="207.50">esp`esp::var::off_diag::add..</text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (6,253 samples, 9.72%)</title><rect x="37.1587%" y="181" width="9.7170%" height="15" fill="rgb(217,163,10)" fg:x="23912" fg:w="6253"/><text x="37.4087%" y="191.50">esp`esp::ham::..</text></g><g><title>esp`esp::ham::Ham::ham_doub (3,922 samples, 6.09%)</title><rect x="40.7810%" y="165" width="6.0947%" height="15" fill="rgb(213,25,53)" fg:x="26243" fg:w="3922"/><text x="41.0310%" y="175.50">esp`esp:..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (21 samples, 0.03%)</title><rect x="48.3831%" y="181" width="0.0326%" height="15" fill="rgb(252,105,26)" fg:x="31135" fg:w="21"/><text x="48.6331%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (10 samples, 0.02%)</title><rect x="48.4204%" y="181" width="0.0155%" height="15" fill="rgb(220,39,43)" fg:x="31159" fg:w="10"/><text x="48.6704%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (10 samples, 0.02%)</title><rect x="50.7793%" y="165" width="0.0155%" height="15" fill="rgb(229,68,48)" fg:x="32677" fg:w="10"/><text x="51.0293%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (2,384 samples, 3.70%)</title><rect x="48.4359%" y="181" width="3.7047%" height="15" fill="rgb(252,8,32)" fg:x="31169" fg:w="2384"/><text x="48.6859%" y="191.50">esp`..</text></g><g><title>esp`esp::ham::Ham::ham_doub (866 samples, 1.35%)</title><rect x="50.7949%" y="165" width="1.3457%" height="15" fill="rgb(223,20,43)" fg:x="32687" fg:w="866"/><text x="51.0449%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (549 samples, 0.85%)</title><rect x="51.2875%" y="149" width="0.8531%" height="15" fill="rgb(229,81,49)" fg:x="33004" fg:w="549"/><text x="51.5375%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (269 samples, 0.42%)</title><rect x="52.1406%" y="181" width="0.4180%" height="15" fill="rgb(236,28,36)" fg:x="33553" fg:w="269"/><text x="52.3906%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (142 samples, 0.22%)</title><rect x="52.3380%" y="165" width="0.2207%" height="15" fill="rgb(249,185,26)" fg:x="33680" fg:w="142"/><text x="52.5880%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (32 samples, 0.05%)</title><rect x="53.4102%" y="85" width="0.0497%" height="15" fill="rgb(249,174,33)" fg:x="34370" fg:w="32"/><text x="53.6602%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="53.4599%" y="85" width="0.0124%" height="15" fill="rgb(233,201,37)" fg:x="34402" fg:w="8"/><text x="53.7099%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="53.4599%" y="69" width="0.0124%" height="15" fill="rgb(221,78,26)" fg:x="34402" fg:w="8"/><text x="53.7099%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (10 samples, 0.02%)</title><rect x="53.4724%" y="85" width="0.0155%" height="15" fill="rgb(250,127,30)" fg:x="34410" fg:w="10"/><text x="53.7224%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (39 samples, 0.06%)</title><rect x="53.4879%" y="85" width="0.0606%" height="15" fill="rgb(230,49,44)" fg:x="34420" fg:w="39"/><text x="53.7379%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (38 samples, 0.06%)</title><rect x="53.4895%" y="69" width="0.0591%" height="15" fill="rgb(229,67,23)" fg:x="34421" fg:w="38"/><text x="53.7395%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (20 samples, 0.03%)</title><rect x="53.5174%" y="53" width="0.0311%" height="15" fill="rgb(249,83,47)" fg:x="34439" fg:w="20"/><text x="53.7674%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (7 samples, 0.01%)</title><rect x="53.5376%" y="37" width="0.0109%" height="15" fill="rgb(215,43,3)" fg:x="34452" fg:w="7"/><text x="53.7876%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (524 samples, 0.81%)</title><rect x="53.3993%" y="117" width="0.8143%" height="15" fill="rgb(238,154,13)" fg:x="34363" fg:w="524"/><text x="53.6493%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (519 samples, 0.81%)</title><rect x="53.4071%" y="101" width="0.8065%" height="15" fill="rgb(219,56,2)" fg:x="34368" fg:w="519"/><text x="53.6571%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (425 samples, 0.66%)</title><rect x="53.5532%" y="85" width="0.6604%" height="15" fill="rgb(233,0,4)" fg:x="34462" fg:w="425"/><text x="53.8032%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_size (17 samples, 0.03%)</title><rect x="54.2136%" y="117" width="0.0264%" height="15" fill="rgb(235,30,7)" fg:x="34887" fg:w="17"/><text x="54.4636%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (553 samples, 0.86%)</title><rect x="53.3916%" y="133" width="0.8593%" height="15" fill="rgb(250,79,13)" fg:x="34358" fg:w="553"/><text x="53.6416%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.01%)</title><rect x="54.2400%" y="117" width="0.0109%" height="15" fill="rgb(211,146,34)" fg:x="34904" fg:w="7"/><text x="54.4900%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.01%)</title><rect x="54.2400%" y="101" width="0.0109%" height="15" fill="rgb(228,22,38)" fg:x="34904" fg:w="7"/><text x="54.4900%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (555 samples, 0.86%)</title><rect x="53.3900%" y="149" width="0.8625%" height="15" fill="rgb(235,168,5)" fg:x="34357" fg:w="555"/><text x="53.6400%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el (1,091 samples, 1.70%)</title><rect x="52.5586%" y="181" width="1.6954%" height="15" fill="rgb(221,155,16)" fg:x="33822" fg:w="1091"/><text x="52.8086%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (558 samples, 0.87%)</title><rect x="53.3869%" y="165" width="0.8671%" height="15" fill="rgb(215,215,53)" fg:x="34355" fg:w="558"/><text x="53.6369%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (5,134 samples, 7.98%)</title><rect x="46.8757%" y="197" width="7.9781%" height="15" fill="rgb(223,4,10)" fg:x="30165" fg:w="5134"/><text x="47.1257%" y="207.50">esp`esp::va..</text></g><g><title>esp`hashbrown::map::make_hash (386 samples, 0.60%)</title><rect x="54.2540%" y="181" width="0.5998%" height="15" fill="rgb(234,103,6)" fg:x="34913" fg:w="386"/><text x="54.5040%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (242 samples, 0.38%)</title><rect x="54.4778%" y="165" width="0.3761%" height="15" fill="rgb(227,97,0)" fg:x="35057" fg:w="242"/><text x="54.7278%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (14 samples, 0.02%)</title><rect x="61.7442%" y="85" width="0.0218%" height="15" fill="rgb(234,150,53)" fg:x="39733" fg:w="14"/><text x="61.9942%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (14 samples, 0.02%)</title><rect x="61.7442%" y="69" width="0.0218%" height="15" fill="rgb(228,201,54)" fg:x="39733" fg:w="14"/><text x="61.9942%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_large (60 samples, 0.09%)</title><rect x="61.7659%" y="85" width="0.0932%" height="15" fill="rgb(222,22,37)" fg:x="39747" fg:w="60"/><text x="62.0159%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (60 samples, 0.09%)</title><rect x="61.7659%" y="69" width="0.0932%" height="15" fill="rgb(237,53,32)" fg:x="39747" fg:w="60"/><text x="62.0159%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (60 samples, 0.09%)</title><rect x="61.7659%" y="53" width="0.0932%" height="15" fill="rgb(233,25,53)" fg:x="39747" fg:w="60"/><text x="62.0159%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (7 samples, 0.01%)</title><rect x="61.8592%" y="53" width="0.0109%" height="15" fill="rgb(210,40,34)" fg:x="39807" fg:w="7"/><text x="62.1092%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (8 samples, 0.01%)</title><rect x="61.8592%" y="85" width="0.0124%" height="15" fill="rgb(241,220,44)" fg:x="39807" fg:w="8"/><text x="62.1092%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (8 samples, 0.01%)</title><rect x="61.8592%" y="69" width="0.0124%" height="15" fill="rgb(235,28,35)" fg:x="39807" fg:w="8"/><text x="62.1092%" y="79.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,791 samples, 5.89%)</title><rect x="55.9945%" y="181" width="5.8911%" height="15" fill="rgb(210,56,17)" fg:x="36033" fg:w="3791"/><text x="56.2445%" y="191.50">esp`&lt;al..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (91 samples, 0.14%)</title><rect x="61.7442%" y="165" width="0.1414%" height="15" fill="rgb(224,130,29)" fg:x="39733" fg:w="91"/><text x="61.9942%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (91 samples, 0.14%)</title><rect x="61.7442%" y="149" width="0.1414%" height="15" fill="rgb(235,212,8)" fg:x="39733" fg:w="91"/><text x="61.9942%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (91 samples, 0.14%)</title><rect x="61.7442%" y="133" width="0.1414%" height="15" fill="rgb(223,33,50)" fg:x="39733" fg:w="91"/><text x="61.9942%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (91 samples, 0.14%)</title><rect x="61.7442%" y="117" width="0.1414%" height="15" fill="rgb(219,149,13)" fg:x="39733" fg:w="91"/><text x="61.9942%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (91 samples, 0.14%)</title><rect x="61.7442%" y="101" width="0.1414%" height="15" fill="rgb(250,156,29)" fg:x="39733" fg:w="91"/><text x="61.9942%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="61.8747%" y="85" width="0.0109%" height="15" fill="rgb(216,193,19)" fg:x="39817" fg:w="7"/><text x="62.1247%" y="95.50"></text></g><g><title>esp`DYLD-STUB$$memcpy (12 samples, 0.02%)</title><rect x="61.8856%" y="181" width="0.0186%" height="15" fill="rgb(216,135,14)" fg:x="39824" fg:w="12"/><text x="62.1356%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (41 samples, 0.06%)</title><rect x="69.0665%" y="133" width="0.0637%" height="15" fill="rgb(241,47,5)" fg:x="44445" fg:w="41"/><text x="69.3165%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.06%)</title><rect x="69.0727%" y="117" width="0.0575%" height="15" fill="rgb(233,42,35)" fg:x="44449" fg:w="37"/><text x="69.3227%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.05%)</title><rect x="69.0758%" y="101" width="0.0544%" height="15" fill="rgb(231,13,6)" fg:x="44451" fg:w="35"/><text x="69.3258%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.01%)</title><rect x="69.1178%" y="85" width="0.0124%" height="15" fill="rgb(207,181,40)" fg:x="44478" fg:w="8"/><text x="69.3678%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.02%)</title><rect x="69.1551%" y="85" width="0.0155%" height="15" fill="rgb(254,173,49)" fg:x="44502" fg:w="10"/><text x="69.4051%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.03%)</title><rect x="69.1706%" y="85" width="0.0326%" height="15" fill="rgb(221,1,38)" fg:x="44512" fg:w="21"/><text x="69.4206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.03%)</title><rect x="69.1706%" y="69" width="0.0326%" height="15" fill="rgb(206,124,46)" fg:x="44512" fg:w="21"/><text x="69.4206%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (56 samples, 0.09%)</title><rect x="69.1396%" y="117" width="0.0870%" height="15" fill="rgb(249,21,11)" fg:x="44492" fg:w="56"/><text x="69.3896%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (49 samples, 0.08%)</title><rect x="69.1504%" y="101" width="0.0761%" height="15" fill="rgb(222,201,40)" fg:x="44499" fg:w="49"/><text x="69.4004%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (11 samples, 0.02%)</title><rect x="69.2095%" y="85" width="0.0171%" height="15" fill="rgb(235,61,29)" fg:x="44537" fg:w="11"/><text x="69.4595%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (111 samples, 0.17%)</title><rect x="69.0603%" y="149" width="0.1725%" height="15" fill="rgb(219,207,3)" fg:x="44441" fg:w="111"/><text x="69.3103%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (66 samples, 0.10%)</title><rect x="69.1302%" y="133" width="0.1026%" height="15" fill="rgb(222,56,46)" fg:x="44486" fg:w="66"/><text x="69.3802%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (127 samples, 0.20%)</title><rect x="69.0386%" y="165" width="0.1974%" height="15" fill="rgb(239,76,54)" fg:x="44427" fg:w="127"/><text x="69.2886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.02%)</title><rect x="69.2499%" y="133" width="0.0249%" height="15" fill="rgb(231,124,27)" fg:x="44563" fg:w="16"/><text x="69.4999%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.01%)</title><rect x="69.2639%" y="117" width="0.0109%" height="15" fill="rgb(249,195,6)" fg:x="44572" fg:w="7"/><text x="69.5139%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (50 samples, 0.08%)</title><rect x="69.2468%" y="149" width="0.0777%" height="15" fill="rgb(237,174,47)" fg:x="44561" fg:w="50"/><text x="69.4968%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31 samples, 0.05%)</title><rect x="69.2763%" y="133" width="0.0482%" height="15" fill="rgb(206,201,31)" fg:x="44580" fg:w="31"/><text x="69.5263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (11 samples, 0.02%)</title><rect x="69.3074%" y="117" width="0.0171%" height="15" fill="rgb(231,57,52)" fg:x="44600" fg:w="11"/><text x="69.5574%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (57 samples, 0.09%)</title><rect x="69.2375%" y="165" width="0.0886%" height="15" fill="rgb(248,177,22)" fg:x="44555" fg:w="57"/><text x="69.4875%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (7 samples, 0.01%)</title><rect x="69.3462%" y="149" width="0.0109%" height="15" fill="rgb(215,211,37)" fg:x="44625" fg:w="7"/><text x="69.5962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (18 samples, 0.03%)</title><rect x="69.3571%" y="149" width="0.0280%" height="15" fill="rgb(241,128,51)" fg:x="44632" fg:w="18"/><text x="69.6071%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (16 samples, 0.02%)</title><rect x="69.3602%" y="133" width="0.0249%" height="15" fill="rgb(227,165,31)" fg:x="44634" fg:w="16"/><text x="69.6102%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (39 samples, 0.06%)</title><rect x="69.3276%" y="165" width="0.0606%" height="15" fill="rgb(228,167,24)" fg:x="44613" fg:w="39"/><text x="69.5776%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (17 samples, 0.03%)</title><rect x="69.3882%" y="165" width="0.0264%" height="15" fill="rgb(228,143,12)" fg:x="44652" fg:w="17"/><text x="69.6382%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (12 samples, 0.02%)</title><rect x="69.4690%" y="133" width="0.0186%" height="15" fill="rgb(249,149,8)" fg:x="44704" fg:w="12"/><text x="69.7190%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (50 samples, 0.08%)</title><rect x="69.4146%" y="165" width="0.0777%" height="15" fill="rgb(243,35,44)" fg:x="44669" fg:w="50"/><text x="69.6646%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (37 samples, 0.06%)</title><rect x="69.4348%" y="149" width="0.0575%" height="15" fill="rgb(246,89,9)" fg:x="44682" fg:w="37"/><text x="69.6848%" y="159.50"></text></g><g><title>esp`alloc::slice::merge_sort (5,102 samples, 7.93%)</title><rect x="61.9167%" y="181" width="7.9284%" height="15" fill="rgb(233,213,13)" fg:x="39844" fg:w="5102"/><text x="62.1667%" y="191.50">esp`alloc::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (223 samples, 0.35%)</title><rect x="69.4985%" y="165" width="0.3465%" height="15" fill="rgb(233,141,41)" fg:x="44723" fg:w="223"/><text x="69.7485%" y="175.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new (887 samples, 1.38%)</title><rect x="69.8451%" y="181" width="1.3784%" height="15" fill="rgb(239,167,4)" fg:x="44946" fg:w="887"/><text x="70.0951%" y="191.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (887 samples, 1.38%)</title><rect x="69.8451%" y="165" width="1.3784%" height="15" fill="rgb(209,217,16)" fg:x="44946" fg:w="887"/><text x="70.0951%" y="175.50"></text></g><g><title>esp`esp::var::off_diag::create_sparse (10,595 samples, 16.46%)</title><rect x="54.8538%" y="197" width="16.4644%" height="15" fill="rgb(219,88,35)" fg:x="35299" fg:w="10595"/><text x="55.1038%" y="207.50">esp`esp::var::off_diag::c..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (57 samples, 0.09%)</title><rect x="71.2297%" y="181" width="0.0886%" height="15" fill="rgb(220,193,23)" fg:x="45837" fg:w="57"/><text x="71.4797%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1,901 samples, 2.95%)</title><rect x="71.3182%" y="197" width="2.9541%" height="15" fill="rgb(230,90,52)" fg:x="45894" fg:w="1901"/><text x="71.5682%" y="207.50">esp..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (437 samples, 0.68%)</title><rect x="73.5933%" y="181" width="0.6791%" height="15" fill="rgb(252,106,19)" fg:x="47358" fg:w="437"/><text x="73.8433%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (292 samples, 0.45%)</title><rect x="75.4332%" y="181" width="0.4538%" height="15" fill="rgb(206,74,20)" fg:x="48542" fg:w="292"/><text x="75.6832%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (36 samples, 0.06%)</title><rect x="76.4168%" y="165" width="0.0559%" height="15" fill="rgb(230,138,44)" fg:x="49175" fg:w="36"/><text x="76.6668%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (460 samples, 0.71%)</title><rect x="78.5318%" y="149" width="0.7148%" height="15" fill="rgb(235,182,43)" fg:x="50536" fg:w="460"/><text x="78.7818%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (40 samples, 0.06%)</title><rect x="79.2762%" y="101" width="0.0622%" height="15" fill="rgb(242,16,51)" fg:x="51015" fg:w="40"/><text x="79.5262%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (28 samples, 0.04%)</title><rect x="79.2948%" y="85" width="0.0435%" height="15" fill="rgb(248,9,4)" fg:x="51027" fg:w="28"/><text x="79.5448%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (13 samples, 0.02%)</title><rect x="79.3181%" y="69" width="0.0202%" height="15" fill="rgb(210,31,22)" fg:x="51042" fg:w="13"/><text x="79.5681%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (74 samples, 0.11%)</title><rect x="79.2544%" y="133" width="0.1150%" height="15" fill="rgb(239,54,39)" fg:x="51001" fg:w="74"/><text x="79.5044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (68 samples, 0.11%)</title><rect x="79.2637%" y="117" width="0.1057%" height="15" fill="rgb(230,99,41)" fg:x="51007" fg:w="68"/><text x="79.5137%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20 samples, 0.03%)</title><rect x="79.3383%" y="101" width="0.0311%" height="15" fill="rgb(253,106,12)" fg:x="51055" fg:w="20"/><text x="79.5883%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (15 samples, 0.02%)</title><rect x="79.3461%" y="85" width="0.0233%" height="15" fill="rgb(213,46,41)" fg:x="51060" fg:w="15"/><text x="79.5961%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (128 samples, 0.20%)</title><rect x="79.3694%" y="133" width="0.1989%" height="15" fill="rgb(215,133,35)" fg:x="51075" fg:w="128"/><text x="79.6194%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (212 samples, 0.33%)</title><rect x="79.2466%" y="149" width="0.3294%" height="15" fill="rgb(213,28,5)" fg:x="50996" fg:w="212"/><text x="79.4966%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.05%)</title><rect x="79.5761%" y="149" width="0.0466%" height="15" fill="rgb(215,77,49)" fg:x="51208" fg:w="30"/><text x="79.8261%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.02%)</title><rect x="79.6227%" y="149" width="0.0218%" height="15" fill="rgb(248,100,22)" fg:x="51238" fg:w="14"/><text x="79.8727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (17 samples, 0.03%)</title><rect x="79.6522%" y="149" width="0.0264%" height="15" fill="rgb(208,67,9)" fg:x="51257" fg:w="17"/><text x="79.9022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="79.6786%" y="149" width="0.0124%" height="15" fill="rgb(219,133,21)" fg:x="51274" fg:w="8"/><text x="79.9286%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.01%)</title><rect x="79.6786%" y="133" width="0.0124%" height="15" fill="rgb(246,46,29)" fg:x="51274" fg:w="8"/><text x="79.9286%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,073 samples, 3.22%)</title><rect x="76.4728%" y="165" width="3.2214%" height="15" fill="rgb(246,185,52)" fg:x="49211" fg:w="2073"/><text x="76.7228%" y="175.50">esp..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,456 samples, 3.82%)</title><rect x="75.8869%" y="181" width="3.8166%" height="15" fill="rgb(252,136,11)" fg:x="48834" fg:w="2456"/><text x="76.1369%" y="191.50">esp`..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,497 samples, 5.43%)</title><rect x="74.2724%" y="197" width="5.4343%" height="15" fill="rgb(219,138,53)" fg:x="47795" fg:w="3497"/><text x="74.5224%" y="207.50">esp`has..</text></g><g><title>esp`hashbrown::map::make_hash (767 samples, 1.19%)</title><rect x="79.7066%" y="197" width="1.1919%" height="15" fill="rgb(211,51,23)" fg:x="51292" fg:w="767"/><text x="79.9566%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (451 samples, 0.70%)</title><rect x="80.1977%" y="181" width="0.7008%" height="15" fill="rgb(247,221,28)" fg:x="51608" fg:w="451"/><text x="80.4477%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.02%)</title><rect x="80.8985%" y="197" width="0.0249%" height="15" fill="rgb(251,222,45)" fg:x="52059" fg:w="16"/><text x="81.1485%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5,075 samples, 7.89%)</title><rect x="80.9234%" y="197" width="7.8864%" height="15" fill="rgb(217,162,53)" fg:x="52075" fg:w="5075"/><text x="81.1734%" y="207.50">esp`std::co..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (885 samples, 1.38%)</title><rect x="87.4345%" y="181" width="1.3753%" height="15" fill="rgb(229,93,14)" fg:x="56265" fg:w="885"/><text x="87.6845%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (59 samples, 0.09%)</title><rect x="88.8114%" y="197" width="0.0917%" height="15" fill="rgb(209,67,49)" fg:x="57151" fg:w="59"/><text x="89.0614%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 0.02%)</title><rect x="89.4532%" y="165" width="0.0155%" height="15" fill="rgb(213,87,29)" fg:x="57564" fg:w="10"/><text x="89.7032%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.01%)</title><rect x="91.8634%" y="149" width="0.0140%" height="15" fill="rgb(205,151,52)" fg:x="59115" fg:w="9"/><text x="92.1134%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,547 samples, 3.96%)</title><rect x="89.2651%" y="181" width="3.9580%" height="15" fill="rgb(253,215,39)" fg:x="57443" fg:w="2547"/><text x="89.5151%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,416 samples, 3.75%)</title><rect x="89.4687%" y="165" width="3.7544%" height="15" fill="rgb(221,220,41)" fg:x="57574" fg:w="2416"/><text x="89.7187%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (866 samples, 1.35%)</title><rect x="91.8774%" y="149" width="1.3457%" height="15" fill="rgb(218,133,21)" fg:x="59124" fg:w="866"/><text x="92.1274%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (203 samples, 0.32%)</title><rect x="92.9076%" y="133" width="0.3155%" height="15" fill="rgb(221,193,43)" fg:x="59787" fg:w="203"/><text x="93.1576%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,792 samples, 4.34%)</title><rect x="88.9030%" y="197" width="4.3387%" height="15" fill="rgb(240,128,52)" fg:x="57210" fg:w="2792"/><text x="89.1530%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.02%)</title><rect x="93.2231%" y="181" width="0.0186%" height="15" fill="rgb(253,114,12)" fg:x="59990" fg:w="12"/><text x="93.4731%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (18 samples, 0.03%)</title><rect x="93.2418%" y="197" width="0.0280%" height="15" fill="rgb(215,223,47)" fg:x="60002" fg:w="18"/><text x="93.4918%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (34 samples, 0.05%)</title><rect x="93.2697%" y="197" width="0.0528%" height="15" fill="rgb(248,225,23)" fg:x="60020" fg:w="34"/><text x="93.5197%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.04%)</title><rect x="93.3226%" y="197" width="0.0388%" height="15" fill="rgb(250,108,0)" fg:x="60054" fg:w="25"/><text x="93.5726%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (18 samples, 0.03%)</title><rect x="93.3614%" y="197" width="0.0280%" height="15" fill="rgb(228,208,7)" fg:x="60079" fg:w="18"/><text x="93.6114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (12 samples, 0.02%)</title><rect x="93.3707%" y="181" width="0.0186%" height="15" fill="rgb(244,45,10)" fg:x="60085" fg:w="12"/><text x="93.6207%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (12 samples, 0.02%)</title><rect x="93.3707%" y="165" width="0.0186%" height="15" fill="rgb(207,125,25)" fg:x="60085" fg:w="12"/><text x="93.6207%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.02%)</title><rect x="93.3909%" y="197" width="0.0249%" height="15" fill="rgb(210,195,18)" fg:x="60098" fg:w="16"/><text x="93.6409%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (61 samples, 0.09%)</title><rect x="93.4189%" y="197" width="0.0948%" height="15" fill="rgb(249,80,12)" fg:x="60116" fg:w="61"/><text x="93.6689%" y="207.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (52,854 samples, 82.13%)</title><rect x="11.4217%" y="213" width="82.1339%" height="15" fill="rgb(221,65,9)" fg:x="7350" fg:w="52854"/><text x="11.6717%" y="223.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.03%)</title><rect x="93.5215%" y="197" width="0.0342%" height="15" fill="rgb(235,49,36)" fg:x="60182" fg:w="22"/><text x="93.7715%" y="207.50"></text></g><g><title>esp`esp::var::off_diag::add_el (18 samples, 0.03%)</title><rect x="93.5557%" y="213" width="0.0280%" height="15" fill="rgb(225,32,20)" fg:x="60204" fg:w="18"/><text x="93.8057%" y="223.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (45 samples, 0.07%)</title><rect x="93.5836%" y="213" width="0.0699%" height="15" fill="rgb(215,141,46)" fg:x="60222" fg:w="45"/><text x="93.8336%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (14 samples, 0.02%)</title><rect x="93.6536%" y="213" width="0.0218%" height="15" fill="rgb(250,160,47)" fg:x="60267" fg:w="14"/><text x="93.9036%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 0.04%)</title><rect x="93.6753%" y="213" width="0.0357%" height="15" fill="rgb(216,222,40)" fg:x="60281" fg:w="23"/><text x="93.9253%" y="223.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (44 samples, 0.07%)</title><rect x="93.7173%" y="213" width="0.0684%" height="15" fill="rgb(234,217,39)" fg:x="60308" fg:w="44"/><text x="93.9673%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.03%)</title><rect x="93.7856%" y="213" width="0.0342%" height="15" fill="rgb(207,178,40)" fg:x="60352" fg:w="22"/><text x="94.0356%" y="223.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (59,250 samples, 92.07%)</title><rect x="1.7840%" y="229" width="92.0732%" height="15" fill="rgb(221,136,13)" fg:x="1148" fg:w="59250"/><text x="2.0340%" y="239.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>libsystem_malloc.dylib`malloc (24 samples, 0.04%)</title><rect x="93.8198%" y="213" width="0.0373%" height="15" fill="rgb(249,199,10)" fg:x="60374" fg:w="24"/><text x="94.0698%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="94.2674%" y="213" width="0.0109%" height="15" fill="rgb(249,222,13)" fg:x="60662" fg:w="7"/><text x="94.5174%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (10 samples, 0.02%)</title><rect x="94.2783%" y="133" width="0.0155%" height="15" fill="rgb(244,185,38)" fg:x="60669" fg:w="10"/><text x="94.5283%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (10 samples, 0.02%)</title><rect x="94.2783%" y="117" width="0.0155%" height="15" fill="rgb(236,202,9)" fg:x="60669" fg:w="10"/><text x="94.5283%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 0.02%)</title><rect x="94.2783%" y="101" width="0.0155%" height="15" fill="rgb(250,229,37)" fg:x="60669" fg:w="10"/><text x="94.5283%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="94.2783%" y="213" width="0.0171%" height="15" fill="rgb(206,174,23)" fg:x="60669" fg:w="11"/><text x="94.5283%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="94.2783%" y="197" width="0.0171%" height="15" fill="rgb(211,33,43)" fg:x="60669" fg:w="11"/><text x="94.5283%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.02%)</title><rect x="94.2783%" y="181" width="0.0171%" height="15" fill="rgb(245,58,50)" fg:x="60669" fg:w="11"/><text x="94.5283%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.02%)</title><rect x="94.2783%" y="165" width="0.0171%" height="15" fill="rgb(244,68,36)" fg:x="60669" fg:w="11"/><text x="94.5283%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.02%)</title><rect x="94.2783%" y="149" width="0.0171%" height="15" fill="rgb(232,229,15)" fg:x="60669" fg:w="11"/><text x="94.5283%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (10 samples, 0.02%)</title><rect x="94.2953%" y="213" width="0.0155%" height="15" fill="rgb(254,30,23)" fg:x="60680" fg:w="10"/><text x="94.5453%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (47 samples, 0.07%)</title><rect x="94.3109%" y="213" width="0.0730%" height="15" fill="rgb(235,160,14)" fg:x="60690" fg:w="47"/><text x="94.5609%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (869 samples, 1.35%)</title><rect x="94.3839%" y="213" width="1.3504%" height="15" fill="rgb(212,155,44)" fg:x="60737" fg:w="869"/><text x="94.6339%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (422 samples, 0.66%)</title><rect x="95.0786%" y="197" width="0.6558%" height="15" fill="rgb(226,2,50)" fg:x="61184" fg:w="422"/><text x="95.3286%" y="207.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (88 samples, 0.14%)</title><rect x="95.7343%" y="213" width="0.1368%" height="15" fill="rgb(234,177,6)" fg:x="61606" fg:w="88"/><text x="95.9843%" y="223.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (148 samples, 0.23%)</title><rect x="95.8711%" y="213" width="0.2300%" height="15" fill="rgb(217,24,9)" fg:x="61694" fg:w="148"/><text x="96.1211%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (99 samples, 0.15%)</title><rect x="95.9472%" y="197" width="0.1538%" height="15" fill="rgb(220,13,46)" fg:x="61743" fg:w="99"/><text x="96.1972%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (49 samples, 0.08%)</title><rect x="96.1011%" y="213" width="0.0761%" height="15" fill="rgb(239,221,27)" fg:x="61842" fg:w="49"/><text x="96.3511%" y="223.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (38 samples, 0.06%)</title><rect x="96.1182%" y="197" width="0.0591%" height="15" fill="rgb(222,198,25)" fg:x="61853" fg:w="38"/><text x="96.3682%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (814 samples, 1.26%)</title><rect x="96.1819%" y="213" width="1.2649%" height="15" fill="rgb(211,99,13)" fg:x="61894" fg:w="814"/><text x="96.4319%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (153 samples, 0.24%)</title><rect x="97.2091%" y="197" width="0.2378%" height="15" fill="rgb(232,111,31)" fg:x="62555" fg:w="153"/><text x="97.4591%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (11 samples, 0.02%)</title><rect x="97.4592%" y="197" width="0.0171%" height="15" fill="rgb(245,82,37)" fg:x="62716" fg:w="11"/><text x="97.7092%" y="207.50"></text></g><g><title>esp`hashbrown::map::make_hash (23 samples, 0.04%)</title><rect x="97.5525%" y="165" width="0.0357%" height="15" fill="rgb(227,149,46)" fg:x="62776" fg:w="23"/><text x="97.8025%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (13 samples, 0.02%)</title><rect x="97.5680%" y="149" width="0.0202%" height="15" fill="rgb(218,36,50)" fg:x="62786" fg:w="13"/><text x="97.8180%" y="159.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (101 samples, 0.16%)</title><rect x="97.4468%" y="213" width="0.1570%" height="15" fill="rgb(226,80,48)" fg:x="62708" fg:w="101"/><text x="97.6968%" y="223.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (82 samples, 0.13%)</title><rect x="97.4763%" y="197" width="0.1274%" height="15" fill="rgb(238,224,15)" fg:x="62727" fg:w="82"/><text x="97.7263%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (69 samples, 0.11%)</title><rect x="97.4965%" y="181" width="0.1072%" height="15" fill="rgb(241,136,10)" fg:x="62740" fg:w="69"/><text x="97.7465%" y="191.50"></text></g><g><title>esp`hashbrown::map::make_hash (120 samples, 0.19%)</title><rect x="97.6038%" y="213" width="0.1865%" height="15" fill="rgb(208,32,45)" fg:x="62809" fg:w="120"/><text x="97.8538%" y="223.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.08%)</title><rect x="97.7110%" y="197" width="0.0793%" height="15" fill="rgb(207,135,9)" fg:x="62878" fg:w="51"/><text x="97.9610%" y="207.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (2,539 samples, 3.95%)</title><rect x="93.8571%" y="229" width="3.9455%" height="15" fill="rgb(206,86,44)" fg:x="60398" fg:w="2539"/><text x="94.1071%" y="239.50">esp`..</text></g><g><title>esp`esp::var::variational (61,795 samples, 96.03%)</title><rect x="1.7840%" y="245" width="96.0280%" height="15" fill="rgb(245,177,15)" fg:x="1148" fg:w="61795"/><text x="2.0340%" y="255.50">esp`esp::var::variational</text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (8 samples, 0.01%)</title><rect x="98.4134%" y="133" width="0.0124%" height="15" fill="rgb(206,64,50)" fg:x="63330" fg:w="8"/><text x="98.6634%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (7 samples, 0.01%)</title><rect x="98.4149%" y="117" width="0.0109%" height="15" fill="rgb(234,36,40)" fg:x="63331" fg:w="7"/><text x="98.6649%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (7 samples, 0.01%)</title><rect x="98.4149%" y="101" width="0.0109%" height="15" fill="rgb(213,64,8)" fg:x="63331" fg:w="7"/><text x="98.6649%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (13 samples, 0.02%)</title><rect x="98.4289%" y="117" width="0.0202%" height="15" fill="rgb(210,75,36)" fg:x="63340" fg:w="13"/><text x="98.6789%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (11 samples, 0.02%)</title><rect x="98.4320%" y="101" width="0.0171%" height="15" fill="rgb(229,88,21)" fg:x="63342" fg:w="11"/><text x="98.6820%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (11 samples, 0.02%)</title><rect x="98.4320%" y="85" width="0.0171%" height="15" fill="rgb(252,204,47)" fg:x="63342" fg:w="11"/><text x="98.6820%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.02%)</title><rect x="98.4274%" y="133" width="0.0233%" height="15" fill="rgb(208,77,27)" fg:x="63339" fg:w="15"/><text x="98.6774%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (195 samples, 0.30%)</title><rect x="98.4025%" y="165" width="0.3030%" height="15" fill="rgb(221,76,26)" fg:x="63323" fg:w="195"/><text x="98.6525%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (194 samples, 0.30%)</title><rect x="98.4041%" y="149" width="0.3015%" height="15" fill="rgb(225,139,18)" fg:x="63324" fg:w="194"/><text x="98.6541%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (164 samples, 0.25%)</title><rect x="98.4507%" y="133" width="0.2549%" height="15" fill="rgb(230,137,11)" fg:x="63354" fg:w="164"/><text x="98.7007%" y="143.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (202 samples, 0.31%)</title><rect x="98.3963%" y="213" width="0.3139%" height="15" fill="rgb(212,28,1)" fg:x="63319" fg:w="202"/><text x="98.6463%" y="223.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (202 samples, 0.31%)</title><rect x="98.3963%" y="197" width="0.3139%" height="15" fill="rgb(248,164,17)" fg:x="63319" fg:w="202"/><text x="98.6463%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (198 samples, 0.31%)</title><rect x="98.4025%" y="181" width="0.3077%" height="15" fill="rgb(222,171,42)" fg:x="63323" fg:w="198"/><text x="98.6525%" y="191.50"></text></g><g><title>esp`alloc::slice::merge_sort (444 samples, 0.69%)</title><rect x="98.7102%" y="213" width="0.6900%" height="15" fill="rgb(243,84,45)" fg:x="63521" fg:w="444"/><text x="98.9602%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (45 samples, 0.07%)</title><rect x="99.3302%" y="197" width="0.0699%" height="15" fill="rgb(252,49,23)" fg:x="63920" fg:w="45"/><text x="99.5802%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (87 samples, 0.14%)</title><rect x="99.4002%" y="213" width="0.1352%" height="15" fill="rgb(215,19,7)" fg:x="63965" fg:w="87"/><text x="99.6502%" y="223.50"></text></g><g><title>esp`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.05%)</title><rect x="99.5773%" y="197" width="0.0528%" height="15" fill="rgb(238,81,41)" fg:x="64079" fg:w="34"/><text x="99.8273%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.02%)</title><rect x="99.6364%" y="165" width="0.0233%" height="15" fill="rgb(210,199,37)" fg:x="64117" fg:w="15"/><text x="99.8864%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="99.6364%" y="149" width="0.0233%" height="15" fill="rgb(244,192,49)" fg:x="64117" fg:w="15"/><text x="99.8864%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.02%)</title><rect x="99.6395%" y="133" width="0.0202%" height="15" fill="rgb(226,211,11)" fg:x="64119" fg:w="13"/><text x="99.8895%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.02%)</title><rect x="99.6410%" y="117" width="0.0186%" height="15" fill="rgb(236,162,54)" fg:x="64120" fg:w="12"/><text x="99.8910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.02%)</title><rect x="99.6426%" y="101" width="0.0171%" height="15" fill="rgb(220,229,9)" fg:x="64121" fg:w="11"/><text x="99.8926%" y="111.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.05%)</title><rect x="99.6302%" y="197" width="0.0466%" height="15" fill="rgb(250,87,22)" fg:x="64113" fg:w="30"/><text x="99.8802%" y="207.50"></text></g><g><title>esp`std::io::append_to_string (29 samples, 0.05%)</title><rect x="99.6317%" y="181" width="0.0451%" height="15" fill="rgb(239,43,17)" fg:x="64114" fg:w="29"/><text x="99.8817%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (8 samples, 0.01%)</title><rect x="99.6643%" y="165" width="0.0124%" height="15" fill="rgb(231,177,25)" fg:x="64135" fg:w="8"/><text x="99.9143%" y="175.50"></text></g><g><title>esp`lexical_core::atof::algorithm::correct::pown_to_native (13 samples, 0.02%)</title><rect x="99.6768%" y="197" width="0.0202%" height="15" fill="rgb(219,179,1)" fg:x="64143" fg:w="13"/><text x="99.9268%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.01%)</title><rect x="99.6970%" y="197" width="0.0124%" height="15" fill="rgb(238,219,53)" fg:x="64156" fg:w="8"/><text x="99.9470%" y="207.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (120 samples, 0.19%)</title><rect x="99.5354%" y="213" width="0.1865%" height="15" fill="rgb(232,167,36)" fg:x="64052" fg:w="120"/><text x="99.7854%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.01%)</title><rect x="99.7094%" y="197" width="0.0124%" height="15" fill="rgb(244,19,51)" fg:x="64164" fg:w="8"/><text x="99.9594%" y="207.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (1,235 samples, 1.92%)</title><rect x="97.8151%" y="245" width="1.9192%" height="15" fill="rgb(224,6,22)" fg:x="62945" fg:w="1235"/><text x="98.0651%" y="255.50">e..</text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (1,233 samples, 1.92%)</title><rect x="97.8182%" y="229" width="1.9161%" height="15" fill="rgb(224,145,5)" fg:x="62947" fg:w="1233"/><text x="98.0682%" y="239.50">e..</text></g><g><title>esp`main (64,187 samples, 99.75%)</title><rect x="0.0000%" y="325" width="99.7451%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="64187"/><text x="0.2500%" y="335.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (64,187 samples, 99.75%)</title><rect x="0.0000%" y="309" width="99.7451%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="64187"/><text x="0.2500%" y="319.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (64,187 samples, 99.75%)</title><rect x="0.0000%" y="293" width="99.7451%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="64187"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (64,187 samples, 99.75%)</title><rect x="0.0000%" y="277" width="99.7451%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="64187"/><text x="0.2500%" y="287.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>esp`esp::main (64,187 samples, 99.75%)</title><rect x="0.0000%" y="261" width="99.7451%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="64187"/><text x="0.2500%" y="271.50">esp`esp::main</text></g><g><title>all (64,351 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="64351"/><text x="0.2500%" y="383.50"></text></g><g><title>0x1 (64,351 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="64351"/><text x="0.2500%" y="367.50">0x1</text></g><g><title>libdyld.dylib`start (64,351 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="64351"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (164 samples, 0.25%)</title><rect x="99.7451%" y="325" width="0.2549%" height="15" fill="rgb(218,185,22)" fg:x="64187" fg:w="164"/><text x="99.9951%" y="335.50"></text></g></svg></svg>