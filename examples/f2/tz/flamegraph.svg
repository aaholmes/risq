<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="207872"><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (60 samples, 0.03%)</title><rect x="1.8468%" y="197" width="0.0289%" height="15" fill="rgb(227,0,7)" fg:x="3839" fg:w="60"/><text x="2.0968%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (33 samples, 0.02%)</title><rect x="1.8805%" y="117" width="0.0159%" height="15" fill="rgb(217,0,24)" fg:x="3909" fg:w="33"/><text x="2.1305%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (33 samples, 0.02%)</title><rect x="1.8805%" y="101" width="0.0159%" height="15" fill="rgb(221,193,54)" fg:x="3909" fg:w="33"/><text x="2.1305%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (33 samples, 0.02%)</title><rect x="1.8805%" y="85" width="0.0159%" height="15" fill="rgb(248,212,6)" fg:x="3909" fg:w="33"/><text x="2.1305%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45 samples, 0.02%)</title><rect x="1.8757%" y="197" width="0.0216%" height="15" fill="rgb(208,68,35)" fg:x="3899" fg:w="45"/><text x="2.1257%" y="207.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (45 samples, 0.02%)</title><rect x="1.8757%" y="181" width="0.0216%" height="15" fill="rgb(232,128,0)" fg:x="3899" fg:w="45"/><text x="2.1257%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (45 samples, 0.02%)</title><rect x="1.8757%" y="165" width="0.0216%" height="15" fill="rgb(207,160,47)" fg:x="3899" fg:w="45"/><text x="2.1257%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.02%)</title><rect x="1.8757%" y="149" width="0.0216%" height="15" fill="rgb(228,23,34)" fg:x="3899" fg:w="45"/><text x="2.1257%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (45 samples, 0.02%)</title><rect x="1.8757%" y="133" width="0.0216%" height="15" fill="rgb(218,30,26)" fg:x="3899" fg:w="45"/><text x="2.1257%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (69 samples, 0.03%)</title><rect x="1.8973%" y="197" width="0.0332%" height="15" fill="rgb(220,122,19)" fg:x="3944" fg:w="69"/><text x="2.1473%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (351 samples, 0.17%)</title><rect x="1.9334%" y="197" width="0.1689%" height="15" fill="rgb(250,228,42)" fg:x="4019" fg:w="351"/><text x="2.1834%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (178 samples, 0.09%)</title><rect x="2.0166%" y="181" width="0.0856%" height="15" fill="rgb(240,193,28)" fg:x="4192" fg:w="178"/><text x="2.2666%" y="191.50"></text></g><g><title>esp`esp::stoch::alias::Alias::new (3,867 samples, 1.86%)</title><rect x="3.6537%" y="181" width="1.8603%" height="15" fill="rgb(216,20,37)" fg:x="7595" fg:w="3867"/><text x="3.9037%" y="191.50">e..</text></g><g><title>libsystem_malloc.dylib`free_large (129 samples, 0.06%)</title><rect x="5.4519%" y="165" width="0.0621%" height="15" fill="rgb(206,188,39)" fg:x="11333" fg:w="129"/><text x="5.7019%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (129 samples, 0.06%)</title><rect x="5.4519%" y="149" width="0.0621%" height="15" fill="rgb(217,207,13)" fg:x="11333" fg:w="129"/><text x="5.7019%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (129 samples, 0.06%)</title><rect x="5.4519%" y="133" width="0.0621%" height="15" fill="rgb(231,73,38)" fg:x="11333" fg:w="129"/><text x="5.7019%" y="143.50"></text></g><g><title>esp`esp::stoch::generate_screened_sampler (7,292 samples, 3.51%)</title><rect x="2.1023%" y="197" width="3.5079%" height="15" fill="rgb(225,20,46)" fg:x="4370" fg:w="7292"/><text x="2.3523%" y="207.50">esp..</text></g><g><title>libsystem_malloc.dylib`free_large (200 samples, 0.10%)</title><rect x="5.5140%" y="181" width="0.0962%" height="15" fill="rgb(210,31,41)" fg:x="11462" fg:w="200"/><text x="5.7640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (200 samples, 0.10%)</title><rect x="5.5140%" y="165" width="0.0962%" height="15" fill="rgb(221,200,47)" fg:x="11462" fg:w="200"/><text x="5.7640%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (200 samples, 0.10%)</title><rect x="5.5140%" y="149" width="0.0962%" height="15" fill="rgb(226,26,5)" fg:x="11462" fg:w="200"/><text x="5.7640%" y="159.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (1,471 samples, 0.71%)</title><rect x="5.6102%" y="197" width="0.7076%" height="15" fill="rgb(249,33,26)" fg:x="11662" fg:w="1471"/><text x="5.8602%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3,833 samples, 1.84%)</title><rect x="6.3178%" y="197" width="1.8439%" height="15" fill="rgb(235,183,28)" fg:x="13133" fg:w="3833"/><text x="6.5678%" y="207.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (676 samples, 0.33%)</title><rect x="7.8366%" y="181" width="0.3252%" height="15" fill="rgb(221,5,38)" fg:x="16290" fg:w="676"/><text x="8.0866%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_semistoch_singles (17,789 samples, 8.56%)</title><rect x="0.0183%" y="213" width="8.5577%" height="15" fill="rgb(247,18,42)" fg:x="38" fg:w="17789"/><text x="0.2683%" y="223.50">esp`esp::wf:..</text></g><g><title>esp`hashbrown::map::make_hash (861 samples, 0.41%)</title><rect x="8.1618%" y="197" width="0.4142%" height="15" fill="rgb(241,131,45)" fg:x="16966" fg:w="861"/><text x="8.4118%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (512 samples, 0.25%)</title><rect x="8.3296%" y="181" width="0.2463%" height="15" fill="rgb(249,31,29)" fg:x="17315" fg:w="512"/><text x="8.5796%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (34 samples, 0.02%)</title><rect x="8.5760%" y="213" width="0.0164%" height="15" fill="rgb(225,111,53)" fg:x="17827" fg:w="34"/><text x="8.8260%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (24 samples, 0.01%)</title><rect x="8.5923%" y="213" width="0.0115%" height="15" fill="rgb(238,160,17)" fg:x="17861" fg:w="24"/><text x="8.8423%" y="223.50"></text></g><g><title>esp`esp::semistoch::faster_semistoch_enpt2 (18,329 samples, 8.82%)</title><rect x="0.0063%" y="229" width="8.8174%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="18329"/><text x="0.2563%" y="239.50">esp`esp::sem..</text></g><g><title>libsystem_malloc.dylib`free_large (438 samples, 0.21%)</title><rect x="8.6130%" y="213" width="0.2107%" height="15" fill="rgb(232,36,49)" fg:x="17904" fg:w="438"/><text x="8.8630%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (438 samples, 0.21%)</title><rect x="8.6130%" y="197" width="0.2107%" height="15" fill="rgb(209,103,24)" fg:x="17904" fg:w="438"/><text x="8.8630%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (438 samples, 0.21%)</title><rect x="8.6130%" y="181" width="0.2107%" height="15" fill="rgb(229,88,8)" fg:x="17904" fg:w="438"/><text x="8.8630%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6,208 samples, 2.99%)</title><rect x="10.2332%" y="181" width="2.9865%" height="15" fill="rgb(213,181,19)" fg:x="21272" fg:w="6208"/><text x="10.4832%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (6,161 samples, 2.96%)</title><rect x="10.2558%" y="165" width="2.9638%" height="15" fill="rgb(254,191,54)" fg:x="21319" fg:w="6161"/><text x="10.5058%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (6,576 samples, 3.16%)</title><rect x="10.0605%" y="197" width="3.1635%" height="15" fill="rgb(241,83,37)" fg:x="20913" fg:w="6576"/><text x="10.3105%" y="207.50">lib..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (555 samples, 0.27%)</title><rect x="18.3214%" y="149" width="0.2670%" height="15" fill="rgb(233,36,39)" fg:x="38085" fg:w="555"/><text x="18.5714%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (556 samples, 0.27%)</title><rect x="18.3214%" y="165" width="0.2675%" height="15" fill="rgb(226,3,54)" fg:x="38085" fg:w="556"/><text x="18.5714%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (69 samples, 0.03%)</title><rect x="18.5893%" y="165" width="0.0332%" height="15" fill="rgb(245,192,40)" fg:x="38642" fg:w="69"/><text x="18.8393%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (964 samples, 0.46%)</title><rect x="18.6235%" y="165" width="0.4637%" height="15" fill="rgb(238,167,29)" fg:x="38713" fg:w="964"/><text x="18.8735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (451 samples, 0.22%)</title><rect x="18.8703%" y="149" width="0.2170%" height="15" fill="rgb(232,182,51)" fg:x="39226" fg:w="451"/><text x="19.1203%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3,170 samples, 1.52%)</title><rect x="19.0872%" y="165" width="1.5250%" height="15" fill="rgb(231,60,39)" fg:x="39677" fg:w="3170"/><text x="19.3372%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5,412 samples, 2.60%)</title><rect x="20.6122%" y="165" width="2.6035%" height="15" fill="rgb(208,69,12)" fg:x="42847" fg:w="5412"/><text x="20.8622%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (595 samples, 0.29%)</title><rect x="23.2157%" y="165" width="0.2862%" height="15" fill="rgb(235,93,37)" fg:x="48259" fg:w="595"/><text x="23.4657%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (115 samples, 0.06%)</title><rect x="23.4466%" y="149" width="0.0553%" height="15" fill="rgb(213,116,39)" fg:x="48739" fg:w="115"/><text x="23.6966%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (502 samples, 0.24%)</title><rect x="23.5020%" y="165" width="0.2415%" height="15" fill="rgb(222,207,29)" fg:x="48854" fg:w="502"/><text x="23.7520%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6,519 samples, 3.14%)</title><rect x="23.9109%" y="149" width="3.1361%" height="15" fill="rgb(206,96,30)" fg:x="49704" fg:w="6519"/><text x="24.1609%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (166 samples, 0.08%)</title><rect x="27.0474%" y="149" width="0.0799%" height="15" fill="rgb(218,138,4)" fg:x="56224" fg:w="166"/><text x="27.2974%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (27,516 samples, 13.24%)</title><rect x="13.9100%" y="181" width="13.2370%" height="15" fill="rgb(250,191,14)" fg:x="28915" fg:w="27516"/><text x="14.1600%" y="191.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (7,073 samples, 3.40%)</title><rect x="23.7444%" y="165" width="3.4026%" height="15" fill="rgb(239,60,40)" fg:x="49358" fg:w="7073"/><text x="23.9944%" y="175.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (41 samples, 0.02%)</title><rect x="27.1273%" y="149" width="0.0197%" height="15" fill="rgb(206,27,48)" fg:x="56390" fg:w="41"/><text x="27.3773%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (28,960 samples, 13.93%)</title><rect x="13.2240%" y="197" width="13.9317%" height="15" fill="rgb(225,35,8)" fg:x="27489" fg:w="28960"/><text x="13.4740%" y="207.50">libsystem_malloc.dyli..</text></g><g><title>libsystem_malloc.dylib`szone_size (53 samples, 0.03%)</title><rect x="27.1557%" y="197" width="0.0255%" height="15" fill="rgb(250,213,24)" fg:x="56449" fg:w="53"/><text x="27.4057%" y="207.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,922 samples, 18.24%)</title><rect x="8.9493%" y="213" width="18.2430%" height="15" fill="rgb(247,123,22)" fg:x="18603" fg:w="37922"/><text x="9.1993%" y="223.50">esp`&lt;hashbrown::raw::RawTabl..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.01%)</title><rect x="27.1811%" y="197" width="0.0111%" height="15" fill="rgb(231,138,38)" fg:x="56502" fg:w="23"/><text x="27.4311%" y="207.50"></text></g><g><title>esp`__rdl_dealloc (38 samples, 0.02%)</title><rect x="27.1946%" y="213" width="0.0183%" height="15" fill="rgb(231,145,46)" fg:x="56530" fg:w="38"/><text x="27.4446%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (186 samples, 0.09%)</title><rect x="27.3832%" y="197" width="0.0895%" height="15" fill="rgb(251,118,11)" fg:x="56922" fg:w="186"/><text x="27.6332%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5,577 samples, 2.68%)</title><rect x="27.4727%" y="197" width="2.6829%" height="15" fill="rgb(217,147,25)" fg:x="57108" fg:w="5577"/><text x="27.7227%" y="207.50">es..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (604 samples, 0.29%)</title><rect x="29.8650%" y="181" width="0.2906%" height="15" fill="rgb(247,81,37)" fg:x="62081" fg:w="604"/><text x="30.1150%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,114 samples, 0.54%)</title><rect x="30.8233%" y="181" width="0.5359%" height="15" fill="rgb(209,12,38)" fg:x="64073" fg:w="1114"/><text x="31.0733%" y="191.50"></text></g><g><title>esp`__rdl_alloc (35 samples, 0.02%)</title><rect x="37.3624%" y="149" width="0.0168%" height="15" fill="rgb(227,1,9)" fg:x="77666" fg:w="35"/><text x="37.6124%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (59 samples, 0.03%)</title><rect x="37.3836%" y="149" width="0.0284%" height="15" fill="rgb(248,47,43)" fg:x="77710" fg:w="59"/><text x="37.6336%" y="159.50"></text></g><g><title>esp`hashbrown::map::make_hash (2,372 samples, 1.14%)</title><rect x="37.4120%" y="149" width="1.1411%" height="15" fill="rgb(221,10,30)" fg:x="77769" fg:w="2372"/><text x="37.6620%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (1,022 samples, 0.49%)</title><rect x="38.0614%" y="133" width="0.4916%" height="15" fill="rgb(210,229,1)" fg:x="79119" fg:w="1022"/><text x="38.3114%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (61 samples, 0.03%)</title><rect x="39.5205%" y="69" width="0.0293%" height="15" fill="rgb(222,148,37)" fg:x="82152" fg:w="61"/><text x="39.7705%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (63 samples, 0.03%)</title><rect x="39.5200%" y="85" width="0.0303%" height="15" fill="rgb(234,67,33)" fg:x="82151" fg:w="63"/><text x="39.7700%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (275 samples, 0.13%)</title><rect x="39.5508%" y="85" width="0.1323%" height="15" fill="rgb(247,98,35)" fg:x="82215" fg:w="275"/><text x="39.8008%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,378 samples, 1.14%)</title><rect x="38.7647%" y="117" width="1.1440%" height="15" fill="rgb(247,138,52)" fg:x="80581" fg:w="2378"/><text x="39.0147%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,248 samples, 1.08%)</title><rect x="38.8273%" y="101" width="1.0814%" height="15" fill="rgb(213,79,30)" fg:x="80711" fg:w="2248"/><text x="39.0773%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (460 samples, 0.22%)</title><rect x="39.6874%" y="85" width="0.2213%" height="15" fill="rgb(246,177,23)" fg:x="82499" fg:w="460"/><text x="39.9374%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,524 samples, 1.21%)</title><rect x="38.6959%" y="133" width="1.2142%" height="15" fill="rgb(230,62,27)" fg:x="80438" fg:w="2524"/><text x="38.9459%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (45 samples, 0.02%)</title><rect x="39.9101%" y="133" width="0.0216%" height="15" fill="rgb(216,154,8)" fg:x="82962" fg:w="45"/><text x="40.1601%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.02%)</title><rect x="39.9337%" y="133" width="0.0154%" height="15" fill="rgb(244,35,45)" fg:x="83011" fg:w="32"/><text x="40.1837%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4,506 samples, 2.17%)</title><rect x="39.9491%" y="133" width="2.1677%" height="15" fill="rgb(251,115,12)" fg:x="83043" fg:w="4506"/><text x="40.1991%" y="143.50">l..</text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (7,437 samples, 3.58%)</title><rect x="38.5531%" y="149" width="3.5777%" height="15" fill="rgb(240,54,50)" fg:x="80141" fg:w="7437"/><text x="38.8031%" y="159.50">esp`..</text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (29 samples, 0.01%)</title><rect x="42.1168%" y="133" width="0.0140%" height="15" fill="rgb(233,84,52)" fg:x="87549" fg:w="29"/><text x="42.3668%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (142 samples, 0.07%)</title><rect x="42.1307%" y="149" width="0.0683%" height="15" fill="rgb(207,117,47)" fg:x="87578" fg:w="142"/><text x="42.3807%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.01%)</title><rect x="42.1990%" y="149" width="0.0111%" height="15" fill="rgb(249,43,39)" fg:x="87720" fg:w="23"/><text x="42.4490%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (596 samples, 0.29%)</title><rect x="42.2111%" y="149" width="0.2867%" height="15" fill="rgb(209,38,44)" fg:x="87745" fg:w="596"/><text x="42.4611%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (596 samples, 0.29%)</title><rect x="42.2111%" y="133" width="0.2867%" height="15" fill="rgb(236,212,23)" fg:x="87745" fg:w="596"/><text x="42.4611%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (596 samples, 0.29%)</title><rect x="42.2111%" y="117" width="0.2867%" height="15" fill="rgb(242,79,21)" fg:x="87745" fg:w="596"/><text x="42.4611%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19,195 samples, 9.23%)</title><rect x="33.2835%" y="165" width="9.2340%" height="15" fill="rgb(211,96,35)" fg:x="69187" fg:w="19195"/><text x="33.5335%" y="175.50">esp`hashbrown..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (23,214 samples, 11.17%)</title><rect x="31.3592%" y="181" width="11.1674%" height="15" fill="rgb(253,215,40)" fg:x="65187" fg:w="23214"/><text x="31.6092%" y="191.50">esp`hashbrown::r..</text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (25,736 samples, 12.38%)</title><rect x="30.1556%" y="197" width="12.3807%" height="15" fill="rgb(211,81,21)" fg:x="62685" fg:w="25736"/><text x="30.4056%" y="207.50">esp`hashbrown::map..</text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (48 samples, 0.02%)</title><rect x="42.5363%" y="197" width="0.0231%" height="15" fill="rgb(208,190,38)" fg:x="88421" fg:w="48"/><text x="42.7863%" y="207.50"></text></g><g><title>esp`esp::pt::PtSamples::add_sample_diag_already_stored (31,887 samples, 15.34%)</title><rect x="27.2249%" y="213" width="15.3397%" height="15" fill="rgb(235,213,38)" fg:x="56593" fg:w="31887"/><text x="27.4749%" y="223.50">esp`esp::pt::PtSamples:..</text></g><g><title>esp`esp::pt::PtSamples::pt_estimator (5,277 samples, 2.54%)</title><rect x="42.5647%" y="213" width="2.5386%" height="15" fill="rgb(237,122,38)" fg:x="88480" fg:w="5277"/><text x="42.8147%" y="223.50">es..</text></g><g><title>esp`esp::ham::Ham::ham_sing (420 samples, 0.20%)</title><rect x="45.1802%" y="197" width="0.2020%" height="15" fill="rgb(244,218,35)" fg:x="93917" fg:w="420"/><text x="45.4302%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (251 samples, 0.12%)</title><rect x="45.2615%" y="181" width="0.1207%" height="15" fill="rgb(240,68,47)" fg:x="94086" fg:w="251"/><text x="45.5115%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (33 samples, 0.02%)</title><rect x="45.3827%" y="197" width="0.0159%" height="15" fill="rgb(210,16,53)" fg:x="94338" fg:w="33"/><text x="45.6327%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (455 samples, 0.22%)</title><rect x="45.3986%" y="197" width="0.2189%" height="15" fill="rgb(235,124,12)" fg:x="94371" fg:w="455"/><text x="45.6486%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (35 samples, 0.02%)</title><rect x="45.6007%" y="181" width="0.0168%" height="15" fill="rgb(224,169,11)" fg:x="94791" fg:w="35"/><text x="45.8507%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::approx_matmul_external_dtm_only (1,101 samples, 0.53%)</title><rect x="45.1143%" y="213" width="0.5297%" height="15" fill="rgb(250,166,2)" fg:x="93780" fg:w="1101"/><text x="45.3643%" y="223.50"></text></g><g><title>esp`hashbrown::map::make_hash (55 samples, 0.03%)</title><rect x="45.6175%" y="197" width="0.0265%" height="15" fill="rgb(242,216,29)" fg:x="94826" fg:w="55"/><text x="45.8675%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.01%)</title><rect x="45.6319%" y="181" width="0.0120%" height="15" fill="rgb(230,116,27)" fg:x="94856" fg:w="25"/><text x="45.8819%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (22 samples, 0.01%)</title><rect x="45.6440%" y="213" width="0.0106%" height="15" fill="rgb(228,99,48)" fg:x="94881" fg:w="22"/><text x="45.8940%" y="223.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (58 samples, 0.03%)</title><rect x="45.9754%" y="197" width="0.0279%" height="15" fill="rgb(253,11,6)" fg:x="95570" fg:w="58"/><text x="46.2254%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (4,544 samples, 2.19%)</title><rect x="46.0052%" y="197" width="2.1860%" height="15" fill="rgb(247,143,39)" fg:x="95632" fg:w="4544"/><text x="46.2552%" y="207.50">e..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (957 samples, 0.46%)</title><rect x="47.7308%" y="181" width="0.4604%" height="15" fill="rgb(236,97,10)" fg:x="99219" fg:w="957"/><text x="47.9808%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (133 samples, 0.06%)</title><rect x="48.1912%" y="197" width="0.0640%" height="15" fill="rgb(233,208,19)" fg:x="100176" fg:w="133"/><text x="48.4412%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (101 samples, 0.05%)</title><rect x="48.2066%" y="181" width="0.0486%" height="15" fill="rgb(216,164,2)" fg:x="100208" fg:w="101"/><text x="48.4566%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.01%)</title><rect x="48.6189%" y="101" width="0.0111%" height="15" fill="rgb(220,129,5)" fg:x="101065" fg:w="23"/><text x="48.8689%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (304 samples, 0.15%)</title><rect x="48.6174%" y="117" width="0.1462%" height="15" fill="rgb(242,17,10)" fg:x="101062" fg:w="304"/><text x="48.8674%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (264 samples, 0.13%)</title><rect x="48.6367%" y="101" width="0.1270%" height="15" fill="rgb(242,107,0)" fg:x="101102" fg:w="264"/><text x="48.8867%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (306 samples, 0.15%)</title><rect x="48.6169%" y="133" width="0.1472%" height="15" fill="rgb(251,28,31)" fg:x="101061" fg:w="306"/><text x="48.8669%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (312 samples, 0.15%)</title><rect x="48.6155%" y="149" width="0.1501%" height="15" fill="rgb(233,223,10)" fg:x="101058" fg:w="312"/><text x="48.8655%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (316 samples, 0.15%)</title><rect x="48.6145%" y="181" width="0.1520%" height="15" fill="rgb(215,21,27)" fg:x="101056" fg:w="316"/><text x="48.8645%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (316 samples, 0.15%)</title><rect x="48.6145%" y="165" width="0.1520%" height="15" fill="rgb(232,23,21)" fg:x="101056" fg:w="316"/><text x="48.8645%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (95 samples, 0.05%)</title><rect x="48.7665%" y="181" width="0.0457%" height="15" fill="rgb(244,5,23)" fg:x="101372" fg:w="95"/><text x="49.0165%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (312 samples, 0.15%)</title><rect x="48.8122%" y="181" width="0.1501%" height="15" fill="rgb(226,81,46)" fg:x="101467" fg:w="312"/><text x="49.0622%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (106 samples, 0.05%)</title><rect x="48.9955%" y="165" width="0.0510%" height="15" fill="rgb(247,70,30)" fg:x="101848" fg:w="106"/><text x="49.2455%" y="175.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag (6,243 samples, 3.00%)</title><rect x="48.9623%" y="181" width="3.0033%" height="15" fill="rgb(212,68,19)" fg:x="101779" fg:w="6243"/><text x="49.2123%" y="191.50">esp..</text></g><g><title>esp`esp::wf::det::Det::new_diag_same (6,068 samples, 2.92%)</title><rect x="49.0465%" y="165" width="2.9191%" height="15" fill="rgb(240,187,13)" fg:x="101954" fg:w="6068"/><text x="49.2965%" y="175.50">es..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (4,176 samples, 2.01%)</title><rect x="49.9567%" y="149" width="2.0089%" height="15" fill="rgb(223,113,26)" fg:x="103846" fg:w="4176"/><text x="50.2067%" y="159.50">e..</text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (14,078 samples, 6.77%)</title><rect x="51.9656%" y="181" width="6.7724%" height="15" fill="rgb(206,192,2)" fg:x="108022" fg:w="14078"/><text x="52.2156%" y="191.50">esp`esp::..</text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (9,584 samples, 4.61%)</title><rect x="54.1275%" y="165" width="4.6105%" height="15" fill="rgb(241,108,4)" fg:x="112516" fg:w="9584"/><text x="54.3775%" y="175.50">esp`e..</text></g><g><title>esp`esp::wf::det::Det::new_diag_sing (67 samples, 0.03%)</title><rect x="58.7414%" y="181" width="0.0322%" height="15" fill="rgb(247,173,49)" fg:x="122107" fg:w="67"/><text x="58.9914%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (42 samples, 0.02%)</title><rect x="58.7535%" y="165" width="0.0202%" height="15" fill="rgb(224,114,35)" fg:x="122132" fg:w="42"/><text x="59.0035%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (517 samples, 0.25%)</title><rect x="59.0883%" y="165" width="0.2487%" height="15" fill="rgb(245,159,27)" fg:x="122828" fg:w="517"/><text x="59.3383%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (26 samples, 0.01%)</title><rect x="59.5270%" y="149" width="0.0125%" height="15" fill="rgb(245,172,44)" fg:x="123740" fg:w="26"/><text x="59.7770%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (41 samples, 0.02%)</title><rect x="59.8056%" y="133" width="0.0197%" height="15" fill="rgb(236,23,11)" fg:x="124319" fg:w="41"/><text x="60.0556%" y="143.50"></text></g><g><title>esp`hashbrown::map::make_hash (1,461 samples, 0.70%)</title><rect x="59.8253%" y="133" width="0.7028%" height="15" fill="rgb(205,117,38)" fg:x="124360" fg:w="1461"/><text x="60.0753%" y="143.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (862 samples, 0.41%)</title><rect x="60.1134%" y="117" width="0.4147%" height="15" fill="rgb(237,72,25)" fg:x="124959" fg:w="862"/><text x="60.3634%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23 samples, 0.01%)</title><rect x="60.5286%" y="117" width="0.0111%" height="15" fill="rgb(244,70,9)" fg:x="125822" fg:w="23"/><text x="60.7786%" y="127.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (34 samples, 0.02%)</title><rect x="60.5281%" y="133" width="0.0164%" height="15" fill="rgb(217,125,39)" fg:x="125821" fg:w="34"/><text x="60.7781%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.01%)</title><rect x="60.5445%" y="133" width="0.0120%" height="15" fill="rgb(235,36,10)" fg:x="125855" fg:w="25"/><text x="60.7945%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,125 samples, 1.02%)</title><rect x="59.5395%" y="149" width="1.0223%" height="15" fill="rgb(251,123,47)" fg:x="123766" fg:w="2125"/><text x="59.7895%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,547 samples, 1.23%)</title><rect x="59.3370%" y="165" width="1.2253%" height="15" fill="rgb(221,13,13)" fg:x="123345" fg:w="2547"/><text x="59.5870%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,720 samples, 1.79%)</title><rect x="58.7737%" y="181" width="1.7896%" height="15" fill="rgb(238,131,9)" fg:x="122174" fg:w="3720"/><text x="59.0237%" y="191.50">e..</text></g><g><title>esp`hashbrown::map::make_hash (991 samples, 0.48%)</title><rect x="60.5632%" y="181" width="0.4767%" height="15" fill="rgb(211,50,8)" fg:x="125894" fg:w="991"/><text x="60.8132%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (598 samples, 0.29%)</title><rect x="60.7523%" y="165" width="0.2877%" height="15" fill="rgb(245,182,24)" fg:x="126287" fg:w="598"/><text x="61.0023%" y="175.50"></text></g><g><title>esp`esp::wf::Wf::add_det_with_coeff (26,590 samples, 12.79%)</title><rect x="48.2552%" y="197" width="12.7915%" height="15" fill="rgb(242,14,37)" fg:x="100309" fg:w="26590"/><text x="48.5052%" y="207.50">esp`esp::wf::Wf::ad..</text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (682 samples, 0.33%)</title><rect x="61.0467%" y="197" width="0.3281%" height="15" fill="rgb(246,228,12)" fg:x="126899" fg:w="682"/><text x="61.2967%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4,786 samples, 2.30%)</title><rect x="61.3921%" y="197" width="2.3024%" height="15" fill="rgb(213,55,15)" fg:x="127617" fg:w="4786"/><text x="61.6421%" y="207.50">e..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (628 samples, 0.30%)</title><rect x="63.3924%" y="181" width="0.3021%" height="15" fill="rgb(209,9,3)" fg:x="131775" fg:w="628"/><text x="63.6424%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (22 samples, 0.01%)</title><rect x="63.6945%" y="197" width="0.0106%" height="15" fill="rgb(230,59,30)" fg:x="132403" fg:w="22"/><text x="63.9445%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::approx_matmul_external_dtm_only_compute_diags (37,544 samples, 18.06%)</title><rect x="45.6545%" y="213" width="18.0611%" height="15" fill="rgb(209,121,21)" fg:x="94903" fg:w="37544"/><text x="45.9045%" y="223.50">esp`esp::wf::det::Det::appro..</text></g><g><title>esp`hashbrown::map::make_hash (22 samples, 0.01%)</title><rect x="63.7051%" y="197" width="0.0106%" height="15" fill="rgb(220,109,13)" fg:x="132425" fg:w="22"/><text x="63.9551%" y="207.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (28 samples, 0.01%)</title><rect x="63.7157%" y="213" width="0.0135%" height="15" fill="rgb(232,18,1)" fg:x="132447" fg:w="28"/><text x="63.9657%" y="223.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.01%)</title><rect x="63.7368%" y="213" width="0.0140%" height="15" fill="rgb(215,41,42)" fg:x="132491" fg:w="29"/><text x="63.9868%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (66 samples, 0.03%)</title><rect x="63.7541%" y="213" width="0.0318%" height="15" fill="rgb(224,123,36)" fg:x="132527" fg:w="66"/><text x="64.0041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (24 samples, 0.01%)</title><rect x="63.7883%" y="213" width="0.0115%" height="15" fill="rgb(240,125,3)" fg:x="132598" fg:w="24"/><text x="64.0383%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (55 samples, 0.03%)</title><rect x="63.7998%" y="213" width="0.0265%" height="15" fill="rgb(205,98,50)" fg:x="132622" fg:w="55"/><text x="64.0498%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (615 samples, 0.30%)</title><rect x="63.8263%" y="213" width="0.2959%" height="15" fill="rgb(205,185,37)" fg:x="132677" fg:w="615"/><text x="64.0763%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (609 samples, 0.29%)</title><rect x="63.8292%" y="197" width="0.2930%" height="15" fill="rgb(238,207,15)" fg:x="132683" fg:w="609"/><text x="64.0792%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (609 samples, 0.29%)</title><rect x="63.8292%" y="181" width="0.2930%" height="15" fill="rgb(213,199,42)" fg:x="132683" fg:w="609"/><text x="64.0792%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (77 samples, 0.04%)</title><rect x="64.1308%" y="213" width="0.0370%" height="15" fill="rgb(235,201,11)" fg:x="133310" fg:w="77"/><text x="64.3808%" y="223.50"></text></g><g><title>esp`esp::semistoch::old_semistoch_enpt2 (115,046 samples, 55.34%)</title><rect x="8.8237%" y="229" width="55.3446%" height="15" fill="rgb(207,46,11)" fg:x="18342" fg:w="115046"/><text x="9.0737%" y="239.50">esp`esp::semistoch::old_semistoch_enpt2</text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 0.02%)</title><rect x="64.3266%" y="181" width="0.0192%" height="15" fill="rgb(241,35,35)" fg:x="133717" fg:w="40"/><text x="64.5766%" y="191.50"></text></g><g><title>esp`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (45 samples, 0.02%)</title><rect x="66.2230%" y="165" width="0.0216%" height="15" fill="rgb(243,32,47)" fg:x="137659" fg:w="45"/><text x="66.4730%" y="175.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 0.02%)</title><rect x="66.2230%" y="149" width="0.0216%" height="15" fill="rgb(247,202,23)" fg:x="137659" fg:w="45"/><text x="66.4730%" y="159.50"></text></g><g><title>esp`&lt;esp::var::sparse::SparseMat as eigenvalues::matrix_operations::MatrixOperations&gt;::matrix_matrix_prod (3,948 samples, 1.90%)</title><rect x="64.3458%" y="181" width="1.8992%" height="15" fill="rgb(219,102,11)" fg:x="133757" fg:w="3948"/><text x="64.5958%" y="191.50">e..</text></g><g><title>esp`matrixmultiply::gemm::pack (39 samples, 0.02%)</title><rect x="66.3764%" y="133" width="0.0188%" height="15" fill="rgb(243,110,44)" fg:x="137978" fg:w="39"/><text x="66.6264%" y="143.50"></text></g><g><title>esp`matrixmultiply::dgemm_kernel::kernel_target_fma (71 samples, 0.03%)</title><rect x="66.3952%" y="117" width="0.0342%" height="15" fill="rgb(222,74,54)" fg:x="138017" fg:w="71"/><text x="66.6452%" y="127.50"></text></g><g><title>esp`nalgebra::base::ops::_&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (364 samples, 0.18%)</title><rect x="66.2658%" y="165" width="0.1751%" height="15" fill="rgb(216,99,12)" fg:x="137748" fg:w="364"/><text x="66.5158%" y="175.50"></text></g><g><title>esp`matrixmultiply::gemm::gemm_loop (137 samples, 0.07%)</title><rect x="66.3750%" y="149" width="0.0659%" height="15" fill="rgb(226,22,26)" fg:x="137975" fg:w="137"/><text x="66.6250%" y="159.50"></text></g><g><title>esp`matrixmultiply::threading::RangeChunkParallel&lt;G&gt;::for_each (95 samples, 0.05%)</title><rect x="66.3952%" y="133" width="0.0457%" height="15" fill="rgb(217,163,10)" fg:x="138017" fg:w="95"/><text x="66.6452%" y="143.50"></text></g><g><title>esp`matrixmultiply::gemm::masked_kernel (24 samples, 0.01%)</title><rect x="66.4293%" y="117" width="0.0115%" height="15" fill="rgb(213,25,53)" fg:x="138088" fg:w="24"/><text x="66.6793%" y="127.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::compute_residues (412 samples, 0.20%)</title><rect x="66.2485%" y="181" width="0.1982%" height="15" fill="rgb(252,105,26)" fg:x="137712" fg:w="412"/><text x="66.4985%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (53 samples, 0.03%)</title><rect x="66.4495%" y="165" width="0.0255%" height="15" fill="rgb(220,39,43)" fg:x="138130" fg:w="53"/><text x="66.6995%" y="175.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::generate_subspace (58 samples, 0.03%)</title><rect x="66.4495%" y="181" width="0.0279%" height="15" fill="rgb(229,68,48)" fg:x="138130" fg:w="58"/><text x="66.6995%" y="191.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (140 samples, 0.07%)</title><rect x="66.5034%" y="165" width="0.0673%" height="15" fill="rgb(252,8,32)" fg:x="138242" fg:w="140"/><text x="66.7534%" y="175.50"></text></g><g><title>esp`nalgebra::base::blas::_&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::dot (23 samples, 0.01%)</title><rect x="66.5708%" y="165" width="0.0111%" height="15" fill="rgb(223,20,43)" fg:x="138382" fg:w="23"/><text x="66.8208%" y="175.50"></text></g><g><title>esp`eigenvalues::modified_gram_schmidt::MGS::orthonormalize (213 samples, 0.10%)</title><rect x="66.4803%" y="181" width="0.1025%" height="15" fill="rgb(229,81,49)" fg:x="138194" fg:w="213"/><text x="66.7303%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (51 samples, 0.02%)</title><rect x="66.5996%" y="181" width="0.0245%" height="15" fill="rgb(236,28,36)" fg:x="138442" fg:w="51"/><text x="66.8496%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (329 samples, 0.16%)</title><rect x="66.6242%" y="181" width="0.1583%" height="15" fill="rgb(249,185,26)" fg:x="138493" fg:w="329"/><text x="66.8742%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (329 samples, 0.16%)</title><rect x="66.6242%" y="165" width="0.1583%" height="15" fill="rgb(249,174,33)" fg:x="138493" fg:w="329"/><text x="66.8742%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (329 samples, 0.16%)</title><rect x="66.6242%" y="149" width="0.1583%" height="15" fill="rgb(233,201,37)" fg:x="138493" fg:w="329"/><text x="66.8742%" y="159.50"></text></g><g><title>esp`eigenvalues::algorithms::davidson::Davidson::new (5,403 samples, 2.60%)</title><rect x="64.1890%" y="197" width="2.5992%" height="15" fill="rgb(221,78,26)" fg:x="133431" fg:w="5403"/><text x="64.4390%" y="207.50">es..</text></g><g><title>libsystem_malloc.dylib`szone_size (49 samples, 0.02%)</title><rect x="69.7429%" y="149" width="0.0236%" height="15" fill="rgb(250,127,30)" fg:x="144976" fg:w="49"/><text x="69.9929%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (43 samples, 0.02%)</title><rect x="69.7458%" y="133" width="0.0207%" height="15" fill="rgb(230,49,44)" fg:x="144982" fg:w="43"/><text x="69.9958%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (80 samples, 0.04%)</title><rect x="69.7285%" y="165" width="0.0385%" height="15" fill="rgb(229,67,23)" fg:x="144946" fg:w="80"/><text x="69.9785%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (83 samples, 0.04%)</title><rect x="69.8949%" y="133" width="0.0399%" height="15" fill="rgb(249,83,47)" fg:x="145292" fg:w="83"/><text x="70.1449%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (80 samples, 0.04%)</title><rect x="69.9349%" y="133" width="0.0385%" height="15" fill="rgb(215,43,3)" fg:x="145375" fg:w="80"/><text x="70.1849%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (433 samples, 0.21%)</title><rect x="69.7747%" y="165" width="0.2083%" height="15" fill="rgb(238,154,13)" fg:x="145042" fg:w="433"/><text x="70.0247%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (351 samples, 0.17%)</title><rect x="69.8141%" y="149" width="0.1689%" height="15" fill="rgb(219,56,2)" fg:x="145124" fg:w="351"/><text x="70.0641%" y="159.50"></text></g><g><title>esp`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (556 samples, 0.27%)</title><rect x="69.7179%" y="181" width="0.2675%" height="15" fill="rgb(233,0,4)" fg:x="144924" fg:w="556"/><text x="69.9679%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (46 samples, 0.02%)</title><rect x="70.0128%" y="101" width="0.0221%" height="15" fill="rgb(235,30,7)" fg:x="145537" fg:w="46"/><text x="70.2628%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.01%)</title><rect x="70.0239%" y="85" width="0.0111%" height="15" fill="rgb(250,79,13)" fg:x="145560" fg:w="23"/><text x="70.2739%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (63 samples, 0.03%)</title><rect x="70.0368%" y="101" width="0.0303%" height="15" fill="rgb(211,146,34)" fg:x="145587" fg:w="63"/><text x="70.2868%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (43 samples, 0.02%)</title><rect x="70.0465%" y="85" width="0.0207%" height="15" fill="rgb(228,22,38)" fg:x="145607" fg:w="43"/><text x="70.2965%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (38 samples, 0.02%)</title><rect x="70.0729%" y="101" width="0.0183%" height="15" fill="rgb(235,168,5)" fg:x="145662" fg:w="38"/><text x="70.3229%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (215 samples, 0.10%)</title><rect x="70.0070%" y="117" width="0.1034%" height="15" fill="rgb(221,155,16)" fg:x="145525" fg:w="215"/><text x="70.2570%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (40 samples, 0.02%)</title><rect x="70.0912%" y="101" width="0.0192%" height="15" fill="rgb(215,215,53)" fg:x="145700" fg:w="40"/><text x="70.3412%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (228 samples, 0.11%)</title><rect x="70.0013%" y="133" width="0.1097%" height="15" fill="rgb(223,4,10)" fg:x="145513" fg:w="228"/><text x="70.2513%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (251 samples, 0.12%)</title><rect x="69.9984%" y="149" width="0.1207%" height="15" fill="rgb(234,103,6)" fg:x="145507" fg:w="251"/><text x="70.2484%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (276 samples, 0.13%)</title><rect x="69.9878%" y="181" width="0.1328%" height="15" fill="rgb(227,97,0)" fg:x="145485" fg:w="276"/><text x="70.2378%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (265 samples, 0.13%)</title><rect x="69.9931%" y="165" width="0.1275%" height="15" fill="rgb(234,150,53)" fg:x="145496" fg:w="265"/><text x="70.2431%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (643 samples, 0.31%)</title><rect x="70.1249%" y="181" width="0.3093%" height="15" fill="rgb(228,201,54)" fg:x="145770" fg:w="643"/><text x="70.3749%" y="191.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (50 samples, 0.02%)</title><rect x="70.4366%" y="181" width="0.0241%" height="15" fill="rgb(222,22,37)" fg:x="146418" fg:w="50"/><text x="70.6866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24 samples, 0.01%)</title><rect x="71.7644%" y="133" width="0.0115%" height="15" fill="rgb(237,53,32)" fg:x="149178" fg:w="24"/><text x="72.0144%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (88 samples, 0.04%)</title><rect x="71.8158%" y="85" width="0.0423%" height="15" fill="rgb(233,25,53)" fg:x="149285" fg:w="88"/><text x="72.0658%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (70 samples, 0.03%)</title><rect x="71.9068%" y="53" width="0.0337%" height="15" fill="rgb(210,40,34)" fg:x="149474" fg:w="70"/><text x="72.1568%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (34 samples, 0.02%)</title><rect x="71.9404%" y="53" width="0.0164%" height="15" fill="rgb(241,220,44)" fg:x="149544" fg:w="34"/><text x="72.1904%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (46 samples, 0.02%)</title><rect x="71.9592%" y="37" width="0.0221%" height="15" fill="rgb(235,28,35)" fg:x="149583" fg:w="46"/><text x="72.2092%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (257 samples, 0.12%)</title><rect x="71.8582%" y="85" width="0.1236%" height="15" fill="rgb(210,56,17)" fg:x="149373" fg:w="257"/><text x="72.1082%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (226 samples, 0.11%)</title><rect x="71.8731%" y="69" width="0.1087%" height="15" fill="rgb(224,130,29)" fg:x="149404" fg:w="226"/><text x="72.1231%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (49 samples, 0.02%)</title><rect x="71.9582%" y="53" width="0.0236%" height="15" fill="rgb(235,212,8)" fg:x="149581" fg:w="49"/><text x="72.2082%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (23 samples, 0.01%)</title><rect x="71.9842%" y="85" width="0.0111%" height="15" fill="rgb(223,33,50)" fg:x="149635" fg:w="23"/><text x="72.2342%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (28 samples, 0.01%)</title><rect x="72.0453%" y="37" width="0.0135%" height="15" fill="rgb(219,149,13)" fg:x="149762" fg:w="28"/><text x="72.2953%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (157 samples, 0.08%)</title><rect x="71.9996%" y="69" width="0.0755%" height="15" fill="rgb(250,156,29)" fg:x="149667" fg:w="157"/><text x="72.2496%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (98 samples, 0.05%)</title><rect x="72.0280%" y="53" width="0.0471%" height="15" fill="rgb(216,193,19)" fg:x="149726" fg:w="98"/><text x="72.2780%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (34 samples, 0.02%)</title><rect x="72.0588%" y="37" width="0.0164%" height="15" fill="rgb(216,135,14)" fg:x="149790" fg:w="34"/><text x="72.3088%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (267 samples, 0.13%)</title><rect x="71.9953%" y="85" width="0.1284%" height="15" fill="rgb(241,47,5)" fg:x="149658" fg:w="267"/><text x="72.2453%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (101 samples, 0.05%)</title><rect x="72.0751%" y="69" width="0.0486%" height="15" fill="rgb(233,42,35)" fg:x="149824" fg:w="101"/><text x="72.3251%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (45 samples, 0.02%)</title><rect x="72.1021%" y="53" width="0.0216%" height="15" fill="rgb(231,13,6)" fg:x="149880" fg:w="45"/><text x="72.3521%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (54 samples, 0.03%)</title><rect x="72.1319%" y="85" width="0.0260%" height="15" fill="rgb(207,181,40)" fg:x="149942" fg:w="54"/><text x="72.3819%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1,869 samples, 0.90%)</title><rect x="71.8033%" y="101" width="0.8991%" height="15" fill="rgb(254,173,49)" fg:x="149259" fg:w="1869"/><text x="72.0533%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,132 samples, 0.54%)</title><rect x="72.1579%" y="85" width="0.5446%" height="15" fill="rgb(221,1,38)" fg:x="149996" fg:w="1132"/><text x="72.4079%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,911 samples, 0.92%)</title><rect x="71.7865%" y="117" width="0.9193%" height="15" fill="rgb(206,124,46)" fg:x="149224" fg:w="1911"/><text x="72.0365%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_size (54 samples, 0.03%)</title><rect x="72.7058%" y="117" width="0.0260%" height="15" fill="rgb(249,21,11)" fg:x="151135" fg:w="54"/><text x="72.9558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2,063 samples, 0.99%)</title><rect x="71.7759%" y="133" width="0.9924%" height="15" fill="rgb(222,201,40)" fg:x="149202" fg:w="2063"/><text x="72.0259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (75 samples, 0.04%)</title><rect x="72.7323%" y="117" width="0.0361%" height="15" fill="rgb(235,61,29)" fg:x="151190" fg:w="75"/><text x="72.9823%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (72 samples, 0.03%)</title><rect x="72.7337%" y="101" width="0.0346%" height="15" fill="rgb(219,207,3)" fg:x="151193" fg:w="72"/><text x="72.9837%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (2,103 samples, 1.01%)</title><rect x="71.7605%" y="149" width="1.0117%" height="15" fill="rgb(222,56,46)" fg:x="149170" fg:w="2103"/><text x="72.0105%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,127 samples, 1.02%)</title><rect x="71.7528%" y="165" width="1.0232%" height="15" fill="rgb(239,76,54)" fg:x="149154" fg:w="2127"/><text x="72.0028%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (30 samples, 0.01%)</title><rect x="72.7823%" y="165" width="0.0144%" height="15" fill="rgb(231,124,27)" fg:x="151294" fg:w="30"/><text x="73.0323%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (6,315 samples, 3.04%)</title><rect x="72.7967%" y="165" width="3.0379%" height="15" fill="rgb(249,195,6)" fg:x="151324" fg:w="6315"/><text x="73.0467%" y="175.50">esp..</text></g><g><title>esp`esp::ham::Ham::ham_doub (3,984 samples, 1.92%)</title><rect x="73.9181%" y="149" width="1.9166%" height="15" fill="rgb(237,174,47)" fg:x="153655" fg:w="3984"/><text x="74.1681%" y="159.50">e..</text></g><g><title>esp`esp::var::off_diag::add_el (12,849 samples, 6.18%)</title><rect x="70.4688%" y="181" width="6.1812%" height="15" fill="rgb(206,201,31)" fg:x="146485" fg:w="12849"/><text x="70.7188%" y="191.50">esp`esp:..</text></g><g><title>esp`esp::ham::Ham::ham_sing (1,695 samples, 0.82%)</title><rect x="75.8346%" y="165" width="0.8154%" height="15" fill="rgb(231,57,52)" fg:x="157639" fg:w="1695"/><text x="76.0846%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (782 samples, 0.38%)</title><rect x="76.2739%" y="149" width="0.3762%" height="15" fill="rgb(248,177,22)" fg:x="158552" fg:w="782"/><text x="76.5239%" y="159.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (28 samples, 0.01%)</title><rect x="77.1109%" y="165" width="0.0135%" height="15" fill="rgb(215,211,37)" fg:x="160292" fg:w="28"/><text x="77.3609%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_doub (868 samples, 0.42%)</title><rect x="77.1268%" y="165" width="0.4176%" height="15" fill="rgb(241,128,51)" fg:x="160325" fg:w="868"/><text x="77.3768%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (538 samples, 0.26%)</title><rect x="77.2855%" y="149" width="0.2588%" height="15" fill="rgb(227,165,31)" fg:x="160655" fg:w="538"/><text x="77.5355%" y="159.50"></text></g><g><title>esp`esp::ham::Ham::ham_off_diag_no_excite (1,332 samples, 0.64%)</title><rect x="77.5444%" y="165" width="0.6408%" height="15" fill="rgb(228,167,24)" fg:x="161193" fg:w="1332"/><text x="77.7944%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::ham_sing (258 samples, 0.12%)</title><rect x="78.1851%" y="165" width="0.1241%" height="15" fill="rgb(228,143,12)" fg:x="162525" fg:w="258"/><text x="78.4351%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (151 samples, 0.07%)</title><rect x="78.2366%" y="149" width="0.0726%" height="15" fill="rgb(249,149,8)" fg:x="162632" fg:w="151"/><text x="78.4866%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (24 samples, 0.01%)</title><rect x="78.5628%" y="69" width="0.0115%" height="15" fill="rgb(243,35,44)" fg:x="163310" fg:w="24"/><text x="78.8128%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.01%)</title><rect x="78.5863%" y="69" width="0.0135%" height="15" fill="rgb(246,89,9)" fg:x="163359" fg:w="28"/><text x="78.8363%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (26 samples, 0.01%)</title><rect x="78.5873%" y="53" width="0.0125%" height="15" fill="rgb(233,213,13)" fg:x="163361" fg:w="26"/><text x="78.8373%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (482 samples, 0.23%)</title><rect x="78.5613%" y="85" width="0.2319%" height="15" fill="rgb(233,141,41)" fg:x="163307" fg:w="482"/><text x="78.8113%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (400 samples, 0.19%)</title><rect x="78.6008%" y="69" width="0.1924%" height="15" fill="rgb(239,167,4)" fg:x="163389" fg:w="400"/><text x="78.8508%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (486 samples, 0.23%)</title><rect x="78.5599%" y="101" width="0.2338%" height="15" fill="rgb(209,217,16)" fg:x="163304" fg:w="486"/><text x="78.8099%" y="111.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (514 samples, 0.25%)</title><rect x="78.5565%" y="133" width="0.2473%" height="15" fill="rgb(219,88,35)" fg:x="163297" fg:w="514"/><text x="78.8065%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (512 samples, 0.25%)</title><rect x="78.5575%" y="117" width="0.2463%" height="15" fill="rgb(220,193,23)" fg:x="163299" fg:w="512"/><text x="78.8075%" y="127.50"></text></g><g><title>esp`esp::var::off_diag::add_el (1,029 samples, 0.50%)</title><rect x="78.3092%" y="165" width="0.4950%" height="15" fill="rgb(230,90,52)" fg:x="162783" fg:w="1029"/><text x="78.5592%" y="175.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (522 samples, 0.25%)</title><rect x="78.5531%" y="149" width="0.2511%" height="15" fill="rgb(252,106,19)" fg:x="163290" fg:w="522"/><text x="78.8031%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (4,844 samples, 2.33%)</title><rect x="76.6501%" y="181" width="2.3303%" height="15" fill="rgb(206,74,20)" fg:x="159334" fg:w="4844"/><text x="76.9001%" y="191.50">e..</text></g><g><title>esp`hashbrown::map::make_hash (366 samples, 0.18%)</title><rect x="78.8043%" y="165" width="0.1761%" height="15" fill="rgb(230,138,44)" fg:x="163812" fg:w="366"/><text x="79.0543%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (231 samples, 0.11%)</title><rect x="78.8692%" y="149" width="0.1111%" height="15" fill="rgb(235,182,43)" fg:x="163947" fg:w="231"/><text x="79.1192%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (42 samples, 0.02%)</title><rect x="81.4237%" y="69" width="0.0202%" height="15" fill="rgb(242,16,51)" fg:x="169257" fg:w="42"/><text x="81.6737%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (42 samples, 0.02%)</title><rect x="81.4237%" y="53" width="0.0202%" height="15" fill="rgb(248,9,4)" fg:x="169257" fg:w="42"/><text x="81.6737%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (42 samples, 0.02%)</title><rect x="81.4237%" y="37" width="0.0202%" height="15" fill="rgb(210,31,22)" fg:x="169257" fg:w="42"/><text x="81.6737%" y="47.50"></text></g><g><title>esp`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,390 samples, 2.11%)</title><rect x="79.3416%" y="165" width="2.1119%" height="15" fill="rgb(239,54,39)" fg:x="164929" fg:w="4390"/><text x="79.5916%" y="175.50">e..</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (76 samples, 0.04%)</title><rect x="81.4169%" y="149" width="0.0366%" height="15" fill="rgb(230,99,41)" fg:x="169243" fg:w="76"/><text x="81.6669%" y="159.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (76 samples, 0.04%)</title><rect x="81.4169%" y="133" width="0.0366%" height="15" fill="rgb(253,106,12)" fg:x="169243" fg:w="76"/><text x="81.6669%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (76 samples, 0.04%)</title><rect x="81.4169%" y="117" width="0.0366%" height="15" fill="rgb(213,46,41)" fg:x="169243" fg:w="76"/><text x="81.6669%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (76 samples, 0.04%)</title><rect x="81.4169%" y="101" width="0.0366%" height="15" fill="rgb(215,133,35)" fg:x="169243" fg:w="76"/><text x="81.6669%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (76 samples, 0.04%)</title><rect x="81.4169%" y="85" width="0.0366%" height="15" fill="rgb(213,28,5)" fg:x="169243" fg:w="76"/><text x="81.6669%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (33 samples, 0.02%)</title><rect x="83.8025%" y="117" width="0.0159%" height="15" fill="rgb(215,77,49)" fg:x="174202" fg:w="33"/><text x="84.0525%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.01%)</title><rect x="83.8069%" y="101" width="0.0115%" height="15" fill="rgb(248,100,22)" fg:x="174211" fg:w="24"/><text x="84.0569%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.01%)</title><rect x="83.8073%" y="85" width="0.0111%" height="15" fill="rgb(208,67,9)" fg:x="174212" fg:w="23"/><text x="84.0573%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.01%)</title><rect x="83.8213%" y="101" width="0.0130%" height="15" fill="rgb(219,133,21)" fg:x="174241" fg:w="27"/><text x="84.0713%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (25 samples, 0.01%)</title><rect x="83.8223%" y="85" width="0.0120%" height="15" fill="rgb(246,46,29)" fg:x="174243" fg:w="25"/><text x="84.0723%" y="95.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (76 samples, 0.04%)</title><rect x="83.7996%" y="133" width="0.0366%" height="15" fill="rgb(246,185,52)" fg:x="174196" fg:w="76"/><text x="84.0496%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (34 samples, 0.02%)</title><rect x="83.8199%" y="117" width="0.0164%" height="15" fill="rgb(252,136,11)" fg:x="174238" fg:w="34"/><text x="84.0699%" y="127.50"></text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (87 samples, 0.04%)</title><rect x="83.7953%" y="149" width="0.0419%" height="15" fill="rgb(219,138,53)" fg:x="174187" fg:w="87"/><text x="84.0453%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.01%)</title><rect x="83.8401%" y="117" width="0.0130%" height="15" fill="rgb(211,51,23)" fg:x="174280" fg:w="27"/><text x="84.0901%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (56 samples, 0.03%)</title><rect x="83.8381%" y="149" width="0.0269%" height="15" fill="rgb(247,221,28)" fg:x="174276" fg:w="56"/><text x="84.0881%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.03%)</title><rect x="83.8391%" y="133" width="0.0260%" height="15" fill="rgb(251,222,45)" fg:x="174278" fg:w="54"/><text x="84.0891%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.01%)</title><rect x="83.8530%" y="117" width="0.0120%" height="15" fill="rgb(217,162,53)" fg:x="174307" fg:w="25"/><text x="84.1030%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.01%)</title><rect x="83.8656%" y="149" width="0.0140%" height="15" fill="rgb(229,93,14)" fg:x="174333" fg:w="29"/><text x="84.1156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (54 samples, 0.03%)</title><rect x="83.8853%" y="149" width="0.0260%" height="15" fill="rgb(209,67,49)" fg:x="174374" fg:w="54"/><text x="84.1353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (30 samples, 0.01%)</title><rect x="83.8968%" y="133" width="0.0144%" height="15" fill="rgb(213,87,29)" fg:x="174398" fg:w="30"/><text x="84.1468%" y="143.50"></text></g><g><title>esp`alloc::slice::merge_sort (5,329 samples, 2.56%)</title><rect x="81.4631%" y="165" width="2.5636%" height="15" fill="rgb(205,151,52)" fg:x="169339" fg:w="5329"/><text x="81.7131%" y="175.50">es..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (237 samples, 0.11%)</title><rect x="83.9127%" y="149" width="0.1140%" height="15" fill="rgb(253,215,39)" fg:x="174431" fg:w="237"/><text x="84.1627%" y="159.50"></text></g><g><title>esp`sprs::sparse::csmat::_&lt;impl sprs::sparse::CsMatBase&lt;N,I,IptrStorage,IStorage,DStorage,Iptr&gt;&gt;::new (808 samples, 0.39%)</title><rect x="84.0267%" y="165" width="0.3887%" height="15" fill="rgb(221,220,41)" fg:x="174668" fg:w="808"/><text x="84.2767%" y="175.50"></text></g><g><title>esp`sprs::sparse::utils::check_compressed_structure (808 samples, 0.39%)</title><rect x="84.0267%" y="149" width="0.3887%" height="15" fill="rgb(218,133,21)" fg:x="174668" fg:w="808"/><text x="84.2767%" y="159.50"></text></g><g><title>esp`esp::var::off_diag::create_sparse (11,359 samples, 5.46%)</title><rect x="78.9803%" y="181" width="5.4644%" height="15" fill="rgb(221,193,43)" fg:x="164178" fg:w="11359"/><text x="79.2303%" y="191.50">esp`esp..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (56 samples, 0.03%)</title><rect x="84.4178%" y="165" width="0.0269%" height="15" fill="rgb(240,128,52)" fg:x="175481" fg:w="56"/><text x="84.6678%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (367 samples, 0.18%)</title><rect x="84.4448%" y="181" width="0.1766%" height="15" fill="rgb(253,114,12)" fg:x="175537" fg:w="367"/><text x="84.6948%" y="191.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (76 samples, 0.04%)</title><rect x="84.5847%" y="165" width="0.0366%" height="15" fill="rgb(215,223,47)" fg:x="175828" fg:w="76"/><text x="84.8347%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (39 samples, 0.02%)</title><rect x="84.6665%" y="165" width="0.0188%" height="15" fill="rgb(248,225,23)" fg:x="175998" fg:w="39"/><text x="84.9165%" y="175.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (45 samples, 0.02%)</title><rect x="84.7955%" y="133" width="0.0216%" height="15" fill="rgb(250,108,0)" fg:x="176266" fg:w="45"/><text x="85.0455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.02%)</title><rect x="84.8190%" y="117" width="0.0168%" height="15" fill="rgb(228,208,7)" fg:x="176315" fg:w="35"/><text x="85.0690%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.02%)</title><rect x="84.8205%" y="101" width="0.0154%" height="15" fill="rgb(244,45,10)" fg:x="176318" fg:w="32"/><text x="85.0705%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.01%)</title><rect x="84.8243%" y="85" width="0.0115%" height="15" fill="rgb(207,125,25)" fg:x="176326" fg:w="24"/><text x="85.0743%" y="95.50"></text></g><g><title>esp`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (59 samples, 0.03%)</title><rect x="84.8171%" y="133" width="0.0284%" height="15" fill="rgb(210,195,18)" fg:x="176311" fg:w="59"/><text x="85.0671%" y="143.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (311 samples, 0.15%)</title><rect x="84.7026%" y="149" width="0.1496%" height="15" fill="rgb(249,80,12)" fg:x="176073" fg:w="311"/><text x="84.9526%" y="159.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (350 samples, 0.17%)</title><rect x="84.6853%" y="165" width="0.1684%" height="15" fill="rgb(221,65,9)" fg:x="176037" fg:w="350"/><text x="84.9353%" y="175.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (484 samples, 0.23%)</title><rect x="84.6213%" y="181" width="0.2328%" height="15" fill="rgb(235,49,36)" fg:x="175904" fg:w="484"/><text x="84.8713%" y="191.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (25,548 samples, 12.29%)</title><rect x="84.8565%" y="181" width="12.2903%" height="15" fill="rgb(225,32,20)" fg:x="176393" fg:w="25548"/><text x="85.1065%" y="191.50">esp`std::collectio..</text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (7,122 samples, 3.43%)</title><rect x="93.7207%" y="165" width="3.4261%" height="15" fill="rgb(215,141,46)" fg:x="194819" fg:w="7122"/><text x="93.9707%" y="175.50">esp..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (263 samples, 0.13%)</title><rect x="97.1603%" y="165" width="0.1265%" height="15" fill="rgb(250,160,47)" fg:x="201969" fg:w="263"/><text x="97.4103%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (253 samples, 0.12%)</title><rect x="97.1651%" y="149" width="0.1217%" height="15" fill="rgb(216,222,40)" fg:x="201979" fg:w="253"/><text x="97.4151%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (94 samples, 0.05%)</title><rect x="97.2416%" y="133" width="0.0452%" height="15" fill="rgb(234,217,39)" fg:x="202138" fg:w="94"/><text x="97.4916%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (24 samples, 0.01%)</title><rect x="97.2752%" y="117" width="0.0115%" height="15" fill="rgb(207,178,40)" fg:x="202208" fg:w="24"/><text x="97.5252%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (285 samples, 0.14%)</title><rect x="97.1502%" y="181" width="0.1371%" height="15" fill="rgb(221,136,13)" fg:x="201948" fg:w="285"/><text x="97.4002%" y="191.50"></text></g><g><title>esp`esp::var::ham_gen::gen_sparse_ham_fast (63,426 samples, 30.51%)</title><rect x="66.7882%" y="197" width="30.5120%" height="15" fill="rgb(249,199,10)" fg:x="138834" fg:w="63426"/><text x="67.0382%" y="207.50">esp`esp::var::ham_gen::gen_sparse_ham_fast</text></g><g><title>esp`esp::var::off_diag::add_el_and_spin_flipped (69 samples, 0.03%)</title><rect x="97.3056%" y="197" width="0.0332%" height="15" fill="rgb(249,222,13)" fg:x="202271" fg:w="69"/><text x="97.5556%" y="207.50"></text></g><g><title>esp`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (350 samples, 0.17%)</title><rect x="97.3407%" y="197" width="0.1684%" height="15" fill="rgb(244,185,38)" fg:x="202344" fg:w="350"/><text x="97.5907%" y="207.50"></text></g><g><title>esp`esp::var::davidson::sparse_optimize (69,313 samples, 33.34%)</title><rect x="64.1688%" y="213" width="33.3441%" height="15" fill="rgb(236,202,9)" fg:x="133389" fg:w="69313"/><text x="64.4188%" y="223.50">esp`esp::var::davidson::sparse_optimize</text></g><g><title>esp`esp::ham::Ham::ham_sing (850 samples, 0.41%)</title><rect x="97.6630%" y="197" width="0.4089%" height="15" fill="rgb(250,229,37)" fg:x="203014" fg:w="850"/><text x="97.9130%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (443 samples, 0.21%)</title><rect x="97.8588%" y="181" width="0.2131%" height="15" fill="rgb(206,174,23)" fg:x="203421" fg:w="443"/><text x="98.1088%" y="191.50"></text></g><g><title>esp`esp::wf::det::Config::safe_excite_det (71 samples, 0.03%)</title><rect x="98.0719%" y="197" width="0.0342%" height="15" fill="rgb(211,33,43)" fg:x="203864" fg:w="71"/><text x="98.3219%" y="207.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_opp (144 samples, 0.07%)</title><rect x="98.1060%" y="197" width="0.0693%" height="15" fill="rgb(245,58,50)" fg:x="203935" fg:w="144"/><text x="98.3560%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (95 samples, 0.05%)</title><rect x="98.1296%" y="181" width="0.0457%" height="15" fill="rgb(244,68,36)" fg:x="203984" fg:w="95"/><text x="98.3796%" y="191.50"></text></g><g><title>esp`esp::wf::det::Det::new_diag_same (61 samples, 0.03%)</title><rect x="98.1753%" y="197" width="0.0293%" height="15" fill="rgb(232,229,15)" fg:x="204079" fg:w="61"/><text x="98.4253%" y="207.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (41 samples, 0.02%)</title><rect x="98.1849%" y="181" width="0.0197%" height="15" fill="rgb(254,30,23)" fg:x="204099" fg:w="41"/><text x="98.4349%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (859 samples, 0.41%)</title><rect x="98.2051%" y="197" width="0.4132%" height="15" fill="rgb(235,160,14)" fg:x="204141" fg:w="859"/><text x="98.4551%" y="207.50"></text></g><g><title>esp`core::hash::impls::_&lt;impl core::hash::Hash for u128&gt;::hash (162 samples, 0.08%)</title><rect x="98.5404%" y="181" width="0.0779%" height="15" fill="rgb(212,155,44)" fg:x="204838" fg:w="162"/><text x="98.7904%" y="191.50"></text></g><g><title>esp`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (109 samples, 0.05%)</title><rect x="98.6184%" y="197" width="0.0524%" height="15" fill="rgb(226,2,50)" fg:x="205000" fg:w="109"/><text x="98.8684%" y="207.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::insert (87 samples, 0.04%)</title><rect x="98.6290%" y="181" width="0.0419%" height="15" fill="rgb(234,177,6)" fg:x="205022" fg:w="87"/><text x="98.8790%" y="191.50"></text></g><g><title>esp`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (74 samples, 0.04%)</title><rect x="98.6352%" y="165" width="0.0356%" height="15" fill="rgb(217,24,9)" fg:x="205035" fg:w="74"/><text x="98.8852%" y="175.50"></text></g><g><title>esp`hashbrown::map::make_hash (107 samples, 0.05%)</title><rect x="98.6708%" y="197" width="0.0515%" height="15" fill="rgb(220,13,46)" fg:x="205109" fg:w="107"/><text x="98.9208%" y="207.50"></text></g><g><title>esp`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.02%)</title><rect x="98.7006%" y="181" width="0.0216%" height="15" fill="rgb(239,221,27)" fg:x="205171" fg:w="45"/><text x="98.9506%" y="191.50"></text></g><g><title>esp`esp::wf::Wf::get_new_dets (2,518 samples, 1.21%)</title><rect x="97.5129%" y="213" width="1.2113%" height="15" fill="rgb(222,198,25)" fg:x="202702" fg:w="2518"/><text x="97.7629%" y="223.50"></text></g><g><title>esp`esp::var::variational (71,845 samples, 34.56%)</title><rect x="64.1683%" y="229" width="34.5621%" height="15" fill="rgb(211,99,13)" fg:x="133388" fg:w="71845"/><text x="64.4183%" y="239.50">esp`esp::var::variational</text></g><g><title>esp`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (195 samples, 0.09%)</title><rect x="98.8883%" y="181" width="0.0938%" height="15" fill="rgb(232,111,31)" fg:x="205561" fg:w="195"/><text x="99.1383%" y="191.50"></text></g><g><title>esp`alloc::raw_vec::finish_grow (195 samples, 0.09%)</title><rect x="98.8883%" y="165" width="0.0938%" height="15" fill="rgb(245,82,37)" fg:x="205561" fg:w="195"/><text x="99.1383%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (194 samples, 0.09%)</title><rect x="98.8887%" y="149" width="0.0933%" height="15" fill="rgb(227,149,46)" fg:x="205562" fg:w="194"/><text x="99.1387%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (192 samples, 0.09%)</title><rect x="98.8897%" y="133" width="0.0924%" height="15" fill="rgb(218,36,50)" fg:x="205564" fg:w="192"/><text x="99.1397%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (189 samples, 0.09%)</title><rect x="98.8911%" y="117" width="0.0909%" height="15" fill="rgb(226,80,48)" fg:x="205567" fg:w="189"/><text x="99.1411%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (147 samples, 0.07%)</title><rect x="98.9113%" y="101" width="0.0707%" height="15" fill="rgb(238,224,15)" fg:x="205609" fg:w="147"/><text x="99.1613%" y="111.50"></text></g><g><title>esp`alloc::slice::merge_sort (403 samples, 0.19%)</title><rect x="98.9821%" y="181" width="0.1939%" height="15" fill="rgb(241,136,10)" fg:x="205756" fg:w="403"/><text x="99.2321%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (62 samples, 0.03%)</title><rect x="99.1461%" y="165" width="0.0298%" height="15" fill="rgb(208,32,45)" fg:x="206097" fg:w="62"/><text x="99.3961%" y="175.50"></text></g><g><title>esp`esp::ham::Ham::direct_plus_exchange (113 samples, 0.05%)</title><rect x="99.1759%" y="181" width="0.0544%" height="15" fill="rgb(207,135,9)" fg:x="206159" fg:w="113"/><text x="99.4259%" y="191.50"></text></g><g><title>esp`esp::excite::init::init_excite_generator (1,039 samples, 0.50%)</title><rect x="98.7324%" y="197" width="0.4998%" height="15" fill="rgb(206,86,44)" fg:x="205237" fg:w="1039"/><text x="98.9824%" y="207.50"></text></g><g><title>esp`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="99.2457%" y="181" width="0.0101%" height="15" fill="rgb(245,177,15)" fg:x="206304" fg:w="21"/><text x="99.4957%" y="191.50"></text></g><g><title>esp`std::io::append_to_string (35 samples, 0.02%)</title><rect x="99.2572%" y="165" width="0.0168%" height="15" fill="rgb(206,64,50)" fg:x="206328" fg:w="35"/><text x="99.5072%" y="175.50"></text></g><g><title>esp`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.02%)</title><rect x="99.2558%" y="181" width="0.0188%" height="15" fill="rgb(234,36,40)" fg:x="206325" fg:w="39"/><text x="99.5058%" y="191.50"></text></g><g><title>esp`std::sync::once::Once::call_inner (1,161 samples, 0.56%)</title><rect x="98.7309%" y="229" width="0.5585%" height="15" fill="rgb(213,64,8)" fg:x="205234" fg:w="1161"/><text x="98.9809%" y="239.50"></text></g><g><title>esp`std::sync::once::Once::call_once::_{{closure}} (1,161 samples, 0.56%)</title><rect x="98.7309%" y="213" width="0.5585%" height="15" fill="rgb(210,75,36)" fg:x="205234" fg:w="1161"/><text x="98.9809%" y="223.50"></text></g><g><title>esp`esp::ham::read_ints::read_ints (118 samples, 0.06%)</title><rect x="99.2327%" y="197" width="0.0568%" height="15" fill="rgb(229,88,21)" fg:x="206277" fg:w="118"/><text x="99.4827%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_size (34 samples, 0.02%)</title><rect x="99.2928%" y="213" width="0.0164%" height="15" fill="rgb(252,204,47)" fg:x="206402" fg:w="34"/><text x="99.5428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (56 samples, 0.03%)</title><rect x="99.2919%" y="229" width="0.0269%" height="15" fill="rgb(208,77,27)" fg:x="206400" fg:w="56"/><text x="99.5419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_large (21 samples, 0.01%)</title><rect x="99.3188%" y="229" width="0.0101%" height="15" fill="rgb(221,76,26)" fg:x="206456" fg:w="21"/><text x="99.5688%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (21 samples, 0.01%)</title><rect x="99.3188%" y="213" width="0.0101%" height="15" fill="rgb(225,139,18)" fg:x="206456" fg:w="21"/><text x="99.5688%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 0.01%)</title><rect x="99.3188%" y="197" width="0.0101%" height="15" fill="rgb(230,137,11)" fg:x="206456" fg:w="21"/><text x="99.5688%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_detach_region (30 samples, 0.01%)</title><rect x="99.3414%" y="213" width="0.0144%" height="15" fill="rgb(212,28,1)" fg:x="206503" fg:w="30"/><text x="99.5914%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (28 samples, 0.01%)</title><rect x="99.3424%" y="197" width="0.0135%" height="15" fill="rgb(248,164,17)" fg:x="206505" fg:w="28"/><text x="99.5924%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (88 samples, 0.04%)</title><rect x="99.3559%" y="213" width="0.0423%" height="15" fill="rgb(222,171,42)" fg:x="206533" fg:w="88"/><text x="99.6059%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (130 samples, 0.06%)</title><rect x="99.3996%" y="213" width="0.0625%" height="15" fill="rgb(243,84,45)" fg:x="206624" fg:w="130"/><text x="99.6496%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (121 samples, 0.06%)</title><rect x="99.4665%" y="197" width="0.0582%" height="15" fill="rgb(252,49,23)" fg:x="206763" fg:w="121"/><text x="99.7165%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (128 samples, 0.06%)</title><rect x="99.4641%" y="213" width="0.0616%" height="15" fill="rgb(215,19,7)" fg:x="206758" fg:w="128"/><text x="99.7141%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (682 samples, 0.33%)</title><rect x="99.5372%" y="197" width="0.3281%" height="15" fill="rgb(238,81,41)" fg:x="206910" fg:w="682"/><text x="99.7872%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1,132 samples, 0.54%)</title><rect x="99.3289%" y="229" width="0.5446%" height="15" fill="rgb(210,199,37)" fg:x="206477" fg:w="1132"/><text x="99.5789%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_madvise_free_range_no_lock (723 samples, 0.35%)</title><rect x="99.5257%" y="213" width="0.3478%" height="15" fill="rgb(244,192,49)" fg:x="206886" fg:w="723"/><text x="99.7757%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (32 samples, 0.02%)</title><rect x="99.8740%" y="229" width="0.0154%" height="15" fill="rgb(226,211,11)" fg:x="207610" fg:w="32"/><text x="100.1240%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (32 samples, 0.02%)</title><rect x="99.8740%" y="213" width="0.0154%" height="15" fill="rgb(236,162,54)" fg:x="207610" fg:w="32"/><text x="100.1240%" y="223.50"></text></g><g><title>esp`esp::main (207,641 samples, 99.89%)</title><rect x="0.0019%" y="245" width="99.8889%" height="15" fill="rgb(220,229,9)" fg:x="4" fg:w="207641"/><text x="0.2519%" y="255.50">esp`esp::main</text></g><g><title>esp`main (207,661 samples, 99.90%)</title><rect x="0.0000%" y="309" width="99.8985%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="207661"/><text x="0.2500%" y="319.50">esp`main</text></g><g><title>esp`std::rt::lang_start_internal (207,661 samples, 99.90%)</title><rect x="0.0000%" y="293" width="99.8985%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="207661"/><text x="0.2500%" y="303.50">esp`std::rt::lang_start_internal</text></g><g><title>esp`std::rt::lang_start::_{{closure}} (207,661 samples, 99.90%)</title><rect x="0.0000%" y="277" width="99.8985%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="207661"/><text x="0.2500%" y="287.50">esp`std::rt::lang_start::_{{closure}}</text></g><g><title>esp`std::sys_common::backtrace::__rust_begin_short_backtrace (207,661 samples, 99.90%)</title><rect x="0.0000%" y="261" width="99.8985%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="207661"/><text x="0.2500%" y="271.50">esp`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (207,872 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="207872"/><text x="0.2500%" y="367.50"></text></g><g><title>0x1 (207,872 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="207872"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (207,872 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="207872"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (211 samples, 0.10%)</title><rect x="99.8985%" y="309" width="0.1015%" height="15" fill="rgb(224,6,22)" fg:x="207661" fg:w="211"/><text x="100.1485%" y="319.50"></text></g></svg></svg>